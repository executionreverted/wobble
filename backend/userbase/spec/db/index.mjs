// This file is autogenerated by the hyperdb compiler
/* eslint-disable camelcase */

import { IndexEncoder, c } from 'hyperdb/runtime'
import { version, getEncoding, setVersion } from './messages.mjs'

// '@userbase/writer' collection key
const collection0_key = new IndexEncoder([
  IndexEncoder.BUFFER
], { prefix: 0 })

function collection0_indexify(record) {
  const a = record.key
  return a === undefined ? [] : [a]
}

// '@userbase/writer' value encoding
const collection0_enc = getEncoding('@userbase/writer/hyperdb#0')

// '@userbase/writer' reconstruction function
function collection0_reconstruct(version, keyBuf, valueBuf) {
  const key = collection0_key.decode(keyBuf)
  setVersion(version)
  const record = c.decode(collection0_enc, valueBuf)
  record.key = key[0]
  return record
}
// '@userbase/writer' key reconstruction function
function collection0_reconstruct_key(keyBuf) {
  const key = collection0_key.decode(keyBuf)
  return {
    key: key[0]
  }
}

// '@userbase/writer'
const collection0 = {
  name: '@userbase/writer',
  id: 0,
  encodeKey(record) {
    const key = [record.key]
    return collection0_key.encode(key)
  },
  encodeKeyRange({ gt, lt, gte, lte } = {}) {
    return collection0_key.encodeRange({
      gt: gt ? collection0_indexify(gt) : null,
      lt: lt ? collection0_indexify(lt) : null,
      gte: gte ? collection0_indexify(gte) : null,
      lte: lte ? collection0_indexify(lte) : null
    })
  },
  encodeValue(version, record) {
    setVersion(version)
    return c.encode(collection0_enc, record)
  },
  trigger: null,
  reconstruct: collection0_reconstruct,
  reconstructKey: collection0_reconstruct_key,
  indexes: []
}

// '@userbase/invite' collection key
const collection1_key = new IndexEncoder([
  IndexEncoder.BUFFER
], { prefix: 1 })

function collection1_indexify(record) {
  const a = record.id
  return a === undefined ? [] : [a]
}

// '@userbase/invite' value encoding
const collection1_enc = getEncoding('@userbase/invite/hyperdb#1')

// '@userbase/invite' reconstruction function
function collection1_reconstruct(version, keyBuf, valueBuf) {
  const key = collection1_key.decode(keyBuf)
  setVersion(version)
  const record = c.decode(collection1_enc, valueBuf)
  record.id = key[0]
  return record
}
// '@userbase/invite' key reconstruction function
function collection1_reconstruct_key(keyBuf) {
  const key = collection1_key.decode(keyBuf)
  return {
    id: key[0]
  }
}

// '@userbase/invite'
const collection1 = {
  name: '@userbase/invite',
  id: 1,
  encodeKey(record) {
    const key = [record.id]
    return collection1_key.encode(key)
  },
  encodeKeyRange({ gt, lt, gte, lte } = {}) {
    return collection1_key.encodeRange({
      gt: gt ? collection1_indexify(gt) : null,
      lt: lt ? collection1_indexify(lt) : null,
      gte: gte ? collection1_indexify(gte) : null,
      lte: lte ? collection1_indexify(lte) : null
    })
  },
  encodeValue(version, record) {
    setVersion(version)
    return c.encode(collection1_enc, record)
  },
  trigger: null,
  reconstruct: collection1_reconstruct,
  reconstructKey: collection1_reconstruct_key,
  indexes: []
}

// '@userbase/metadata' collection key
const collection2_key = new IndexEncoder([
  IndexEncoder.STRING
], { prefix: 2 })

function collection2_indexify(record) {
  const a = record.id
  return a === undefined ? [] : [a]
}

// '@userbase/metadata' value encoding
const collection2_enc = getEncoding('@userbase/metadata/hyperdb#2')

// '@userbase/metadata' reconstruction function
function collection2_reconstruct(version, keyBuf, valueBuf) {
  const key = collection2_key.decode(keyBuf)
  setVersion(version)
  const record = c.decode(collection2_enc, valueBuf)
  record.id = key[0]
  return record
}
// '@userbase/metadata' key reconstruction function
function collection2_reconstruct_key(keyBuf) {
  const key = collection2_key.decode(keyBuf)
  return {
    id: key[0]
  }
}

// '@userbase/metadata'
const collection2 = {
  name: '@userbase/metadata',
  id: 2,
  encodeKey(record) {
    const key = [record.id]
    return collection2_key.encode(key)
  },
  encodeKeyRange({ gt, lt, gte, lte } = {}) {
    return collection2_key.encodeRange({
      gt: gt ? collection2_indexify(gt) : null,
      lt: lt ? collection2_indexify(lt) : null,
      gte: gte ? collection2_indexify(gte) : null,
      lte: lte ? collection2_indexify(lte) : null
    })
  },
  encodeValue(version, record) {
    setVersion(version)
    return c.encode(collection2_enc, record)
  },
  trigger: null,
  reconstruct: collection2_reconstruct,
  reconstructKey: collection2_reconstruct_key,
  indexes: []
}

const collections = [
  collection0,
  collection1,
  collection2
]

const indexes = [
]

export default { version, collections, indexes, resolveCollection, resolveIndex }

function resolveCollection(name) {
  switch (name) {
    case '@userbase/writer': return collection0
    case '@userbase/invite': return collection1
    case '@userbase/metadata': return collection2
    default: return null
  }
}

function resolveIndex(name) {
  switch (name) {
    default: return null
  }
}
