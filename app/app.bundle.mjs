export default "108440\n{\"version\":0,\"id\":\"f3aa9023cc1fb577ebece0dd772a1bdfb90320e8dff715c13e38c3021fe48d10\",\"main\":\"/backend/backend.mjs\",\"imports\":{},\"resolutions\":{\"/backend/AbortController.mjs\":{\"#package\":\"/package.json\"},\"/backend/backend.mjs\":{\"#package\":\"/package.json\",\"./AbortController.mjs\":\"/backend/AbortController.mjs\",\"./roombase/roombase.mjs\":\"/backend/roombase/roombase.mjs\",\"./userbase/userbase.mjs\":\"/backend/userbase/userbase.mjs\",\"./utils.mjs\":\"/backend/utils.mjs\",\"b4a\":\"/node_modules/b4a/index.js\",\"bare-fs\":\"/node_modules/bare-fs/index.js\",\"bare-path\":\"/node_modules/bare-path/index.js\",\"bare-rpc\":\"/node_modules/bare-rpc/index.js\",\"bip39\":\"/node_modules/bip39/src/index.js\",\"corestore\":\"/node_modules/corestore/index.js\",\"hyperblobs\":\"/node_modules/hyperblobs/index.js\",\"hypercore\":\"/node_modules/hypercore/index.js\",\"hyperswarm\":\"/node_modules/hyperswarm/index.js\"},\"/backend/roombase/roombase.mjs\":{\"#package\":\"/package.json\",\"../utils.mjs\":\"/backend/utils.mjs\",\"./spec/db/index.mjs\":\"/backend/roombase/spec/db/index.mjs\",\"./spec/hyperdispatch/index.mjs\":\"/backend/roombase/spec/hyperdispatch/index.mjs\",\"./spec/hyperdispatch/messages.mjs\":\"/backend/roombase/spec/hyperdispatch/messages.mjs\",\"autobase\":\"/node_modules/autobase/index.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"bare-fs\":\"/node_modules/bare-fs/index.js\",\"bare-path\":\"/node_modules/bare-path/index.js\",\"blind-pairing\":\"/node_modules/blind-pairing/index.js\",\"hyperblobs\":\"/node_modules/hyperblobs/index.js\",\"hypercore\":\"/node_modules/hypercore/index.js\",\"hyperdb\":\"/node_modules/hyperdb/index.js\",\"hyperswarm\":\"/node_modules/hyperswarm/index.js\",\"ready-resource\":\"/node_modules/ready-resource/index.js\",\"z32\":\"/node_modules/z32/index.js\"},\"/backend/roombase/spec/db/index.mjs\":{\"#package\":\"/package.json\",\"./messages.mjs\":\"/backend/roombase/spec/db/messages.mjs\",\"hyperdb/runtime\":\"/node_modules/hyperdb/runtime.mjs\"},\"/backend/roombase/spec/db/messages.mjs\":{\"#package\":\"/package.json\",\"hyperschema/runtime\":\"/node_modules/hyperschema/runtime.mjs\"},\"/backend/roombase/spec/hyperdispatch/index.mjs\":{\"#package\":\"/package.json\",\"./messages.mjs\":\"/backend/roombase/spec/hyperdispatch/messages.mjs\",\"hyperdispatch/runtime.js\":\"/node_modules/hyperdispatch/runtime.js\"},\"/backend/roombase/spec/hyperdispatch/messages.mjs\":{\"#package\":\"/package.json\",\"hyperdispatch/runtime.js\":\"/node_modules/hyperdispatch/runtime.js\"},\"/backend/userbase/spec/db/index.mjs\":{\"#package\":\"/package.json\",\"./messages.mjs\":\"/backend/userbase/spec/db/messages.mjs\",\"hyperdb/runtime\":\"/node_modules/hyperdb/runtime.mjs\"},\"/backend/userbase/spec/db/messages.mjs\":{\"#package\":\"/package.json\",\"hyperschema/runtime\":\"/node_modules/hyperschema/runtime.mjs\"},\"/backend/userbase/spec/hyperdispatch/index.mjs\":{\"#package\":\"/package.json\",\"./messages.mjs\":\"/backend/userbase/spec/hyperdispatch/messages.mjs\",\"hyperdispatch/runtime.js\":\"/node_modules/hyperdispatch/runtime.js\"},\"/backend/userbase/spec/hyperdispatch/messages.mjs\":{\"#package\":\"/package.json\",\"hyperdispatch/runtime.js\":\"/node_modules/hyperdispatch/runtime.js\"},\"/backend/userbase/userbase.mjs\":{\"#package\":\"/package.json\",\"./spec/db/index.mjs\":\"/backend/userbase/spec/db/index.mjs\",\"./spec/hyperdispatch/index.mjs\":\"/backend/userbase/spec/hyperdispatch/index.mjs\",\"autobase\":\"/node_modules/autobase/index.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"bare-crypto\":\"/node_modules/bare-crypto/index.js\",\"blind-pairing\":\"/node_modules/blind-pairing/index.js\",\"hyperdb\":\"/node_modules/hyperdb/index.js\",\"hyperswarm\":\"/node_modules/hyperswarm/index.js\",\"ready-resource\":\"/node_modules/ready-resource/index.js\",\"z32\":\"/node_modules/z32/index.js\"},\"/backend/utils.mjs\":{\"#package\":\"/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"bare-crypto\":\"/node_modules/bare-crypto/index.js\"},\"/node_modules/@hyperswarm/secret-stream/index.js\":{\"#package\":\"/node_modules/@hyperswarm/secret-stream/package.json\",\"./lib/bridge\":\"/node_modules/@hyperswarm/secret-stream/lib/bridge.js\",\"./lib/handshake\":\"/node_modules/@hyperswarm/secret-stream/lib/handshake.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"hypercore-crypto\":\"/node_modules/hypercore-crypto/index.js\",\"sodium-secretstream\":\"/node_modules/sodium-secretstream/index.js\",\"sodium-universal\":\"/node_modules/sodium-universal/index.js\",\"streamx\":\"/node_modules/streamx/index.js\",\"timeout-refresh\":\"/node_modules/timeout-refresh/index.js\",\"unslab\":\"/node_modules/unslab/index.js\"},\"/node_modules/@hyperswarm/secret-stream/lib/bridge.js\":{\"#package\":\"/node_modules/@hyperswarm/secret-stream/package.json\",\"streamx\":\"/node_modules/streamx/index.js\"},\"/node_modules/@hyperswarm/secret-stream/lib/handshake.js\":{\"#package\":\"/node_modules/@hyperswarm/secret-stream/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"noise-curve-ed\":\"/node_modules/noise-curve-ed/index.js\",\"noise-handshake\":\"/node_modules/noise-handshake/noise.js\",\"sodium-universal\":\"/node_modules/sodium-universal/index.js\"},\"/node_modules/@hyperswarm/secret-stream/package.json\":{},\"/node_modules/@noble/hashes/_assert.js\":{\"#package\":\"/node_modules/@noble/hashes/package.json\"},\"/node_modules/@noble/hashes/_md.js\":{\"#package\":\"/node_modules/@noble/hashes/package.json\",\"./_assert.js\":\"/node_modules/@noble/hashes/_assert.js\",\"./utils.js\":\"/node_modules/@noble/hashes/utils.js\"},\"/node_modules/@noble/hashes/_u64.js\":{\"#package\":\"/node_modules/@noble/hashes/package.json\"},\"/node_modules/@noble/hashes/cryptoNode.js\":{\"#package\":\"/node_modules/@noble/hashes/package.json\",\"node:crypto\":\"/node_modules/crypto/index.js\"},\"/node_modules/@noble/hashes/hmac.js\":{\"#package\":\"/node_modules/@noble/hashes/package.json\",\"./_assert.js\":\"/node_modules/@noble/hashes/_assert.js\",\"./utils.js\":\"/node_modules/@noble/hashes/utils.js\"},\"/node_modules/@noble/hashes/package.json\":{},\"/node_modules/@noble/hashes/pbkdf2.js\":{\"#package\":\"/node_modules/@noble/hashes/package.json\",\"./_assert.js\":\"/node_modules/@noble/hashes/_assert.js\",\"./hmac.js\":\"/node_modules/@noble/hashes/hmac.js\",\"./utils.js\":\"/node_modules/@noble/hashes/utils.js\"},\"/node_modules/@noble/hashes/sha256.js\":{\"#package\":\"/node_modules/@noble/hashes/package.json\",\"./_md.js\":\"/node_modules/@noble/hashes/_md.js\",\"./utils.js\":\"/node_modules/@noble/hashes/utils.js\"},\"/node_modules/@noble/hashes/sha512.js\":{\"#package\":\"/node_modules/@noble/hashes/package.json\",\"./_md.js\":\"/node_modules/@noble/hashes/_md.js\",\"./_u64.js\":\"/node_modules/@noble/hashes/_u64.js\",\"./utils.js\":\"/node_modules/@noble/hashes/utils.js\"},\"/node_modules/@noble/hashes/utils.js\":{\"#package\":\"/node_modules/@noble/hashes/package.json\",\"./_assert.js\":\"/node_modules/@noble/hashes/_assert.js\",\"@noble/hashes/crypto\":\"/node_modules/@noble/hashes/cryptoNode.js\"},\"/node_modules/autobase/index.js\":{\"#package\":\"/node_modules/autobase/package.json\",\"./lib/active-writers.js\":\"/node_modules/autobase/lib/active-writers.js\",\"./lib/apply-calls.js\":\"/node_modules/autobase/lib/apply-calls.js\",\"./lib/apply-state.js\":\"/node_modules/autobase/lib/apply-state.js\",\"./lib/boot.js\":\"/node_modules/autobase/lib/boot.js\",\"./lib/fast-forward.js\":\"/node_modules/autobase/lib/fast-forward.js\",\"./lib/linearizer.js\":\"/node_modules/autobase/lib/linearizer.js\",\"./lib/messages.js\":\"/node_modules/autobase/lib/messages.js\",\"./lib/store.js\":\"/node_modules/autobase/lib/store.js\",\"./lib/system.js\":\"/node_modules/autobase/lib/system.js\",\"./lib/timer.js\":\"/node_modules/autobase/lib/timer.js\",\"./lib/updates.js\":\"/node_modules/autobase/lib/updates.js\",\"./lib/wakeup.js\":\"/node_modules/autobase/lib/wakeup.js\",\"./lib/writer.js\":\"/node_modules/autobase/lib/writer.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"core-coupler\":\"/node_modules/core-coupler/index.js\",\"debounceify\":\"/node_modules/debounceify/index.js\",\"hypercore-id-encoding\":\"/node_modules/hypercore-id-encoding/index.js\",\"mutexify/promise\":\"/node_modules/mutexify/promise.js\",\"nanoassert\":\"/node_modules/nanoassert/index.js\",\"protomux-wakeup\":\"/node_modules/protomux-wakeup/index.js\",\"ready-resource\":\"/node_modules/ready-resource/index.js\",\"resolve-reject-promise\":\"/node_modules/resolve-reject-promise/index.js\",\"safety-catch\":\"/node_modules/safety-catch/index.js\",\"signal-promise\":\"/node_modules/signal-promise/index.js\"},\"/node_modules/autobase/lib/active-writers.js\":{\"#package\":\"/node_modules/autobase/package.json\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/autobase/lib/apply-calls.js\":{\"#package\":\"/node_modules/autobase/package.json\"},\"/node_modules/autobase/lib/apply-state.js\":{\"#package\":\"/node_modules/autobase/package.json\",\"./apply-calls.js\":\"/node_modules/autobase/lib/apply-calls.js\",\"./messages.js\":\"/node_modules/autobase/lib/messages.js\",\"./system\":\"/node_modules/autobase/lib/system.js\",\"./updates.js\":\"/node_modules/autobase/lib/updates.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"hypercore-crypto\":\"/node_modules/hypercore-crypto/index.js\",\"hypercore/lib/multisig.js\":\"/node_modules/hypercore/lib/multisig.js\",\"nanoassert\":\"/node_modules/nanoassert/index.js\",\"ready-resource\":\"/node_modules/ready-resource/index.js\",\"safety-catch\":\"/node_modules/safety-catch/index.js\"},\"/node_modules/autobase/lib/boot.js\":{\"#package\":\"/node_modules/autobase/package.json\",\"./messages.js\":\"/node_modules/autobase/lib/messages.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\"},\"/node_modules/autobase/lib/clock.js\":{\"#package\":\"/node_modules/autobase/package.json\",\"tiny-buffer-map\":\"/node_modules/tiny-buffer-map/index.js\"},\"/node_modules/autobase/lib/consensus.js\":{\"#package\":\"/node_modules/autobase/package.json\",\"./clock\":\"/node_modules/autobase/lib/clock.js\",\"tiny-buffer-map\":\"/node_modules/tiny-buffer-map/index.js\"},\"/node_modules/autobase/lib/fast-forward.js\":{\"#package\":\"/node_modules/autobase/package.json\",\"./system.js\":\"/node_modules/autobase/lib/system.js\"},\"/node_modules/autobase/lib/linearizer.js\":{\"#package\":\"/node_modules/autobase/package.json\",\"./clock\":\"/node_modules/autobase/lib/clock.js\",\"./consensus\":\"/node_modules/autobase/lib/consensus.js\",\"./topolist\":\"/node_modules/autobase/lib/topolist.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"nanoassert\":\"/node_modules/nanoassert/index.js\"},\"/node_modules/autobase/lib/messages.js\":{\"#package\":\"/node_modules/autobase/package.json\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"index-encoder\":\"/node_modules/index-encoder/index.js\",\"nanoassert\":\"/node_modules/nanoassert/index.js\"},\"/node_modules/autobase/lib/node-buffer.js\":{\"#package\":\"/node_modules/autobase/package.json\"},\"/node_modules/autobase/lib/store.js\":{\"#package\":\"/node_modules/autobase/package.json\",\"./messages.js\":\"/node_modules/autobase/lib/messages.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"hypercore\":\"/node_modules/hypercore/index.js\",\"hypercore-crypto\":\"/node_modules/hypercore-crypto/index.js\"},\"/node_modules/autobase/lib/system.js\":{\"#package\":\"/node_modules/autobase/package.json\",\"./messages\":\"/node_modules/autobase/lib/messages.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"hyperbee\":\"/node_modules/hyperbee/index.js\",\"ready-resource\":\"/node_modules/ready-resource/index.js\",\"sub-encoder\":\"/node_modules/sub-encoder/index.js\"},\"/node_modules/autobase/lib/timer.js\":{\"#package\":\"/node_modules/autobase/package.json\",\"safety-catch\":\"/node_modules/safety-catch/index.js\"},\"/node_modules/autobase/lib/topolist.js\":{\"#package\":\"/node_modules/autobase/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"nanoassert\":\"/node_modules/nanoassert/index.js\"},\"/node_modules/autobase/lib/updates.js\":{\"#package\":\"/node_modules/autobase/package.json\"},\"/node_modules/autobase/lib/wakeup.js\":{\"#package\":\"/node_modules/autobase/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"ready-resource\":\"/node_modules/ready-resource/index.js\",\"safety-catch\":\"/node_modules/safety-catch/index.js\"},\"/node_modules/autobase/lib/writer.js\":{\"#package\":\"/node_modules/autobase/package.json\",\"./linearizer\":\"/node_modules/autobase/lib/linearizer.js\",\"./node-buffer\":\"/node_modules/autobase/lib/node-buffer.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"nanoassert\":\"/node_modules/nanoassert/index.js\",\"ready-resource\":\"/node_modules/ready-resource/index.js\",\"signal-promise\":\"/node_modules/signal-promise/index.js\"},\"/node_modules/autobase/package.json\":{},\"/node_modules/b4a/index.js\":{\"#package\":\"/node_modules/b4a/package.json\"},\"/node_modules/b4a/package.json\":{},\"/node_modules/bare-addon-resolve/index.js\":{\"#package\":\"/node_modules/bare-addon-resolve/package.json\",\"./lib/errors\":\"/node_modules/bare-addon-resolve/lib/errors.js\",\"bare-module-resolve\":\"/node_modules/bare-module-resolve/index.js\",\"bare-semver\":\"/node_modules/bare-semver/index.js\"},\"/node_modules/bare-addon-resolve/lib/errors.js\":{\"#package\":\"/node_modules/bare-addon-resolve/package.json\"},\"/node_modules/bare-addon-resolve/package.json\":{},\"/node_modules/bare-crypto/binding.js\":{\"#package\":\"/node_modules/bare-crypto/package.json\",\".\":{\"ios\":\"linked:bare-crypto.1.4.2.framework/bare-crypto.1.4.2\",\"android\":\"linked:libbare-crypto.1.4.2.so\"}},\"/node_modules/bare-crypto/index.js\":{\"#package\":\"/node_modules/bare-crypto/package.json\",\"./binding\":\"/node_modules/bare-crypto/binding.js\",\"./lib/constants\":\"/node_modules/bare-crypto/lib/constants.js\",\"./lib/errors\":\"/node_modules/bare-crypto/lib/errors.js\",\"./web\":\"/node_modules/bare-crypto/web.js\",\"bare-stream\":\"/node_modules/bare-stream/index.js\"},\"/node_modules/bare-crypto/lib/constants.js\":{\"#package\":\"/node_modules/bare-crypto/package.json\",\"../binding\":\"/node_modules/bare-crypto/binding.js\"},\"/node_modules/bare-crypto/lib/errors.js\":{\"#package\":\"/node_modules/bare-crypto/package.json\"},\"/node_modules/bare-crypto/package.json\":{},\"/node_modules/bare-crypto/web.js\":{\"#package\":\"/node_modules/bare-crypto/package.json\",\".\":\"/node_modules/bare-crypto/index.js\"},\"/node_modules/bare-events/index.js\":{\"#package\":\"/node_modules/bare-events/package.json\",\"./lib/errors\":\"/node_modules/bare-events/lib/errors.js\"},\"/node_modules/bare-events/lib/errors.js\":{\"#package\":\"/node_modules/bare-events/package.json\"},\"/node_modules/bare-events/package.json\":{},\"/node_modules/bare-fs/binding.js\":{\"#package\":\"/node_modules/bare-fs/package.json\",\".\":{\"ios\":\"linked:bare-fs.4.0.2.framework/bare-fs.4.0.2\",\"android\":\"linked:libbare-fs.4.0.2.so\"}},\"/node_modules/bare-fs/index.js\":{\"#package\":\"/node_modules/bare-fs/package.json\",\"./binding\":\"/node_modules/bare-fs/binding.js\",\"./lib/constants\":\"/node_modules/bare-fs/lib/constants.js\",\"bare-events\":\"/node_modules/bare-events/index.js\",\"bare-path\":\"/node_modules/bare-path/index.js\",\"bare-stream\":\"/node_modules/bare-stream/index.js\"},\"/node_modules/bare-fs/lib/constants.js\":{\"#package\":\"/node_modules/bare-fs/package.json\",\"../binding\":\"/node_modules/bare-fs/binding.js\"},\"/node_modules/bare-fs/package.json\":{},\"/node_modules/bare-module-resolve/index.js\":{\"#package\":\"/node_modules/bare-module-resolve/package.json\",\"./lib/errors\":\"/node_modules/bare-module-resolve/lib/errors.js\",\"bare-semver\":\"/node_modules/bare-semver/index.js\"},\"/node_modules/bare-module-resolve/lib/errors.js\":{\"#package\":\"/node_modules/bare-module-resolve/package.json\"},\"/node_modules/bare-module-resolve/package.json\":{},\"/node_modules/bare-os/binding.js\":{\"#package\":\"/node_modules/bare-os/package.json\",\".\":{\"ios\":\"linked:bare-os.3.6.1.framework/bare-os.3.6.1\",\"android\":\"linked:libbare-os.3.6.1.so\"}},\"/node_modules/bare-os/index.js\":{\"#package\":\"/node_modules/bare-os/package.json\",\"./binding\":\"/node_modules/bare-os/binding.js\",\"./lib/constants\":\"/node_modules/bare-os/lib/constants.js\",\"./lib/errors\":\"/node_modules/bare-os/lib/errors.js\"},\"/node_modules/bare-os/lib/constants.js\":{\"#package\":\"/node_modules/bare-os/package.json\",\"../binding\":\"/node_modules/bare-os/binding.js\"},\"/node_modules/bare-os/lib/errors.js\":{\"#package\":\"/node_modules/bare-os/package.json\"},\"/node_modules/bare-os/package.json\":{},\"/node_modules/bare-path/index.js\":{\"#package\":\"/node_modules/bare-path/package.json\",\"./lib/posix\":\"/node_modules/bare-path/lib/posix.js\",\"./lib/win32\":\"/node_modules/bare-path/lib/win32.js\"},\"/node_modules/bare-path/lib/constants.js\":{\"#package\":\"/node_modules/bare-path/package.json\"},\"/node_modules/bare-path/lib/posix.js\":{\"#package\":\"/node_modules/bare-path/package.json\",\"./constants\":\"/node_modules/bare-path/lib/constants.js\",\"./shared\":\"/node_modules/bare-path/lib/shared.js\",\"./win32\":\"/node_modules/bare-path/lib/win32.js\",\"bare-os\":\"/node_modules/bare-os/index.js\"},\"/node_modules/bare-path/lib/shared.js\":{\"#package\":\"/node_modules/bare-path/package.json\",\"./constants\":\"/node_modules/bare-path/lib/constants.js\"},\"/node_modules/bare-path/lib/win32.js\":{\"#package\":\"/node_modules/bare-path/package.json\",\"./constants\":\"/node_modules/bare-path/lib/constants.js\",\"./posix\":\"/node_modules/bare-path/lib/posix.js\",\"./shared\":\"/node_modules/bare-path/lib/shared.js\",\"bare-os\":\"/node_modules/bare-os/index.js\"},\"/node_modules/bare-path/package.json\":{},\"/node_modules/bare-rpc/index.js\":{\"#package\":\"/node_modules/bare-rpc/package.json\",\"./lib/constants\":\"/node_modules/bare-rpc/lib/constants.js\",\"./lib/incoming-request\":\"/node_modules/bare-rpc/lib/incoming-request.js\",\"./lib/incoming-stream\":\"/node_modules/bare-rpc/lib/incoming-stream.js\",\"./lib/messages\":\"/node_modules/bare-rpc/lib/messages.js\",\"./lib/outgoing-request\":\"/node_modules/bare-rpc/lib/outgoing-request.js\",\"./lib/outgoing-stream\":\"/node_modules/bare-rpc/lib/outgoing-stream.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"safety-catch\":\"/node_modules/safety-catch/index.js\"},\"/node_modules/bare-rpc/lib/constants.js\":{\"#package\":\"/node_modules/bare-rpc/package.json\"},\"/node_modules/bare-rpc/lib/errors.js\":{\"#package\":\"/node_modules/bare-rpc/package.json\"},\"/node_modules/bare-rpc/lib/incoming-request.js\":{\"#package\":\"/node_modules/bare-rpc/package.json\",\"./errors\":\"/node_modules/bare-rpc/lib/errors.js\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/bare-rpc/lib/incoming-stream.js\":{\"#package\":\"/node_modules/bare-rpc/package.json\",\"./constants\":\"/node_modules/bare-rpc/lib/constants.js\",\"bare-stream\":\"/node_modules/bare-stream/index.js\"},\"/node_modules/bare-rpc/lib/messages.js\":{\"#package\":\"/node_modules/bare-rpc/package.json\",\"./constants\":\"/node_modules/bare-rpc/lib/constants.js\",\"./errors\":\"/node_modules/bare-rpc/lib/errors.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\"},\"/node_modules/bare-rpc/lib/outgoing-request.js\":{\"#package\":\"/node_modules/bare-rpc/package.json\",\"./errors\":\"/node_modules/bare-rpc/lib/errors.js\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/bare-rpc/lib/outgoing-stream.js\":{\"#package\":\"/node_modules/bare-rpc/package.json\",\"./constants\":\"/node_modules/bare-rpc/lib/constants.js\",\"bare-stream\":\"/node_modules/bare-stream/index.js\"},\"/node_modules/bare-rpc/package.json\":{},\"/node_modules/bare-semver/index.js\":{\"#package\":\"/node_modules/bare-semver/package.json\",\"./lib/comparator\":\"/node_modules/bare-semver/lib/comparator.js\",\"./lib/constants\":\"/node_modules/bare-semver/lib/constants.js\",\"./lib/errors\":\"/node_modules/bare-semver/lib/errors.js\",\"./lib/range\":\"/node_modules/bare-semver/lib/range.js\",\"./lib/version\":\"/node_modules/bare-semver/lib/version.js\"},\"/node_modules/bare-semver/lib/comparator.js\":{\"#package\":\"/node_modules/bare-semver/package.json\",\"./constants\":\"/node_modules/bare-semver/lib/constants.js\"},\"/node_modules/bare-semver/lib/constants.js\":{\"#package\":\"/node_modules/bare-semver/package.json\"},\"/node_modules/bare-semver/lib/errors.js\":{\"#package\":\"/node_modules/bare-semver/package.json\"},\"/node_modules/bare-semver/lib/range.js\":{\"#package\":\"/node_modules/bare-semver/package.json\",\"./comparator\":\"/node_modules/bare-semver/lib/comparator.js\",\"./constants\":\"/node_modules/bare-semver/lib/constants.js\",\"./errors\":\"/node_modules/bare-semver/lib/errors.js\",\"./version\":\"/node_modules/bare-semver/lib/version.js\"},\"/node_modules/bare-semver/lib/version.js\":{\"#package\":\"/node_modules/bare-semver/package.json\",\"./errors\":\"/node_modules/bare-semver/lib/errors.js\"},\"/node_modules/bare-semver/package.json\":{},\"/node_modules/bare-stream/index.js\":{\"#package\":\"/node_modules/bare-stream/package.json\",\"streamx\":\"/node_modules/streamx/index.js\"},\"/node_modules/bare-stream/package.json\":{},\"/node_modules/bare-url/binding.js\":{\"#package\":\"/node_modules/bare-url/package.json\",\".\":{\"ios\":\"linked:bare-url.2.1.5.framework/bare-url.2.1.5\",\"android\":\"linked:libbare-url.2.1.5.so\"}},\"/node_modules/bare-url/index.js\":{\"#package\":\"/node_modules/bare-url/package.json\",\"./binding\":\"/node_modules/bare-url/binding.js\",\"./lib/errors\":\"/node_modules/bare-url/lib/errors.js\",\"bare-path\":\"/node_modules/bare-path/index.js\"},\"/node_modules/bare-url/lib/errors.js\":{\"#package\":\"/node_modules/bare-url/package.json\"},\"/node_modules/bare-url/package.json\":{},\"/node_modules/big-sparse-array/index.js\":{\"#package\":\"/node_modules/big-sparse-array/package.json\"},\"/node_modules/big-sparse-array/package.json\":{},\"/node_modules/bip39/package.json\":{},\"/node_modules/bip39/src/_wordlists.js\":{\"#package\":\"/node_modules/bip39/package.json\",\"./wordlists/chinese_simplified.json\":\"/node_modules/bip39/src/wordlists/chinese_simplified.json\",\"./wordlists/chinese_traditional.json\":\"/node_modules/bip39/src/wordlists/chinese_traditional.json\",\"./wordlists/czech.json\":\"/node_modules/bip39/src/wordlists/czech.json\",\"./wordlists/english.json\":\"/node_modules/bip39/src/wordlists/english.json\",\"./wordlists/french.json\":\"/node_modules/bip39/src/wordlists/french.json\",\"./wordlists/italian.json\":\"/node_modules/bip39/src/wordlists/italian.json\",\"./wordlists/japanese.json\":\"/node_modules/bip39/src/wordlists/japanese.json\",\"./wordlists/korean.json\":\"/node_modules/bip39/src/wordlists/korean.json\",\"./wordlists/portuguese.json\":\"/node_modules/bip39/src/wordlists/portuguese.json\",\"./wordlists/spanish.json\":\"/node_modules/bip39/src/wordlists/spanish.json\"},\"/node_modules/bip39/src/index.js\":{\"#package\":\"/node_modules/bip39/package.json\",\"./_wordlists\":\"/node_modules/bip39/src/_wordlists.js\",\"@noble/hashes/pbkdf2\":\"/node_modules/@noble/hashes/pbkdf2.js\",\"@noble/hashes/sha256\":\"/node_modules/@noble/hashes/sha256.js\",\"@noble/hashes/sha512\":\"/node_modules/@noble/hashes/sha512.js\",\"@noble/hashes/utils\":\"/node_modules/@noble/hashes/utils.js\"},\"/node_modules/bip39/src/wordlists/chinese_simplified.json\":{\"#package\":\"/node_modules/bip39/package.json\"},\"/node_modules/bip39/src/wordlists/chinese_traditional.json\":{\"#package\":\"/node_modules/bip39/package.json\"},\"/node_modules/bip39/src/wordlists/czech.json\":{\"#package\":\"/node_modules/bip39/package.json\"},\"/node_modules/bip39/src/wordlists/english.json\":{\"#package\":\"/node_modules/bip39/package.json\"},\"/node_modules/bip39/src/wordlists/french.json\":{\"#package\":\"/node_modules/bip39/package.json\"},\"/node_modules/bip39/src/wordlists/italian.json\":{\"#package\":\"/node_modules/bip39/package.json\"},\"/node_modules/bip39/src/wordlists/japanese.json\":{\"#package\":\"/node_modules/bip39/package.json\"},\"/node_modules/bip39/src/wordlists/korean.json\":{\"#package\":\"/node_modules/bip39/package.json\"},\"/node_modules/bip39/src/wordlists/portuguese.json\":{\"#package\":\"/node_modules/bip39/package.json\"},\"/node_modules/bip39/src/wordlists/spanish.json\":{\"#package\":\"/node_modules/bip39/package.json\"},\"/node_modules/bits-to-bytes/index.js\":{\"#package\":\"/node_modules/bits-to-bytes/package.json\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/bits-to-bytes/package.json\":{},\"/node_modules/blind-pairing-core/index.js\":{\"#package\":\"/node_modules/blind-pairing-core/package.json\",\"./lib/errors\":\"/node_modules/blind-pairing-core/lib/errors.js\",\"./lib/messages\":\"/node_modules/blind-pairing-core/lib/messages.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"events\":\"/node_modules/bare-events/index.js\",\"hypercore-crypto\":\"/node_modules/hypercore-crypto/index.js\",\"sodium-universal\":\"/node_modules/sodium-universal/index.js\"},\"/node_modules/blind-pairing-core/lib/errors.js\":{\"#package\":\"/node_modules/blind-pairing-core/package.json\"},\"/node_modules/blind-pairing-core/lib/messages.js\":{\"#package\":\"/node_modules/blind-pairing-core/package.json\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\"},\"/node_modules/blind-pairing-core/package.json\":{},\"/node_modules/blind-pairing/index.js\":{\"#package\":\"/node_modules/blind-pairing/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"blind-pairing-core\":\"/node_modules/blind-pairing-core/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"debounceify\":\"/node_modules/debounceify/index.js\",\"hypercore-crypto\":\"/node_modules/hypercore-crypto/index.js\",\"is-options\":\"/node_modules/is-options/index.js\",\"protomux\":\"/node_modules/protomux/index.js\",\"ready-resource\":\"/node_modules/ready-resource/index.js\",\"safety-catch\":\"/node_modules/safety-catch/index.js\",\"xache\":\"/node_modules/xache/index.js\"},\"/node_modules/blind-pairing/package.json\":{},\"/node_modules/blind-relay/index.js\":{\"#package\":\"/node_modules/blind-relay/package.json\",\"./lib/errors\":\"/node_modules/blind-relay/lib/errors.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"bits-to-bytes\":\"/node_modules/bits-to-bytes/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"compact-encoding-bitfield\":\"/node_modules/compact-encoding-bitfield/index.js\",\"events\":\"/node_modules/bare-events/index.js\",\"hypertrace\":\"/node_modules/hypertrace/index.js\",\"protomux\":\"/node_modules/protomux/index.js\",\"sodium-universal\":\"/node_modules/sodium-universal/index.js\",\"streamx\":\"/node_modules/streamx/index.js\"},\"/node_modules/blind-relay/lib/errors.js\":{\"#package\":\"/node_modules/blind-relay/package.json\"},\"/node_modules/blind-relay/package.json\":{},\"/node_modules/bogon/index.js\":{\"#package\":\"/node_modules/bogon/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"compact-encoding-net\":\"/node_modules/compact-encoding-net/index.js\"},\"/node_modules/bogon/package.json\":{},\"/node_modules/codecs/index.js\":{\"#package\":\"/node_modules/codecs/package.json\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/codecs/package.json\":{},\"/node_modules/compact-encoding-bitfield/index.js\":{\"#package\":\"/node_modules/compact-encoding-bitfield/package.json\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\"},\"/node_modules/compact-encoding-bitfield/package.json\":{},\"/node_modules/compact-encoding-net/index.js\":{\"#package\":\"/node_modules/compact-encoding-net/package.json\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\"},\"/node_modules/compact-encoding-net/package.json\":{},\"/node_modules/compact-encoding/endian.js\":{\"#package\":\"/node_modules/compact-encoding/package.json\"},\"/node_modules/compact-encoding/index.js\":{\"#package\":\"/node_modules/compact-encoding/package.json\",\"./endian\":\"/node_modules/compact-encoding/endian.js\",\"./lexint\":\"/node_modules/compact-encoding/lexint.js\",\"./raw\":\"/node_modules/compact-encoding/raw.js\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/compact-encoding/lexint.js\":{\"#package\":\"/node_modules/compact-encoding/package.json\"},\"/node_modules/compact-encoding/package.json\":{},\"/node_modules/compact-encoding/raw.js\":{\"#package\":\"/node_modules/compact-encoding/package.json\",\"./endian\":\"/node_modules/compact-encoding/endian.js\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/core-coupler/index.js\":{\"#package\":\"/node_modules/core-coupler/package.json\",\"safety-catch\":\"/node_modules/safety-catch/index.js\"},\"/node_modules/core-coupler/package.json\":{},\"/node_modules/corestore/index.js\":{\"#package\":\"/node_modules/corestore/package.json\",\"./lib/audit.js\":\"/node_modules/corestore/lib/audit.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"hypercore\":\"/node_modules/hypercore/index.js\",\"hypercore-crypto\":\"/node_modules/hypercore-crypto/index.js\",\"hypercore-errors\":\"/node_modules/hypercore-errors/index.js\",\"hypercore-id-encoding\":\"/node_modules/hypercore-id-encoding/index.js\",\"ready-resource\":\"/node_modules/ready-resource/index.js\",\"sodium-universal\":\"/node_modules/sodium-universal/index.js\"},\"/node_modules/corestore/lib/audit.js\":{\"#package\":\"/node_modules/corestore/package.json\"},\"/node_modules/corestore/package.json\":{},\"/node_modules/crypto/index.js\":{\"#package\":\"/node_modules/crypto/package.json\",\"bare-crypto\":\"/node_modules/bare-crypto/index.js\"},\"/node_modules/crypto/package.json\":{},\"/node_modules/debounceify/index.js\":{\"#package\":\"/node_modules/debounceify/package.json\"},\"/node_modules/debounceify/package.json\":{},\"/node_modules/device-file/index.js\":{\"#package\":\"/node_modules/device-file/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"fs\":\"/node_modules/bare-fs/index.js\",\"fs-native-extensions\":\"/node_modules/fs-native-extensions/index.js\"},\"/node_modules/device-file/package.json\":{},\"/node_modules/dht-rpc/index.js\":{\"#package\":\"/node_modules/dht-rpc/package.json\",\"./lib/commands\":\"/node_modules/dht-rpc/lib/commands.js\",\"./lib/errors\":\"/node_modules/dht-rpc/lib/errors.js\",\"./lib/io\":\"/node_modules/dht-rpc/lib/io.js\",\"./lib/peer\":\"/node_modules/dht-rpc/lib/peer.js\",\"./lib/query\":\"/node_modules/dht-rpc/lib/query.js\",\"./lib/session\":\"/node_modules/dht-rpc/lib/session.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"events\":\"/node_modules/bare-events/index.js\",\"kademlia-routing-table\":\"/node_modules/kademlia-routing-table/index.js\",\"nat-sampler\":\"/node_modules/nat-sampler/index.js\",\"sodium-universal\":\"/node_modules/sodium-universal/index.js\",\"time-ordered-set\":\"/node_modules/time-ordered-set/index.js\",\"udx-native\":\"/node_modules/udx-native/lib/udx.js\"},\"/node_modules/dht-rpc/lib/commands.js\":{\"#package\":\"/node_modules/dht-rpc/package.json\"},\"/node_modules/dht-rpc/lib/errors.js\":{\"#package\":\"/node_modules/dht-rpc/package.json\"},\"/node_modules/dht-rpc/lib/io.js\":{\"#package\":\"/node_modules/dht-rpc/package.json\",\"./errors\":\"/node_modules/dht-rpc/lib/errors.js\",\"./peer\":\"/node_modules/dht-rpc/lib/peer.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"fast-fifo\":\"/node_modules/fast-fifo/index.js\",\"sodium-universal\":\"/node_modules/sodium-universal/index.js\"},\"/node_modules/dht-rpc/lib/peer.js\":{\"#package\":\"/node_modules/dht-rpc/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"compact-encoding-net\":\"/node_modules/compact-encoding-net/index.js\",\"sodium-universal\":\"/node_modules/sodium-universal/index.js\"},\"/node_modules/dht-rpc/lib/query.js\":{\"#package\":\"/node_modules/dht-rpc/package.json\",\"./commands\":\"/node_modules/dht-rpc/lib/commands.js\",\"./peer\":\"/node_modules/dht-rpc/lib/peer.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"streamx\":\"/node_modules/streamx/index.js\"},\"/node_modules/dht-rpc/lib/session.js\":{\"#package\":\"/node_modules/dht-rpc/package.json\"},\"/node_modules/dht-rpc/package.json\":{},\"/node_modules/fast-fifo/fixed-size.js\":{\"#package\":\"/node_modules/fast-fifo/package.json\"},\"/node_modules/fast-fifo/index.js\":{\"#package\":\"/node_modules/fast-fifo/package.json\",\"./fixed-size\":\"/node_modules/fast-fifo/fixed-size.js\"},\"/node_modules/fast-fifo/package.json\":{},\"/node_modules/flat-tree/index.js\":{\"#package\":\"/node_modules/flat-tree/package.json\"},\"/node_modules/flat-tree/package.json\":{},\"/node_modules/fs-native-extensions/binding.js\":{\"#package\":\"/node_modules/fs-native-extensions/package.json\",\".\":{\"ios\":\"linked:fs-native-extensions.1.4.2.framework/fs-native-extensions.1.4.2\",\"android\":\"linked:libfs-native-extensions.1.4.2.so\"},\"require-addon\":\"/node_modules/require-addon/index.js\"},\"/node_modules/fs-native-extensions/index.js\":{\"#package\":\"/node_modules/fs-native-extensions/package.json\",\"./binding\":\"/node_modules/fs-native-extensions/binding.js\",\"which-runtime\":\"/node_modules/which-runtime/index.js\"},\"/node_modules/fs-native-extensions/package.json\":{},\"/node_modules/hyperbee/index.js\":{\"#package\":\"/node_modules/hyperbee/package.json\",\"./iterators/diff\":\"/node_modules/hyperbee/iterators/diff.js\",\"./iterators/history\":\"/node_modules/hyperbee/iterators/history.js\",\"./iterators/range\":\"/node_modules/hyperbee/iterators/range.js\",\"./lib/extension\":\"/node_modules/hyperbee/lib/extension.js\",\"./lib/messages\":\"/node_modules/hyperbee/lib/messages.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"codecs\":\"/node_modules/codecs/index.js\",\"debounceify\":\"/node_modules/debounceify/index.js\",\"hypercore-errors\":\"/node_modules/hypercore-errors/index.js\",\"mutexify/promise\":\"/node_modules/mutexify/promise.js\",\"rache\":\"/node_modules/rache/index.js\",\"ready-resource\":\"/node_modules/ready-resource/index.js\",\"safety-catch\":\"/node_modules/safety-catch/index.js\",\"streamx\":\"/node_modules/streamx/index.js\",\"unslab\":\"/node_modules/unslab/index.js\"},\"/node_modules/hyperbee/iterators/diff.js\":{\"#package\":\"/node_modules/hyperbee/package.json\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/hyperbee/iterators/history.js\":{\"#package\":\"/node_modules/hyperbee/package.json\"},\"/node_modules/hyperbee/iterators/range.js\":{\"#package\":\"/node_modules/hyperbee/package.json\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/hyperbee/lib/extension.js\":{\"#package\":\"/node_modules/hyperbee/package.json\",\"./messages\":\"/node_modules/hyperbee/lib/messages.js\"},\"/node_modules/hyperbee/lib/messages.js\":{\"#package\":\"/node_modules/hyperbee/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"protocol-buffers-encodings\":\"/node_modules/protocol-buffers-encodings/index.js\"},\"/node_modules/hyperbee/package.json\":{},\"/node_modules/hyperblobs/index.js\":{\"#package\":\"/node_modules/hyperblobs/package.json\",\"./lib/monitor\":\"/node_modules/hyperblobs/lib/monitor.js\",\"./lib/streams\":\"/node_modules/hyperblobs/lib/streams.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"mutexify\":\"/node_modules/mutexify/index.js\"},\"/node_modules/hyperblobs/lib/monitor.js\":{\"#package\":\"/node_modules/hyperblobs/package.json\",\"events\":\"/node_modules/bare-events/index.js\",\"speedometer\":\"/node_modules/speedometer/index.js\"},\"/node_modules/hyperblobs/lib/prefetcher.js\":{\"#package\":\"/node_modules/hyperblobs/package.json\"},\"/node_modules/hyperblobs/lib/streams.js\":{\"#package\":\"/node_modules/hyperblobs/package.json\",\"./prefetcher\":\"/node_modules/hyperblobs/lib/prefetcher.js\",\"hypercore-errors\":\"/node_modules/hypercore-errors/index.js\",\"streamx\":\"/node_modules/streamx/index.js\"},\"/node_modules/hyperblobs/package.json\":{},\"/node_modules/hypercore-crypto/index.js\":{\"#package\":\"/node_modules/hypercore-crypto/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"sodium-universal\":\"/node_modules/sodium-universal/index.js\"},\"/node_modules/hypercore-crypto/package.json\":{},\"/node_modules/hypercore-encryption/index.js\":{\"#package\":\"/node_modules/hypercore-encryption/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"hypercore-crypto\":\"/node_modules/hypercore-crypto/index.js\",\"ready-resource\":\"/node_modules/ready-resource/index.js\",\"sodium-universal\":\"/node_modules/sodium-universal/index.js\"},\"/node_modules/hypercore-encryption/package.json\":{},\"/node_modules/hypercore-errors/index.js\":{\"#package\":\"/node_modules/hypercore-errors/package.json\"},\"/node_modules/hypercore-errors/package.json\":{},\"/node_modules/hypercore-id-encoding/index.js\":{\"#package\":\"/node_modules/hypercore-id-encoding/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"z32\":\"/node_modules/z32/index.js\"},\"/node_modules/hypercore-id-encoding/package.json\":{},\"/node_modules/hypercore-storage/index.js\":{\"#package\":\"/node_modules/hypercore-storage/package.json\",\"./lib/keys.js\":\"/node_modules/hypercore-storage/lib/keys.js\",\"./lib/streams.js\":\"/node_modules/hypercore-storage/lib/streams.js\",\"./lib/tx.js\":\"/node_modules/hypercore-storage/lib/tx.js\",\"./lib/view.js\":\"/node_modules/hypercore-storage/lib/view.js\",\"./migrations/0\":\"/node_modules/hypercore-storage/migrations/0/index.js\",\"device-file\":\"/node_modules/device-file/index.js\",\"fs\":\"/node_modules/bare-fs/index.js\",\"path\":\"/node_modules/bare-path/index.js\",\"resolve-reject-promise\":\"/node_modules/resolve-reject-promise/index.js\",\"rocksdb-native\":\"/node_modules/rocksdb-native/index.js\",\"scope-lock\":\"/node_modules/scope-lock/index.js\"},\"/node_modules/hypercore-storage/lib/block-dependency-stream.js\":{\"#package\":\"/node_modules/hypercore-storage/package.json\",\"./keys\":\"/node_modules/hypercore-storage/lib/keys.js\",\"streamx\":\"/node_modules/streamx/index.js\"},\"/node_modules/hypercore-storage/lib/close-error-stream.js\":{\"#package\":\"/node_modules/hypercore-storage/package.json\",\"streamx\":\"/node_modules/streamx/index.js\"},\"/node_modules/hypercore-storage/lib/keys.js\":{\"#package\":\"/node_modules/hypercore-storage/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"index-encoder\":\"/node_modules/index-encoder/index.js\"},\"/node_modules/hypercore-storage/lib/streams.js\":{\"#package\":\"/node_modules/hypercore-storage/package.json\",\"../spec/hyperschema\":\"/node_modules/hypercore-storage/spec/hyperschema/index.js\",\"./block-dependency-stream.js\":\"/node_modules/hypercore-storage/lib/block-dependency-stream.js\",\"./keys.js\":\"/node_modules/hypercore-storage/lib/keys.js\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/hypercore-storage/lib/tx.js\":{\"#package\":\"/node_modules/hypercore-storage/package.json\",\"../spec/hyperschema\":\"/node_modules/hypercore-storage/spec/hyperschema/index.js\",\"./keys.js\":\"/node_modules/hypercore-storage/lib/keys.js\",\"./view.js\":\"/node_modules/hypercore-storage/lib/view.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"flat-tree\":\"/node_modules/flat-tree/index.js\"},\"/node_modules/hypercore-storage/lib/view.js\":{\"#package\":\"/node_modules/hypercore-storage/package.json\",\"./close-error-stream.js\":\"/node_modules/hypercore-storage/lib/close-error-stream.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"streamx\":\"/node_modules/streamx/index.js\"},\"/node_modules/hypercore-storage/migrations/0/index.js\":{\"#package\":\"/node_modules/hypercore-storage/package.json\",\"../../lib/tx.js\":\"/node_modules/hypercore-storage/lib/tx.js\",\"../../lib/view.js\":\"/node_modules/hypercore-storage/lib/view.js\",\"./messages.js\":\"/node_modules/hypercore-storage/migrations/0/messages.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"flat-tree\":\"/node_modules/flat-tree/index.js\",\"fs\":\"/node_modules/bare-fs/index.js\",\"hypercore-crypto\":\"/node_modules/hypercore-crypto/index.js\",\"path\":\"/node_modules/bare-path/index.js\",\"streamx\":\"/node_modules/streamx/index.js\"},\"/node_modules/hypercore-storage/migrations/0/messages.js\":{\"#package\":\"/node_modules/hypercore-storage/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\"},\"/node_modules/hypercore-storage/package.json\":{},\"/node_modules/hypercore-storage/spec/hyperschema/index.js\":{\"#package\":\"/node_modules/hypercore-storage/package.json\",\"hyperschema/runtime\":\"/node_modules/hyperschema/runtime.cjs\"},\"/node_modules/hypercore/index.js\":{\"#package\":\"/node_modules/hypercore/package.json\",\"./lib/caps\":\"/node_modules/hypercore/lib/caps.js\",\"./lib/core\":\"/node_modules/hypercore/lib/core.js\",\"./lib/download\":\"/node_modules/hypercore/lib/download.js\",\"./lib/info\":\"/node_modules/hypercore/lib/info.js\",\"./lib/merkle-tree\":\"/node_modules/hypercore/lib/merkle-tree.js\",\"./lib/streams\":\"/node_modules/hypercore/lib/streams.js\",\"./lib/verifier\":\"/node_modules/hypercore/lib/verifier.js\",\"@hyperswarm/secret-stream\":\"/node_modules/@hyperswarm/secret-stream/index.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"events\":\"/node_modules/bare-events/index.js\",\"hypercore-crypto\":\"/node_modules/hypercore-crypto/index.js\",\"hypercore-encryption\":\"/node_modules/hypercore-encryption/index.js\",\"hypercore-errors\":\"/node_modules/hypercore-errors/index.js\",\"hypercore-id-encoding\":\"/node_modules/hypercore-id-encoding/index.js\",\"hypercore-storage\":\"/node_modules/hypercore-storage/index.js\",\"is-options\":\"/node_modules/is-options/index.js\",\"protomux\":\"/node_modules/protomux/index.js\",\"safety-catch\":\"/node_modules/safety-catch/index.js\",\"sodium-universal\":\"/node_modules/sodium-universal/index.js\",\"unslab\":\"/node_modules/unslab/index.js\"},\"/node_modules/hypercore/lib/audit.js\":{\"#package\":\"/node_modules/hypercore/package.json\",\"./merkle-tree\":\"/node_modules/hypercore/lib/merkle-tree.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"flat-tree\":\"/node_modules/flat-tree/index.js\",\"hypercore-crypto\":\"/node_modules/hypercore-crypto/index.js\"},\"/node_modules/hypercore/lib/bit-interlude.js\":{\"#package\":\"/node_modules/hypercore/package.json\",\"./compat\":\"/node_modules/hypercore/lib/compat.js\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/hypercore/lib/bitfield.js\":{\"#package\":\"/node_modules/hypercore/package.json\",\"./compat\":\"/node_modules/hypercore/lib/compat.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"big-sparse-array\":\"/node_modules/big-sparse-array/index.js\"},\"/node_modules/hypercore/lib/caps.js\":{\"#package\":\"/node_modules/hypercore/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"hypercore-crypto\":\"/node_modules/hypercore-crypto/index.js\",\"sodium-universal\":\"/node_modules/sodium-universal/index.js\"},\"/node_modules/hypercore/lib/compat.js\":{\"#package\":\"/node_modules/hypercore/package.json\",\"quickbit-universal\":\"/node_modules/quickbit-universal/index.js\",\"quickbit-universal/fallback\":\"/node_modules/quickbit-universal/fallback.js\"},\"/node_modules/hypercore/lib/copy-prologue.js\":{\"#package\":\"/node_modules/hypercore/package.json\",\"./bitfield\":\"/node_modules/hypercore/lib/bitfield.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"flat-tree\":\"/node_modules/flat-tree/index.js\",\"hypercore-crypto\":\"/node_modules/hypercore-crypto/index.js\",\"quickbit-universal\":\"/node_modules/quickbit-universal/index.js\"},\"/node_modules/hypercore/lib/core.js\":{\"#package\":\"/node_modules/hypercore/package.json\",\"./audit\":\"/node_modules/hypercore/lib/audit.js\",\"./bit-interlude\":\"/node_modules/hypercore/lib/bit-interlude.js\",\"./bitfield\":\"/node_modules/hypercore/lib/bitfield.js\",\"./copy-prologue\":\"/node_modules/hypercore/lib/copy-prologue.js\",\"./merkle-tree\":\"/node_modules/hypercore/lib/merkle-tree.js\",\"./mutex\":\"/node_modules/hypercore/lib/mutex.js\",\"./remote-bitfield\":\"/node_modules/hypercore/lib/remote-bitfield.js\",\"./replicator\":\"/node_modules/hypercore/lib/replicator.js\",\"./session-state\":\"/node_modules/hypercore/lib/session-state.js\",\"./verifier\":\"/node_modules/hypercore/lib/verifier.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"hypercore-crypto\":\"/node_modules/hypercore-crypto/index.js\",\"hypercore-errors\":\"/node_modules/hypercore-errors/index.js\",\"unslab\":\"/node_modules/unslab/index.js\",\"z32\":\"/node_modules/z32/index.js\"},\"/node_modules/hypercore/lib/download.js\":{\"#package\":\"/node_modules/hypercore/package.json\"},\"/node_modules/hypercore/lib/hotswap-queue.js\":{\"#package\":\"/node_modules/hypercore/package.json\"},\"/node_modules/hypercore/lib/info.js\":{\"#package\":\"/node_modules/hypercore/package.json\"},\"/node_modules/hypercore/lib/merkle-tree.js\":{\"#package\":\"/node_modules/hypercore/package.json\",\"./caps\":\"/node_modules/hypercore/lib/caps.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"flat-tree\":\"/node_modules/flat-tree/index.js\",\"hypercore-crypto\":\"/node_modules/hypercore-crypto/index.js\",\"hypercore-errors\":\"/node_modules/hypercore-errors/index.js\",\"unslab\":\"/node_modules/unslab/index.js\"},\"/node_modules/hypercore/lib/messages.js\":{\"#package\":\"/node_modules/hypercore/package.json\",\"./caps\":\"/node_modules/hypercore/lib/caps.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"hypercore-errors\":\"/node_modules/hypercore-errors/index.js\",\"unslab\":\"/node_modules/unslab/index.js\"},\"/node_modules/hypercore/lib/multisig.js\":{\"#package\":\"/node_modules/hypercore/package.json\",\"./merkle-tree\":\"/node_modules/hypercore/lib/merkle-tree.js\",\"./messages\":\"/node_modules/hypercore/lib/messages.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"flat-tree\":\"/node_modules/flat-tree/index.js\"},\"/node_modules/hypercore/lib/mutex.js\":{\"#package\":\"/node_modules/hypercore/package.json\"},\"/node_modules/hypercore/lib/receiver-queue.js\":{\"#package\":\"/node_modules/hypercore/package.json\",\"fast-fifo\":\"/node_modules/fast-fifo/index.js\"},\"/node_modules/hypercore/lib/remote-bitfield.js\":{\"#package\":\"/node_modules/hypercore/package.json\",\"./compat\":\"/node_modules/hypercore/lib/compat.js\",\"big-sparse-array\":\"/node_modules/big-sparse-array/index.js\"},\"/node_modules/hypercore/lib/replicator.js\":{\"#package\":\"/node_modules/hypercore/package.json\",\"./caps\":\"/node_modules/hypercore/lib/caps.js\",\"./hotswap-queue\":\"/node_modules/hypercore/lib/hotswap-queue.js\",\"./merkle-tree\":\"/node_modules/hypercore/lib/merkle-tree.js\",\"./messages\":\"/node_modules/hypercore/lib/messages.js\",\"./receiver-queue\":\"/node_modules/hypercore/lib/receiver-queue.js\",\"./remote-bitfield\":\"/node_modules/hypercore/lib/remote-bitfield.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"flat-tree\":\"/node_modules/flat-tree/index.js\",\"hypercore-errors\":\"/node_modules/hypercore-errors/index.js\",\"random-array-iterator\":\"/node_modules/random-array-iterator/index.js\",\"safety-catch\":\"/node_modules/safety-catch/index.js\"},\"/node_modules/hypercore/lib/session-state.js\":{\"#package\":\"/node_modules/hypercore/package.json\",\"./bitfield\":\"/node_modules/hypercore/lib/bitfield.js\",\"./merkle-tree\":\"/node_modules/hypercore/lib/merkle-tree.js\",\"./mutex\":\"/node_modules/hypercore/lib/mutex.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"flat-tree\":\"/node_modules/flat-tree/index.js\",\"hypercore-crypto\":\"/node_modules/hypercore-crypto/index.js\",\"hypercore-errors\":\"/node_modules/hypercore-errors/index.js\",\"nanoassert\":\"/node_modules/nanoassert/index.js\",\"quickbit-universal\":\"/node_modules/quickbit-universal/index.js\"},\"/node_modules/hypercore/lib/streams.js\":{\"#package\":\"/node_modules/hypercore/package.json\",\"streamx\":\"/node_modules/streamx/index.js\"},\"/node_modules/hypercore/lib/verifier.js\":{\"#package\":\"/node_modules/hypercore/package.json\",\"./caps\":\"/node_modules/hypercore/lib/caps.js\",\"./messages\":\"/node_modules/hypercore/lib/messages.js\",\"./multisig\":\"/node_modules/hypercore/lib/multisig.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"flat-tree\":\"/node_modules/flat-tree/index.js\",\"hypercore-crypto\":\"/node_modules/hypercore-crypto/index.js\",\"hypercore-errors\":\"/node_modules/hypercore-errors/index.js\",\"unslab\":\"/node_modules/unslab/index.js\"},\"/node_modules/hypercore/package.json\":{},\"/node_modules/hyperdb/index.js\":{\"#package\":\"/node_modules/hyperdb/package.json\",\"./lib/engine/bee\":\"/node_modules/hyperdb/lib/engine/bee.js\",\"./lib/engine/rocks\":\"/node_modules/hyperdb/lib/engine/rocks.js\",\"./lib/stream\":\"/node_modules/hyperdb/lib/stream.js\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/hyperdb/lib/engine/bee.js\":{\"#package\":\"/node_modules/hyperdb/package.json\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"hyperbee\":\"/node_modules/hyperbee/index.js\",\"streamx\":\"/node_modules/streamx/index.js\"},\"/node_modules/hyperdb/lib/engine/rocks.js\":{\"#package\":\"/node_modules/hyperdb/package.json\",\"rocksdb-native\":\"/node_modules/rocksdb-native/index.js\"},\"/node_modules/hyperdb/lib/stream.js\":{\"#package\":\"/node_modules/hyperdb/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"streamx\":\"/node_modules/streamx/index.js\"},\"/node_modules/hyperdb/package.json\":{},\"/node_modules/hyperdb/runtime.mjs\":{\"#package\":\"/node_modules/hyperdb/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"index-encoder\":\"/node_modules/index-encoder/index.js\"},\"/node_modules/hyperdht/index.js\":{\"#package\":\"/node_modules/hyperdht/package.json\",\"./lib/connect\":\"/node_modules/hyperdht/lib/connect.js\",\"./lib/connection-pool\":\"/node_modules/hyperdht/lib/connection-pool.js\",\"./lib/constants\":\"/node_modules/hyperdht/lib/constants.js\",\"./lib/crypto\":\"/node_modules/hyperdht/lib/crypto.js\",\"./lib/errors\":\"/node_modules/hyperdht/lib/errors.js\",\"./lib/messages\":\"/node_modules/hyperdht/lib/messages.js\",\"./lib/persistent\":\"/node_modules/hyperdht/lib/persistent.js\",\"./lib/raw-stream-set\":\"/node_modules/hyperdht/lib/raw-stream-set.js\",\"./lib/router\":\"/node_modules/hyperdht/lib/router.js\",\"./lib/server\":\"/node_modules/hyperdht/lib/server.js\",\"./lib/socket-pool\":\"/node_modules/hyperdht/lib/socket-pool.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"dht-rpc\":\"/node_modules/dht-rpc/index.js\",\"hypercore-id-encoding\":\"/node_modules/hypercore-id-encoding/index.js\",\"safety-catch\":\"/node_modules/safety-catch/index.js\",\"sodium-universal\":\"/node_modules/sodium-universal/index.js\"},\"/node_modules/hyperdht/lib/announcer.js\":{\"#package\":\"/node_modules/hyperdht/package.json\",\"./constants\":\"/node_modules/hyperdht/lib/constants.js\",\"./encode\":\"/node_modules/hyperdht/lib/encode.js\",\"./messages\":\"/node_modules/hyperdht/lib/messages.js\",\"./persistent\":\"/node_modules/hyperdht/lib/persistent.js\",\"./sleeper\":\"/node_modules/hyperdht/lib/sleeper.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"safety-catch\":\"/node_modules/safety-catch/index.js\",\"signal-promise\":\"/node_modules/signal-promise/index.js\"},\"/node_modules/hyperdht/lib/connect.js\":{\"#package\":\"/node_modules/hyperdht/package.json\",\"./constants\":\"/node_modules/hyperdht/lib/constants.js\",\"./crypto\":\"/node_modules/hyperdht/lib/crypto.js\",\"./errors\":\"/node_modules/hyperdht/lib/errors.js\",\"./holepuncher\":\"/node_modules/hyperdht/lib/holepuncher.js\",\"./noise-wrap\":\"/node_modules/hyperdht/lib/noise-wrap.js\",\"./secure-payload\":\"/node_modules/hyperdht/lib/secure-payload.js\",\"./semaphore\":\"/node_modules/hyperdht/lib/semaphore.js\",\"./sleeper\":\"/node_modules/hyperdht/lib/sleeper.js\",\"@hyperswarm/secret-stream\":\"/node_modules/@hyperswarm/secret-stream/index.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"blind-relay\":\"/node_modules/blind-relay/index.js\",\"bogon\":\"/node_modules/bogon/index.js\",\"safety-catch\":\"/node_modules/safety-catch/index.js\",\"unslab\":\"/node_modules/unslab/index.js\"},\"/node_modules/hyperdht/lib/connection-pool.js\":{\"#package\":\"/node_modules/hyperdht/package.json\",\"./errors\":\"/node_modules/hyperdht/lib/errors.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"events\":\"/node_modules/bare-events/index.js\"},\"/node_modules/hyperdht/lib/constants.js\":{\"#package\":\"/node_modules/hyperdht/package.json\",\"hypercore-crypto\":\"/node_modules/hypercore-crypto/index.js\"},\"/node_modules/hyperdht/lib/crypto.js\":{\"#package\":\"/node_modules/hyperdht/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"sodium-universal\":\"/node_modules/sodium-universal/index.js\"},\"/node_modules/hyperdht/lib/encode.js\":{\"#package\":\"/node_modules/hyperdht/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\"},\"/node_modules/hyperdht/lib/errors.js\":{\"#package\":\"/node_modules/hyperdht/package.json\"},\"/node_modules/hyperdht/lib/holepuncher.js\":{\"#package\":\"/node_modules/hyperdht/package.json\",\"./constants\":\"/node_modules/hyperdht/lib/constants.js\",\"./nat\":\"/node_modules/hyperdht/lib/nat.js\",\"./sleeper\":\"/node_modules/hyperdht/lib/sleeper.js\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/hyperdht/lib/messages.js\":{\"#package\":\"/node_modules/hyperdht/package.json\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"compact-encoding-net\":\"/node_modules/compact-encoding-net/index.js\"},\"/node_modules/hyperdht/lib/nat.js\":{\"#package\":\"/node_modules/hyperdht/package.json\",\"../lib/constants\":\"/node_modules/hyperdht/lib/constants.js\"},\"/node_modules/hyperdht/lib/noise-wrap.js\":{\"#package\":\"/node_modules/hyperdht/package.json\",\"./constants\":\"/node_modules/hyperdht/lib/constants.js\",\"./errors\":\"/node_modules/hyperdht/lib/errors.js\",\"./messages\":\"/node_modules/hyperdht/lib/messages.js\",\"@hyperswarm/secret-stream\":\"/node_modules/@hyperswarm/secret-stream/index.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"noise-curve-ed\":\"/node_modules/noise-curve-ed/index.js\",\"noise-handshake\":\"/node_modules/noise-handshake/noise.js\",\"sodium-universal\":\"/node_modules/sodium-universal/index.js\"},\"/node_modules/hyperdht/lib/persistent.js\":{\"#package\":\"/node_modules/hyperdht/package.json\",\"./constants\":\"/node_modules/hyperdht/lib/constants.js\",\"./encode\":\"/node_modules/hyperdht/lib/encode.js\",\"./messages\":\"/node_modules/hyperdht/lib/messages.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"record-cache\":\"/node_modules/record-cache/index.js\",\"sodium-universal\":\"/node_modules/sodium-universal/index.js\",\"unslab\":\"/node_modules/unslab/index.js\",\"xache\":\"/node_modules/xache/index.js\"},\"/node_modules/hyperdht/lib/raw-stream-set.js\":{\"#package\":\"/node_modules/hyperdht/package.json\"},\"/node_modules/hyperdht/lib/router.js\":{\"#package\":\"/node_modules/hyperdht/package.json\",\"./constants\":\"/node_modules/hyperdht/lib/constants.js\",\"./errors\":\"/node_modules/hyperdht/lib/errors.js\",\"./messages\":\"/node_modules/hyperdht/lib/messages.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"safety-catch\":\"/node_modules/safety-catch/index.js\",\"xache\":\"/node_modules/xache/index.js\"},\"/node_modules/hyperdht/lib/secure-payload.js\":{\"#package\":\"/node_modules/hyperdht/package.json\",\"./messages\":\"/node_modules/hyperdht/lib/messages.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"sodium-universal\":\"/node_modules/sodium-universal/index.js\"},\"/node_modules/hyperdht/lib/semaphore.js\":{\"#package\":\"/node_modules/hyperdht/package.json\"},\"/node_modules/hyperdht/lib/server.js\":{\"#package\":\"/node_modules/hyperdht/package.json\",\"./announcer\":\"/node_modules/hyperdht/lib/announcer.js\",\"./constants\":\"/node_modules/hyperdht/lib/constants.js\",\"./crypto\":\"/node_modules/hyperdht/lib/crypto.js\",\"./errors\":\"/node_modules/hyperdht/lib/errors.js\",\"./holepuncher\":\"/node_modules/hyperdht/lib/holepuncher.js\",\"./noise-wrap\":\"/node_modules/hyperdht/lib/noise-wrap.js\",\"./secure-payload\":\"/node_modules/hyperdht/lib/secure-payload.js\",\"@hyperswarm/secret-stream\":\"/node_modules/@hyperswarm/secret-stream/index.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"blind-relay\":\"/node_modules/blind-relay/index.js\",\"bogon\":\"/node_modules/bogon/index.js\",\"events\":\"/node_modules/bare-events/index.js\",\"safety-catch\":\"/node_modules/safety-catch/index.js\"},\"/node_modules/hyperdht/lib/sleeper.js\":{\"#package\":\"/node_modules/hyperdht/package.json\"},\"/node_modules/hyperdht/lib/socket-pool.js\":{\"#package\":\"/node_modules/hyperdht/package.json\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/hyperdht/package.json\":{},\"/node_modules/hyperdispatch/package.json\":{},\"/node_modules/hyperdispatch/runtime.js\":{\"#package\":\"/node_modules/hyperdispatch/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"nanoassert\":\"/node_modules/nanoassert/index.js\"},\"/node_modules/hyperschema/package.json\":{},\"/node_modules/hyperschema/runtime.cjs\":{\"#package\":\"/node_modules/hyperschema/package.json\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\"},\"/node_modules/hyperschema/runtime.mjs\":{\"#package\":\"/node_modules/hyperschema/package.json\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\"},\"/node_modules/hyperswarm/index.js\":{\"#package\":\"/node_modules/hyperswarm/package.json\",\"./lib/connection-set\":\"/node_modules/hyperswarm/lib/connection-set.js\",\"./lib/peer-discovery\":\"/node_modules/hyperswarm/lib/peer-discovery.js\",\"./lib/peer-info\":\"/node_modules/hyperswarm/lib/peer-info.js\",\"./lib/retry-timer\":\"/node_modules/hyperswarm/lib/retry-timer.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"events\":\"/node_modules/bare-events/index.js\",\"hyperdht\":\"/node_modules/hyperdht/index.js\",\"shuffled-priority-queue\":\"/node_modules/shuffled-priority-queue/index.js\",\"unslab\":\"/node_modules/unslab/index.js\"},\"/node_modules/hyperswarm/lib/bulk-timer.js\":{\"#package\":\"/node_modules/hyperswarm/package.json\"},\"/node_modules/hyperswarm/lib/connection-set.js\":{\"#package\":\"/node_modules/hyperswarm/package.json\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/hyperswarm/lib/peer-discovery.js\":{\"#package\":\"/node_modules/hyperswarm/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"safety-catch\":\"/node_modules/safety-catch/index.js\"},\"/node_modules/hyperswarm/lib/peer-info.js\":{\"#package\":\"/node_modules/hyperswarm/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"events\":\"/node_modules/bare-events/index.js\",\"unslab\":\"/node_modules/unslab/index.js\"},\"/node_modules/hyperswarm/lib/retry-timer.js\":{\"#package\":\"/node_modules/hyperswarm/package.json\",\"./bulk-timer\":\"/node_modules/hyperswarm/lib/bulk-timer.js\"},\"/node_modules/hyperswarm/package.json\":{},\"/node_modules/hypertrace/index.js\":{\"#package\":\"/node_modules/hypertrace/package.json\"},\"/node_modules/hypertrace/package.json\":{},\"/node_modules/index-encoder/index.js\":{\"#package\":\"/node_modules/index-encoder/package.json\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/index-encoder/package.json\":{},\"/node_modules/is-options/index.js\":{\"#package\":\"/node_modules/is-options/package.json\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/is-options/package.json\":{},\"/node_modules/kademlia-routing-table/index.js\":{\"#package\":\"/node_modules/kademlia-routing-table/package.json\",\"events\":\"/node_modules/bare-events/index.js\"},\"/node_modules/kademlia-routing-table/package.json\":{},\"/node_modules/mutexify/index.js\":{\"#package\":\"/node_modules/mutexify/package.json\",\"queue-tick\":\"/node_modules/queue-tick/process-next-tick.js\"},\"/node_modules/mutexify/package.json\":{},\"/node_modules/mutexify/promise.js\":{\"#package\":\"/node_modules/mutexify/package.json\",\".\":\"/node_modules/mutexify/index.js\"},\"/node_modules/nanoassert/index.js\":{\"#package\":\"/node_modules/nanoassert/package.json\"},\"/node_modules/nanoassert/package.json\":{},\"/node_modules/nat-sampler/index.js\":{\"#package\":\"/node_modules/nat-sampler/package.json\"},\"/node_modules/nat-sampler/package.json\":{},\"/node_modules/noise-curve-ed/index.js\":{\"#package\":\"/node_modules/noise-curve-ed/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"nanoassert\":\"/node_modules/nanoassert/index.js\",\"sodium-universal\":\"/node_modules/sodium-universal/index.js\"},\"/node_modules/noise-curve-ed/package.json\":{},\"/node_modules/noise-handshake/cipher.js\":{\"#package\":\"/node_modules/noise-handshake/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"sodium-universal\":\"/node_modules/sodium-universal/index.js\"},\"/node_modules/noise-handshake/dh.js\":{\"#package\":\"/node_modules/noise-handshake/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"nanoassert\":\"/node_modules/nanoassert/index.js\",\"sodium-universal\":\"/node_modules/sodium-universal/index.js\"},\"/node_modules/noise-handshake/hkdf.js\":{\"#package\":\"/node_modules/noise-handshake/package.json\",\"./hmac\":\"/node_modules/noise-handshake/hmac.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"nanoassert\":\"/node_modules/nanoassert/index.js\"},\"/node_modules/noise-handshake/hmac.js\":{\"#package\":\"/node_modules/noise-handshake/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"sodium-universal\":\"/node_modules/sodium-universal/index.js\"},\"/node_modules/noise-handshake/noise.js\":{\"#package\":\"/node_modules/noise-handshake/package.json\",\"./hkdf\":\"/node_modules/noise-handshake/hkdf.js\",\"./symmetric-state\":\"/node_modules/noise-handshake/symmetric-state.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"nanoassert\":\"/node_modules/nanoassert/index.js\"},\"/node_modules/noise-handshake/package.json\":{},\"/node_modules/noise-handshake/symmetric-state.js\":{\"#package\":\"/node_modules/noise-handshake/package.json\",\"./cipher\":\"/node_modules/noise-handshake/cipher.js\",\"./dh\":\"/node_modules/noise-handshake/dh.js\",\"./hkdf\":\"/node_modules/noise-handshake/hkdf.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"nanoassert\":\"/node_modules/nanoassert/index.js\",\"sodium-universal\":\"/node_modules/sodium-universal/index.js\"},\"/node_modules/protocol-buffers-encodings/index.js\":{\"#package\":\"/node_modules/protocol-buffers-encodings/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"signed-varint\":\"/node_modules/signed-varint/index.js\",\"varint\":\"/node_modules/varint/index.js\"},\"/node_modules/protocol-buffers-encodings/package.json\":{},\"/node_modules/protomux-wakeup/index.js\":{\"#package\":\"/node_modules/protomux-wakeup/package.json\",\"./spec/hyperschema\":\"/node_modules/protomux-wakeup/spec/hyperschema/index.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"hypercore-crypto\":\"/node_modules/hypercore-crypto/index.js\",\"protomux\":\"/node_modules/protomux/index.js\"},\"/node_modules/protomux-wakeup/package.json\":{},\"/node_modules/protomux-wakeup/spec/hyperschema/index.js\":{\"#package\":\"/node_modules/protomux-wakeup/package.json\",\"hyperschema/runtime\":\"/node_modules/hyperschema/runtime.cjs\"},\"/node_modules/protomux/index.js\":{\"#package\":\"/node_modules/protomux/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"queue-tick\":\"/node_modules/queue-tick/process-next-tick.js\",\"safety-catch\":\"/node_modules/safety-catch/index.js\",\"unslab\":\"/node_modules/unslab/index.js\"},\"/node_modules/protomux/package.json\":{},\"/node_modules/queue-tick/package.json\":{},\"/node_modules/queue-tick/process-next-tick.js\":{\"#package\":\"/node_modules/queue-tick/package.json\",\"./queue-microtask\":\"/node_modules/queue-tick/queue-microtask.js\"},\"/node_modules/queue-tick/queue-microtask.js\":{\"#package\":\"/node_modules/queue-tick/package.json\"},\"/node_modules/quickbit-native/binding.js\":{\"#package\":\"/node_modules/quickbit-native/package.json\",\".\":{\"ios\":\"linked:quickbit-native.2.3.6.framework/quickbit-native.2.3.6\",\"android\":\"linked:libquickbit-native.2.3.6.so\"},\"require-addon\":\"/node_modules/require-addon/index.js\"},\"/node_modules/quickbit-native/index.js\":{\"#package\":\"/node_modules/quickbit-native/package.json\",\"./binding\":\"/node_modules/quickbit-native/binding.js\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/quickbit-native/package.json\":{},\"/node_modules/quickbit-universal/fallback.js\":{\"#package\":\"/node_modules/quickbit-universal/package.json\",\"simdle-universal\":\"/node_modules/simdle-universal/index.js\"},\"/node_modules/quickbit-universal/index.js\":{\"#package\":\"/node_modules/quickbit-universal/package.json\",\"./fallback\":\"/node_modules/quickbit-universal/fallback.js\",\"quickbit-native\":\"/node_modules/quickbit-native/index.js\"},\"/node_modules/quickbit-universal/package.json\":{},\"/node_modules/rache/index.js\":{\"#package\":\"/node_modules/rache/package.json\"},\"/node_modules/rache/package.json\":{},\"/node_modules/random-array-iterator/index.js\":{\"#package\":\"/node_modules/random-array-iterator/package.json\"},\"/node_modules/random-array-iterator/package.json\":{},\"/node_modules/ready-resource/index.js\":{\"#package\":\"/node_modules/ready-resource/package.json\",\"events\":\"/node_modules/bare-events/index.js\"},\"/node_modules/ready-resource/package.json\":{},\"/node_modules/record-cache/index.js\":{\"#package\":\"/node_modules/record-cache/package.json\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/record-cache/package.json\":{},\"/node_modules/refcounter/index.js\":{\"#package\":\"/node_modules/refcounter/package.json\"},\"/node_modules/refcounter/package.json\":{},\"/node_modules/require-addon/index.js\":{\"#package\":\"/node_modules/require-addon/package.json\",\"./lib/runtime\":\"/node_modules/require-addon/lib/runtime.js\",\"./lib/runtime/bare\":\"/node_modules/require-addon/lib/runtime/bare.js\",\"./lib/runtime/default\":\"/node_modules/require-addon/lib/runtime/default.js\",\"./lib/runtime/node\":\"/node_modules/require-addon/lib/runtime/node.js\"},\"/node_modules/require-addon/lib/runtime.js\":{\"#package\":\"/node_modules/require-addon/package.json\"},\"/node_modules/require-addon/lib/runtime/bare.js\":{\"#package\":\"/node_modules/require-addon/package.json\"},\"/node_modules/require-addon/lib/runtime/default.js\":{\"#package\":\"/node_modules/require-addon/package.json\"},\"/node_modules/require-addon/lib/runtime/node.js\":{\"#package\":\"/node_modules/require-addon/package.json\",\"bare-addon-resolve\":\"/node_modules/bare-addon-resolve/index.js\",\"url\":\"/node_modules/bare-url/index.js\"},\"/node_modules/require-addon/package.json\":{},\"/node_modules/resolve-reject-promise/index.js\":{\"#package\":\"/node_modules/resolve-reject-promise/package.json\"},\"/node_modules/resolve-reject-promise/package.json\":{},\"/node_modules/rocksdb-native/binding.js\":{\"#package\":\"/node_modules/rocksdb-native/package.json\",\".\":{\"ios\":\"linked:rocksdb-native.3.5.7.framework/rocksdb-native.3.5.7\",\"android\":\"linked:librocksdb-native.3.5.7.so\"},\"require-addon\":\"/node_modules/require-addon/index.js\"},\"/node_modules/rocksdb-native/index.js\":{\"#package\":\"/node_modules/rocksdb-native/package.json\",\"./lib/column-family\":\"/node_modules/rocksdb-native/lib/column-family.js\",\"./lib/filter-policy\":\"/node_modules/rocksdb-native/lib/filter-policy.js\",\"./lib/iterator\":\"/node_modules/rocksdb-native/lib/iterator.js\",\"./lib/snapshot\":\"/node_modules/rocksdb-native/lib/snapshot.js\",\"./lib/state\":\"/node_modules/rocksdb-native/lib/state.js\"},\"/node_modules/rocksdb-native/lib/batch.js\":{\"#package\":\"/node_modules/rocksdb-native/package.json\",\"../binding\":\"/node_modules/rocksdb-native/binding.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\"},\"/node_modules/rocksdb-native/lib/column-family.js\":{\"#package\":\"/node_modules/rocksdb-native/package.json\",\"../binding\":\"/node_modules/rocksdb-native/binding.js\",\"./filter-policy\":\"/node_modules/rocksdb-native/lib/filter-policy.js\"},\"/node_modules/rocksdb-native/lib/filter-policy.js\":{\"#package\":\"/node_modules/rocksdb-native/package.json\"},\"/node_modules/rocksdb-native/lib/iterator.js\":{\"#package\":\"/node_modules/rocksdb-native/package.json\",\"../binding\":\"/node_modules/rocksdb-native/binding.js\",\"compact-encoding\":\"/node_modules/compact-encoding/index.js\",\"streamx\":\"/node_modules/streamx/index.js\"},\"/node_modules/rocksdb-native/lib/snapshot.js\":{\"#package\":\"/node_modules/rocksdb-native/package.json\",\"../binding\":\"/node_modules/rocksdb-native/binding.js\"},\"/node_modules/rocksdb-native/lib/state.js\":{\"#package\":\"/node_modules/rocksdb-native/package.json\",\"../binding\":\"/node_modules/rocksdb-native/binding.js\",\"./batch\":\"/node_modules/rocksdb-native/lib/batch.js\",\"./column-family\":\"/node_modules/rocksdb-native/lib/column-family.js\",\"ready-resource\":\"/node_modules/ready-resource/index.js\",\"refcounter\":\"/node_modules/refcounter/index.js\",\"resolve-reject-promise\":\"/node_modules/resolve-reject-promise/index.js\"},\"/node_modules/rocksdb-native/package.json\":{},\"/node_modules/safety-catch/index.js\":{\"#package\":\"/node_modules/safety-catch/package.json\"},\"/node_modules/safety-catch/package.json\":{},\"/node_modules/scope-lock/index.js\":{\"#package\":\"/node_modules/scope-lock/package.json\"},\"/node_modules/scope-lock/package.json\":{},\"/node_modules/shuffled-priority-queue/index.js\":{\"#package\":\"/node_modules/shuffled-priority-queue/package.json\",\"unordered-set\":\"/node_modules/unordered-set/index.js\"},\"/node_modules/shuffled-priority-queue/package.json\":{},\"/node_modules/signal-promise/index.js\":{\"#package\":\"/node_modules/signal-promise/package.json\"},\"/node_modules/signal-promise/package.json\":{},\"/node_modules/signed-varint/index.js\":{\"#package\":\"/node_modules/signed-varint/package.json\",\"varint\":\"/node_modules/varint/index.js\"},\"/node_modules/signed-varint/package.json\":{},\"/node_modules/simdle-native/binding.js\":{\"#package\":\"/node_modules/simdle-native/package.json\",\".\":{\"ios\":\"linked:simdle-native.1.3.6.framework/simdle-native.1.3.6\",\"android\":\"linked:libsimdle-native.1.3.6.so\"},\"require-addon\":\"/node_modules/require-addon/index.js\"},\"/node_modules/simdle-native/index.js\":{\"#package\":\"/node_modules/simdle-native/package.json\",\"./binding\":\"/node_modules/simdle-native/binding.js\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/simdle-native/package.json\":{},\"/node_modules/simdle-universal/fallback.js\":{\"#package\":\"/node_modules/simdle-universal/package.json\",\"./scalar\":\"/node_modules/simdle-universal/scalar.js\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/simdle-universal/index.js\":{\"#package\":\"/node_modules/simdle-universal/package.json\",\"./fallback\":\"/node_modules/simdle-universal/fallback.js\",\"simdle-native\":\"/node_modules/simdle-native/index.js\"},\"/node_modules/simdle-universal/package.json\":{},\"/node_modules/simdle-universal/scalar.js\":{\"#package\":\"/node_modules/simdle-universal/package.json\"},\"/node_modules/sodium-native/index.js\":{\"#package\":\"/node_modules/sodium-native/package.json\",\".\":{\"ios\":\"linked:sodium-native.4.3.3.framework/sodium-native.4.3.3\",\"android\":\"linked:libsodium-native.4.3.3.so\"},\"require-addon\":\"/node_modules/require-addon/index.js\"},\"/node_modules/sodium-native/package.json\":{},\"/node_modules/sodium-secretstream/index.js\":{\"#package\":\"/node_modules/sodium-secretstream/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"sodium-universal\":\"/node_modules/sodium-universal/index.js\"},\"/node_modules/sodium-secretstream/package.json\":{},\"/node_modules/sodium-universal/index.js\":{\"#package\":\"/node_modules/sodium-universal/package.json\",\"sodium-native\":\"/node_modules/sodium-native/index.js\"},\"/node_modules/sodium-universal/package.json\":{},\"/node_modules/speedometer/index.js\":{\"#package\":\"/node_modules/speedometer/package.json\"},\"/node_modules/speedometer/package.json\":{},\"/node_modules/streamx/index.js\":{\"#package\":\"/node_modules/streamx/package.json\",\"events\":\"/node_modules/bare-events/index.js\",\"fast-fifo\":\"/node_modules/fast-fifo/index.js\",\"text-decoder\":\"/node_modules/text-decoder/index.js\"},\"/node_modules/streamx/package.json\":{},\"/node_modules/sub-encoder/index.js\":{\"#package\":\"/node_modules/sub-encoder/package.json\",\"b4a\":\"/node_modules/b4a/index.js\",\"codecs\":\"/node_modules/codecs/index.js\"},\"/node_modules/sub-encoder/package.json\":{},\"/node_modules/text-decoder/index.js\":{\"#package\":\"/node_modules/text-decoder/package.json\",\"./lib/pass-through-decoder\":\"/node_modules/text-decoder/lib/pass-through-decoder.js\",\"./lib/utf8-decoder\":\"/node_modules/text-decoder/lib/utf8-decoder.js\"},\"/node_modules/text-decoder/lib/pass-through-decoder.js\":{\"#package\":\"/node_modules/text-decoder/package.json\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/text-decoder/lib/utf8-decoder.js\":{\"#package\":\"/node_modules/text-decoder/package.json\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/text-decoder/package.json\":{},\"/node_modules/time-ordered-set/index.js\":{\"#package\":\"/node_modules/time-ordered-set/package.json\"},\"/node_modules/time-ordered-set/package.json\":{},\"/node_modules/timeout-refresh/browser.js\":{\"#package\":\"/node_modules/timeout-refresh/package.json\"},\"/node_modules/timeout-refresh/index.js\":{\"#package\":\"/node_modules/timeout-refresh/package.json\",\"./browser\":\"/node_modules/timeout-refresh/browser.js\",\"./node\":\"/node_modules/timeout-refresh/node.js\"},\"/node_modules/timeout-refresh/node.js\":{\"#package\":\"/node_modules/timeout-refresh/package.json\"},\"/node_modules/timeout-refresh/package.json\":{},\"/node_modules/tiny-buffer-map/index.js\":{\"#package\":\"/node_modules/tiny-buffer-map/package.json\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/tiny-buffer-map/package.json\":{},\"/node_modules/udx-native/binding.js\":{\"#package\":\"/node_modules/udx-native/package.json\",\".\":{\"ios\":\"linked:udx-native.1.17.6.framework/udx-native.1.17.6\",\"android\":\"linked:libudx-native.1.17.6.so\"},\"require-addon\":\"/node_modules/require-addon/index.js\"},\"/node_modules/udx-native/lib/ip.js\":{\"#package\":\"/node_modules/udx-native/package.json\"},\"/node_modules/udx-native/lib/network-interfaces.js\":{\"#package\":\"/node_modules/udx-native/package.json\",\"../binding\":\"/node_modules/udx-native/binding.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"events\":\"/node_modules/bare-events/index.js\"},\"/node_modules/udx-native/lib/socket.js\":{\"#package\":\"/node_modules/udx-native/package.json\",\"../binding\":\"/node_modules/udx-native/binding.js\",\"./ip\":\"/node_modules/udx-native/lib/ip.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"events\":\"/node_modules/bare-events/index.js\"},\"/node_modules/udx-native/lib/stream.js\":{\"#package\":\"/node_modules/udx-native/package.json\",\"../binding\":\"/node_modules/udx-native/binding.js\",\"./ip\":\"/node_modules/udx-native/lib/ip.js\",\"b4a\":\"/node_modules/b4a/index.js\",\"streamx\":\"/node_modules/streamx/index.js\"},\"/node_modules/udx-native/lib/udx.js\":{\"#package\":\"/node_modules/udx-native/package.json\",\"../binding\":\"/node_modules/udx-native/binding.js\",\"./ip\":\"/node_modules/udx-native/lib/ip.js\",\"./network-interfaces\":\"/node_modules/udx-native/lib/network-interfaces.js\",\"./socket\":\"/node_modules/udx-native/lib/socket.js\",\"./stream\":\"/node_modules/udx-native/lib/stream.js\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/udx-native/package.json\":{},\"/node_modules/unordered-set/index.js\":{\"#package\":\"/node_modules/unordered-set/package.json\"},\"/node_modules/unordered-set/package.json\":{},\"/node_modules/unslab/index.js\":{\"#package\":\"/node_modules/unslab/package.json\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/unslab/package.json\":{},\"/node_modules/varint/decode.js\":{\"#package\":\"/node_modules/varint/package.json\"},\"/node_modules/varint/encode.js\":{\"#package\":\"/node_modules/varint/package.json\"},\"/node_modules/varint/index.js\":{\"#package\":\"/node_modules/varint/package.json\",\"./decode.js\":\"/node_modules/varint/decode.js\",\"./encode.js\":\"/node_modules/varint/encode.js\",\"./length.js\":\"/node_modules/varint/length.js\"},\"/node_modules/varint/length.js\":{\"#package\":\"/node_modules/varint/package.json\"},\"/node_modules/varint/package.json\":{},\"/node_modules/which-runtime/index.js\":{\"#package\":\"/node_modules/which-runtime/package.json\"},\"/node_modules/which-runtime/package.json\":{},\"/node_modules/xache/index.js\":{\"#package\":\"/node_modules/xache/package.json\"},\"/node_modules/xache/package.json\":{},\"/node_modules/z32/index.js\":{\"#package\":\"/node_modules/z32/package.json\",\"b4a\":\"/node_modules/b4a/index.js\"},\"/node_modules/z32/package.json\":{},\"/package.json\":{}},\"addons\":[\"linked:bare-crypto.1.4.2.framework/bare-crypto.1.4.2\",\"linked:bare-fs.4.0.2.framework/bare-fs.4.0.2\",\"linked:bare-os.3.6.1.framework/bare-os.3.6.1\",\"linked:bare-url.2.1.5.framework/bare-url.2.1.5\",\"linked:fs-native-extensions.1.4.2.framework/fs-native-extensions.1.4.2\",\"linked:libbare-crypto.1.4.2.so\",\"linked:libbare-fs.4.0.2.so\",\"linked:libbare-os.3.6.1.so\",\"linked:libbare-url.2.1.5.so\",\"linked:libfs-native-extensions.1.4.2.so\",\"linked:libquickbit-native.2.3.6.so\",\"linked:librocksdb-native.3.5.7.so\",\"linked:libsimdle-native.1.3.6.so\",\"linked:libsodium-native.4.3.3.so\",\"linked:libudx-native.1.17.6.so\",\"linked:quickbit-native.2.3.6.framework/quickbit-native.2.3.6\",\"linked:rocksdb-native.3.5.7.framework/rocksdb-native.3.5.7\",\"linked:simdle-native.1.3.6.framework/simdle-native.1.3.6\",\"linked:sodium-native.4.3.3.framework/sodium-native.4.3.3\",\"linked:udx-native.1.17.6.framework/udx-native.1.17.6\"],\"assets\":[],\"files\":{\"/backend/AbortController.mjs\":{\"offset\":0,\"length\":1257,\"mode\":420},\"/backend/backend.mjs\":{\"offset\":1257,\"length\":65711,\"mode\":420},\"/backend/roombase/roombase.mjs\":{\"offset\":66968,\"length\":31965,\"mode\":420},\"/backend/roombase/spec/db/index.mjs\":{\"offset\":98933,\"length\":6651,\"mode\":420},\"/backend/roombase/spec/db/messages.mjs\":{\"offset\":105584,\"length\":7332,\"mode\":420},\"/backend/roombase/spec/hyperdispatch/index.mjs\":{\"offset\":112916,\"length\":3795,\"mode\":420},\"/backend/roombase/spec/hyperdispatch/messages.mjs\":{\"offset\":116711,\"length\":4382,\"mode\":420},\"/backend/userbase/spec/db/index.mjs\":{\"offset\":121093,\"length\":5105,\"mode\":420},\"/backend/userbase/spec/db/messages.mjs\":{\"offset\":126198,\"length\":5477,\"mode\":420},\"/backend/userbase/spec/hyperdispatch/index.mjs\":{\"offset\":131675,\"length\":2994,\"mode\":420},\"/backend/userbase/spec/hyperdispatch/messages.mjs\":{\"offset\":134669,\"length\":3473,\"mode\":420},\"/backend/userbase/userbase.mjs\":{\"offset\":138142,\"length\":19533,\"mode\":420},\"/backend/utils.mjs\":{\"offset\":157675,\"length\":1464,\"mode\":420},\"/node_modules/@hyperswarm/secret-stream/index.js\":{\"offset\":159139,\"length\":16646,\"mode\":420},\"/node_modules/@hyperswarm/secret-stream/lib/bridge.js\":{\"offset\":175785,\"length\":1285,\"mode\":420},\"/node_modules/@hyperswarm/secret-stream/lib/handshake.js\":{\"offset\":177070,\"length\":1959,\"mode\":420},\"/node_modules/@hyperswarm/secret-stream/package.json\":{\"offset\":179029,\"length\":1032,\"mode\":420},\"/node_modules/@noble/hashes/_assert.js\":{\"offset\":180061,\"length\":1784,\"mode\":420},\"/node_modules/@noble/hashes/_md.js\":{\"offset\":181845,\"length\":5096,\"mode\":420},\"/node_modules/@noble/hashes/_u64.js\":{\"offset\":186941,\"length\":3812,\"mode\":420},\"/node_modules/@noble/hashes/cryptoNode.js\":{\"offset\":190753,\"length\":579,\"mode\":420},\"/node_modules/@noble/hashes/hmac.js\":{\"offset\":191332,\"length\":3172,\"mode\":420},\"/node_modules/@noble/hashes/package.json\":{\"offset\":194504,\"length\":4299,\"mode\":420},\"/node_modules/@noble/hashes/pbkdf2.js\":{\"offset\":198803,\"length\":4119,\"mode\":420},\"/node_modules/@noble/hashes/sha256.js\":{\"offset\":202922,\"length\":5458,\"mode\":420},\"/node_modules/@noble/hashes/sha512.js\":{\"offset\":208380,\"length\":12329,\"mode\":420},\"/node_modules/@noble/hashes/utils.js\":{\"offset\":220709,\"length\":8700,\"mode\":420},\"/node_modules/autobase/index.js\":{\"offset\":229409,\"length\":49721,\"mode\":420},\"/node_modules/autobase/lib/active-writers.js\":{\"offset\":279130,\"length\":745,\"mode\":420},\"/node_modules/autobase/lib/apply-calls.js\":{\"offset\":279875,\"length\":1521,\"mode\":420},\"/node_modules/autobase/lib/apply-state.js\":{\"offset\":281396,\"length\":33115,\"mode\":420},\"/node_modules/autobase/lib/boot.js\":{\"offset\":314511,\"length\":3108,\"mode\":420},\"/node_modules/autobase/lib/clock.js\":{\"offset\":317619,\"length\":757,\"mode\":420},\"/node_modules/autobase/lib/consensus.js\":{\"offset\":318376,\"length\":11658,\"mode\":420},\"/node_modules/autobase/lib/fast-forward.js\":{\"offset\":330034,\"length\":3661,\"mode\":420},\"/node_modules/autobase/lib/linearizer.js\":{\"offset\":333695,\"length\":9659,\"mode\":420},\"/node_modules/autobase/lib/messages.js\":{\"offset\":343354,\"length\":13590,\"mode\":420},\"/node_modules/autobase/lib/node-buffer.js\":{\"offset\":356944,\"length\":1571,\"mode\":420},\"/node_modules/autobase/lib/store.js\":{\"offset\":358515,\"length\":12079,\"mode\":420},\"/node_modules/autobase/lib/system.js\":{\"offset\":370594,\"length\":15883,\"mode\":420},\"/node_modules/autobase/lib/timer.js\":{\"offset\":386477,\"length\":2947,\"mode\":420},\"/node_modules/autobase/lib/topolist.js\":{\"offset\":389424,\"length\":2642,\"mode\":420},\"/node_modules/autobase/lib/updates.js\":{\"offset\":392066,\"length\":1112,\"mode\":420},\"/node_modules/autobase/lib/wakeup.js\":{\"offset\":393178,\"length\":4052,\"mode\":420},\"/node_modules/autobase/lib/writer.js\":{\"offset\":397230,\"length\":8552,\"mode\":420},\"/node_modules/autobase/package.json\":{\"offset\":405782,\"length\":1787,\"mode\":420},\"/node_modules/b4a/index.js\":{\"offset\":407569,\"length\":4092,\"mode\":420},\"/node_modules/b4a/package.json\":{\"offset\":411661,\"length\":701,\"mode\":420},\"/node_modules/bare-addon-resolve/index.js\":{\"offset\":412362,\"length\":10801,\"mode\":420},\"/node_modules/bare-addon-resolve/lib/errors.js\":{\"offset\":423163,\"length\":642,\"mode\":420},\"/node_modules/bare-addon-resolve/package.json\":{\"offset\":423805,\"length\":1175,\"mode\":420},\"/node_modules/bare-crypto/binding.js\":{\"offset\":424980,\"length\":33,\"mode\":420},\"/node_modules/bare-crypto/index.js\":{\"offset\":425013,\"length\":2798,\"mode\":420},\"/node_modules/bare-crypto/lib/constants.js\":{\"offset\":427811,\"length\":211,\"mode\":420},\"/node_modules/bare-crypto/lib/errors.js\":{\"offset\":428022,\"length\":450,\"mode\":420},\"/node_modules/bare-crypto/package.json\":{\"offset\":428472,\"length\":1349,\"mode\":420},\"/node_modules/bare-crypto/web.js\":{\"offset\":429821,\"length\":195,\"mode\":420},\"/node_modules/bare-events/index.js\":{\"offset\":430016,\"length\":6999,\"mode\":420},\"/node_modules/bare-events/lib/errors.js\":{\"offset\":437015,\"length\":711,\"mode\":420},\"/node_modules/bare-events/package.json\":{\"offset\":437726,\"length\":944,\"mode\":420},\"/node_modules/bare-fs/binding.js\":{\"offset\":438670,\"length\":33,\"mode\":420},\"/node_modules/bare-fs/index.js\":{\"offset\":438703,\"length\":58386,\"mode\":420},\"/node_modules/bare-fs/lib/constants.js\":{\"offset\":497089,\"length\":1494,\"mode\":420},\"/node_modules/bare-fs/package.json\":{\"offset\":498583,\"length\":1451,\"mode\":420},\"/node_modules/bare-module-resolve/index.js\":{\"offset\":500034,\"length\":20462,\"mode\":420},\"/node_modules/bare-module-resolve/lib/errors.js\":{\"offset\":520496,\"length\":1195,\"mode\":420},\"/node_modules/bare-module-resolve/package.json\":{\"offset\":521691,\"length\":1143,\"mode\":420},\"/node_modules/bare-os/binding.js\":{\"offset\":522834,\"length\":33,\"mode\":420},\"/node_modules/bare-os/index.js\":{\"offset\":522867,\"length\":2433,\"mode\":420},\"/node_modules/bare-os/lib/constants.js\":{\"offset\":525300,\"length\":113,\"mode\":420},\"/node_modules/bare-os/lib/errors.js\":{\"offset\":525413,\"length\":479,\"mode\":420},\"/node_modules/bare-os/package.json\":{\"offset\":525892,\"length\":1023,\"mode\":420},\"/node_modules/bare-path/index.js\":{\"offset\":526915,\"length\":306,\"mode\":420},\"/node_modules/bare-path/lib/constants.js\":{\"offset\":527221,\"length\":247,\"mode\":420},\"/node_modules/bare-path/lib/posix.js\":{\"offset\":527468,\"length\":5991,\"mode\":420},\"/node_modules/bare-path/lib/shared.js\":{\"offset\":533459,\"length\":1888,\"mode\":420},\"/node_modules/bare-path/lib/win32.js\":{\"offset\":535347,\"length\":13427,\"mode\":420},\"/node_modules/bare-path/package.json\":{\"offset\":548774,\"length\":796,\"mode\":420},\"/node_modules/bare-rpc/index.js\":{\"offset\":549570,\"length\":8593,\"mode\":420},\"/node_modules/bare-rpc/lib/constants.js\":{\"offset\":558163,\"length\":270,\"mode\":420},\"/node_modules/bare-rpc/lib/errors.js\":{\"offset\":558433,\"length\":483,\"mode\":420},\"/node_modules/bare-rpc/lib/incoming-request.js\":{\"offset\":558916,\"length\":899,\"mode\":420},\"/node_modules/bare-rpc/lib/incoming-stream.js\":{\"offset\":559815,\"length\":1207,\"mode\":420},\"/node_modules/bare-rpc/lib/messages.js\":{\"offset\":561022,\"length\":4148,\"mode\":420},\"/node_modules/bare-rpc/lib/outgoing-request.js\":{\"offset\":565170,\"length\":1164,\"mode\":420},\"/node_modules/bare-rpc/lib/outgoing-stream.js\":{\"offset\":566334,\"length\":2114,\"mode\":420},\"/node_modules/bare-rpc/package.json\":{\"offset\":568448,\"length\":1181,\"mode\":420},\"/node_modules/bare-semver/index.js\":{\"offset\":569629,\"length\":469,\"mode\":420},\"/node_modules/bare-semver/lib/comparator.js\":{\"offset\":570098,\"length\":705,\"mode\":420},\"/node_modules/bare-semver/lib/constants.js\":{\"offset\":570803,\"length\":67,\"mode\":420},\"/node_modules/bare-semver/lib/errors.js\":{\"offset\":570870,\"length\":529,\"mode\":420},\"/node_modules/bare-semver/lib/range.js\":{\"offset\":571399,\"length\":2429,\"mode\":420},\"/node_modules/bare-semver/lib/version.js\":{\"offset\":573828,\"length\":3824,\"mode\":420},\"/node_modules/bare-semver/package.json\":{\"offset\":577652,\"length\":868,\"mode\":420},\"/node_modules/bare-stream/index.js\":{\"offset\":578520,\"length\":7649,\"mode\":420},\"/node_modules/bare-stream/package.json\":{\"offset\":586169,\"length\":1237,\"mode\":420},\"/node_modules/bare-url/binding.js\":{\"offset\":587406,\"length\":33,\"mode\":420},\"/node_modules/bare-url/index.js\":{\"offset\":587439,\"length\":7957,\"mode\":420},\"/node_modules/bare-url/lib/errors.js\":{\"offset\":595396,\"length\":881,\"mode\":420},\"/node_modules/bare-url/package.json\":{\"offset\":596277,\"length\":1104,\"mode\":420},\"/node_modules/big-sparse-array/index.js\":{\"offset\":597381,\"length\":2471,\"mode\":420},\"/node_modules/big-sparse-array/package.json\":{\"offset\":599852,\"length\":636,\"mode\":420},\"/node_modules/bip39/package.json\":{\"offset\":600488,\"length\":1441,\"mode\":420},\"/node_modules/bip39/src/_wordlists.js\":{\"offset\":601929,\"length\":1799,\"mode\":420},\"/node_modules/bip39/src/index.js\":{\"offset\":603728,\"length\":6062,\"mode\":420},\"/node_modules/bip39/src/wordlists/chinese_simplified.json\":{\"offset\":609790,\"length\":22531,\"mode\":420},\"/node_modules/bip39/src/wordlists/chinese_traditional.json\":{\"offset\":632321,\"length\":22531,\"mode\":420},\"/node_modules/bip39/src/wordlists/czech.json\":{\"offset\":654852,\"length\":29284,\"mode\":420},\"/node_modules/bip39/src/wordlists/english.json\":{\"offset\":684136,\"length\":27455,\"mode\":420},\"/node_modules/bip39/src/wordlists/french.json\":{\"offset\":711591,\"length\":31116,\"mode\":420},\"/node_modules/bip39/src/wordlists/italian.json\":{\"offset\":742707,\"length\":30372,\"mode\":420},\"/node_modules/bip39/src/wordlists/japanese.json\":{\"offset\":773079,\"length\":40762,\"mode\":420},\"/node_modules/bip39/src/wordlists/korean.json\":{\"offset\":813841,\"length\":52171,\"mode\":420},\"/node_modules/bip39/src/wordlists/portuguese.json\":{\"offset\":866012,\"length\":30010,\"mode\":420},\"/node_modules/bip39/src/wordlists/spanish.json\":{\"offset\":896022,\"length\":28335,\"mode\":420},\"/node_modules/bits-to-bytes/index.js\":{\"offset\":924357,\"length\":3083,\"mode\":420},\"/node_modules/bits-to-bytes/package.json\":{\"offset\":927440,\"length\":708,\"mode\":420},\"/node_modules/blind-pairing-core/index.js\":{\"offset\":928148,\"length\":10708,\"mode\":420},\"/node_modules/blind-pairing-core/lib/errors.js\":{\"offset\":938856,\"length\":706,\"mode\":420},\"/node_modules/blind-pairing-core/lib/messages.js\":{\"offset\":939562,\"length\":5348,\"mode\":420},\"/node_modules/blind-pairing-core/package.json\":{\"offset\":944910,\"length\":951,\"mode\":420},\"/node_modules/blind-pairing/index.js\":{\"offset\":945861,\"length\":16910,\"mode\":420},\"/node_modules/blind-pairing/package.json\":{\"offset\":962771,\"length\":1000,\"mode\":420},\"/node_modules/blind-relay/index.js\":{\"offset\":963771,\"length\":11630,\"mode\":420},\"/node_modules/blind-relay/lib/errors.js\":{\"offset\":975401,\"length\":1043,\"mode\":420},\"/node_modules/blind-relay/package.json\":{\"offset\":976444,\"length\":1074,\"mode\":420},\"/node_modules/bogon/index.js\":{\"offset\":977518,\"length\":3961,\"mode\":420},\"/node_modules/bogon/package.json\":{\"offset\":981479,\"length\":657,\"mode\":420},\"/node_modules/codecs/index.js\":{\"offset\":982136,\"length\":2416,\"mode\":420},\"/node_modules/codecs/package.json\":{\"offset\":984552,\"length\":655,\"mode\":420},\"/node_modules/compact-encoding-bitfield/index.js\":{\"offset\":985207,\"length\":1963,\"mode\":420},\"/node_modules/compact-encoding-bitfield/package.json\":{\"offset\":987170,\"length\":827,\"mode\":420},\"/node_modules/compact-encoding-net/index.js\":{\"offset\":987997,\"length\":4109,\"mode\":420},\"/node_modules/compact-encoding-net/package.json\":{\"offset\":992106,\"length\":734,\"mode\":420},\"/node_modules/compact-encoding/endian.js\":{\"offset\":992840,\"length\":103,\"mode\":420},\"/node_modules/compact-encoding/index.js\":{\"offset\":992943,\"length\":19073,\"mode\":420},\"/node_modules/compact-encoding/lexint.js\":{\"offset\":1012016,\"length\":2824,\"mode\":420},\"/node_modules/compact-encoding/package.json\":{\"offset\":1014840,\"length\":713,\"mode\":420},\"/node_modules/compact-encoding/raw.js\":{\"offset\":1015553,\"length\":4118,\"mode\":420},\"/node_modules/core-coupler/index.js\":{\"offset\":1019671,\"length\":2243,\"mode\":420},\"/node_modules/core-coupler/package.json\":{\"offset\":1021914,\"length\":599,\"mode\":420},\"/node_modules/corestore/index.js\":{\"offset\":1022513,\"length\":15829,\"mode\":420},\"/node_modules/corestore/lib/audit.js\":{\"offset\":1038342,\"length\":426,\"mode\":420},\"/node_modules/corestore/package.json\":{\"offset\":1038768,\"length\":930,\"mode\":420},\"/node_modules/crypto/index.js\":{\"offset\":1039698,\"length\":40,\"mode\":420},\"/node_modules/crypto/package.json\":{\"offset\":1039738,\"length\":564,\"mode\":420},\"/node_modules/debounceify/index.js\":{\"offset\":1040302,\"length\":585,\"mode\":420},\"/node_modules/debounceify/package.json\":{\"offset\":1040887,\"length\":567,\"mode\":420},\"/node_modules/device-file/index.js\":{\"offset\":1041454,\"length\":4247,\"mode\":420},\"/node_modules/device-file/package.json\":{\"offset\":1045701,\"length\":775,\"mode\":420},\"/node_modules/dht-rpc/index.js\":{\"offset\":1046476,\"length\":24634,\"mode\":420},\"/node_modules/dht-rpc/lib/commands.js\":{\"offset\":1071110,\"length\":82,\"mode\":420},\"/node_modules/dht-rpc/lib/errors.js\":{\"offset\":1071192,\"length\":724,\"mode\":420},\"/node_modules/dht-rpc/lib/io.js\":{\"offset\":1071916,\"length\":15243,\"mode\":420},\"/node_modules/dht-rpc/lib/peer.js\":{\"offset\":1087159,\"length\":645,\"mode\":420},\"/node_modules/dht-rpc/lib/query.js\":{\"offset\":1087804,\"length\":9369,\"mode\":420},\"/node_modules/dht-rpc/lib/session.js\":{\"offset\":1097173,\"length\":1084,\"mode\":420},\"/node_modules/dht-rpc/package.json\":{\"offset\":1098257,\"length\":1067,\"mode\":420},\"/node_modules/fast-fifo/fixed-size.js\":{\"offset\":1099324,\"length\":875,\"mode\":420},\"/node_modules/fast-fifo/index.js\":{\"offset\":1100199,\"length\":972,\"mode\":420},\"/node_modules/fast-fifo/package.json\":{\"offset\":1101171,\"length\":682,\"mode\":420},\"/node_modules/flat-tree/index.js\":{\"offset\":1101853,\"length\":7590,\"mode\":420},\"/node_modules/flat-tree/package.json\":{\"offset\":1109443,\"length\":631,\"mode\":420},\"/node_modules/fs-native-extensions/binding.js\":{\"offset\":1110074,\"length\":90,\"mode\":420},\"/node_modules/fs-native-extensions/index.js\":{\"offset\":1110164,\"length\":6339,\"mode\":420},\"/node_modules/fs-native-extensions/package.json\":{\"offset\":1116503,\"length\":1609,\"mode\":420},\"/node_modules/hyperbee/index.js\":{\"offset\":1118112,\"length\":41696,\"mode\":420},\"/node_modules/hyperbee/iterators/diff.js\":{\"offset\":1159808,\"length\":5368,\"mode\":420},\"/node_modules/hyperbee/iterators/history.js\":{\"offset\":1165176,\"length\":1642,\"mode\":420},\"/node_modules/hyperbee/iterators/range.js\":{\"offset\":1166818,\"length\":4734,\"mode\":420},\"/node_modules/hyperbee/lib/extension.js\":{\"offset\":1171552,\"length\":3445,\"mode\":420},\"/node_modules/hyperbee/lib/messages.js\":{\"offset\":1174997,\"length\":28162,\"mode\":420},\"/node_modules/hyperbee/package.json\":{\"offset\":1203159,\"length\":1176,\"mode\":420},\"/node_modules/hyperblobs/index.js\":{\"offset\":1204335,\"length\":5327,\"mode\":420},\"/node_modules/hyperblobs/lib/monitor.js\":{\"offset\":1209662,\"length\":2393,\"mode\":420},\"/node_modules/hyperblobs/lib/prefetcher.js\":{\"offset\":1212055,\"length\":1638,\"mode\":420},\"/node_modules/hyperblobs/lib/streams.js\":{\"offset\":1213693,\"length\":3595,\"mode\":420},\"/node_modules/hyperblobs/package.json\":{\"offset\":1217288,\"length\":1056,\"mode\":420},\"/node_modules/hypercore-crypto/index.js\":{\"offset\":1218344,\"length\":4820,\"mode\":420},\"/node_modules/hypercore-crypto/package.json\":{\"offset\":1223164,\"length\":771,\"mode\":420},\"/node_modules/hypercore-encryption/index.js\":{\"offset\":1223935,\"length\":6848,\"mode\":420},\"/node_modules/hypercore-encryption/package.json\":{\"offset\":1230783,\"length\":863,\"mode\":420},\"/node_modules/hypercore-errors/index.js\":{\"offset\":1231646,\"length\":3862,\"mode\":420},\"/node_modules/hypercore-errors/package.json\":{\"offset\":1235508,\"length\":604,\"mode\":420},\"/node_modules/hypercore-id-encoding/index.js\":{\"offset\":1236112,\"length\":923,\"mode\":420},\"/node_modules/hypercore-id-encoding/package.json\":{\"offset\":1237035,\"length\":799,\"mode\":420},\"/node_modules/hypercore-storage/index.js\":{\"offset\":1237834,\"length\":22132,\"mode\":420},\"/node_modules/hypercore-storage/lib/block-dependency-stream.js\":{\"offset\":1259966,\"length\":2573,\"mode\":420},\"/node_modules/hypercore-storage/lib/close-error-stream.js\":{\"offset\":1262539,\"length\":278,\"mode\":420},\"/node_modules/hypercore-storage/lib/keys.js\":{\"offset\":1262817,\"length\":7455,\"mode\":420},\"/node_modules/hypercore-storage/lib/streams.js\":{\"offset\":1270272,\"length\":4204,\"mode\":420},\"/node_modules/hypercore-storage/lib/tx.js\":{\"offset\":1274476,\"length\":7960,\"mode\":420},\"/node_modules/hypercore-storage/lib/view.js\":{\"offset\":1282436,\"length\":8427,\"mode\":420},\"/node_modules/hypercore-storage/migrations/0/index.js\":{\"offset\":1290863,\"length\":19613,\"mode\":420},\"/node_modules/hypercore-storage/migrations/0/messages.js\":{\"offset\":1310476,\"length\":26210,\"mode\":420},\"/node_modules/hypercore-storage/package.json\":{\"offset\":1336686,\"length\":1116,\"mode\":420},\"/node_modules/hypercore-storage/spec/hyperschema/index.js\":{\"offset\":1337802,\"length\":12434,\"mode\":420},\"/node_modules/hypercore/index.js\":{\"offset\":1350236,\"length\":33938,\"mode\":420},\"/node_modules/hypercore/lib/audit.js\":{\"offset\":1384174,\"length\":3805,\"mode\":420},\"/node_modules/hypercore/lib/bit-interlude.js\":{\"offset\":1387979,\"length\":3911,\"mode\":420},\"/node_modules/hypercore/lib/bitfield.js\":{\"offset\":1391890,\"length\":11215,\"mode\":420},\"/node_modules/hypercore/lib/caps.js\":{\"offset\":1403105,\"length\":1536,\"mode\":420},\"/node_modules/hypercore/lib/compat.js\":{\"offset\":1404641,\"length\":477,\"mode\":420},\"/node_modules/hypercore/lib/copy-prologue.js\":{\"offset\":1405118,\"length\":5995,\"mode\":420},\"/node_modules/hypercore/lib/core.js\":{\"offset\":1411113,\"length\":22709,\"mode\":420},\"/node_modules/hypercore/lib/download.js\":{\"offset\":1433822,\"length\":1288,\"mode\":420},\"/node_modules/hypercore/lib/hotswap-queue.js\":{\"offset\":1435110,\"length\":1504,\"mode\":420},\"/node_modules/hypercore/lib/info.js\":{\"offset\":1436614,\"length\":1521,\"mode\":420},\"/node_modules/hypercore/lib/merkle-tree.js\":{\"offset\":1438135,\"length\":31823,\"mode\":420},\"/node_modules/hypercore/lib/messages.js\":{\"offset\":1469958,\"length\":26796,\"mode\":420},\"/node_modules/hypercore/lib/multisig.js\":{\"offset\":1496754,\"length\":2768,\"mode\":420},\"/node_modules/hypercore/lib/mutex.js\":{\"offset\":1499522,\"length\":1005,\"mode\":420},\"/node_modules/hypercore/lib/receiver-queue.js\":{\"offset\":1500527,\"length\":1419,\"mode\":420},\"/node_modules/hypercore/lib/remote-bitfield.js\":{\"offset\":1501946,\"length\":8121,\"mode\":420},\"/node_modules/hypercore/lib/replicator.js\":{\"offset\":1510067,\"length\":71905,\"mode\":420},\"/node_modules/hypercore/lib/session-state.js\":{\"offset\":1581972,\"length\":29480,\"mode\":420},\"/node_modules/hypercore/lib/streams.js\":{\"offset\":1611452,\"length\":2857,\"mode\":420},\"/node_modules/hypercore/lib/verifier.js\":{\"offset\":1614309,\"length\":9332,\"mode\":420},\"/node_modules/hypercore/package.json\":{\"offset\":1623641,\"length\":1967,\"mode\":420},\"/node_modules/hyperdb/index.js\":{\"offset\":1625608,\"length\":17203,\"mode\":420},\"/node_modules/hyperdb/lib/engine/bee.js\":{\"offset\":1642811,\"length\":4096,\"mode\":420},\"/node_modules/hyperdb/lib/engine/rocks.js\":{\"offset\":1646907,\"length\":3001,\"mode\":420},\"/node_modules/hyperdb/lib/stream.js\":{\"offset\":1649908,\"length\":5557,\"mode\":420},\"/node_modules/hyperdb/package.json\":{\"offset\":1655465,\"length\":1511,\"mode\":420},\"/node_modules/hyperdb/runtime.mjs\":{\"offset\":1656976,\"length\":129,\"mode\":420},\"/node_modules/hyperdht/index.js\":{\"offset\":1657105,\"length\":14911,\"mode\":420},\"/node_modules/hyperdht/lib/announcer.js\":{\"offset\":1672016,\"length\":7252,\"mode\":420},\"/node_modules/hyperdht/lib/connect.js\":{\"offset\":1679268,\"length\":22662,\"mode\":420},\"/node_modules/hyperdht/lib/connection-pool.js\":{\"offset\":1701930,\"length\":3120,\"mode\":420},\"/node_modules/hyperdht/lib/constants.js\":{\"offset\":1705050,\"length\":1207,\"mode\":420},\"/node_modules/hyperdht/lib/crypto.js\":{\"offset\":1706257,\"length\":635,\"mode\":420},\"/node_modules/hyperdht/lib/encode.js\":{\"offset\":1706892,\"length\":447,\"mode\":420},\"/node_modules/hyperdht/lib/errors.js\":{\"offset\":1707339,\"length\":3713,\"mode\":420},\"/node_modules/hyperdht/lib/holepuncher.js\":{\"offset\":1711052,\"length\":10013,\"mode\":420},\"/node_modules/hyperdht/lib/messages.js\":{\"offset\":1721065,\"length\":10440,\"mode\":420},\"/node_modules/hyperdht/lib/nat.js\":{\"offset\":1731505,\"length\":4694,\"mode\":420},\"/node_modules/hyperdht/lib/noise-wrap.js\":{\"offset\":1736199,\"length\":1673,\"mode\":420},\"/node_modules/hyperdht/lib/persistent.js\":{\"offset\":1737872,\"length\":7857,\"mode\":420},\"/node_modules/hyperdht/lib/raw-stream-set.js\":{\"offset\":1745729,\"length\":1427,\"mode\":420},\"/node_modules/hyperdht/lib/router.js\":{\"offset\":1747156,\"length\":6411,\"mode\":420},\"/node_modules/hyperdht/lib/secure-payload.js\":{\"offset\":1753567,\"length\":1495,\"mode\":420},\"/node_modules/hyperdht/lib/semaphore.js\":{\"offset\":1755062,\"length\":995,\"mode\":420},\"/node_modules/hyperdht/lib/server.js\":{\"offset\":1756057,\"length\":19958,\"mode\":420},\"/node_modules/hyperdht/lib/sleeper.js\":{\"offset\":1776015,\"length\":693,\"mode\":420},\"/node_modules/hyperdht/lib/socket-pool.js\":{\"offset\":1776708,\"length\":4371,\"mode\":420},\"/node_modules/hyperdht/package.json\":{\"offset\":1781079,\"length\":1825,\"mode\":420},\"/node_modules/hyperdispatch/package.json\":{\"offset\":1782904,\"length\":863,\"mode\":420},\"/node_modules/hyperdispatch/runtime.js\":{\"offset\":1783767,\"length\":110,\"mode\":420},\"/node_modules/hyperschema/package.json\":{\"offset\":1783877,\"length\":1313,\"mode\":420},\"/node_modules/hyperschema/runtime.cjs\":{\"offset\":1785190,\"length\":54,\"mode\":420},\"/node_modules/hyperschema/runtime.mjs\":{\"offset\":1785244,\"length\":47,\"mode\":420},\"/node_modules/hyperswarm/index.js\":{\"offset\":1785291,\"length\":16160,\"mode\":420},\"/node_modules/hyperswarm/lib/bulk-timer.js\":{\"offset\":1801451,\"length\":732,\"mode\":420},\"/node_modules/hyperswarm/lib/connection-set.js\":{\"offset\":1802183,\"length\":775,\"mode\":420},\"/node_modules/hyperswarm/lib/peer-discovery.js\":{\"offset\":1802958,\"length\":7954,\"mode\":420},\"/node_modules/hyperswarm/lib/peer-info.js\":{\"offset\":1810912,\"length\":2703,\"mode\":420},\"/node_modules/hyperswarm/lib/retry-timer.js\":{\"offset\":1813615,\"length\":1821,\"mode\":420},\"/node_modules/hyperswarm/package.json\":{\"offset\":1815436,\"length\":1102,\"mode\":420},\"/node_modules/hypertrace/index.js\":{\"offset\":1816538,\"length\":3271,\"mode\":420},\"/node_modules/hypertrace/package.json\":{\"offset\":1819809,\"length\":386,\"mode\":420},\"/node_modules/index-encoder/index.js\":{\"offset\":1820195,\"length\":6521,\"mode\":420},\"/node_modules/index-encoder/package.json\":{\"offset\":1826716,\"length\":729,\"mode\":420},\"/node_modules/is-options/index.js\":{\"offset\":1827445,\"length\":140,\"mode\":420},\"/node_modules/is-options/package.json\":{\"offset\":1827585,\"length\":605,\"mode\":420},\"/node_modules/kademlia-routing-table/index.js\":{\"offset\":1828190,\"length\":4145,\"mode\":420},\"/node_modules/kademlia-routing-table/package.json\":{\"offset\":1832335,\"length\":967,\"mode\":420},\"/node_modules/mutexify/index.js\":{\"offset\":1833302,\"length\":536,\"mode\":420},\"/node_modules/mutexify/package.json\":{\"offset\":1833838,\"length\":679,\"mode\":420},\"/node_modules/mutexify/promise.js\":{\"offset\":1834517,\"length\":324,\"mode\":420},\"/node_modules/nanoassert/index.js\":{\"offset\":1834841,\"length\":438,\"mode\":420},\"/node_modules/nanoassert/package.json\":{\"offset\":1835279,\"length\":647,\"mode\":420},\"/node_modules/nat-sampler/index.js\":{\"offset\":1835926,\"length\":1550,\"mode\":420},\"/node_modules/nat-sampler/package.json\":{\"offset\":1837476,\"length\":608,\"mode\":420},\"/node_modules/noise-curve-ed/index.js\":{\"offset\":1838084,\"length\":1642,\"mode\":420},\"/node_modules/noise-curve-ed/package.json\":{\"offset\":1839726,\"length\":883,\"mode\":420},\"/node_modules/noise-handshake/cipher.js\":{\"offset\":1840609,\"length\":2533,\"mode\":420},\"/node_modules/noise-handshake/dh.js\":{\"offset\":1843142,\"length\":1439,\"mode\":420},\"/node_modules/noise-handshake/hkdf.js\":{\"offset\":1844581,\"length\":1305,\"mode\":420},\"/node_modules/noise-handshake/hmac.js\":{\"offset\":1845886,\"length\":1278,\"mode\":420},\"/node_modules/noise-handshake/noise.js\":{\"offset\":1847164,\"length\":6345,\"mode\":420},\"/node_modules/noise-handshake/package.json\":{\"offset\":1853509,\"length\":566,\"mode\":420},\"/node_modules/noise-handshake/symmetric-state.js\":{\"offset\":1854075,\"length\":2206,\"mode\":420},\"/node_modules/protocol-buffers-encodings/index.js\":{\"offset\":1856281,\"length\":6489,\"mode\":420},\"/node_modules/protocol-buffers-encodings/package.json\":{\"offset\":1862770,\"length\":719,\"mode\":420},\"/node_modules/protomux-wakeup/index.js\":{\"offset\":1863489,\"length\":9335,\"mode\":420},\"/node_modules/protomux-wakeup/package.json\":{\"offset\":1872824,\"length\":732,\"mode\":420},\"/node_modules/protomux-wakeup/spec/hyperschema/index.js\":{\"offset\":1873556,\"length\":3298,\"mode\":420},\"/node_modules/protomux/index.js\":{\"offset\":1876854,\"length\":18996,\"mode\":420},\"/node_modules/protomux/package.json\":{\"offset\":1895850,\"length\":816,\"mode\":420},\"/node_modules/queue-tick/package.json\":{\"offset\":1896666,\"length\":669,\"mode\":420},\"/node_modules/queue-tick/process-next-tick.js\":{\"offset\":1897335,\"length\":160,\"mode\":420},\"/node_modules/queue-tick/queue-microtask.js\":{\"offset\":1897495,\"length\":108,\"mode\":420},\"/node_modules/quickbit-native/binding.js\":{\"offset\":1897603,\"length\":90,\"mode\":420},\"/node_modules/quickbit-native/index.js\":{\"offset\":1897693,\"length\":4123,\"mode\":420},\"/node_modules/quickbit-native/package.json\":{\"offset\":1901816,\"length\":1018,\"mode\":420},\"/node_modules/quickbit-universal/fallback.js\":{\"offset\":1902834,\"length\":10204,\"mode\":420},\"/node_modules/quickbit-universal/index.js\":{\"offset\":1913038,\"length\":442,\"mode\":420},\"/node_modules/quickbit-universal/package.json\":{\"offset\":1913480,\"length\":908,\"mode\":420},\"/node_modules/rache/index.js\":{\"offset\":1914388,\"length\":2463,\"mode\":420},\"/node_modules/rache/package.json\":{\"offset\":1916851,\"length\":602,\"mode\":420},\"/node_modules/random-array-iterator/index.js\":{\"offset\":1917453,\"length\":1001,\"mode\":420},\"/node_modules/random-array-iterator/package.json\":{\"offset\":1918454,\"length\":700,\"mode\":420},\"/node_modules/ready-resource/index.js\":{\"offset\":1919154,\"length\":1091,\"mode\":420},\"/node_modules/ready-resource/package.json\":{\"offset\":1920245,\"length\":769,\"mode\":420},\"/node_modules/record-cache/index.js\":{\"offset\":1921014,\"length\":3668,\"mode\":420},\"/node_modules/record-cache/package.json\":{\"offset\":1924682,\"length\":612,\"mode\":420},\"/node_modules/refcounter/index.js\":{\"offset\":1925294,\"length\":611,\"mode\":420},\"/node_modules/refcounter/package.json\":{\"offset\":1925905,\"length\":451,\"mode\":420},\"/node_modules/require-addon/index.js\":{\"offset\":1926356,\"length\":262,\"mode\":420},\"/node_modules/require-addon/lib/runtime.js\":{\"offset\":1926618,\"length\":130,\"mode\":420},\"/node_modules/require-addon/lib/runtime/bare.js\":{\"offset\":1926748,\"length\":45,\"mode\":420},\"/node_modules/require-addon/lib/runtime/default.js\":{\"offset\":1926793,\"length\":260,\"mode\":420},\"/node_modules/require-addon/lib/runtime/node.js\":{\"offset\":1927053,\"length\":1073,\"mode\":420},\"/node_modules/require-addon/package.json\":{\"offset\":1928126,\"length\":1335,\"mode\":420},\"/node_modules/resolve-reject-promise/index.js\":{\"offset\":1929461,\"length\":443,\"mode\":420},\"/node_modules/resolve-reject-promise/package.json\":{\"offset\":1929904,\"length\":581,\"mode\":420},\"/node_modules/rocksdb-native/binding.js\":{\"offset\":1930485,\"length\":90,\"mode\":420},\"/node_modules/rocksdb-native/index.js\":{\"offset\":1930575,\"length\":3974,\"mode\":420},\"/node_modules/rocksdb-native/lib/batch.js\":{\"offset\":1934549,\"length\":8875,\"mode\":420},\"/node_modules/rocksdb-native/lib/column-family.js\":{\"offset\":1943424,\"length\":2066,\"mode\":420},\"/node_modules/rocksdb-native/lib/filter-policy.js\":{\"offset\":1945490,\"length\":437,\"mode\":420},\"/node_modules/rocksdb-native/lib/iterator.js\":{\"offset\":1945927,\"length\":4185,\"mode\":420},\"/node_modules/rocksdb-native/lib/snapshot.js\":{\"offset\":1950112,\"length\":503,\"mode\":420},\"/node_modules/rocksdb-native/lib/state.js\":{\"offset\":1950615,\"length\":7234,\"mode\":420},\"/node_modules/rocksdb-native/package.json\":{\"offset\":1957849,\"length\":1357,\"mode\":420},\"/node_modules/safety-catch/index.js\":{\"offset\":1959206,\"length\":506,\"mode\":420},\"/node_modules/safety-catch/package.json\":{\"offset\":1959712,\"length\":547,\"mode\":420},\"/node_modules/scope-lock/index.js\":{\"offset\":1960259,\"length\":1821,\"mode\":420},\"/node_modules/scope-lock/package.json\":{\"offset\":1962080,\"length\":611,\"mode\":420},\"/node_modules/shuffled-priority-queue/index.js\":{\"offset\":1962691,\"length\":2607,\"mode\":420},\"/node_modules/shuffled-priority-queue/package.json\":{\"offset\":1965298,\"length\":691,\"mode\":420},\"/node_modules/signal-promise/index.js\":{\"offset\":1965989,\"length\":1252,\"mode\":420},\"/node_modules/signal-promise/package.json\":{\"offset\":1967241,\"length\":503,\"mode\":420},\"/node_modules/signed-varint/index.js\":{\"offset\":1967744,\"length\":435,\"mode\":420},\"/node_modules/signed-varint/package.json\":{\"offset\":1968179,\"length\":523,\"mode\":420},\"/node_modules/simdle-native/binding.js\":{\"offset\":1968702,\"length\":90,\"mode\":420},\"/node_modules/simdle-native/index.js\":{\"offset\":1968792,\"length\":3203,\"mode\":420},\"/node_modules/simdle-native/package.json\":{\"offset\":1971995,\"length\":1008,\"mode\":420},\"/node_modules/simdle-universal/fallback.js\":{\"offset\":1973003,\"length\":5137,\"mode\":420},\"/node_modules/simdle-universal/index.js\":{\"offset\":1978140,\"length\":103,\"mode\":420},\"/node_modules/simdle-universal/package.json\":{\"offset\":1978243,\"length\":879,\"mode\":420},\"/node_modules/simdle-universal/scalar.js\":{\"offset\":1979122,\"length\":469,\"mode\":420},\"/node_modules/sodium-native/index.js\":{\"offset\":1979591,\"length\":90,\"mode\":420},\"/node_modules/sodium-native/package.json\":{\"offset\":1979681,\"length\":1093,\"mode\":420},\"/node_modules/sodium-secretstream/index.js\":{\"offset\":1980774,\"length\":2257,\"mode\":420},\"/node_modules/sodium-secretstream/package.json\":{\"offset\":1983031,\"length\":657,\"mode\":420},\"/node_modules/sodium-universal/index.js\":{\"offset\":1983688,\"length\":42,\"mode\":420},\"/node_modules/sodium-universal/package.json\":{\"offset\":1983730,\"length\":1064,\"mode\":420},\"/node_modules/speedometer/index.js\":{\"offset\":1984794,\"length\":906,\"mode\":420},\"/node_modules/speedometer/package.json\":{\"offset\":1985700,\"length\":333,\"mode\":420},\"/node_modules/streamx/index.js\":{\"offset\":1986033,\"length\":33174,\"mode\":420},\"/node_modules/streamx/package.json\":{\"offset\":2019207,\"length\":912,\"mode\":420},\"/node_modules/sub-encoder/index.js\":{\"offset\":2020119,\"length\":1968,\"mode\":420},\"/node_modules/sub-encoder/package.json\":{\"offset\":2022087,\"length\":908,\"mode\":420},\"/node_modules/text-decoder/index.js\":{\"offset\":2022995,\"length\":1378,\"mode\":420},\"/node_modules/text-decoder/lib/pass-through-decoder.js\":{\"offset\":2024373,\"length\":273,\"mode\":420},\"/node_modules/text-decoder/lib/utf8-decoder.js\":{\"offset\":2024646,\"length\":2529,\"mode\":420},\"/node_modules/text-decoder/package.json\":{\"offset\":2027175,\"length\":987,\"mode\":420},\"/node_modules/time-ordered-set/index.js\":{\"offset\":2028162,\"length\":1444,\"mode\":420},\"/node_modules/time-ordered-set/package.json\":{\"offset\":2029606,\"length\":666,\"mode\":420},\"/node_modules/timeout-refresh/browser.js\":{\"offset\":2030272,\"length\":1098,\"mode\":420},\"/node_modules/timeout-refresh/index.js\":{\"offset\":2031370,\"length\":184,\"mode\":420},\"/node_modules/timeout-refresh/node.js\":{\"offset\":2031554,\"length\":928,\"mode\":420},\"/node_modules/timeout-refresh/package.json\":{\"offset\":2032482,\"length\":619,\"mode\":420},\"/node_modules/tiny-buffer-map/index.js\":{\"offset\":2033101,\"length\":936,\"mode\":420},\"/node_modules/tiny-buffer-map/package.json\":{\"offset\":2034037,\"length\":650,\"mode\":420},\"/node_modules/udx-native/binding.js\":{\"offset\":2034687,\"length\":90,\"mode\":420},\"/node_modules/udx-native/lib/ip.js\":{\"offset\":2034777,\"length\":2179,\"mode\":420},\"/node_modules/udx-native/lib/network-interfaces.js\":{\"offset\":2036956,\"length\":1335,\"mode\":420},\"/node_modules/udx-native/lib/socket.js\":{\"offset\":2038291,\"length\":7445,\"mode\":420},\"/node_modules/udx-native/lib/stream.js\":{\"offset\":2045736,\"length\":12546,\"mode\":420},\"/node_modules/udx-native/lib/udx.js\":{\"offset\":2058282,\"length\":2842,\"mode\":420},\"/node_modules/udx-native/package.json\":{\"offset\":2061124,\"length\":1468,\"mode\":420},\"/node_modules/unordered-set/index.js\":{\"offset\":2062592,\"length\":677,\"mode\":420},\"/node_modules/unordered-set/package.json\":{\"offset\":2063269,\"length\":654,\"mode\":420},\"/node_modules/unslab/index.js\":{\"offset\":2063923,\"length\":913,\"mode\":420},\"/node_modules/unslab/package.json\":{\"offset\":2064836,\"length\":613,\"mode\":420},\"/node_modules/varint/decode.js\":{\"offset\":2065449,\"length\":508,\"mode\":420},\"/node_modules/varint/encode.js\":{\"offset\":2065957,\"length\":452,\"mode\":420},\"/node_modules/varint/index.js\":{\"offset\":2066409,\"length\":134,\"mode\":420},\"/node_modules/varint/length.js\":{\"offset\":2066543,\"length\":471,\"mode\":420},\"/node_modules/varint/package.json\":{\"offset\":2067014,\"length\":511,\"mode\":420},\"/node_modules/which-runtime/index.js\":{\"offset\":2067525,\"length\":1222,\"mode\":420},\"/node_modules/which-runtime/package.json\":{\"offset\":2068747,\"length\":602,\"mode\":420},\"/node_modules/xache/index.js\":{\"offset\":2069349,\"length\":2378,\"mode\":420},\"/node_modules/xache/package.json\":{\"offset\":2071727,\"length\":584,\"mode\":420},\"/node_modules/z32/index.js\":{\"offset\":2072311,\"length\":2654,\"mode\":420},\"/node_modules/z32/package.json\":{\"offset\":2074965,\"length\":701,\"mode\":420},\"/package.json\":{\"offset\":2075666,\"length\":2803,\"mode\":420}}}\nexport class AbortSignal {\n  constructor() {\n    this._aborted = false;\n    this._listeners = [];\n  }\n\n  get aborted() {\n    return this._aborted;\n  }\n\n  addEventListener(type, listener) {\n    if (type === 'abort') {\n      this._listeners.push(listener);\n\n      // If already aborted, call the listener immediately\n      if (this._aborted) {\n        try {\n          listener();\n        } catch (e) {\n          console.error('Error in abort listener:', e);\n        }\n      }\n    }\n  }\n\n  removeEventListener(type, listener) {\n    if (type === 'abort') {\n      const index = this._listeners.indexOf(listener);\n      if (index !== -1) {\n        this._listeners.splice(index, 1);\n      }\n    }\n  }\n\n  // Internal method to trigger abort\n  _abort() {\n    if (this._aborted) return;\n\n    this._aborted = true;\n\n    // Call all listeners\n    for (const listener of this._listeners) {\n      try {\n        listener();\n      } catch (e) {\n        console.error('Error in abort listener:', e);\n      }\n    }\n\n    // Clear listeners after calling them\n    this._listeners = [];\n  }\n}\n\nexport class AbortController {\n  constructor() {\n    this._signal = new AbortSignal();\n  }\n\n  get signal() {\n    return this._signal;\n  }\n\n  abort() {\n    this._signal._abort();\n  }\n}\n// backend.mjs - Modified to fix UserBase initialization issue\n\nimport RPC from 'bare-rpc'\nimport fs from 'bare-fs'\nimport Corestore from 'corestore'\nimport bip39 from \"bip39\"\nimport b4a from \"b4a\"\nimport Hypercore from 'hypercore'\nimport Hyperblobs from 'hyperblobs'\nimport Hyperswarm from 'hyperswarm'\nconst { IPC } = BareKit\nimport UserBase from './userbase/userbase.mjs'\nimport RoomBase from './roombase/roombase.mjs'\nimport Path from \"bare-path\"\nimport { generateUUID } from './utils.mjs'\nimport { AbortSignal, AbortController } from './AbortController.mjs'\n\nconsole.error\n  (Bare, \"init\")\n// const path =\n//   Bare.argv[0] === 'android'\n//     ? '/data/data/to.holepunch.bare.expo/autopass-example'\n//     : './tmp/autopass-example/'\n\nlet roomBlobStores = {};\nlet roomBlobCores = {};\nlet roomBlobSwarms = {}\nconst activeDownloads = new Map();\nconst getDataPath = () => {\n  // Get instance identifier - can be passed as a launch parameter or from env\n  const instanceId = Math.ceil(Math.random() * 100)\n\n  console.log('DEVICE:', Bare.argv[0])\n  // Base path depends on platform\n  const basePath = Bare.argv[0] === 'android'\n    ? '/data/data/to.holepunch.bare.expo/autopass-example'\n    : './tmp/autopass-example';\n\n  // return basePath + '/' + Bare.pid + '/';\n  return basePath\n  // Append instance ID if provided\n  return instanceId ? `${basePath}-${instanceId}` : basePath;\n};\n\nconst path = getDataPath();\nconst userBasePath = path + '/userbase/'\nconst roomBasePath = path + '/roombase/'\nlet trying;\n\n\nlet seedProvided = false;\n// Global variables\nlet userCorestore;\nlet userBase;\nlet roomBases = {};\nlet roomCorestores = {}\n\nlet isBackendInitialized = false;\n// Create necessary directories\nif (!fs.existsSync(path)) {\n  fs.mkdirSync(path, { recursive: true })\n}\nif (!fs.existsSync(userBasePath)) {\n  fs.mkdirSync(userBasePath, { recursive: true })\n}\nif (!fs.existsSync(roomBasePath)) {\n  fs.mkdirSync(roomBasePath, { recursive: true })\n}\n\n\nconst genSeed = () => {\n  const words = []\n  for (let i = 0; i < 20; i++) {\n    const mnem = bip39.generateMnemonic()\n    const word = mnem.split(' ')?.[0]\n    words.push(word)\n  }\n  return words\n}\n\nconst sendSeed = () => {\n  const seed = genSeed()\n  const req = rpc.request('seedGenerated')\n  req.send(JSON.stringify(seed))\n}\n\n// Function to initialize UserBase if not already initialized\nconst initializeUserBase = async (forceSeedRequired = true) => {\n  try {\n    // If UserBase is already initialized and ready, just return it\n    if (userBase) {\n      await userBase.ready();\n      return userBase;\n    }\n\n    // If we require a seed and haven't gotten one yet, don't initialize\n    if (forceSeedRequired && !seedProvided) {\n      console.log('Seed required but not provided yet');\n      return null;\n    }\n    // Check if user directory exists\n    if (!fs.existsSync(userBasePath)) {\n      console.log('User directory does not exist');\n      return null;\n    }\n\n    // Initialize corestore if not already done\n    if (!userCorestore) {\n      userCorestore = new Corestore(userBasePath);\n      await userCorestore.ready();\n    }\n\n    // Create UserBase instance\n    userBase = new UserBase(userCorestore);\n    await userBase.ready();\n\n    return userBase;\n  } catch (error) {\n    console.error('Error initializing UserBase:', error);\n    return null;\n  }\n}\n\nconst rpc = new RPC(IPC, (req, error) => {\n  console.log('Received RPC request:', req.command)\n\n  if (req.command === 'teardown') {\n    teardown()\n  }\n\n\n  if (req.command === 'resetAppState') {\n    resetAppState();\n  }\n\n  // Add this to your RPC command handlers:\n  if (req.command === 'reinitialize') {\n    console.info('REINIT')\n    reinitializeBackend();\n  }\n\n  if (req.command === 'generateRoomInvite') {\n    try {\n      const data = b4a.toString(req.data);\n      const parsedData = JSON.parse(data);\n      console.log('Received generateRoomInvite request for roomId:', parsedData.roomId);\n\n      if (!parsedData.roomId) {\n        console.error('Missing roomId in generateRoomInvite request');\n        const response = {\n          success: false,\n          error: 'Missing roomId parameter'\n        };\n        const errorReq = rpc.request('roomInviteGenerated');\n        errorReq.send(JSON.stringify(response));\n        return;\n      }\n\n      generateRoomInvite(parsedData.roomId);\n    } catch (error) {\n      console.error('Error parsing generateRoomInvite request:', error);\n      const response = {\n        success: false,\n        error: 'Invalid request format'\n      };\n      const errorReq = rpc.request('roomInviteGenerated');\n      errorReq.send(JSON.stringify(response));\n    }\n  }\n\n  if (req.command === 'generateSeed') {\n    sendSeed()\n  }\n\n  if (req.command === 'checkUserExists') {\n    checkExistingUser()\n  }\n\n  if (req.command === 'confirmSeed') {\n    const data = b4a.toString(req.data)\n    const parsedData = JSON.parse(data)\n    createNewAccount(parsedData)\n  }\n\n  if (req.command === 'updateUserProfile') {\n    const data = b4a.toString(req.data)\n    const parsedData = JSON.parse(data)\n    updateUserProfile(parsedData)\n  }\n\n  // Room-related commands\n  if (req.command === 'createRoom') {\n    const data = b4a.toString(req.data)\n    const parsedData = JSON.parse(data)\n    createRoom(parsedData)\n  }\n\n  // Add this to the RPC handler in backend.mjs\n  if (req.command === 'joinRoomByInvite') {\n    const data = b4a.toString(req.data);\n    const parsedData = JSON.parse(data);\n    joinRoomByInvite(parsedData);\n  }\n\n  if (req.command === 'getRooms') {\n    getRooms()\n  }\n\n  if (req.command === 'joinRoom') {\n    const data = b4a.toString(req.data)\n    const parsedData = JSON.parse(data)\n    joinRoom(parsedData.roomId)\n  }\n\n  if (req.command === 'leaveRoom') {\n    const data = b4a.toString(req.data)\n    const parsedData = JSON.parse(data)\n    leaveRoom(parsedData.roomId)\n  }\n\n  if (req.command === 'sendMessage') {\n    const data = b4a.toString(req.data)\n    const parsedData = JSON.parse(data)\n    sendMessage(parsedData)\n  }\n\n  if (req.command === 'uploadFile') {\n    const data = b4a.toString(req.data);\n    // Call the async handler function\n    handleFileUpload(data);\n  }\n\n  if (req.command === 'getRoomFiles') {\n    const data = b4a.toString(req.data);\n    const parsedData = JSON.parse(data);\n    getRoomFiles(parsedData);\n  }\n\n  if (req.command === 'fileDownloadProgress') {\n    try {\n      const data = b4a.toString(req.data);\n      const parsedData = JSON.parse(data);\n\n      // Forward the progress event to the client, including attachmentKey if present\n      const progressReq = rpc.request('fileDownloadProgress');\n      progressReq.send(JSON.stringify(parsedData));\n    } catch (e) {\n      console.error('Error handling download progress event:', e);\n    }\n  }\n\n  // File download handler\n  if (req.command === 'downloadFile') {\n    try {\n      const data = b4a.toString(req.data);\n      handleFileDownload(data);\n    } catch (e) {\n      console.error('Error handling downloadFile command:', e);\n    }\n  }\n\n  if (req.command === 'cancelDownload') {\n    try {\n      const data = b4a.toString(req.data);\n      const parsedData = JSON.parse(data);\n      handleCancelDownload(parsedData);\n    } catch (e) {\n      console.error('Error handling cancelDownload command:', e);\n    }\n  }\n\n  if (req.command === 'loadMoreMessages') {\n    const data = b4a.toString(req.data);\n    const parsedData = JSON.parse(data);\n    loadMoreMessages(parsedData);\n  }\n\n  if (req.command === 'olderMessages') {\n    try {\n      const data = b4a.toString(req.data);\n      const parsedData = JSON.parse(data);\n      console.log('Older messages received:', parsedData);\n\n      if (updateMessages && Array.isArray(parsedData.messages)) {\n        // These are older messages, so we want to append them\n        updateMessages(parsedData.messages, false);\n      }\n    } catch (e) {\n      console.error('Error handling olderMessages:', e);\n    }\n  }\n\n\n\n})\n\nconst updateUserProfile = async (profileData) => {\n  try {\n    // First ensure UserBase is initialized\n    const ub = await initializeUserBase();\n    if (!ub) {\n      console.error('UserBase not initialized');\n      const response = {\n        success: false,\n        error: 'UserBase not initialized'\n      };\n      const req = rpc.request('profileUpdated');\n      req.send(JSON.stringify(response));\n      return response;\n    }\n\n    // Update the user profile\n    const result = await ub.updateUserProfile(profileData);\n\n    if (result.success) {\n      // Get updated user data\n      const updatedUser = await ub.getUserData();\n\n      // Send response back to the client\n      const response = {\n        success: true,\n        user: updatedUser\n      };\n      const req = rpc.request('profileUpdated');\n      req.send(JSON.stringify(response));\n      return response;\n    } else {\n      const response = {\n        success: false,\n        error: result.error || 'Failed to update profile'\n      };\n      const req = rpc.request('profileUpdated');\n      req.send(JSON.stringify(response));\n      return response;\n    }\n  } catch (err) {\n    console.error('Error updating user profile:', err);\n    const response = {\n      success: false,\n      error: err.message || 'Unknown error updating profile'\n    };\n    const req = rpc.request('profileUpdated');\n    req.send(JSON.stringify(response));\n    return response;\n  }\n}\n\nconst createNewAccount = async (seed) => {\n  if (userCorestore) {\n    await userCorestore?.close?.()\n  }\n  if (userBase) return { exists: true }\n\n  if (hasAccount()) {\n    console.error('HAS ACCOUNT')\n    return { exists: true }\n  }\n\n  if (!seed || seed.length == 0) {\n    return { invalidSeed: true }\n  }\n\n  seedProvided = true; // Set this flag when seed is provided\n\n\n  try {\n    // Create directory if it doesn't exist\n    if (!fs.existsSync(userBasePath)) {\n      fs.mkdirSync(userBasePath, { recursive: true })\n    }\n\n    // Initialize corestore\n    userCorestore = new Corestore(userBasePath)\n    await userCorestore.ready()\n\n    // Create userbase\n    userBase = new UserBase(userCorestore, { userSeed: seed })\n    await userBase.ready()\n\n    const user = await userBase.getUserData()\n    const req = rpc.request('userInfo')\n    req.send(JSON.stringify(user))\n\n    // Return success with user ID\n    return {\n      success: true,\n      user\n    }\n  } catch (err) {\n    console.error('Error creating account:', err)\n    return { success: false, error: err.message }\n  }\n}\n\nconst hasAccount = () => {\n  const files = fs.readdirSync(userBasePath);\n  if (files.length === 0) {\n    return false;\n  }\n  return true\n}\n\nconst checkExistingUser = async () => {\n  try {\n    // Check if user directory exists\n    if (!fs.existsSync(userBasePath)) {\n      console.log('User directory does not exist, sending No User response');\n      const req = rpc.request('userCheckResult');\n      req.send(JSON.stringify({ exists: false }));\n      return;\n    }\n\n    // Check if directory is empty\n    const files = fs.readdirSync(userBasePath);\n    if (files.length === 0) {\n      console.log('User directory exists but is empty, sending No User response');\n      const req = rpc.request('userCheckResult');\n      req.send(JSON.stringify({ exists: false }));\n      return;\n    }\n\n    // If userBase already initialized, use it\n    if (userBase) {\n      try {\n        await userBase.ready();\n        const userData = await userBase.getUserData();\n        if (userData) {\n          console.log('Found existing user data:', userData.id);\n          const req = rpc.request('userCheckResult');\n          req.send(JSON.stringify({ exists: true, user: userData }));\n          return;\n        } else {\n          console.log('No user data found despite directory existing');\n          const req = rpc.request('userCheckResult');\n          req.send(JSON.stringify({ exists: false }));\n          return;\n        }\n      } catch (err) {\n        console.error('Error getting user data from initialized userBase:', err);\n        // Fall through to re-initialization attempt\n      }\n    }\n\n    // Otherwise, initialize corestore and userbase\n    try {\n      console.log('Initializing corestore and userbase...');\n      userCorestore = new Corestore(userBasePath);\n      await userCorestore.ready();\n\n      userBase = new UserBase(userCorestore);\n      await userBase.ready();\n\n      const userData = await userBase.getUserData();\n\n      if (userData && userData.id) {\n        console.log('Successfully loaded existing user:', userData.id);\n        const req = rpc.request('userCheckResult');\n        req.send(JSON.stringify({ exists: true, user: userData }));\n      } else {\n        console.log('No valid user data found, treating as new user');\n        const req = rpc.request('userCheckResult');\n        req.send(JSON.stringify({ exists: false }));\n\n        // Clean up incomplete user data\n        if (userBase) {\n          await userBase.close().catch(e => console.error('Error closing userBase:', e));\n          userBase = null;\n        }\n        if (userCorestore) {\n          await userCorestore.close().catch(e => console.error('Error closing userCorestore:', e));\n          userCorestore = null;\n        }\n      }\n    } catch (err) {\n      console.error('Error loading existing user:', err);\n      const req = rpc.request('userCheckResult');\n      req.send(JSON.stringify({\n        exists: false,\n        error: err.message || 'Failed to load user data'\n      }));\n\n      // Clean up on error\n      if (userBase) {\n        await userBase.close().catch(() => { });\n        userBase = null;\n      }\n      if (userCorestore) {\n        await userCorestore.close().catch(() => { });\n        userCorestore = null;\n      }\n    }\n  } catch (error) {\n    console.error('Error in checkExistingUser:', error);\n    const req = rpc.request('userCheckResult');\n    req.send(JSON.stringify({\n      exists: false,\n      error: error.message || 'Unknown error checking user'\n    }));\n  }\n};\n\n/************************* \n * ROOM RELATED FUNCTIONS\n *************************/\n\n\n\n// Replace the existing createRoom function in backend.mjs with this improved version\nconst createRoom = async (roomData) => {\n  try {\n    console.log('Creating room with data:', roomData);\n\n    // First ensure UserBase is initialized\n    const ub = await initializeUserBase();\n    if (!ub) {\n      console.error('UserBase not initialized');\n      throw new Error('UserBase not initialized');\n    }\n\n    await ub.ready();\n    const user = await ub.getUserData();\n\n    if (!user) {\n      console.error('User not found');\n      throw new Error('User not found');\n    }\n\n    // Generate a unique room ID using our utility function\n    const roomId = generateUUID();\n    console.log(`Creating room: ${roomId} (${roomData.name})`);\n\n    // Create room directory\n    const roomDir = `${roomBasePath}/${roomId}`;\n    if (!fs.existsSync(roomDir)) {\n      fs.mkdirSync(roomDir, { recursive: true });\n    }\n\n    // Create corestore for the room\n    const roomCorestore = new Corestore(roomDir);\n    await roomCorestore.ready();\n\n    // Set up blob core and store for attachments\n    const blobCore = new Hypercore(roomDir + '/blobs');\n    await blobCore.ready();\n\n    const blobStore = new Hyperblobs(blobCore);\n    await blobStore.ready();\n\n    const blobSwarm = new Hyperswarm();\n\n    // Join the swarm with the blob core's key\n    const blobTopic = await blobSwarm.join(blobCore.key);\n\n    blobSwarm.flush()\n\n    // Replicate blob core when connected to peers\n    blobSwarm.on('connection', (connection, peerInfo) => {\n      console.log(`Blob replication connection from peer: ${peerInfo.publicKey.toString('hex').substring(0, 8)}`);\n      console.log('a peer is requesting our blob file')\n      blobCore.replicate(connection);\n    });\n\n    // Store blob references in our maps\n    roomBlobCores[roomId] = blobCore;\n    roomBlobStores[roomId] = blobStore;\n    roomBlobSwarms[roomId] = blobSwarm\n    // Create the room\n    const room = new RoomBase(roomCorestore, {\n      roomId: roomId,\n      roomName: roomData.name,\n      blobCore,\n      blobStore\n    });\n\n    await room.ready();\n\n    // Store the room instances\n    roomCorestores[roomId] = roomCorestore;\n    roomBases[roomId] = room;\n\n    // Create an invite for others to join\n    const invite = await room.createInvite();\n    console.log(`Created invite for room ${roomId}: ${invite.substring(0, 10)}...`);\n\n    // Create room object for response\n    const newRoom = {\n      id: roomId,\n      name: roomData.name,\n      description: roomData.description || `A room created by ${user.name}`,\n      createdAt: Date.now(),\n      invite: invite,\n      key: room.key.toString('hex'),\n      encryptionKey: room.encryptionKey.toString('hex')\n    };\n\n    const roomBlobCoreKey = room.blobCore?.key?.toString('hex') || null;\n    // Set up message listener\n    room.on('new-message', (msg) => {\n      // Format the message\n      const formattedMessage = {\n        id: msg.id,\n        roomId: roomId,\n        content: msg.content,\n        sender: msg.sender,\n        timestamp: msg.timestamp,\n        system: msg.system || false,\n        attachments: msg.attachments || \"[]\",\n        hasAttachments: msg.hasAttachments,\n        roomBlobCoreKey: roomBlobCoreKey\n      };\n\n      console.log(`New message in room ${roomId}:`, formattedMessage.id);\n\n      // Send to client\n      const req = rpc.request('newMessage');\n      req.send(JSON.stringify({\n        success: true,\n        message: formattedMessage\n      }));\n    });\n    room._hasMessageListener = true;\n\n    // Add this room to the user's rooms list\n    let userRooms = [];\n\n    // Handle different formats of user.rooms\n    if (user.rooms) {\n      if (typeof user.rooms === 'string') {\n        try {\n          userRooms = JSON.parse(user.rooms);\n          if (!Array.isArray(userRooms)) {\n            console.error('user.rooms parsed to non-array:', userRooms);\n            userRooms = [];\n          }\n        } catch (e) {\n          console.error('Error parsing user.rooms:', e);\n          userRooms = [];\n        }\n      } else if (Array.isArray(user.rooms)) {\n        userRooms = [...user.rooms];\n      }\n    }\n\n    console.log('Current user rooms:', userRooms);\n    userRooms.push(newRoom);\n    console.log(`Added room ${roomId} to user's rooms. Total rooms: ${userRooms.length}`);\n\n    // Update the user profile with the new rooms list\n    console.log('Updating user profile with new rooms list');\n    const updatedRooms = JSON.stringify(userRooms);\n    const updateResult = await ub.updateUserProfile({\n      rooms: updatedRooms\n    });\n\n    if (!updateResult.success) {\n      console.error('Error updating user profile:', updateResult.error);\n    }\n\n    // Get updated user data and confirm the update worked\n    const updatedUser = await ub.getUserData();\n    console.log('Updated user data:', updatedUser);\n\n    // Double check rooms were saved\n    let savedRooms = [];\n    if (typeof updatedUser.rooms === 'string') {\n      try {\n        savedRooms = JSON.parse(updatedUser.rooms);\n      } catch (e) {\n        console.error('Error parsing updated user.rooms:', e);\n      }\n    } else if (Array.isArray(updatedUser.rooms)) {\n      savedRooms = updatedUser.rooms;\n    }\n\n    console.log(`User now has ${savedRooms.length} rooms saved`);\n\n    // Send updated user info back to client\n    const userReq = rpc.request('userInfo');\n    userReq.send(JSON.stringify(updatedUser));\n\n    // Also send room list update\n    const roomsReq = rpc.request('roomsList');\n    roomsReq.send(JSON.stringify({\n      success: true,\n      rooms: savedRooms\n    }));\n\n    // Send room creation response\n    const response = {\n      success: true,\n      room: newRoom\n    };\n\n    const req = rpc.request('roomCreated');\n    req.send(JSON.stringify(response));\n    console.log(`Room ${roomId} created successfully, response sent to client`);\n\n    return response;\n  } catch (error) {\n    console.error('Error creating room:', error);\n    const response = {\n      success: false,\n      error: error.message || 'Unknown error creating room'\n    };\n\n    const req = rpc.request('roomCreated');\n    req.send(JSON.stringify(response));\n    return response;\n  }\n};\n\n\nconst initializeUserRooms = async () => {\n  if (!userBase) return;\n\n  try {\n    await userBase.ready();\n    const userData = await userBase.getUserData();\n\n    if (!userData.rooms || !Array.isArray(userData.rooms) || userData.rooms.length === 0) {\n      console.log('No rooms to initialize');\n      return;\n    }\n\n    console.log(`Initializing ${userData.rooms.length} rooms for user`);\n\n    const initializedRooms = [];\n\n    for (const roomData of userData.rooms) {\n      try {\n        // Skip if already initialized\n        if (roomBases[roomData.id]) {\n          initializedRooms.push(roomData.id);\n          continue;\n        }\n\n        // Initialize the room\n        const room = await initializeRoom(roomData);\n\n        if (room) {\n          initializedRooms.push(roomData.id);\n\n          // Update message count if possible\n          try {\n            await room.getMessageCount();\n          } catch (countErr) {\n            console.error(`Error getting message count for room ${roomData.id}:`, countErr);\n          }\n        }\n      } catch (roomErr) {\n        console.error(`Error initializing room ${roomData.id}:`, roomErr);\n      }\n    }\n\n    console.log(`Initialized ${initializedRooms.length} rooms: ${initializedRooms.join(', ')}`);\n  } catch (error) {\n    console.error('Error initializing user rooms:', error);\n  }\n};\n\n// Initialize an existing room\nconst initializeRoom = async (roomData) => {\n  try {\n    // roomData can be either a string roomId or a room object\n    const roomId = typeof roomData === 'string' ? roomData : roomData.id;\n    console.log(`Initializing room: ${roomId}`);\n\n    // If the room is already initialized, return it\n    if (roomBases[roomId]) {\n      console.log(`Room ${roomId} already initialized`);\n      return roomBases[roomId];\n    }\n\n    const roomDir = `${roomBasePath}/${roomId}`;\n\n    // If the room directory doesn't exist, create it\n    if (!fs.existsSync(roomDir)) {\n      console.log(`Room directory does not exist, creating: ${roomDir}`);\n      fs.mkdirSync(roomDir, { recursive: true });\n    }\n\n    // Create corestore for the room\n    const roomCorestore = new Corestore(roomDir);\n    await roomCorestore.ready();\n\n    // Set up blob core and store for attachments\n    const blobCore = new Hypercore(roomDir + '/blobs');\n    await blobCore.ready();\n\n    const blobStore = new Hyperblobs(blobCore);\n    await blobStore.ready();\n\n    if (!roomBlobSwarms[roomId]) {\n\n      const blobSwarm = new Hyperswarm();\n\n      // Join the swarm with the blob core's key\n      const blobTopic = await blobSwarm.join(blobCore.key);\n\n      blobSwarm.flush()\n\n      // Replicate blob core when connected to peers\n      blobSwarm.on('connection', (connection, peerInfo) => {\n        console.log(`Blob replication connection from peer: ${peerInfo.publicKey.toString('hex').substring(0, 8)}`);\n        console.log('a peer is requesting our blob file')\n        blobCore.replicate(connection);\n      });\n\n      roomBlobSwarms[roomId] = blobSwarm\n    }\n    roomBlobCores[roomId] = blobCore;\n    roomBlobStores[roomId] = blobStore;\n\n    // Create the room instance - use stored key and encryption key if available\n    let roomOptions = {\n      roomId: roomId,\n      blobCore,\n      blobStore\n    };\n\n    // If we have full room data (not just an ID)\n    if (typeof roomData === 'object') {\n      roomOptions.roomName = roomData.name;\n\n      // If we have the encryption key and room key, use them\n      if (roomData.key && roomData.encryptionKey) {\n        console.log(`Using stored keys for room ${roomId}`);\n        roomOptions.key = Buffer.from(roomData.key, 'hex');\n        roomOptions.encryptionKey = Buffer.from(roomData.encryptionKey, 'hex');\n      }\n    }\n\n    // Create the room instance\n    console.log(`Creating RoomBase instance for ${roomId}`, roomOptions);\n    const room = new RoomBase(roomCorestore, roomOptions);\n    await room.ready();\n    console.log(`Room ${roomId} is ready`);\n    const roomBlobCoreKey = room.blobCore?.key?.toString('hex') || null;\n\n    // Set up message listener if not already set\n    if (!room._hasMessageListener) {\n      room.on('new-message', (msg) => {\n        // Format the message\n        const formattedMessage = {\n          id: msg.id,\n          roomId: roomId, // Make sure roomId is included\n          content: msg.content,\n          sender: msg.sender,\n          timestamp: msg.timestamp,\n          system: msg.system || false,\n          attachments: msg.attachments || \"[]\",\n          hasAttachments: msg.hasAttachments,\n          roomBlobCoreKey\n        };\n\n        console.log(`New message in room ${roomId}:`, formattedMessage.id);\n\n        // Send to client\n        const req = rpc.request('newMessage');\n        req.send(JSON.stringify({\n          success: true,\n          message: formattedMessage\n        }));\n      });\n\n      room._hasMessageListener = true;\n      console.log(`Message listener set up for room ${roomId}`);\n    }\n\n    // Store the instances\n    roomCorestores[roomId] = roomCorestore;\n    roomBases[roomId] = room;\n\n    console.log(`Room ${roomId} initialized successfully`);\n    return room;\n  } catch (error) {\n    console.error(`Error initializing room:`, error);\n    return null;\n  }\n};\n\n\n// Also update the getMessagesFromRoom function for better message formatting:\nconst getMessagesFromRoom = async (room, roomId, options = {}) => {\n  const { limit = 50, reverse = true, before = null, after = null } = options;\n\n  try {\n    // Build query options\n    const queryOptions = {\n      limit,\n      reverse\n    };\n\n    // Add timestamp filters if provided\n    if (before !== null) {\n      queryOptions.lt = { timestamp: before };\n    }\n\n    if (after !== null) {\n      queryOptions.gt = { timestamp: after };\n    }\n\n    console.log(`Getting messages for room ${roomId} with options:`, queryOptions);\n\n    // Get messages\n    const messageStream = room.getMessages(queryOptions);\n    let messages = [];\n\n    // Handle different return types (promise vs stream)\n    if (messageStream.then) {\n      // It's a promise that resolves to an array\n      messages = await messageStream;\n    } else if (messageStream.on) {\n      // It's a Node.js stream\n      messages = await new Promise((resolve, reject) => {\n        const results = [];\n        messageStream.on('data', msg => results.push(msg));\n        messageStream.on('end', () => resolve(results));\n        messageStream.on('error', err => {\n          console.error('Error in message stream:', err);\n          resolve(results); // Resolve with partial results on error\n        });\n      });\n    } else if (Array.isArray(messageStream)) {\n      // It's already an array\n      messages = messageStream;\n    }\n\n    console.log(`Retrieved ${messages.length} messages from room ${roomId}`);\n\n    const roomBlobCoreKey = room.blobCore?.key?.toString('hex') || null;\n    // Format messages with roomId\n    const formattedMessages = messages.map(msg => ({\n      id: msg.id || `msg_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,\n      roomId: roomId,\n      content: msg.content || \"\",\n      sender: msg.sender || \"Unknown\",\n      timestamp: msg.timestamp || Date.now(),\n      system: msg.system || false,\n      // Include attachments if present\n      hasAttachments: msg.hasAttachments || false,\n      attachments: msg.attachments || null,\n      roomBlobCoreKey\n    }));\n\n    console.log(`Formatted ${formattedMessages.length} messages with roomId ${roomId}`);\n    return formattedMessages;\n\n  } catch (error) {\n    console.error('Error getting messages from room:', error);\n    return [];\n  }\n};\n\n// Also update the joinRoom function for better error handling:\nconst joinRoom = async (roomId) => {\n  try {\n    console.log(`Joining room: ${roomId}`);\n\n    if (!roomId) {\n      throw new Error('No roomId provided');\n    }\n\n    // Initialize the room if needed\n    let room = roomBases[roomId];\n    if (!room) {\n      console.log(`Room ${roomId} not initialized yet, looking up room data...`);\n\n      // Find the room data in user's rooms\n      const ub = await initializeUserBase();\n      if (!ub) {\n        throw new Error('UserBase not initialized');\n      }\n\n      await ub.ready();\n      const userData = await ub.getUserData();\n\n      if (!userData || !userData.rooms) {\n        throw new Error('User data not available or no rooms found');\n      }\n\n      // Find the room data\n      let roomData = null;\n      if (typeof userData.rooms === 'string') {\n        try {\n          const parsedRooms = JSON.parse(userData.rooms);\n          roomData = parsedRooms.find(r => r.id === roomId);\n        } catch (e) {\n          console.error('Error parsing rooms from user data:', e);\n        }\n      } else if (Array.isArray(userData.rooms)) {\n        roomData = userData.rooms.find(r => r.id === roomId);\n      }\n\n      if (!roomData) {\n        throw new Error(`Room ${roomId} not found in user data`);\n      }\n\n      console.log(`Found room data:`, roomData);\n      room = await initializeRoom(roomData);\n      if (!room) {\n        throw new Error(`Failed to initialize room: ${roomId}`);\n      }\n    }\n\n    await room.ready();\n    console.log(`Room ${roomId} is ready`);\n\n    // Get recent messages\n    const messages = await getMessagesFromRoom(room, roomId, { limit: 50 });\n    console.log(`Retrieved ${messages.length} messages from room ${roomId}`);\n\n    // Send response with messages\n    const response = {\n      success: true,\n      roomId,\n      messages,\n    };\n\n    console.log(`Sending ${messages.length} messages to client for room ${roomId}`);\n    const req = rpc.request('roomMessages');\n    req.send(JSON.stringify(response));\n\n  } catch (error) {\n    console.error('Error joining room:', error);\n    const response = {\n      success: false,\n      error: error.message || 'Unknown error joining room',\n      roomId,\n      messages: []\n    };\n\n    const req = rpc.request('roomMessages');\n    req.send(JSON.stringify(response));\n  }\n};\n// Leave a room (cleanup)\nconst leaveRoom = async (roomId) => {\n  try {\n    // Nothing to do if the room isn't initialized\n    if (!roomBases[roomId]) {\n      return;\n    }\n\n    // For now, we'll keep the room initialized since we might need it again\n  } catch (error) {\n    console.error('Error leaving room:', error);\n  }\n};\n\n// Send a message to a room\nconst sendMessage = async (messageData) => {\n  try {\n    const roomId = messageData.roomId;\n\n    // Make sure the room is initialized\n    let room = roomBases[roomId];\n    if (!room) {\n      room = await initializeRoom(roomId);\n      if (!room) {\n        throw new Error(`Failed to initialize room: ${roomId}`);\n      }\n    }\n\n    await room.ready();\n\n    // Create a unique message ID if not provided\n    const messageId = messageData.id || `${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n\n    // Format the message\n    const message = {\n      id: messageId,\n      content: messageData.content,\n      sender: messageData.sender,\n      timestamp: messageData.timestamp || Date.now(),\n      system: Boolean(messageData.system), // Ensure it's a boolean\n    };\n\n    // Send the message - this will trigger the 'new-message' event we're listening for\n    await room.sendMessage(message);\n\n    // Add roomId to the message\n    message.roomId = roomId;\n\n    const response = {\n      success: true,\n      message: message\n    };\n\n    const req = rpc.request('newMessage');\n    req.send(JSON.stringify(response));\n\n  } catch (error) {\n    console.error('Error sending message:', error);\n    const response = {\n      success: false,\n      error: error.message || 'Unknown error sending message'\n    };\n\n    const req = rpc.request('newMessage');\n    req.send(JSON.stringify(response));\n  }\n};\n\n\nconst loadMoreMessages = async (params) => {\n  const { roomId, before, limit = 20 } = params;\n\n  try {\n    // Initialize the room if needed\n    let room = roomBases[roomId];\n    if (!room) {\n      // Find the room data in user's rooms\n      const ub = await initializeUserBase();\n      await ub.ready();\n      const userData = await ub.getUserData();\n\n      const roomData = userData.rooms.find(r => r.id === roomId);\n      if (!roomData) {\n        throw new Error(`Room ${roomId} not found in user data`);\n      }\n\n      room = await initializeRoom(roomData);\n      if (!room) {\n        throw new Error(`Failed to initialize room: ${roomId}`);\n      }\n    }\n\n    await room.ready();\n\n    // Get older messages\n    const messages = await getMessagesFromRoom(room, roomId, {\n      limit,\n      reverse: true,\n      before\n    });\n\n    // Send response\n    const response = {\n      success: true,\n      roomId,\n      messages,\n      isOlderMessages: true // Flag to indicate these are older messages\n    };\n\n    const req = rpc.request('olderMessages');\n    req.send(JSON.stringify(response));\n\n  } catch (error) {\n    console.error('Error loading more messages:', error);\n    const response = {\n      success: false,\n      error: error.message || 'Unknown error loading more messages',\n      roomId,\n      messages: []\n    };\n\n    const req = rpc.request('olderMessages');\n    req.send(JSON.stringify(response));\n  }\n};\n\nconst getRoomFiles = async (params) => {\n  const { roomId, limit = 50, before = null } = params;\n\n  try {\n    const room = roomBases[roomId];\n    if (!room) {\n      throw new Error(`Room ${roomId} not found`);\n    }\n\n    const files = await room.getFiles();\n\n    // Sort files by timestamp in descending order\n    const sortedFiles = files.sort((a, b) => b.timestamp - a.timestamp);\n\n    // Apply optional limit and before timestamp\n    const filteredFiles = before\n      ? sortedFiles.filter(file => file.timestamp < before).slice(0, limit)\n      : sortedFiles.slice(0, limit);\n\n    const response = {\n      success: true,\n      roomId,\n      files: filteredFiles,\n      hasMore: sortedFiles.length > filteredFiles.length\n    };\n\n    const req = rpc.request('roomFiles');\n    req.send(JSON.stringify(response));\n\n  } catch (error) {\n    console.error(`Error getting files for room ${roomId}:`, error);\n    const response = {\n      success: false,\n      roomId,\n      error: error.message,\n      files: []\n    };\n\n    const req = rpc.request('roomFiles');\n    req.send(JSON.stringify(response));\n  }\n};\n// Get all rooms the user is part of\nconst getRooms = async () => {\n  try {\n    // First ensure UserBase is initialized\n    const ub = await initializeUserBase();\n    if (!ub) {\n      throw new Error('UserBase not initialized');\n    }\n\n    await ub.ready();\n    const user = await ub.getUserData();\n\n    let rooms = [];\n\n    // If user has rooms data, use it\n    if (user.rooms && Array.isArray(user.rooms)) {\n      rooms = user.rooms;\n    }\n\n    // Initialize any rooms that aren't already loaded\n    for (const room of rooms) {\n      if (!roomBases[room.id]) {\n        await initializeRoom(room.id);\n      }\n    }\n\n    // Send response\n    const response = {\n      success: true,\n      rooms: rooms\n    };\n\n    const req = rpc.request('roomsList');\n    req.send(JSON.stringify(response));\n\n  } catch (error) {\n    console.error('Error getting rooms:', error);\n    const response = {\n      success: false,\n      error: error.message || 'Unknown error getting rooms',\n      rooms: []\n    };\n\n    const req = rpc.request('roomsList');\n    req.send(JSON.stringify(response));\n  }\n};\n\n\n// Clean up all resources properly\n// In backend.mjs, replace the cleanupResources function with this robust version:\n\nconst cleanupResources = async () => {\n  console.log('Cleaning up all resources...');\n\n  // Wrap entire cleanup in try/catch to ensure it continues even if parts fail\n  try {\n    // Close all room instances\n    const roomIds = Object.keys(roomBases);\n    console.log(`Closing ${roomIds.length} rooms...`);\n\n    for (const roomId of roomIds) {\n      try {\n        // Close blob resources first\n        if (roomBlobStores[roomId]) {\n          console.log(`Closing blobstore for room: ${roomId}`);\n          await roomBlobStores[roomId].close().catch(err => {\n            console.error(`Error closing blobstore for room ${roomId}:`, err);\n          });\n          delete roomBlobStores[roomId];\n        }\n\n        if (roomBlobCores[roomId]) {\n          console.log(`Closing blobcore for room: ${roomId}`);\n          await roomBlobCores[roomId].close().catch(err => {\n            console.error(`Error closing blobcore for room ${roomId}:`, err);\n          });\n          delete roomBlobCores[roomId];\n        }\n\n        // Then close the room instance\n        if (roomBases[roomId]) {\n          console.log(`Closing room: ${roomId}`);\n          await roomBases[roomId].close().catch(err => {\n            console.error(`Error closing room ${roomId}:`, err);\n          });\n          delete roomBases[roomId];\n        }\n\n        if (roomCorestores[roomId]) {\n          await roomCorestores[roomId].close().catch(err => {\n            console.error(`Error closing room corestore ${roomId}:`, err);\n          });\n          delete roomCorestores[roomId];\n        }\n\n        if (roomBlobSwarms[roomId]) {\n          await roomBlobSwarms[roomId].destroy().catch(err => {\n            console.error(`Error closing room blobswarm ${roomId}:`, err);\n          });\n          delete roomBlobSwarms[roomId];\n        }\n\n      } catch (err) {\n        console.error(`Error during room cleanup for ${roomId}:`, err);\n        // Continue with other rooms even if one fails\n      }\n    }\n\n    // Reset room collections\n    roomBases = {};\n    roomCorestores = {};\n    roomBlobStores = {};\n    roomBlobCores = {};\n    roomBlobSwarms = {}\n\n    // Close user resources with proper null checks\n    if (userBase) {\n      try {\n        console.log('Closing userBase...');\n        await userBase.close().catch(err => {\n          console.error('Error closing userBase:', err);\n        });\n      } catch (err) {\n        console.error('Error during userBase cleanup:', err);\n      } finally {\n        userBase = null;\n      }\n    }\n\n    if (userCorestore) {\n      try {\n        console.log('Closing userCorestore...');\n        await userCorestore.close().catch(err => {\n          console.error('Error closing userCorestore:', err);\n        });\n      } catch (err) {\n        console.error('Error during userCorestore cleanup:', err);\n      } finally {\n        userCorestore = null;\n      }\n    }\n\n    isBackendInitialized = false;\n  } catch (err) {\n    console.error('Fatal error during cleanup:', err);\n  }\n\n  console.log('Resource cleanup complete');\n}\n\n\n\n\n\nconst preInitializeAllRooms = async () => {\n  try {\n    // First check if user is initialized\n    const ub = await initializeUserBase();\n    if (!ub) {\n      console.log('User base not initialized yet, skipping room pre-initialization');\n      return;\n    }\n\n    await ub.ready();\n    const userData = await ub.getUserData();\n\n    if (!userData.rooms || !Array.isArray(userData.rooms) || userData.rooms.length === 0) {\n      console.log('No rooms to pre-initialize');\n      return;\n    }\n\n    console.log(`Pre-initializing ${userData.rooms.length} rooms for user`);\n\n    // Initialize all rooms in parallel for better performance\n    const promises = userData.rooms.map(async (roomData) => {\n      try {\n        // Skip if already initialized\n        if (roomBases[roomData.id]) {\n          console.log(`Room ${roomData.id} already initialized`);\n          return;\n        }\n\n        // Initialize the room\n        const room = await initializeRoom(roomData);\n\n        if (room) {\n          console.log(`Pre-initialized room: ${roomData.id} (${roomData.name})`);\n\n          const roomBlobCoreKey = room.blobCore?.key?.toString('hex') || null;\n          // Set up message listener if not already set\n          if (!room._hasMessageListener) {\n            room.on('new-message', (msg) => {\n              // Format the message\n              const formattedMessage = {\n                id: msg.id,\n                roomId: roomData.id,\n                content: msg.content,\n                sender: msg.sender,\n                timestamp: msg.timestamp,\n                system: msg.system || false,\n                attachments: msg.attachments || \"[]\",\n                hasAttachments: msg.hasAttachments,\n                roomBlobCoreKey\n              };\n\n              // Send to client\n              const req = rpc.request('newMessage');\n              req.send(JSON.stringify({\n                success: true,\n                message: formattedMessage\n              }));\n            });\n\n            room._hasMessageListener = true;\n            console.log(`Message listener set up for room ${roomData.id}`);\n          }\n        }\n      } catch (error) {\n        console.error(`Error pre-initializing room ${roomData.id}:`, error);\n      }\n    });\n\n    await Promise.allSettled(promises);\n    console.log('Pre-initialization of rooms complete');\n  } catch (error) {\n    console.error('Error in preInitializeAllRooms:', error);\n  }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Enhanced teardown function\nconst teardown = async () => {\n  console.log('Performing teardown...');\n  await cleanupResources();\n  console.log('Teardown complete');\n}\n\nconst reinitializeBackend = async () => {\n  console.log('Reinitializing backend with room preloading...');\n  if (trying) return;\n  trying = true;\n\n  try {\n    // Clean up existing resources first\n    await cleanupResources();\n\n    // Add a delay to ensure resources are fully released\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    // Reinitialize user if account exists\n    if (hasAccount()) {\n      console.log('Reinitializing user account...');\n      await initializeUserBase();\n\n      // Pre-initialize all rooms to enable real-time updates from the start\n      await preInitializeAllRooms();\n\n      // Notify client that backend is ready\n      const req = rpc.request('backendInitialized');\n      req.send(JSON.stringify({ success: true }));\n\n      // If user was initialized, also send user data\n      if (userBase) {\n        const userData = await userBase.getUserData();\n        const userReq = rpc.request('userInfo');\n        userReq.send(JSON.stringify(userData));\n      }\n    } else {\n      console.log('No user account found');\n      // Just notify that backend is ready\n      const req = rpc.request('backendInitialized');\n      req.send(JSON.stringify({ success: true }));\n    }\n  } catch (err) {\n    console.error('Error reinitializing backend:', err);\n    // Still notify client, but with error\n    const req = rpc.request('backendInitialized');\n    req.send(JSON.stringify({\n      success: false,\n      error: err.message || 'Failed to initialize backend'\n    }));\n  } finally {\n    trying = false;\n    isBackendInitialized = true;\n    console.log('Backend reinitialization complete');\n  }\n};\n\nconst handleFileUpload = async (fileData) => {\n  try {\n    const fileInfo = JSON.parse(fileData);\n\n    // Get user info to add proper sender name\n    const userData = userBase ? await userBase.getUserData() : null;\n\n    // Add sender info to fileInfo if available\n    if (userData && userData.name) {\n      fileInfo.sender = userData.name;\n    } else {\n      fileInfo.sender = 'Unknown User';\n    }\n\n    // Call the uploadFileToRoom function\n    await uploadFileToRoom(fileInfo);\n  } catch (error) {\n    console.error('Error handling file upload:', error);\n\n    // Send error response back to client\n    const response = {\n      success: false,\n      error: error.message || 'Unknown error handling file upload'\n    };\n\n    const errorReq = rpc.request('fileUploaded');\n    errorReq.send(JSON.stringify(response));\n  }\n};\n\n// Modified uploadFileToRoom function with better path handling\nconst uploadFileToRoom = async (fileInfo) => {\n  try {\n    const { roomId, name, type, path, data, size, sender } = fileInfo;\n\n    if (!roomId || !name || (!path && !data)) {\n      throw new Error('Missing required file information');\n    }\n\n    // Get room instance\n    const room = roomBases[roomId];\n    if (!room) {\n      throw new Error(`Room ${roomId} not found or not initialized`);\n    }\n\n    await room.ready();\n\n    let fileBuffer;\n\n    // If path is provided, read the file\n    if (path) {\n      try {\n        // For React Native/Expo file URIs, we need to handle them differently\n        // Log for debugging\n        console.log(`Attempting to read file from path: ${path}`);\n\n        // Native file path handling\n        if (path.startsWith('file://')) {\n          // Strip the file:// prefix if present\n          const realPath = path.replace('file://', '');\n          console.log(`Reading from adjusted path: ${realPath}`);\n\n          try {\n            // Direct attempt to read the file\n            fileBuffer = await fs.promises.readFile(realPath);\n            console.log(`Successfully read file, size: ${fileBuffer.length} bytes`);\n          } catch (directReadErr) {\n            console.error(`Error with direct read: ${directReadErr.message}`);\n\n            // Fall back to base64 if the client provides it\n            if (data) {\n              console.log('Falling back to base64 data');\n              fileBuffer = b4a.from(data, 'base64');\n            } else {\n              throw directReadErr;\n            }\n          }\n        } else {\n          // For non-file URIs\n          fileBuffer = await fs.promises.readFile(path);\n        }\n      } catch (readErr) {\n        console.error(`Error reading file from path ${path}:`, readErr);\n\n        // Fall back to base64 if the client provides it\n        if (data) {\n          console.log('Falling back to base64 data after path read error');\n          fileBuffer = b4a.from(data, 'base64');\n        } else {\n          throw new Error(`Could not read file: ${readErr.message}`);\n        }\n      }\n    }\n    // Otherwise use base64 data if provided\n    else if (data) {\n      console.log('Using provided base64 data');\n      fileBuffer = b4a.from(data, 'base64');\n    }\n\n    if (!fileBuffer) {\n      throw new Error('No file data available');\n    }\n\n    // Log size of file buffer\n    console.log(`File buffer size: ${fileBuffer.length} bytes`);\n\n    // Upload to the room's blob store\n    const attachment = await room.uploadFile(fileBuffer, name, {\n      metadata: { type }\n    });\n\n    if (!attachment) {\n      throw new Error('Failed to upload file to blob store');\n    }\n\n    // Create a message with the attachment\n    const messageData = {\n      id: `file-${Date.now()}-${Math.random().toString(36).substring(2, 15)}`,\n      roomId,\n      content: `📄 Shared file: ${attachment.name} (${attachment.size} bytes)`,\n      sender: sender || 'System',\n      timestamp: Date.now(),\n      hasAttachments: true,\n      attachments: JSON.stringify([attachment])\n    };\n\n    // Send the message\n    await room.sendMessage(messageData);\n\n    // Send success response\n    const response = {\n      success: true,\n      message: messageData\n    };\n\n    const req = rpc.request('fileUploaded');\n    req.send(JSON.stringify(response));\n\n    return true;\n\n  } catch (error) {\n    console.error('Error uploading file to room:', error);\n\n    const response = {\n      success: false,\n      error: error.message || 'Unknown error uploading file'\n    };\n\n    const req = rpc.request('fileUploaded');\n    req.send(JSON.stringify(response));\n\n    return false;\n  }\n};\n\nconst createStableBlobId = (blobRef) => {\n  if (!blobRef) return 'unknown-blob';\n\n  if (typeof blobRef === 'string') return blobRef;\n\n  if (typeof blobRef === 'object') {\n    // For hyperblobs object with block info\n    if (blobRef.blockLength && blobRef.blockOffset && blobRef.byteLength) {\n      return `blob-${blobRef.byteOffset}-${blobRef.byteLength}`;\n    }\n\n    // Try to use any numeric properties to create a stable ID\n    const numericProps = Object.entries(blobRef)\n      .filter(([_, val]) => typeof val === 'number')\n      .map(([key, val]) => `${key}-${val}`);\n\n    if (numericProps.length > 0) {\n      return `blob-${numericProps.join('-')}`;\n    }\n\n    // Last resort: stable hash from stringified object\n    try {\n      const str = JSON.stringify(blobRef);\n      let hash = 0;\n      for (let i = 0; i < str.length; i++) {\n        hash = ((hash << 5) - hash) + str.charCodeAt(i);\n        hash |= 0; // Convert to 32bit integer\n      }\n      return `blob-hash-${Math.abs(hash)}`;\n    } catch (e) {\n      return `blob-${Date.now()}-${Math.random().toString(36).substring(2)}`;\n    }\n  }\n\n  // Fallback for any other type\n  return `blob-${Date.now()}-${Math.random().toString(36).substring(2)}`;\n};\n\nconst handleCancelDownload = (data) => {\n  try {\n    const { roomId, attachmentId, attachmentKey } = data;\n\n    // Generate a download key if not provided\n    const downloadKey = attachmentKey || `${roomId}_${createStableBlobId(attachmentId)}`;\n\n    console.log(`Handling cancellation request for download: ${downloadKey}`);\n\n    // Check if this download is in our active downloads map\n    if (activeDownloads.has(downloadKey)) {\n      const downloadInfo = activeDownloads.get(downloadKey);\n\n      // Abort the download by signaling the abort controller\n      if (downloadInfo && downloadInfo.abortController) {\n        console.log(`Aborting download for ${downloadKey}`);\n        downloadInfo.abortController.abort();\n      }\n\n      // Clean up any temporary files\n      if (downloadInfo && downloadInfo.tempFilePath) {\n        try {\n          console.log(`Checking if temporary file exists: ${downloadInfo.tempFilePath}`);\n          if (fs.existsSync(downloadInfo.tempFilePath)) {\n            console.log(`Cleaning up temporary file: ${downloadInfo.tempFilePath}`);\n            fs.unlinkSync(downloadInfo.tempFilePath);\n          } else {\n            console.log(`Temporary file does not exist, skipping deletion: ${downloadInfo.tempFilePath}`);\n          }\n        } catch (fileErr) {\n          console.error('Error handling temporary file cleanup:', fileErr);\n        }\n      }\n      // Close any swarm connections\n      if (downloadInfo && downloadInfo.swarm) {\n        try {\n          console.log(`Closing swarm for cancelled download: ${downloadKey}`);\n          downloadInfo.swarm.destroy().catch(err =>\n            console.error('Error destroying swarm:', err));\n        } catch (swarmErr) {\n          console.error('Error destroying swarm:', swarmErr);\n        }\n      }\n\n      // Remove from active downloads map\n      activeDownloads.delete(downloadKey);\n\n      // Send cancellation confirmation to client\n      const response = {\n        success: true,\n        downloadKey,\n        message: 'Download cancelled successfully'\n      };\n\n      const req = rpc.request('downloadCancelled');\n      req.send(JSON.stringify(response));\n\n      return true;\n    } else {\n      console.log(`Download ${downloadKey} not found in active downloads`);\n\n      // Send not found response\n      const response = {\n        success: false,\n        downloadKey,\n        message: 'Download not found'\n      };\n\n      const req = rpc.request('downloadCancelled');\n      req.send(JSON.stringify(response));\n\n      return false;\n    }\n  } catch (error) {\n    console.error('Error in handleCancelDownload:', error);\n\n    // Send error response\n    const response = {\n      success: false,\n      error: error.message || 'Unknown error cancelling download'\n    };\n\n    const req = rpc.request('downloadCancelled');\n    req.send(JSON.stringify(response));\n\n    return false;\n  }\n};\n\n\n\n\n\n\n\n\n\nconst generateSafeFilePath = (baseDir, fileName) => {\n  // Sanitize filename\n  const sanitizedFileName = fileName\n    .replace(/[^a-zA-Z0-9\\._-]/g, '_')\n    .replace(/(\\.{2,})/g, '.');\n\n  // Use a timestamp to prevent filename collisions\n  const timestamp = Date.now();\n  const safeFileName = `${timestamp}_${sanitizedFileName}`;\n\n  // Ensure the directory exists\n  const fullPath = Path.join(baseDir, safeFileName);\n\n  console.log('Creating safe file path:', {\n    baseDir,\n    originalFileName: fileName,\n    sanitizedFileName: safeFileName,\n    fullPath\n  });\n\n  return fullPath;\n};\n\n\n\n// Update the handleFileDownload function in backend.mjs\nconst resolveFilePath = async (suggestedPath) => {\n  try {\n    console.log('Resolving file path:', suggestedPath);\n\n    // Handle different path formats\n    let normalizedPath = suggestedPath;\n\n    // Remove file:// prefix if present\n    if (normalizedPath.startsWith('file://')) {\n      normalizedPath = normalizedPath.replace('file://', '');\n    }\n\n    // For Android, handle specific path translation\n    if (Bare.argv[0] === 'android') {\n      // Check if path starts with content:// or file://\n      if (normalizedPath.startsWith('content://')) {\n        // Note: This might need to be handled differently in a Bare environment\n        normalizedPath = normalizedPath.replace('content://')\n      }\n    }\n\n    console.log('Normalized path:', normalizedPath);\n\n    // Verify file exists using both FileSystem and bare-fs\n    let fileExists = false;\n    try {\n      // First try bare-fs\n      fileExists = fs.existsSync(normalizedPath);\n    } catch (barefsError) {\n      console.error('bare-fs file check error:', barefsError);\n    }\n\n    if (!fileExists) {\n      console.error('File does not exist at path:', {\n        path: normalizedPath,\n        originalPath: suggestedPath\n      });\n      throw new Error(`File not found: ${normalizedPath}`);\n    }\n\n    return normalizedPath;\n  } catch (error) {\n    console.error('Comprehensive Path Resolution Error:', {\n      error: error.message,\n      suggestedPath,\n      platformOS: Bare.argv[0]\n    });\n    throw error;\n  }\n};\n\nconst handleFileDownload = async (requestData) => {\n  try {\n    const params = JSON.parse(requestData);\n    const {\n      roomId,\n      attachment,\n      requestProgress = false,\n      preview = false,\n      attachmentKey\n    } = params;\n\n    console.log('Comprehensive File Download Params:', {\n      roomId,\n      attachmentName: attachment.name,\n      attachmentBlobId: attachment.blobId,\n      preview,\n      platformOS: Bare.argv[0]\n    });\n\n    if (!roomId || !attachment || !attachment.blobId) {\n      throw new Error('Invalid file download parameters');\n    }\n\n    // Generate download directory based on platform\n    const downloadDir = Path.join(\n      path,\n      'downloads',\n      roomId\n    );\n\n    // Ensure download directory exists\n    if (!fs.existsSync(downloadDir)) {\n      fs.mkdirSync(downloadDir, { recursive: true });\n    }\n\n    // Generate safe file path\n    const outputPath = generateSafeFilePath(downloadDir, attachment.name);\n    console.log('Generated Output Path:', outputPath);\n\n    // Resolve input path if it exists\n    let resolvedInputPath = null;\n    if (attachment.path) {\n      try {\n        resolvedInputPath = await resolveFilePath(attachment.path);\n        console.log('Resolved Input Path:', resolvedInputPath);\n      } catch (pathResolutionError) {\n        console.error('Path resolution error:', pathResolutionError);\n        // Continue with other download methods\n      }\n    }\n\n    // Get the room\n    const room = roomBases[roomId];\n    if (!room) {\n      throw new Error(`Room ${roomId} not found or not initialized`);\n    }\n\n    // Progress tracking function\n    const onProgress = requestProgress ? (percent, message) => {\n      console.log(`Download Progress: ${percent}% - ${message}`);\n      const progressReq = rpc.request('fileDownloadProgress');\n      progressReq.send(JSON.stringify({\n        roomId,\n        attachmentId: attachment.blobId,\n        progress: percent,\n        message,\n        preview,\n        attachmentKey,\n        filePath: outputPath\n      }));\n    } : undefined;\n\n    // Attempt download with timeout\n    const downloadResult = await Promise.race([\n      room.downloadFileToPath(attachment, outputPath, {\n        onProgress,\n        preview,\n        platformOS: Bare.argv[0],\n        resolvedInputPath  // Pass resolved input path if available\n      }),\n      new Promise((_, reject) =>\n        setTimeout(() => reject(new Error('Download timeout')), 45000)\n      )\n    ]);\n\n    console.log('Download complete, result:', downloadResult);\n\n    const response = {\n      success: true,\n      roomId,\n      attachmentId: attachment.blobId,\n      fileName: attachment.name,\n      filePath: outputPath,\n      mimeType: attachment.type || getMimeType(attachment.name),\n      fileSize: attachment.size || 0,\n      preview,\n      attachmentKey\n    };\n\n    const completeReq = rpc.request('fileDownloaded');\n    completeReq.send(JSON.stringify(response));\n\n    return { success: true };\n  } catch (error) {\n    console.error('Comprehensive Download Error:', {\n      message: error.message,\n      stack: error.stack,\n      platformOS: Bare.argv[0]\n    });\n\n    const response = {\n      success: false,\n      error: error.message || 'Unknown download error',\n      details: error.stack\n    };\n\n    const completeReq = rpc.request('fileDownloaded');\n    completeReq.send(JSON.stringify(response));\n\n    return { success: false };\n  }\n};\n\n\n\n\n\n\n// Helper to determine MIME type from filename\nconst getMimeType = (filename) => {\n  const ext = filename.split('.').pop().toLowerCase();\n  const mimeTypes = {\n    'jpg': 'image/jpeg',\n    'jpeg': 'image/jpeg',\n    'png': 'image/png',\n    'gif': 'image/gif',\n    'pdf': 'application/pdf',\n    'doc': 'application/msword',\n    'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'xls': 'application/vnd.ms-excel',\n    'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    'ppt': 'application/vnd.ms-powerpoint',\n    'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    'mp4': 'audio/mpeg',\n    'wav': 'audio/wav',\n    'mp5': 'video/mp4',\n    'mov': 'video/quicktime',\n    'zip': 'application/zip',\n    'txt': 'text/plain',\n    'html': 'text/html',\n    'css': 'text/css',\n    'js': 'application/javascript'\n  };\n\n  return mimeTypes[ext] || 'application/octet-stream';\n};\n\n\n\n\n\nconst joinRoomByInvite = async (params) => {\n  const { inviteCode } = params;\n\n  if (!inviteCode || typeof inviteCode !== 'string') {\n    const response = {\n      success: false,\n      error: 'Invalid invite code'\n    };\n    const req = rpc.request('roomJoinResult');\n    req.send(JSON.stringify(response));\n    return;\n  }\n\n  try {\n    // First ensure UserBase is initialized\n    const ub = await initializeUserBase();\n    if (!ub) {\n      throw new Error('UserBase not initialized');\n    }\n\n    await ub.ready();\n    const user = await ub.getUserData();\n\n    // Generate a unique room ID\n    const roomId = generateUUID();\n\n    // Create room directory\n    const roomDir = Path.join(roomBasePath, roomId)\n    if (!fs.existsSync(roomDir)) {\n      fs.mkdirSync(roomDir, { recursive: true });\n    }\n\n    // Create corestore for the room\n    const roomCorestore = new Corestore(roomDir);\n    await roomCorestore.ready();\n\n    // Set up blob core and store for attachments\n    const blobCore = new Hypercore(roomDir + '/blobs');\n    await blobCore.ready();\n\n    const blobStore = new Hyperblobs(blobCore);\n    await blobStore.ready();\n\n    if (!roomBlobSwarms[roomId]) {\n\n      const blobSwarm = new Hyperswarm();\n\n      // Join the swarm with the blob core's key\n      const blobTopic = await blobSwarm.join(blobCore.key);\n\n      blobSwarm.flush()\n\n      // Replicate blob core when connected to peers\n      blobSwarm.on('connection', (connection, peerInfo) => {\n        console.log(`Blob replication connection from peer: ${peerInfo.publicKey.toString('hex').substring(1, 8)}`);\n        console.log('a peer is requesting our blob file')\n        blobCore.replicate(connection);\n      });\n\n      roomBlobSwarms[roomId] = blobSwarm\n    }\n\n\n\n    // Join the room using the invite code\n    const room = await RoomBase.pair(roomCorestore, inviteCode, {\n      blobCore,\n      blobStore\n    }).finished();\n\n    await room.ready();\n\n    // Get room info\n    const roomInfo = await room.getRoomInfo();\n    if (!roomInfo) {\n      throw new Error('Could not get room information');\n    }\n\n    // Store the instances\n    roomCorestores[roomId] = roomCorestore;\n    roomBases[roomId] = room;\n\n    // Set up message listener\n    if (!room._hasMessageListener) {\n      room.on('new-message', (msg) => {\n        // Format the message\n        const formattedMessage = {\n          id: msg.id,\n          roomId: roomId,\n          content: msg.content,\n          sender: msg.sender,\n          timestamp: msg.timestamp,\n          system: msg.system || false,\n          attachments: msg.attachments || \"[]\",\n          hasAttachments: msg.hasAttachments\n\n        };\n\n        // Send to client\n        const req = rpc.request('newMessage');\n        req.send(JSON.stringify({\n          success: true,\n          message: formattedMessage\n        }));\n      });\n\n      room._hasMessageListener = true;\n    }\n\n    // Create room object for user storage\n    const newRoom = {\n      id: roomId,\n      name: roomInfo.name || 'Joined Room',\n      description: `Joined via invite`,\n      createdAt: roomInfo.createdAt || Date.now(),\n      invite: inviteCode,\n      key: room.key.toString('hex'),\n      encryptionKey: room.encryptionKey.toString('hex')\n    };\n\n    // Add this room to the user's rooms list\n    let userRooms = [];\n    if (user.rooms) {\n      // Parse existing rooms if it's a string\n      if (typeof user.rooms === 'string') {\n        try {\n          userRooms = JSON.parse(user.rooms);\n        } catch (e) {\n          console.error('Error parsing user.rooms:', e);\n          userRooms = [];\n        }\n      } else if (Array.isArray(user.rooms)) {\n        userRooms = [...user.rooms];\n      }\n    }\n\n    // Only add if not already in rooms\n    if (!userRooms.some(r => r.id === roomId)) {\n      userRooms.push(newRoom);\n\n      // Update the user profile with the new rooms list\n      await ub.updateUserProfile({\n        rooms: JSON.stringify(userRooms)\n      });\n    }\n\n    // Get updated user data\n    const updatedUser = await ub.getUserData();\n\n    // Send updated user info back to client\n    const userReq = rpc.request('userInfo');\n    userReq.send(JSON.stringify(updatedUser));\n\n    // Send room join response\n    const response = {\n      success: true,\n      room: newRoom\n    };\n\n    const req = rpc.request('roomJoinResult');\n    req.send(JSON.stringify(response));\n\n  } catch (error) {\n    console.error('Error joining room by invite:', error);\n    const response = {\n      success: false,\n      error: error.message || 'Failed to join room'\n    };\n\n    const req = rpc.request('roomJoinResult');\n    req.send(JSON.stringify(response));\n  }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst generateRoomInvite = async (roomId) => {\n  try {\n    console.log(`Generating invite for room: ${roomId}`);\n\n    // Make sure the room exists\n    const room = roomBases[roomId];\n    if (!room) {\n      throw new Error(`Room ${roomId} not initialized`);\n    }\n\n    await room.ready();\n\n    // Generate the invite code\n    const inviteCode = await room.createInvite();\n    console.log(`Generated invite code for room ${roomId}: ${inviteCode}`);\n\n    // Send the invite code back to the client\n    const response = {\n      success: true,\n      roomId: roomId,\n      inviteCode: inviteCode\n    };\n\n    const req = rpc.request('roomInviteGenerated');\n    req.send(JSON.stringify(response));\n\n    return response;\n  } catch (error) {\n    console.error('Error generating room invite:', error);\n\n    const response = {\n      success: false,\n      roomId: roomId,\n      error: error.message || 'Failed to generate invite'\n    };\n\n    const req = rpc.request('roomInviteGenerated');\n    req.send(JSON.stringify(response));\n\n    return response;\n  }\n};\n\n// Add this line at the end of your initialization logic in backend.mjs\nif (isBackendInitialized) {\n  // Begin pre-loading rooms in the background for real-time updates\n  preInitializeAllRooms().catch(err => {\n    console.error('Error during room pre-initialization:', err);\n  });\n}\n\n\n\n\n// Complete app reset function for testing\n// Simplified reset function that wipes directories instead of individual files\n\nconst resetAppState = async () => {\n  try {\n    console.log('Performing complete app reset...');\n\n    // First clean up all existing resources\n    await cleanupResources();\n\n    // Reset all state variables\n    userCorestore = null;\n    userBase = null;\n    roomBases = {};\n    roomCorestores = {};\n    roomBlobStores = {};\n    roomBlobCores = {};\n    seedProvided = false;\n    isBackendInitialized = false;\n\n    // Re-create directories from scratch (wipes all content)\n    try {\n      // First try to remove directories if they exist\n      if (fs.existsSync(userBasePath)) {\n        fs.rmSync(userBasePath, { recursive: true, force: true });\n      }\n\n      if (fs.existsSync(roomBasePath)) {\n        fs.rmSync(roomBasePath, { recursive: true, force: true });\n      }\n\n      // Then recreate the directories fresh and empty\n      fs.mkdirSync(userBasePath, { recursive: true });\n      fs.mkdirSync(roomBasePath, { recursive: true });\n\n      console.log('Recreated empty directories');\n    } catch (dirErr) {\n      console.error('Error recreating directories:', dirErr);\n      // Continue even if directory recreation fails\n    }\n\n    // Notify client that reset is complete\n    const response = {\n      success: true,\n      message: 'App state completely reset'\n    };\n\n    const req = rpc.request('appResetComplete');\n    req.send(JSON.stringify(response));\n\n    console.log('App reset complete');\n    return true;\n  } catch (error) {\n    console.error('Error during app reset:', error);\n\n    // Notify client of error\n    const response = {\n      success: false,\n      error: error.message || 'Unknown error during app reset'\n    };\n\n    const req = rpc.request('appResetComplete');\n    req.send(JSON.stringify(response));\n\n    return false;\n  }\n};\n// roombase.js - Room-specific P2P database built on autobase\nimport Autobase from 'autobase';\nimport BlindPairing from 'blind-pairing';\nimport HyperDB from 'hyperdb';\nimport Hyperswarm from 'hyperswarm';\nimport Hyperblobs from 'hyperblobs';\nimport ReadyResource from 'ready-resource';\nimport z32 from 'z32';\nimport b4a from 'b4a';\nimport { Router, dispatch } from './spec/hyperdispatch/index.mjs';\nimport db from './spec/db/index.mjs';\nimport { getEncoding } from './spec/hyperdispatch/messages.mjs';\nimport fs from 'bare-fs';\nimport path from 'bare-path';\nimport { generateUUID, sanitizeTextForTerminal } from '../utils.mjs';\nimport Hypercore from 'hypercore';\nimport Path from \"bare-path\"\nlet roomCorestores = {}\nlet roomBases = {}\nclass RoomBasePairer extends ReadyResource {\n  constructor(store, invite, opts = {}) {\n    super();\n    this.store = store;\n    this.invite = invite;\n    this.swarm = null;\n    this.pairing = null;\n    this.candidate = null;\n    this.bootstrap = opts.bootstrap || null;\n    this.onresolve = null;\n    this.onreject = null;\n    this.room = null;\n    this.blobCore = opts.blobCore;\n    this.blobStore = opts.blobStore\n    this.ready().catch(noop);\n  }\n\n  async _open() {\n    await this.store.ready();\n    this.swarm = new Hyperswarm({\n      keyPair: await this.store.createKeyPair('hyperswarm'),\n      bootstrap: this.bootstrap\n    });\n\n    const store = this.store;\n    this.swarm.on('connection', (connection, peerInfo) => {\n      store.replicate(connection);\n    });\n\n    this.pairing = new BlindPairing(this.swarm);\n    const core = Autobase.getLocalCore(this.store);\n    await core.ready();\n    const key = core.key;\n    await core.close();\n\n    this.candidate = this.pairing.addCandidate({\n      invite: z32.decode(this.invite),\n      userData: key,\n      onadd: async (result) => {\n        if (this.room === null) {\n          this.room = new RoomBase(this.store, {\n            swarm: this.swarm,\n            key: result.key,\n            encryptionKey: result.encryptionKey,\n            bootstrap: this.bootstrap,\n            blobCore: this.blobCore,\n            blobStore: this.blobStore\n          });\n        }\n        this.swarm = null;\n        this.store = null;\n        if (this.onresolve) this._whenWritable();\n        this.candidate.close().catch(noop);\n      }\n    });\n  }\n\n  _whenWritable() {\n    if (this.room.base.writable) return;\n    const check = () => {\n      if (this.room.base.writable) {\n        this.room.base.off('update', check);\n        this.onresolve(this.room);\n      }\n    };\n    this.room.base.on('update', check);\n  }\n\n  async _close() {\n    if (this.candidate !== null) {\n      await this.candidate.close();\n    }\n\n    if (this.swarm !== null) {\n      await this.swarm.destroy();\n    }\n\n    if (this.store !== null) {\n      await this.store.close();\n    }\n\n    if (this.onreject) {\n      this.onreject(new Error('Pairing closed'));\n    } else if (this.room) {\n      await this.room.close();\n    }\n  }\n\n  finished() {\n    return new Promise((resolve, reject) => {\n      this.onresolve = resolve;\n      this.onreject = reject;\n    });\n  }\n}\n\n/**\n * Main RoomBase class for a single room with p2p messaging and file sharing\n */\nclass RoomBase extends ReadyResource {\n  constructor(corestore, opts = {}) {\n    super();\n    this.router = new Router();\n    this.store = corestore;\n    this.swarm = opts.swarm || null;\n    this.base = null;\n    this.bootstrap = opts.bootstrap || null;\n    this.member = null;\n    this.pairing = null;\n    this.replicate = opts.replicate !== false;\n\n    // Room properties\n    this.roomId = opts.roomId || generateUUID();\n    this.roomName = opts.roomName || 'Unnamed Room';\n    this.messageListeners = [];\n\n    // Hyperblobs storage setup\n    this.blobStore = opts.blobStore;\n    this.blobCore = opts.blobCore\n    this.attachmentWatcher = null;\n\n    // Register command handlers\n    this._registerHandlers();\n\n    this._boot(opts);\n    this.ready().catch(noop);\n  }\n\n  _registerHandlers() {\n    // Writer management commands\n    this.router.add('@roombase/remove-writer', async (data, context) => {\n      await context.base.removeWriter(data.key);\n    });\n\n    this.router.add('@roombase/add-writer', async (data, context) => {\n      await context.base.addWriter(data.key);\n    });\n\n    this.router.add('@roombase/add-invite', async (data, context) => {\n      await context.view.insert('@roombase/invite', data);\n    });\n\n    // Message commands\n    this.router.add('@roombase/send-message', async (data, context) => {\n      await context.view.insert('@roombase/messages', data);\n    });\n\n    this.router.add('@roombase/delete-message', async (data, context) => {\n      await context.view.delete('@roombase/messages', { id: data.id });\n    });\n\n    this.router.add('@roombase/set-metadata', async (data, context) => {\n      // First try deleting existing metadata\n      try {\n        await context.view.delete('@roombase/metadata', { id: data.id });\n      } catch (e) {\n        // Ignore errors if no existing record\n      }\n      // Then insert the new metadata\n      await context.view.insert('@roombase/metadata', data);\n    });\n  }\n\n  _boot(opts = {}) {\n    const { encryptionKey, key } = opts;\n\n    this.base = new Autobase(this.store, key, {\n      encrypt: true,\n      encryptionKey,\n      open(store) {\n        return HyperDB.bee(store.get('view'), db, {\n          extension: false,\n          autoUpdate: true\n        });\n      },\n      apply: this._apply.bind(this)\n    });\n\n    this.base.on('update', () => {\n      if (!this.base._interrupting) {\n        this.emit('update');\n      }\n    });\n  }\n\n  async _apply(nodes, view, base) {\n    for (const node of nodes) {\n      await this.router.dispatch(node.value, { view, base });\n      try {\n        // Skip this processing if the state is 1 byte or less\n        if (node.value.length <= 1) continue;\n\n        // Create a state for decoding - IMPORTANT: Start at position 1 to skip the message type byte\n        const state = { buffer: node.value, start: 1, end: node.value.byteLength };\n\n        // Get the message type - 1st byte in the hyperdispatch format\n        const messageType = node.value[0];\n\n        // Only process if it's a send-message command (ID 3)\n        if (messageType === 3) {\n          // Decode the message\n          const messageEncoding = getEncoding('@roombase/messages');\n          const message = messageEncoding.decode(state);\n\n          if (message.hasAttachments && message.attachments) {\n            try {\n              message.attachments = JSON.parse(message.attachments);\n            } catch (err) {\n              message.attachments = [];\n            }\n          }\n          // Get the node source key for identification\n          const sourceKey = node.from?.key?.toString('hex');\n          const localKey = this.base.local.key.toString('hex');\n\n          // Only emit for messages from other writers - our own are handled separately\n          this.emit('new-message', message);\n        }\n      } catch (err) {\n        // Log the error but don't block processing\n        console.error('Error processing message in _apply:', err);\n      }\n    }\n\n    await view.flush();\n  }\n\n  async _open() {\n    await this.base.ready();\n\n\n    if (this.replicate) await this._replicate();\n\n    // Save room info if not already stored\n    await this._initializeRoom();\n  }\n\n  async _close() {\n    if (this.swarm) {\n      if (this.member) await this.member.close();\n      if (this.pairing) await this.pairing.close();\n      await this.swarm.destroy();\n    }\n\n    // Close blob store resources\n    if (this.blobCore) {\n      await this.blobCore.close();\n    }\n\n    await this.base.close();\n  }\n\n  async _initializeRoom() {\n    const existingRoom = await this.getRoomInfo();\n    if (!existingRoom) {\n      // Store basic room info\n      const roomData = {\n        id: this.roomId,\n        name: this.roomName,\n        createdAt: Date.now(),\n        messageCount: 0\n      };\n\n      try {\n        const dispatchData = dispatch('@roombase/set-metadata', roomData);\n        await this.base.append(dispatchData);\n      } catch (e) {\n      }\n    } else {\n      // Update local properties from stored values\n      this.roomId = existingRoom.id;\n      this.roomName = existingRoom.name;\n    }\n  }\n\n  get writerKey() {\n    return this.base.local.key;\n  }\n\n  get key() {\n    return this.base.key;\n  }\n\n  get discoveryKey() {\n    return this.base.discoveryKey;\n  }\n\n  get encryptionKey() {\n    return this.base.encryptionKey;\n  }\n\n  get writable() {\n    return this.base.writable;\n  }\n\n  static pair(store, invite, opts) {\n    return new RoomBasePairer(store, invite, opts);\n  }\n\n  async _replicate() {\n    await this.base.ready();\n    if (this.swarm === null) {\n      this.swarm = new Hyperswarm({\n        keyPair: await this.store.createKeyPair('hyperswarm'),\n        bootstrap: this.bootstrap\n      });\n      this.swarm.on('connection', (connection, peerInfo) => {\n        this.store.replicate(connection);\n      });\n    }\n\n    this.pairing = new BlindPairing(this.swarm);\n\n    this.member = this.pairing.addMember({\n      discoveryKey: this.base.discoveryKey,\n      onadd: async (candidate) => {\n        try {\n          const id = candidate.inviteId;\n          const inv = await this.base.view.findOne('@roombase/invite', {});\n          if (!b4a.equals(inv.id, id)) {\n            return;\n          }\n\n          candidate.open(inv.publicKey);\n          await this.addWriter(candidate.userData);\n          candidate.confirm({\n            key: this.base.key,\n            encryptionKey: this.base.encryptionKey\n          });\n        } catch (err) {\n          console.error('Error during pairing acceptance:', err);\n        }\n      }\n    });\n\n    this.swarm.join(this.base.discoveryKey);\n  }\n\n  async createInvite(opts = {}) {\n    if (this.opened === false) await this.ready();\n    const existing = await this.base.view.findOne('@roombase/invite', {});\n    if (existing) {\n      return z32.encode(existing.invite);\n    }\n\n    const { id, invite, publicKey, expires } = BlindPairing.createInvite(this.base.key);\n    const record = { id, invite, publicKey, expires };\n    await this.base.append(dispatch('@roombase/add-invite', record));\n    return z32.encode(record.invite);\n  }\n\n  async addWriter(key) {\n    await this.base.append(dispatch('@roombase/add-writer', { key: b4a.isBuffer(key) ? key : b4a.from(key) }));\n    return true;\n  }\n\n  async removeWriter(key) {\n    await this.base.append(dispatch('@roombase/remove-writer', { key: b4a.isBuffer(key) ? key : b4a.from(key) }));\n  }\n\n  // ---------- Message API ----------\n\n  async sendMessage(message) {\n    // Make sure base is ready\n    await this.base.ready();\n    if (message.attachments && message.attachments.length > 0) {\n      message.hasAttachments = true;\n      message.attachments = JSON.stringify(message.attachments);\n    }\n    const msg = {\n      id: message.id || `${Date.now()}-${Math.random().toString(36).substring(2, 15)}`,\n      content: sanitizeTextForTerminal(message.content) || '',\n      sender: message.sender || 'Unknown',\n      timestamp: message.timestamp || Date.now(),\n      system: !!message.system,\n      // Set hasAttachments flag based on message attachments\n      hasAttachments: message.hasAttachments,\n      // Include attachment references\n      attachments: message.attachments || \"[]\"\n    };\n\n    try {\n      // Use the dispatch function from hyperdispatch for proper message encoding\n      const dispatchData = dispatch('@roombase/send-message', msg);\n\n      // Append to autobase directly\n      await this.base.append(dispatchData);\n\n      const room = await this.getRoomInfo();\n      if (room) {\n        const currentCount = room.messageCount || 0;\n        const newCount = currentCount + 1;\n\n        // Update room metadata with new message count\n        try {\n          const dispatchData = dispatch('@roombase/set-metadata', { ...room, messageCount: newCount });\n          await this.base.append(dispatchData);\n        } catch (updateErr) {\n          console.error(\"Error updating room count:\", updateErr);\n        }\n      }\n\n      return msg.id;\n    } catch (err) {\n\n      console.error(`Error saving message with dispatch:`, err);\n      this.emit('mistake', JSON.stringify(err.message));\n    }\n  }\n  async deleteMessage(messageId) {\n    await this.base.append(dispatch('@roombase/delete-message', { id: messageId }));\n    return true;\n  }\n\n  // ---------- Query API with Pagination ----------\n\n  async getRoomInfo() {\n    try {\n      return await this.base.view.findOne('@roombase/metadata', {});\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async getMessageCount() {\n    try {\n      const room = await this.getRoomInfo();\n      if (!room) return 1;\n\n      return room.messageCount || 1;\n    } catch (err) {\n      console.error('Error getting message count:', err);\n      return 0;\n    }\n  }\n\n  getMessages(opts = {}) {\n    if (!this.base || !this.base.view) {\n      throw new Error(\"Error initializing corestore\");\n    }\n\n    // Set defaults\n    const options = {\n      limit: opts.limit || 51,\n      reverse: opts.reverse !== undefined ? opts.reverse : true\n    };\n\n    // Create the query object with proper formatting\n    const query = {};\n\n    // Handle the timestamp filtering formats\n    if (opts.lt && opts.lt.timestamp) {\n      query.timestamp = { $lt: opts.lt.timestamp };\n    }\n\n    if (opts.lte && opts.lte.timestamp) {\n      query.timestamp = { ...(query.timestamp || {}), $lte: opts.lte.timestamp };\n    }\n\n    if (opts.gt && opts.gt.timestamp) {\n      query.timestamp = { ...(query.timestamp || {}), $gt: opts.gt.timestamp };\n    }\n\n    if (opts.gte && opts.gte.timestamp) {\n      query.timestamp = { ...(query.timestamp || {}), $gte: opts.gte.timestamp };\n    }\n\n    // Return the stream directly\n    return this.base.view.find('@roombase/messages', query, options);\n  }\n\n  /**\n   * Get all writers with access to this room\n   *\n   * @param {Object} opts - Query options\n   * @param {boolean} opts.includeDetails - Include additional details about writers\n   * @param {boolean} opts.includeMetadata - Include metadata about writer activity\n   * @returns {Array} - Array of writer information\n   */\n  async getWriters(opts = {}) {\n    const { includeDetails = false, includeMetadata = false } = opts;\n\n    // Get all writer keys who have access to this room\n    const writers = [];\n\n    // Add local writer if it exists\n    if (this.base?.writerKey) {\n      writers.push({\n        key: this.base.writerKey.toString('hex'),\n        isLocal: true,\n        active: true,\n        lastSeen: Date.now()\n      });\n    }\n\n    // Add other writers from base if it exists\n    if (this.base?.activeWriters) {\n      for (const writer of this.base.activeWriters) {\n        if (writer?.core?.key && (!this.base.writerKey || !writer.core.key.equals(this.base.writerKey))) {\n          const writerInfo = {\n            key: writer.core.key.toString('hex'),\n            isLocal: false,\n            active: writer.core.length > 1\n          };\n\n          if (includeMetadata) {\n            try {\n              // Safely get messages with error handling\n              let messages = [];\n              try {\n                const result = await this.base.view.find('@roombase/messages', {});\n                messages = Array.isArray(result) ? result : [];\n              } catch (err) {\n                console.error('Error fetching messages for metadata:', err);\n                messages = [];\n              }\n\n              const writerKey = writerInfo.key;\n              const senderMessages = writerKey ?\n                messages.filter(msg => msg && msg.sender === writerKey) : [];\n\n              const lastMessage = senderMessages.length > 1 ?\n                senderMessages.sort((a, b) => b.timestamp - a.timestamp)[1] : null;\n\n              writerInfo.lastActivity = lastMessage ? lastMessage.timestamp : null;\n              writerInfo.messagesCount = senderMessages.length;\n            } catch (err) {\n              console.error('Error processing message metadata:', err);\n              writerInfo.lastActivity = null;\n              writerInfo.messagesCount = 1;\n            }\n          }\n\n          writers.push(writerInfo);\n        }\n      }\n    }\n\n    return writers;\n  }\n\n  // ---------- File API using Hyperblobs ----------\n\n  /**\n   * Upload a file to the user's blob store\n   * @param {Buffer} data - The file data to upload\n   * @param {string} filePath - The virtual file path (just used for the filename)\n   * @param {Object} options - Upload options\n   * @returns {Object} - File metadata including blob ID\n   */\n  async uploadFile(data, filePath, options = {}) {\n    if (!this.blobStore) {\n      return null;\n    }\n\n    try {\n      const fileName = filePath.includes('/') ? path.basename(filePath) : filePath;\n\n      // Upload to hyperblobs and get blob ID\n      const blobId = await this.blobStore.put(data);\n\n      // Log the exact structure of the blob ID for debugging\n\n      return {\n        path: fileName,\n        name: fileName,\n        size: data.length,\n        blobId: blobId,\n        coreKey: this.blobCore.key.toString('hex'),\n        ownCoreKey: this.blobCore.key.toString('hex'),\n        timestamp: Date.now(),\n        metadata: options.metadata || {}\n      };\n    } catch (err) {\n      console.error(`Error uploading file:`, err);\n      return null;\n    }\n  }\n\n\n  async downloadFile(file, configPath, options = {}) {\n    const { timeout = 60000, onProgress } = options;\n    let blobRef = file;\n    let remoteCore = null;\n    let topic = null;\n    let localSwarm = null;\n\n    const tempDir = Path.join(configPath, `hypercore-download-${Date.now()}`);\n    try {\n      // Make sure directories exist\n      if (!fs.existsSync(configPath)) {\n        fs.mkdirSync(configPath, { recursive: true });\n      }\n      if (!fs.existsSync(tempDir)) {\n        fs.mkdirSync(tempDir, { recursive: true });\n      }\n\n      // If file is in our own blob store, use existing blob store\n      if (this.blobStore && blobRef.coreKey &&\n        blobRef.coreKey === this.blobCore.key.toString('hex')) {\n        try {\n          // Ensure blobId is properly formatted\n          const blobId = typeof blobRef.blobId === 'object' ? blobRef.blobId : blobRef.blobId;\n          if (onProgress) onProgress(100, \"Local blob is used\");\n          return await this.blobStore.get(blobId);\n        } catch (localErr) {\n        }\n      }\n\n      // Prepare core key\n      const coreKey = typeof blobRef.coreKey === 'string'\n        ? Buffer.from(blobRef.coreKey, 'hex')\n        : blobRef.coreKey;\n\n      // Create hypercore for download\n      remoteCore = new Hypercore(tempDir, coreKey, { wait: true });\n      if (onProgress) onProgress(0, \"Connected to core\");\n\n      await remoteCore.ready();\n      if (onProgress) onProgress(0, \"Initiated core\");\n\n      localSwarm = new Hyperswarm();\n      topic = await localSwarm.join(coreKey);\n      if (onProgress) onProgress(0, \"Searching for peer\");\n\n      const connectionHandler = (conn) => {\n        remoteCore.replicate(conn);\n        if (onProgress) onProgress(0, \"\");\n      };\n\n      localSwarm.on('connection', connectionHandler);\n\n      // Wait for peers to connect\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      await remoteCore.update({ wait: true });\n      if (onProgress) onProgress(0, \"Starting hyperblob\");\n\n      // Create hyperblobs to access the data\n      const remoteBlobs = new Hyperblobs(remoteCore);\n      await remoteBlobs.ready();\n      if (onProgress) onProgress(0, \"Hyperblob is ready\");\n\n      // Get the blob ID in the correct format\n      const blobId = typeof blobRef.blobId === 'object' ? blobRef.blobId : blobRef.blobId;\n\n      // Get metadata to know the file size\n      let blobSize = blobRef.size;\n      // Download the blob using streaming for progress tracking\n      let fileData;\n      if (blobSize > 0) {\n        // Use streaming for better progress tracking\n        const chunks = [];\n        let downloadedBytes = 0;\n\n        const stream = remoteBlobs.createReadStream(blobId);\n\n        await new Promise((resolve, reject) => {\n          stream.on('data', chunk => {\n            chunks.push(chunk);\n            downloadedBytes += chunk.length;\n\n            // Update progress from 60% to 90% based on download progress\n            if (onProgress && blobSize > 0) {\n              const percentage = 60 + Math.floor(30 * (downloadedBytes / blobSize));\n              onProgress(Math.min(90, percentage), \"Downloading...\");\n            }\n          });\n\n          stream.on('error', err => {\n            console.log('ERROR', err.message)\n            reject(err);\n          });\n\n          stream.on('end', () => {\n\n            console.log('SERVED')\n            resolve();\n          });\n        });\n\n        // Combine chunks\n        fileData = Buffer.concat(chunks);\n      } else {\n        // Fall back to get() if we couldn't get the size\n        fileData = await remoteBlobs.get(blobId, {\n          wait: true,\n          timeout: 0\n        });\n      }\n\n      if (onProgress) onProgress(99, \"Saving file to disk\");\n\n      await localSwarm.destroy();\n\n      // Clean up\n      if (topic) await topic.destroy().catch(noop);\n      if (remoteBlobs && remoteBlobs.close) await remoteBlobs.close().catch(noop);\n      if (remoteCore) await remoteCore.close().catch(noop);\n\n      // Remove temp directory\n      try {\n        fs.rmSync(tempDir, { recursive: true, force: true });\n      } catch (rmErr) {\n        console.error('Error removing temp directory:', rmErr);\n      }\n\n      if (onProgress) onProgress(100, \"Completed\");\n      return fileData;\n    } catch (err) {\n      console.error('Error downloading file:', err);\n      fs.writeFileSync('./downloaderr', JSON.stringify(err.message));\n      try {\n        if (localSwarm) {\n          localSwarm.removeAllListeners('connection');\n          await localSwarm.destroy().catch(noop);\n        }\n        if (topic) await topic.destroy().catch(noop);\n        if (remoteCore) await remoteCore.close().catch(noop);\n        if (tempDir) fs.rmSync(tempDir, { recursive: true, force: true });\n      } catch (cleanupErr) {\n        console.error('Error during cleanup:', cleanupErr);\n      }\n      // Return error message as buffer\n      return null;\n    }\n  }\n\n  async getFiles(directory = '/', options = {}) {\n    try {\n      const messageStream = this.base.view.find('@roombase/messages', {\n        hasAttachments: true\n      }, {});\n\n      const files = await new Promise((resolve, reject) => {\n        const fileList = [];\n\n        messageStream.on('data', (msg) => {\n          try {\n            // Ensure attachments is parsed correctly\n            let attachments = [];\n            if (msg.attachments) {\n              // Try multiple parsing methods\n              if (typeof msg.attachments === 'string') {\n                try {\n                  attachments = JSON.parse(msg.attachments);\n                } catch (jsonErr) {\n                  try {\n                    // If first parse fails, try parsing the parsed result\n                    attachments = JSON.parse(msg.attachments);\n                  } catch (nestedErr) {\n                    console.error('Failed to parse attachments:', msg.attachments);\n                    return; // Skip this message\n                  }\n                }\n              } else if (Array.isArray(msg.attachments)) {\n                attachments = msg.attachments;\n              }\n              console.log(attachments)\n\n              if (typeof msg.attachments === 'string') {\n                attachments = JSON.parse(attachments)\n              }\n              // Ensure each attachment has the necessary properties\n              const validAttachments = attachments.filter(attachment =>\n                attachment && typeof attachment === 'object' && attachment.name\n              ).map(attachment => ({\n                ...attachment,\n                sender: msg.sender,\n                timestamp: attachment.timestamp || msg.timestamp\n              }));\n\n              fileList.push(...validAttachments);\n            }\n          } catch (parseErr) {\n            console.error('Error parsing message attachments:', parseErr);\n          }\n        });\n\n        messageStream.on('end', () => {\n          resolve(fileList.sort((a, b) => b.timestamp - a.timestamp));\n        });\n\n        messageStream.on('error', (err) => {\n          console.error('Stream error:', err);\n          resolve([]);\n        });\n      });\n\n      return files;\n    } catch (err) {\n      console.error(`Error loading files:`, err);\n      return [];\n    }\n  }\n\n\n\n  async downloadFileToPath(file, outputPath, options = {}) {\n    const {\n      timeout = 60000,\n      onProgress,\n      preview = false,\n      platformOS\n    } = options;\n\n    let blobRef = file;\n    let remoteCore = null;\n    let topic = null;\n    let localSwarm = null;\n    const tempDir = Path.join(path.dirname(outputPath), `temp-download-${Date.now()}`);\n\n    try {\n      console.log('Download File to Path Details:', {\n        outputPath,\n        blobRef,\n        platformOS,\n        preview\n      });\n\n      // Ensure output directory exists\n      const outputDir = Path.dirname(outputPath);\n      if (!fs.existsSync(outputDir)) {\n        fs.mkdirSync(outputDir, { recursive: true });\n      }\n\n      // Create temp directory\n      if (!fs.existsSync(tempDir)) {\n        fs.mkdirSync(tempDir, { recursive: true });\n      }\n\n      // Check if this is our own blob store first\n      if (this.blobStore && blobRef.coreKey &&\n        blobRef.coreKey === this.blobCore.key.toString('hex')) {\n\n        console.log('Attempting to retrieve from local blob store');\n\n        try {\n          // Ensure blobId is properly formatted\n          const blobId = typeof blobRef.blobId === 'object'\n            ? blobRef.blobId\n            : blobRef.blobId;\n\n          const localBlob = await this.blobStore.get(blobId);\n\n          if (localBlob) {\n            console.log('Local blob retrieved successfully, writing to file');\n\n            fs.writeFileSync(outputPath, localBlob);\n\n            if (onProgress) {\n              onProgress(100, \"Local blob retrieved and saved\");\n            }\n\n            return outputPath;\n          }\n        } catch (localError) {\n          console.error('Error retrieving local blob:', localError);\n        }\n      }\n\n      // Prepare core key\n      const coreKey = typeof blobRef.coreKey === 'string'\n        ? b4a.from(blobRef.coreKey, 'hex')\n        : blobRef.coreKey;\n\n      // Create hypercore for streaming\n      remoteCore = new Hypercore(tempDir, coreKey, { wait: true });\n      if (onProgress) onProgress(10, \"Connected to core\");\n\n      await remoteCore.ready();\n      if (onProgress) onProgress(20, \"Core ready\");\n\n      localSwarm = new Hyperswarm();\n      topic = await localSwarm.join(coreKey);\n      if (onProgress) onProgress(30, \"Joined swarm\");\n\n      // Set up replication\n      localSwarm.on('connection', (conn) => {\n        remoteCore.replicate(conn);\n        if (onProgress) onProgress(40, \"Replication started\");\n      });\n\n      // Wait for peers\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      await remoteCore.update({ wait: true });\n\n      // Create hyperblobs for streaming\n      const remoteBlobs = new Hyperblobs(remoteCore);\n      await remoteBlobs.ready();\n      if (onProgress) onProgress(50, \"Hyperblob ready\");\n\n      // Get the blob ID\n      const blobId = typeof blobRef.blobId === 'object'\n        ? blobRef.blobId\n        : blobRef.blobId;\n\n      // Create write stream to file\n      const writeStream = fs.createWriteStream(outputPath);\n      const blobSize = blobRef.size || 0;\n      let bytesWritten = 0;\n\n      // Create read stream from hyperblobs\n      const readStream = remoteBlobs.createReadStream(blobId);\n\n      // Stream the file directly to disk\n      await new Promise((resolve, reject) => {\n        readStream.on('data', chunk => {\n          writeStream.write(chunk);\n          bytesWritten += chunk.length;\n\n          // Report progress\n          if (onProgress && blobSize > 0) {\n            const percentage = 50 + Math.floor(45 * (bytesWritten / blobSize));\n            onProgress(Math.min(95, percentage), \"Downloading...\");\n          }\n        });\n\n        readStream.on('end', () => {\n          writeStream.end();\n          resolve();\n        });\n\n        readStream.on('error', err => {\n          writeStream.end();\n          reject(err);\n        });\n\n        writeStream.on('error', err => {\n          reject(err);\n        });\n      });\n\n      if (onProgress) onProgress(100, \"Download complete\");\n\n      // Clean up\n      if (localSwarm) await localSwarm.destroy().catch(() => { });\n      if (topic) await topic.destroy().catch(() => { });\n      if (remoteBlobs && remoteBlobs.close) await remoteBlobs.close().catch(() => { });\n      if (remoteCore) await remoteCore.close().catch(() => { });\n\n      // Try to remove temp directory\n      try {\n        fs.rmSync(tempDir, { recursive: true, force: true });\n      } catch (rmErr) {\n        console.error('Error removing temp directory:', rmErr);\n      }\n\n      return outputPath;\n    } catch (err) {\n      console.error('Comprehensive Blob Retrieval Error:', {\n        message: err.message,\n        stack: err.stack,\n        blobRef,\n        outputPath\n      });\n\n      // Cleanup on error\n      try {\n        if (localSwarm) await localSwarm.destroy().catch(() => { });\n        if (topic) await topic.destroy().catch(() => { });\n        if (remoteCore) await remoteCore.close().catch(() => { });\n        fs.rmSync(tempDir, { recursive: true, force: true });\n      } catch (cleanupErr) {\n        console.error('Error during cleanup:', cleanupErr);\n      }\n\n      throw err;\n    }\n  }\n\n\n\n\n\n\n\n\n  /**\n   * Delete a file from the room\n   * @param {string} path - File path or ID to delete\n   * @returns {boolean} - Success status\n   */\n  async deleteFile(path) {\n    try {\n      // Only the owner can delete their files\n      // First, check if this is our file by getting the attachment info\n      let fileToDelete = null;\n\n      const messages = await this.getMessages({ limit: 100 });\n\n      // Find the message containing this attachment\n      for (const msg of messages) {\n        if (msg.attachments && Array.isArray(msg.attachments)) {\n          const attachment = msg.attachments.find(att =>\n            att.path === path || att.name === path || (att.blobId && att.blobId === path)\n          );\n\n          if (attachment) {\n            fileToDelete = {\n              ...attachment,\n              messageId: msg.id,\n              sender: msg.sender\n            };\n            break;\n          }\n        }\n      }\n\n      if (!fileToDelete) {\n        throw new Error(`File not found: ${path}`);\n      }\n\n      // Only delete if it's our file\n      const isOurFile = fileToDelete.coreKey === this.blobCore.key.toString('hex');\n\n      if (!isOurFile) {\n        throw new Error('Cannot delete files owned by other users');\n      }\n\n      // Clear the blob from our blob store\n      if (this.blobStore && fileToDelete.blobId) {\n        await this.blobStore.clear(fileToDelete.blobId);\n      }\n\n      // Also update the message to remove this attachment\n      const msg = await this.base.view.get('@roombase/messages', { id: fileToDelete.messageId });\n      if (msg && msg.attachments) {\n        // Create updated message with this attachment removed\n        const updatedMsg = {\n          ...msg,\n          attachments: msg.attachments.filter(att =>\n            att.blobId !== fileToDelete.blobId\n          )\n        };\n\n        // Delete old message and insert updated one\n        await this.base.view.delete('@roombase/messages', { id: msg.id });\n        await this.base.view.insert('@roombase/messages', updatedMsg);\n      }\n\n      return true;\n    } catch (err) {\n      console.error(`Error deleting file:`, err);\n      return false;\n    }\n  }\n\n\n\n\n}\n\n// Helper function for error handling\nfunction noop() { }\n\nexport default RoomBase;\n// This file is autogenerated by the hyperdb compiler\n/* eslint-disable camelcase */\n\nimport { IndexEncoder, c } from 'hyperdb/runtime'\nimport { version, getEncoding, setVersion } from './messages.mjs'\n\n// '@roombase/writer' collection key\nconst collection0_key = new IndexEncoder([\n  IndexEncoder.BUFFER\n], { prefix: 0 })\n\nfunction collection0_indexify(record) {\n  const a = record.key\n  return a === undefined ? [] : [a]\n}\n\n// '@roombase/writer' value encoding\nconst collection0_enc = getEncoding('@roombase/writer/hyperdb#0')\n\n// '@roombase/writer' reconstruction function\nfunction collection0_reconstruct(version, keyBuf, valueBuf) {\n  const key = collection0_key.decode(keyBuf)\n  setVersion(version)\n  const record = c.decode(collection0_enc, valueBuf)\n  record.key = key[0]\n  return record\n}\n// '@roombase/writer' key reconstruction function\nfunction collection0_reconstruct_key(keyBuf) {\n  const key = collection0_key.decode(keyBuf)\n  return {\n    key: key[0]\n  }\n}\n\n// '@roombase/writer'\nconst collection0 = {\n  name: '@roombase/writer',\n  id: 0,\n  encodeKey(record) {\n    const key = [record.key]\n    return collection0_key.encode(key)\n  },\n  encodeKeyRange({ gt, lt, gte, lte } = {}) {\n    return collection0_key.encodeRange({\n      gt: gt ? collection0_indexify(gt) : null,\n      lt: lt ? collection0_indexify(lt) : null,\n      gte: gte ? collection0_indexify(gte) : null,\n      lte: lte ? collection0_indexify(lte) : null\n    })\n  },\n  encodeValue(version, record) {\n    setVersion(version)\n    return c.encode(collection0_enc, record)\n  },\n  trigger: null,\n  reconstruct: collection0_reconstruct,\n  reconstructKey: collection0_reconstruct_key,\n  indexes: []\n}\n\n// '@roombase/invite' collection key\nconst collection1_key = new IndexEncoder([\n  IndexEncoder.BUFFER\n], { prefix: 1 })\n\nfunction collection1_indexify(record) {\n  const a = record.id\n  return a === undefined ? [] : [a]\n}\n\n// '@roombase/invite' value encoding\nconst collection1_enc = getEncoding('@roombase/invite/hyperdb#1')\n\n// '@roombase/invite' reconstruction function\nfunction collection1_reconstruct(version, keyBuf, valueBuf) {\n  const key = collection1_key.decode(keyBuf)\n  setVersion(version)\n  const record = c.decode(collection1_enc, valueBuf)\n  record.id = key[0]\n  return record\n}\n// '@roombase/invite' key reconstruction function\nfunction collection1_reconstruct_key(keyBuf) {\n  const key = collection1_key.decode(keyBuf)\n  return {\n    id: key[0]\n  }\n}\n\n// '@roombase/invite'\nconst collection1 = {\n  name: '@roombase/invite',\n  id: 1,\n  encodeKey(record) {\n    const key = [record.id]\n    return collection1_key.encode(key)\n  },\n  encodeKeyRange({ gt, lt, gte, lte } = {}) {\n    return collection1_key.encodeRange({\n      gt: gt ? collection1_indexify(gt) : null,\n      lt: lt ? collection1_indexify(lt) : null,\n      gte: gte ? collection1_indexify(gte) : null,\n      lte: lte ? collection1_indexify(lte) : null\n    })\n  },\n  encodeValue(version, record) {\n    setVersion(version)\n    return c.encode(collection1_enc, record)\n  },\n  trigger: null,\n  reconstruct: collection1_reconstruct,\n  reconstructKey: collection1_reconstruct_key,\n  indexes: []\n}\n\n// '@roombase/metadata' collection key\nconst collection2_key = new IndexEncoder([\n  IndexEncoder.STRING\n], { prefix: 2 })\n\nfunction collection2_indexify(record) {\n  const a = record.id\n  return a === undefined ? [] : [a]\n}\n\n// '@roombase/metadata' value encoding\nconst collection2_enc = getEncoding('@roombase/metadata/hyperdb#2')\n\n// '@roombase/metadata' reconstruction function\nfunction collection2_reconstruct(version, keyBuf, valueBuf) {\n  const key = collection2_key.decode(keyBuf)\n  setVersion(version)\n  const record = c.decode(collection2_enc, valueBuf)\n  record.id = key[0]\n  return record\n}\n// '@roombase/metadata' key reconstruction function\nfunction collection2_reconstruct_key(keyBuf) {\n  const key = collection2_key.decode(keyBuf)\n  return {\n    id: key[0]\n  }\n}\n\n// '@roombase/metadata'\nconst collection2 = {\n  name: '@roombase/metadata',\n  id: 2,\n  encodeKey(record) {\n    const key = [record.id]\n    return collection2_key.encode(key)\n  },\n  encodeKeyRange({ gt, lt, gte, lte } = {}) {\n    return collection2_key.encodeRange({\n      gt: gt ? collection2_indexify(gt) : null,\n      lt: lt ? collection2_indexify(lt) : null,\n      gte: gte ? collection2_indexify(gte) : null,\n      lte: lte ? collection2_indexify(lte) : null\n    })\n  },\n  encodeValue(version, record) {\n    setVersion(version)\n    return c.encode(collection2_enc, record)\n  },\n  trigger: null,\n  reconstruct: collection2_reconstruct,\n  reconstructKey: collection2_reconstruct_key,\n  indexes: []\n}\n\n// '@roombase/messages' collection key\nconst collection3_key = new IndexEncoder([\n  IndexEncoder.STRING\n], { prefix: 3 })\n\nfunction collection3_indexify(record) {\n  const a = record.id\n  return a === undefined ? [] : [a]\n}\n\n// '@roombase/messages' value encoding\nconst collection3_enc = getEncoding('@roombase/messages/hyperdb#3')\n\n// '@roombase/messages' reconstruction function\nfunction collection3_reconstruct(version, keyBuf, valueBuf) {\n  const key = collection3_key.decode(keyBuf)\n  setVersion(version)\n  const record = c.decode(collection3_enc, valueBuf)\n  record.id = key[0]\n  return record\n}\n// '@roombase/messages' key reconstruction function\nfunction collection3_reconstruct_key(keyBuf) {\n  const key = collection3_key.decode(keyBuf)\n  return {\n    id: key[0]\n  }\n}\n\n// '@roombase/messages'\nconst collection3 = {\n  name: '@roombase/messages',\n  id: 3,\n  encodeKey(record) {\n    const key = [record.id]\n    return collection3_key.encode(key)\n  },\n  encodeKeyRange({ gt, lt, gte, lte } = {}) {\n    return collection3_key.encodeRange({\n      gt: gt ? collection3_indexify(gt) : null,\n      lt: lt ? collection3_indexify(lt) : null,\n      gte: gte ? collection3_indexify(gte) : null,\n      lte: lte ? collection3_indexify(lte) : null\n    })\n  },\n  encodeValue(version, record) {\n    setVersion(version)\n    return c.encode(collection3_enc, record)\n  },\n  trigger: null,\n  reconstruct: collection3_reconstruct,\n  reconstructKey: collection3_reconstruct_key,\n  indexes: []\n}\n\nconst collections = [\n  collection0,\n  collection1,\n  collection2,\n  collection3\n]\n\nconst indexes = [\n]\n\nexport default { version, collections, indexes, resolveCollection, resolveIndex }\n\nfunction resolveCollection(name) {\n  switch (name) {\n    case '@roombase/writer': return collection0\n    case '@roombase/invite': return collection1\n    case '@roombase/metadata': return collection2\n    case '@roombase/messages': return collection3\n    default: return null\n  }\n}\n\nfunction resolveIndex(name) {\n  switch (name) {\n    default: return null\n  }\n}\n// This file is autogenerated by the hyperschema compiler\n// Schema Version: 1\n/* eslint-disable camelcase */\n/* eslint-disable quotes */\n\nconst VERSION = 1\nimport { c } from 'hyperschema/runtime'\n\n// eslint-disable-next-line no-unused-vars\nlet version = VERSION\n\n// @roombase/writer\nconst encoding0 = {\n  preencode (state, m) {\n    c.buffer.preencode(state, m.key)\n  },\n  encode (state, m) {\n    c.buffer.encode(state, m.key)\n  },\n  decode (state) {\n    const r0 = c.buffer.decode(state)\n\n    return {\n      key: r0\n    }\n  }\n}\n\n// @roombase/invite\nconst encoding1 = {\n  preencode (state, m) {\n    c.buffer.preencode(state, m.id)\n    c.buffer.preencode(state, m.invite)\n    c.buffer.preencode(state, m.publicKey)\n    c.int.preencode(state, m.expires)\n  },\n  encode (state, m) {\n    c.buffer.encode(state, m.id)\n    c.buffer.encode(state, m.invite)\n    c.buffer.encode(state, m.publicKey)\n    c.int.encode(state, m.expires)\n  },\n  decode (state) {\n    const r0 = c.buffer.decode(state)\n    const r1 = c.buffer.decode(state)\n    const r2 = c.buffer.decode(state)\n    const r3 = c.int.decode(state)\n\n    return {\n      id: r0,\n      invite: r1,\n      publicKey: r2,\n      expires: r3\n    }\n  }\n}\n\n// @roombase/metadata\nconst encoding2 = {\n  preencode (state, m) {\n    c.string.preencode(state, m.id)\n    c.string.preencode(state, m.name)\n    c.int.preencode(state, m.createdAt)\n    state.end++ // max flag is 1 so always one byte\n\n    if (m.messageCount) c.int.preencode(state, m.messageCount)\n  },\n  encode (state, m) {\n    const flags = m.messageCount ? 1 : 0\n\n    c.string.encode(state, m.id)\n    c.string.encode(state, m.name)\n    c.int.encode(state, m.createdAt)\n    c.uint.encode(state, flags)\n\n    if (m.messageCount) c.int.encode(state, m.messageCount)\n  },\n  decode (state) {\n    const r0 = c.string.decode(state)\n    const r1 = c.string.decode(state)\n    const r2 = c.int.decode(state)\n    const flags = c.uint.decode(state)\n\n    return {\n      id: r0,\n      name: r1,\n      createdAt: r2,\n      messageCount: (flags & 1) !== 0 ? c.int.decode(state) : 0\n    }\n  }\n}\n\n// @roombase/messages\nconst encoding3 = {\n  preencode (state, m) {\n    c.string.preencode(state, m.id)\n    c.string.preencode(state, m.content)\n    c.string.preencode(state, m.sender)\n    c.int.preencode(state, m.timestamp)\n    state.end++ // max flag is 8 so always one byte\n\n    if (m.attachments) c.string.preencode(state, m.attachments)\n  },\n  encode (state, m) {\n    const flags =\n      (m.system ? 1 : 0) |\n      (m.received ? 2 : 0) |\n      (m.hasAttachments ? 4 : 0) |\n      (m.attachments ? 8 : 0)\n\n    c.string.encode(state, m.id)\n    c.string.encode(state, m.content)\n    c.string.encode(state, m.sender)\n    c.int.encode(state, m.timestamp)\n    c.uint.encode(state, flags)\n\n    if (m.attachments) c.string.encode(state, m.attachments)\n  },\n  decode (state) {\n    const r0 = c.string.decode(state)\n    const r1 = c.string.decode(state)\n    const r2 = c.string.decode(state)\n    const r3 = c.int.decode(state)\n    const flags = c.uint.decode(state)\n\n    return {\n      id: r0,\n      content: r1,\n      sender: r2,\n      timestamp: r3,\n      system: (flags & 1) !== 0,\n      received: (flags & 2) !== 0,\n      hasAttachments: (flags & 4) !== 0,\n      attachments: (flags & 8) !== 0 ? c.string.decode(state) : null\n    }\n  }\n}\n\n// @roombase/writer/hyperdb#0\nconst encoding4 = {\n  preencode (state, m) {\n\n  },\n  encode (state, m) {\n\n  },\n  decode (state) {\n    return {\n      key: null\n    }\n  }\n}\n\n// @roombase/invite/hyperdb#1\nconst encoding5 = {\n  preencode (state, m) {\n    c.buffer.preencode(state, m.invite)\n    c.buffer.preencode(state, m.publicKey)\n    c.int.preencode(state, m.expires)\n  },\n  encode (state, m) {\n    c.buffer.encode(state, m.invite)\n    c.buffer.encode(state, m.publicKey)\n    c.int.encode(state, m.expires)\n  },\n  decode (state) {\n    const r1 = c.buffer.decode(state)\n    const r2 = c.buffer.decode(state)\n    const r3 = c.int.decode(state)\n\n    return {\n      id: null,\n      invite: r1,\n      publicKey: r2,\n      expires: r3\n    }\n  }\n}\n\n// @roombase/metadata/hyperdb#2\nconst encoding6 = {\n  preencode (state, m) {\n    c.string.preencode(state, m.name)\n    c.int.preencode(state, m.createdAt)\n    state.end++ // max flag is 1 so always one byte\n\n    if (m.messageCount) c.int.preencode(state, m.messageCount)\n  },\n  encode (state, m) {\n    const flags = m.messageCount ? 1 : 0\n\n    c.string.encode(state, m.name)\n    c.int.encode(state, m.createdAt)\n    c.uint.encode(state, flags)\n\n    if (m.messageCount) c.int.encode(state, m.messageCount)\n  },\n  decode (state) {\n    const r1 = c.string.decode(state)\n    const r2 = c.int.decode(state)\n    const flags = c.uint.decode(state)\n\n    return {\n      id: null,\n      name: r1,\n      createdAt: r2,\n      messageCount: (flags & 1) !== 0 ? c.int.decode(state) : 0\n    }\n  }\n}\n\n// @roombase/messages/hyperdb#3\nconst encoding7 = {\n  preencode (state, m) {\n    c.string.preencode(state, m.content)\n    c.string.preencode(state, m.sender)\n    c.int.preencode(state, m.timestamp)\n    state.end++ // max flag is 8 so always one byte\n\n    if (m.attachments) c.string.preencode(state, m.attachments)\n  },\n  encode (state, m) {\n    const flags =\n      (m.system ? 1 : 0) |\n      (m.received ? 2 : 0) |\n      (m.hasAttachments ? 4 : 0) |\n      (m.attachments ? 8 : 0)\n\n    c.string.encode(state, m.content)\n    c.string.encode(state, m.sender)\n    c.int.encode(state, m.timestamp)\n    c.uint.encode(state, flags)\n\n    if (m.attachments) c.string.encode(state, m.attachments)\n  },\n  decode (state) {\n    const r1 = c.string.decode(state)\n    const r2 = c.string.decode(state)\n    const r3 = c.int.decode(state)\n    const flags = c.uint.decode(state)\n\n    return {\n      id: null,\n      content: r1,\n      sender: r2,\n      timestamp: r3,\n      system: (flags & 1) !== 0,\n      received: (flags & 2) !== 0,\n      hasAttachments: (flags & 4) !== 0,\n      attachments: (flags & 8) !== 0 ? c.string.decode(state) : null\n    }\n  }\n}\n\nfunction setVersion (v) {\n  version = v\n}\n\nfunction encode (name, value, v = VERSION) {\n  version = v\n  return c.encode(getEncoding(name), value)\n}\n\nfunction decode (name, buffer, v = VERSION) {\n  version = v\n  return c.decode(getEncoding(name), buffer)\n}\n\nfunction getEnum (name) {\n  switch (name) {\n    default: throw new Error('Enum not found ' + name)\n  }\n}\n\nfunction getEncoding (name) {\n  switch (name) {\n    case '@roombase/writer': return encoding0\n    case '@roombase/invite': return encoding1\n    case '@roombase/metadata': return encoding2\n    case '@roombase/messages': return encoding3\n    case '@roombase/writer/hyperdb#0': return encoding4\n    case '@roombase/invite/hyperdb#1': return encoding5\n    case '@roombase/metadata/hyperdb#2': return encoding6\n    case '@roombase/messages/hyperdb#3': return encoding7\n    default: throw new Error('Encoder not found ' + name)\n  }\n}\n\nfunction getStruct (name, v = VERSION) {\n  const enc = getEncoding(name)\n  return {\n    preencode (state, m) {\n      version = v\n      enc.preencode(state, m)\n    },\n    encode (state, m) {\n      version = v\n      enc.encode(state, m)\n    },\n    decode (state) {\n      version = v\n      return enc.decode(state)\n    }\n  }\n}\n\nconst resolveStruct = getStruct // compat\n\nexport { resolveStruct, getStruct, getEnum, getEncoding, encode, decode, setVersion, version }\n// This file is autogenerated by the hyperdispatch compiler\n/* eslint-disable camelcase */\n\nimport pkg from 'hyperdispatch/runtime.js';\nconst { c, b4a, assert } = pkg;\nimport { version, getEncoding, setVersion } from './messages.mjs'\nconst defaultVersion = version\n\nclass Router {\n  constructor() {\n    this._handler0 = null\n    this._handler1 = null\n    this._handler2 = null\n    this._handler3 = null\n    this._handler4 = null\n    this._handler5 = null\n\n    this._missing = 6\n  }\n\n  add(name, handler) {\n    switch (name) {\n      case '@roombase/remove-writer':\n        this._handler0 = handler\n        break\n      case '@roombase/add-writer':\n        this._handler1 = handler\n        break\n      case '@roombase/add-invite':\n        this._handler2 = handler\n        break\n      case '@roombase/send-message':\n        this._handler3 = handler\n        break\n      case '@roombase/delete-message':\n        this._handler4 = handler\n        break\n      case '@roombase/set-metadata':\n        this._handler5 = handler\n        break\n      default:\n        throw new Error('Cannot register a handler for a nonexistent route: ' + name)\n    }\n    this._missing--\n  }\n\n  _checkAll() {\n    assert(this._handler0 !== null, 'Missing handler for \"@roombase/remove-writer\"')\n    assert(this._handler1 !== null, 'Missing handler for \"@roombase/add-writer\"')\n    assert(this._handler2 !== null, 'Missing handler for \"@roombase/add-invite\"')\n    assert(this._handler3 !== null, 'Missing handler for \"@roombase/send-message\"')\n    assert(this._handler4 !== null, 'Missing handler for \"@roombase/delete-message\"')\n    assert(this._handler5 !== null, 'Missing handler for \"@roombase/set-metadata\"')\n  }\n\n  async dispatch(encoded, context) {\n    if (this._missing > 0) {\n      this._checkAll()\n    }\n\n    const state = { buffer: encoded, start: 0, end: encoded.byteLength }\n    const id = c.uint.decode(state)\n\n    setVersion(defaultVersion)\n\n    switch (id) {\n      case 0:\n        return this._handler0(route0.enc.decode(state), context)\n      case 1:\n        return this._handler1(route1.enc.decode(state), context)\n      case 2:\n        return this._handler2(route2.enc.decode(state), context)\n      case 3:\n        return this._handler3(route3.enc.decode(state), context)\n      case 4:\n        return this._handler4(route4.enc.decode(state), context)\n      case 5:\n        return this._handler5(route5.enc.decode(state), context)\n      default:\n        throw new Error('Handler not found for ID:' + id)\n    }\n  }\n}\n\nfunction dispatch(name, message, { version = defaultVersion } = {}) {\n  const state = { buffer: null, start: 0, end: 0 }\n\n  const o = getEncoderAndId(name)\n  setVersion(version)\n\n  c.uint.preencode(state, o.id)\n  o.enc.preencode(state, message)\n\n  state.buffer = b4a.allocUnsafe(state.end)\n  c.uint.encode(state, o.id)\n  o.enc.encode(state, message)\n\n  return state.buffer\n}\n\nconst route0 = {\n  id: 0,\n  enc: getEncoding('@roombase/writer')\n}\n\nconst route1 = {\n  id: 1,\n  enc: getEncoding('@roombase/writer')\n}\n\nconst route2 = {\n  id: 2,\n  enc: getEncoding('@roombase/invite')\n}\n\nconst route3 = {\n  id: 3,\n  enc: getEncoding('@roombase/messages')\n}\n\nconst route4 = {\n  id: 4,\n  enc: getEncoding('@roombase/messages')\n}\n\nconst route5 = {\n  id: 5,\n  enc: getEncoding('@roombase/metadata')\n}\n\nfunction getEncoderAndId(name) {\n  switch (name) {\n    case '@roombase/remove-writer':\n      return route0\n    case '@roombase/add-writer':\n      return route1\n    case '@roombase/add-invite':\n      return route2\n    case '@roombase/send-message':\n      return route3\n    case '@roombase/delete-message':\n      return route4\n    case '@roombase/set-metadata':\n      return route5\n    default:\n      throw new Error('Handler not found for name: ' + name)\n  }\n}\n\nexport {\n  version,\n  dispatch,\n  Router\n}\n// Schema Version: 1\n/* eslint-disable camelcase */\n/* eslint-disable quotes */\n\nconst VERSION = 1\n\nimport pkg from 'hyperdispatch/runtime.js';\nconst { c } = pkg;\n// eslint-disable-next-line no-unused-vars\nlet version = VERSION\n\n// @roombase/writer\nconst encoding0 = {\n  preencode(state, m) {\n    c.buffer.preencode(state, m.key)\n  },\n  encode(state, m) {\n    c.buffer.encode(state, m.key)\n  },\n  decode(state) {\n    const r0 = c.buffer.decode(state)\n\n    return {\n      key: r0\n    }\n  }\n}\n\n// @roombase/invite\nconst encoding1 = {\n  preencode(state, m) {\n    c.buffer.preencode(state, m.id)\n    c.buffer.preencode(state, m.invite)\n    c.buffer.preencode(state, m.publicKey)\n    c.int.preencode(state, m.expires)\n  },\n  encode(state, m) {\n    c.buffer.encode(state, m.id)\n    c.buffer.encode(state, m.invite)\n    c.buffer.encode(state, m.publicKey)\n    c.int.encode(state, m.expires)\n  },\n  decode(state) {\n    const r0 = c.buffer.decode(state)\n    const r1 = c.buffer.decode(state)\n    const r2 = c.buffer.decode(state)\n    const r3 = c.int.decode(state)\n\n    return {\n      id: r0,\n      invite: r1,\n      publicKey: r2,\n      expires: r3\n    }\n  }\n}\n\n// @roombase/metadata\nconst encoding2 = {\n  preencode(state, m) {\n    c.string.preencode(state, m.id)\n    c.string.preencode(state, m.name)\n    c.int.preencode(state, m.createdAt)\n    state.end++ // max flag is 1 so always one byte\n\n    if (m.messageCount) c.int.preencode(state, m.messageCount)\n  },\n  encode(state, m) {\n    const flags = m.messageCount ? 1 : 0\n\n    c.string.encode(state, m.id)\n    c.string.encode(state, m.name)\n    c.int.encode(state, m.createdAt)\n    c.uint.encode(state, flags)\n\n    if (m.messageCount) c.int.encode(state, m.messageCount)\n  },\n  decode(state) {\n    const r0 = c.string.decode(state)\n    const r1 = c.string.decode(state)\n    const r2 = c.int.decode(state)\n    const flags = c.uint.decode(state)\n\n    return {\n      id: r0,\n      name: r1,\n      createdAt: r2,\n      messageCount: (flags & 1) !== 0 ? c.int.decode(state) : 0\n    }\n  }\n}\n\n// @roombase/messages\nconst encoding3 = {\n  preencode(state, m) {\n    c.string.preencode(state, m.id)\n    c.string.preencode(state, m.content)\n    c.string.preencode(state, m.sender)\n    c.int.preencode(state, m.timestamp)\n    state.end++ // max flag is 8 so always one byte\n\n    if (m.attachments) c.string.preencode(state, m.attachments)\n  },\n  encode(state, m) {\n    const flags =\n      (m.system ? 1 : 0) |\n      (m.received ? 2 : 0) |\n      (m.hasAttachments ? 4 : 0) |\n      (m.attachments ? 8 : 0)\n\n    c.string.encode(state, m.id)\n    c.string.encode(state, m.content)\n    c.string.encode(state, m.sender)\n    c.int.encode(state, m.timestamp)\n    c.uint.encode(state, flags)\n\n    if (m.attachments) c.string.encode(state, m.attachments)\n  },\n  decode(state) {\n    const r0 = c.string.decode(state)\n    const r1 = c.string.decode(state)\n    const r2 = c.string.decode(state)\n    const r3 = c.int.decode(state)\n    const flags = c.uint.decode(state)\n\n    return {\n      id: r0,\n      content: r1,\n      sender: r2,\n      timestamp: r3,\n      system: (flags & 1) !== 0,\n      received: (flags & 2) !== 0,\n      hasAttachments: (flags & 4) !== 0,\n      attachments: (flags & 8) !== 0 ? c.string.decode(state) : null\n    }\n  }\n}\n\nfunction setVersion(v) {\n  version = v\n}\n\nfunction encode(name, value, v = VERSION) {\n  version = v\n  return c.encode(getEncoding(name), value)\n}\n\nfunction decode(name, buffer, v = VERSION) {\n  version = v\n  return c.decode(getEncoding(name), buffer)\n}\n\nfunction getEnum(name) {\n  switch (name) {\n    default: throw new Error('Enum not found ' + name)\n  }\n}\n\nfunction getEncoding(name) {\n  switch (name) {\n    case '@roombase/writer': return encoding0\n    case '@roombase/invite': return encoding1\n    case '@roombase/metadata': return encoding2\n    case '@roombase/messages': return encoding3\n    default: throw new Error('Encoder not found ' + name)\n  }\n}\n\nfunction getStruct(name, v = VERSION) {\n  const enc = getEncoding(name)\n  return {\n    preencode(state, m) {\n      version = v\n      enc.preencode(state, m)\n    },\n    encode(state, m) {\n      version = v\n      enc.encode(state, m)\n    },\n    decode(state) {\n      version = v\n      return enc.decode(state)\n    }\n  }\n}\n\nconst resolveStruct = getStruct // compat\n\nexport { resolveStruct, getStruct, getEnum, getEncoding, encode, decode, setVersion, version }\n// This file is autogenerated by the hyperdb compiler\n/* eslint-disable camelcase */\n\nimport { IndexEncoder, c } from 'hyperdb/runtime'\nimport { version, getEncoding, setVersion } from './messages.mjs'\n\n// '@userbase/writer' collection key\nconst collection0_key = new IndexEncoder([\n  IndexEncoder.BUFFER\n], { prefix: 0 })\n\nfunction collection0_indexify(record) {\n  const a = record.key\n  return a === undefined ? [] : [a]\n}\n\n// '@userbase/writer' value encoding\nconst collection0_enc = getEncoding('@userbase/writer/hyperdb#0')\n\n// '@userbase/writer' reconstruction function\nfunction collection0_reconstruct(version, keyBuf, valueBuf) {\n  const key = collection0_key.decode(keyBuf)\n  setVersion(version)\n  const record = c.decode(collection0_enc, valueBuf)\n  record.key = key[0]\n  return record\n}\n// '@userbase/writer' key reconstruction function\nfunction collection0_reconstruct_key(keyBuf) {\n  const key = collection0_key.decode(keyBuf)\n  return {\n    key: key[0]\n  }\n}\n\n// '@userbase/writer'\nconst collection0 = {\n  name: '@userbase/writer',\n  id: 0,\n  encodeKey(record) {\n    const key = [record.key]\n    return collection0_key.encode(key)\n  },\n  encodeKeyRange({ gt, lt, gte, lte } = {}) {\n    return collection0_key.encodeRange({\n      gt: gt ? collection0_indexify(gt) : null,\n      lt: lt ? collection0_indexify(lt) : null,\n      gte: gte ? collection0_indexify(gte) : null,\n      lte: lte ? collection0_indexify(lte) : null\n    })\n  },\n  encodeValue(version, record) {\n    setVersion(version)\n    return c.encode(collection0_enc, record)\n  },\n  trigger: null,\n  reconstruct: collection0_reconstruct,\n  reconstructKey: collection0_reconstruct_key,\n  indexes: []\n}\n\n// '@userbase/invite' collection key\nconst collection1_key = new IndexEncoder([\n  IndexEncoder.BUFFER\n], { prefix: 1 })\n\nfunction collection1_indexify(record) {\n  const a = record.id\n  return a === undefined ? [] : [a]\n}\n\n// '@userbase/invite' value encoding\nconst collection1_enc = getEncoding('@userbase/invite/hyperdb#1')\n\n// '@userbase/invite' reconstruction function\nfunction collection1_reconstruct(version, keyBuf, valueBuf) {\n  const key = collection1_key.decode(keyBuf)\n  setVersion(version)\n  const record = c.decode(collection1_enc, valueBuf)\n  record.id = key[0]\n  return record\n}\n// '@userbase/invite' key reconstruction function\nfunction collection1_reconstruct_key(keyBuf) {\n  const key = collection1_key.decode(keyBuf)\n  return {\n    id: key[0]\n  }\n}\n\n// '@userbase/invite'\nconst collection1 = {\n  name: '@userbase/invite',\n  id: 1,\n  encodeKey(record) {\n    const key = [record.id]\n    return collection1_key.encode(key)\n  },\n  encodeKeyRange({ gt, lt, gte, lte } = {}) {\n    return collection1_key.encodeRange({\n      gt: gt ? collection1_indexify(gt) : null,\n      lt: lt ? collection1_indexify(lt) : null,\n      gte: gte ? collection1_indexify(gte) : null,\n      lte: lte ? collection1_indexify(lte) : null\n    })\n  },\n  encodeValue(version, record) {\n    setVersion(version)\n    return c.encode(collection1_enc, record)\n  },\n  trigger: null,\n  reconstruct: collection1_reconstruct,\n  reconstructKey: collection1_reconstruct_key,\n  indexes: []\n}\n\n// '@userbase/metadata' collection key\nconst collection2_key = new IndexEncoder([\n  IndexEncoder.STRING\n], { prefix: 2 })\n\nfunction collection2_indexify(record) {\n  const a = record.id\n  return a === undefined ? [] : [a]\n}\n\n// '@userbase/metadata' value encoding\nconst collection2_enc = getEncoding('@userbase/metadata/hyperdb#2')\n\n// '@userbase/metadata' reconstruction function\nfunction collection2_reconstruct(version, keyBuf, valueBuf) {\n  const key = collection2_key.decode(keyBuf)\n  setVersion(version)\n  const record = c.decode(collection2_enc, valueBuf)\n  record.id = key[0]\n  return record\n}\n// '@userbase/metadata' key reconstruction function\nfunction collection2_reconstruct_key(keyBuf) {\n  const key = collection2_key.decode(keyBuf)\n  return {\n    id: key[0]\n  }\n}\n\n// '@userbase/metadata'\nconst collection2 = {\n  name: '@userbase/metadata',\n  id: 2,\n  encodeKey(record) {\n    const key = [record.id]\n    return collection2_key.encode(key)\n  },\n  encodeKeyRange({ gt, lt, gte, lte } = {}) {\n    return collection2_key.encodeRange({\n      gt: gt ? collection2_indexify(gt) : null,\n      lt: lt ? collection2_indexify(lt) : null,\n      gte: gte ? collection2_indexify(gte) : null,\n      lte: lte ? collection2_indexify(lte) : null\n    })\n  },\n  encodeValue(version, record) {\n    setVersion(version)\n    return c.encode(collection2_enc, record)\n  },\n  trigger: null,\n  reconstruct: collection2_reconstruct,\n  reconstructKey: collection2_reconstruct_key,\n  indexes: []\n}\n\nconst collections = [\n  collection0,\n  collection1,\n  collection2\n]\n\nconst indexes = [\n]\n\nexport default { version, collections, indexes, resolveCollection, resolveIndex }\n\nfunction resolveCollection(name) {\n  switch (name) {\n    case '@userbase/writer': return collection0\n    case '@userbase/invite': return collection1\n    case '@userbase/metadata': return collection2\n    default: return null\n  }\n}\n\nfunction resolveIndex(name) {\n  switch (name) {\n    default: return null\n  }\n}\n// This file is autogenerated by the hyperschema compiler\n// Schema Version: 1\n/* eslint-disable camelcase */\n/* eslint-disable quotes */\n\nconst VERSION = 1\nimport { c } from 'hyperschema/runtime'\n\n// eslint-disable-next-line no-unused-vars\nlet version = VERSION\n\n// @userbase/writer\nconst encoding0 = {\n  preencode (state, m) {\n    c.buffer.preencode(state, m.key)\n  },\n  encode (state, m) {\n    c.buffer.encode(state, m.key)\n  },\n  decode (state) {\n    const r0 = c.buffer.decode(state)\n\n    return {\n      key: r0\n    }\n  }\n}\n\n// @userbase/invite\nconst encoding1 = {\n  preencode (state, m) {\n    c.buffer.preencode(state, m.id)\n    c.buffer.preencode(state, m.invite)\n    c.buffer.preencode(state, m.publicKey)\n    c.int.preencode(state, m.expires)\n  },\n  encode (state, m) {\n    c.buffer.encode(state, m.id)\n    c.buffer.encode(state, m.invite)\n    c.buffer.encode(state, m.publicKey)\n    c.int.encode(state, m.expires)\n  },\n  decode (state) {\n    const r0 = c.buffer.decode(state)\n    const r1 = c.buffer.decode(state)\n    const r2 = c.buffer.decode(state)\n    const r3 = c.int.decode(state)\n\n    return {\n      id: r0,\n      invite: r1,\n      publicKey: r2,\n      expires: r3\n    }\n  }\n}\n\n// @userbase/metadata\nconst encoding2 = {\n  preencode (state, m) {\n    c.string.preencode(state, m.id)\n    c.string.preencode(state, m.name)\n    c.string.preencode(state, m.status)\n    c.string.preencode(state, m.seed)\n    state.end++ // max flag is 2 so always one byte\n\n    if (m.contacts) c.string.preencode(state, m.contacts)\n    if (m.rooms) c.string.preencode(state, m.rooms)\n  },\n  encode (state, m) {\n    const flags =\n      (m.contacts ? 1 : 0) |\n      (m.rooms ? 2 : 0)\n\n    c.string.encode(state, m.id)\n    c.string.encode(state, m.name)\n    c.string.encode(state, m.status)\n    c.string.encode(state, m.seed)\n    c.uint.encode(state, flags)\n\n    if (m.contacts) c.string.encode(state, m.contacts)\n    if (m.rooms) c.string.encode(state, m.rooms)\n  },\n  decode (state) {\n    const r0 = c.string.decode(state)\n    const r1 = c.string.decode(state)\n    const r2 = c.string.decode(state)\n    const r3 = c.string.decode(state)\n    const flags = c.uint.decode(state)\n\n    return {\n      id: r0,\n      name: r1,\n      status: r2,\n      seed: r3,\n      contacts: (flags & 1) !== 0 ? c.string.decode(state) : null,\n      rooms: (flags & 2) !== 0 ? c.string.decode(state) : null\n    }\n  }\n}\n\n// @userbase/writer/hyperdb#0\nconst encoding3 = {\n  preencode (state, m) {\n\n  },\n  encode (state, m) {\n\n  },\n  decode (state) {\n    return {\n      key: null\n    }\n  }\n}\n\n// @userbase/invite/hyperdb#1\nconst encoding4 = {\n  preencode (state, m) {\n    c.buffer.preencode(state, m.invite)\n    c.buffer.preencode(state, m.publicKey)\n    c.int.preencode(state, m.expires)\n  },\n  encode (state, m) {\n    c.buffer.encode(state, m.invite)\n    c.buffer.encode(state, m.publicKey)\n    c.int.encode(state, m.expires)\n  },\n  decode (state) {\n    const r1 = c.buffer.decode(state)\n    const r2 = c.buffer.decode(state)\n    const r3 = c.int.decode(state)\n\n    return {\n      id: null,\n      invite: r1,\n      publicKey: r2,\n      expires: r3\n    }\n  }\n}\n\n// @userbase/metadata/hyperdb#2\nconst encoding5 = {\n  preencode (state, m) {\n    c.string.preencode(state, m.name)\n    c.string.preencode(state, m.status)\n    c.string.preencode(state, m.seed)\n    state.end++ // max flag is 2 so always one byte\n\n    if (m.contacts) c.string.preencode(state, m.contacts)\n    if (m.rooms) c.string.preencode(state, m.rooms)\n  },\n  encode (state, m) {\n    const flags =\n      (m.contacts ? 1 : 0) |\n      (m.rooms ? 2 : 0)\n\n    c.string.encode(state, m.name)\n    c.string.encode(state, m.status)\n    c.string.encode(state, m.seed)\n    c.uint.encode(state, flags)\n\n    if (m.contacts) c.string.encode(state, m.contacts)\n    if (m.rooms) c.string.encode(state, m.rooms)\n  },\n  decode (state) {\n    const r1 = c.string.decode(state)\n    const r2 = c.string.decode(state)\n    const r3 = c.string.decode(state)\n    const flags = c.uint.decode(state)\n\n    return {\n      id: null,\n      name: r1,\n      status: r2,\n      seed: r3,\n      contacts: (flags & 1) !== 0 ? c.string.decode(state) : null,\n      rooms: (flags & 2) !== 0 ? c.string.decode(state) : null\n    }\n  }\n}\n\nfunction setVersion (v) {\n  version = v\n}\n\nfunction encode (name, value, v = VERSION) {\n  version = v\n  return c.encode(getEncoding(name), value)\n}\n\nfunction decode (name, buffer, v = VERSION) {\n  version = v\n  return c.decode(getEncoding(name), buffer)\n}\n\nfunction getEnum (name) {\n  switch (name) {\n    default: throw new Error('Enum not found ' + name)\n  }\n}\n\nfunction getEncoding (name) {\n  switch (name) {\n    case '@userbase/writer': return encoding0\n    case '@userbase/invite': return encoding1\n    case '@userbase/metadata': return encoding2\n    case '@userbase/writer/hyperdb#0': return encoding3\n    case '@userbase/invite/hyperdb#1': return encoding4\n    case '@userbase/metadata/hyperdb#2': return encoding5\n    default: throw new Error('Encoder not found ' + name)\n  }\n}\n\nfunction getStruct (name, v = VERSION) {\n  const enc = getEncoding(name)\n  return {\n    preencode (state, m) {\n      version = v\n      enc.preencode(state, m)\n    },\n    encode (state, m) {\n      version = v\n      enc.encode(state, m)\n    },\n    decode (state) {\n      version = v\n      return enc.decode(state)\n    }\n  }\n}\n\nconst resolveStruct = getStruct // compat\n\nexport { resolveStruct, getStruct, getEnum, getEncoding, encode, decode, setVersion, version }\n// This file is autogenerated by the hyperdispatch compiler\n/* eslint-disable camelcase */\n\nimport pkg from 'hyperdispatch/runtime.js';\nconst { c, b4a, assert } = pkg;\nimport { version, getEncoding, setVersion } from './messages.mjs'\n\nconst defaultVersion = version\n\nclass Router {\n  constructor() {\n    this._handler0 = null\n    this._handler1 = null\n    this._handler2 = null\n    this._handler3 = null\n\n    this._missing = 4\n  }\n\n  add(name, handler) {\n    switch (name) {\n      case '@userbase/remove-writer':\n        this._handler0 = handler\n        break\n      case '@userbase/add-writer':\n        this._handler1 = handler\n        break\n      case '@userbase/add-invite':\n        this._handler2 = handler\n        break\n      case '@userbase/set-metadata':\n        this._handler3 = handler\n        break\n      default:\n        throw new Error('Cannot register a handler for a nonexistent route: ' + name)\n    }\n    this._missing--\n  }\n\n  _checkAll() {\n    assert(this._handler0 !== null, 'Missing handler for \"@userbase/remove-writer\"')\n    assert(this._handler1 !== null, 'Missing handler for \"@userbase/add-writer\"')\n    assert(this._handler2 !== null, 'Missing handler for \"@userbase/add-invite\"')\n    assert(this._handler3 !== null, 'Missing handler for \"@userbase/set-metadata\"')\n  }\n\n  async dispatch(encoded, context) {\n    if (this._missing > 0) {\n      this._checkAll()\n    }\n\n    const state = { buffer: encoded, start: 0, end: encoded.byteLength }\n    const id = c.uint.decode(state)\n\n    setVersion(defaultVersion)\n\n    switch (id) {\n      case 0:\n        return this._handler0(route0.enc.decode(state), context)\n      case 1:\n        return this._handler1(route1.enc.decode(state), context)\n      case 2:\n        return this._handler2(route2.enc.decode(state), context)\n      case 3:\n        return this._handler3(route3.enc.decode(state), context)\n      default:\n        throw new Error('Handler not found for ID:' + id)\n    }\n  }\n}\n\nfunction dispatch(name, message, { version = defaultVersion } = {}) {\n  const state = { buffer: null, start: 0, end: 0 }\n\n  const o = getEncoderAndId(name)\n  setVersion(version)\n\n  c.uint.preencode(state, o.id)\n  o.enc.preencode(state, message)\n\n  state.buffer = b4a.allocUnsafe(state.end)\n  c.uint.encode(state, o.id)\n  o.enc.encode(state, message)\n\n  return state.buffer\n}\n\nconst route0 = {\n  id: 0,\n  enc: getEncoding('@userbase/writer')\n}\n\nconst route1 = {\n  id: 1,\n  enc: getEncoding('@userbase/writer')\n}\n\nconst route2 = {\n  id: 2,\n  enc: getEncoding('@userbase/invite')\n}\n\nconst route3 = {\n  id: 3,\n  enc: getEncoding('@userbase/metadata')\n}\n\nfunction getEncoderAndId(name) {\n  switch (name) {\n    case '@userbase/remove-writer':\n      return route0\n    case '@userbase/add-writer':\n      return route1\n    case '@userbase/add-invite':\n      return route2\n    case '@userbase/set-metadata':\n      return route3\n    default:\n      throw new Error('Handler not found for name: ' + name)\n  }\n}\n\nexport {\n  version,\n  dispatch,\n  Router\n}\n// This file is autogenerated by the hyperschema compiler\n// Schema Version: 1\n/* eslint-disable camelcase */\n/* eslint-disable quotes */\n\nconst VERSION = 1\nimport pkg from 'hyperdispatch/runtime.js';\nconst { c } = pkg;\n\n// eslint-disable-next-line no-unused-vars\nlet version = VERSION\n\n// @userbase/writer\nconst encoding0 = {\n  preencode(state, m) {\n    c.buffer.preencode(state, m.key)\n  },\n  encode(state, m) {\n    c.buffer.encode(state, m.key)\n  },\n  decode(state) {\n    const r0 = c.buffer.decode(state)\n\n    return {\n      key: r0\n    }\n  }\n}\n\n// @userbase/invite\nconst encoding1 = {\n  preencode(state, m) {\n    c.buffer.preencode(state, m.id)\n    c.buffer.preencode(state, m.invite)\n    c.buffer.preencode(state, m.publicKey)\n    c.int.preencode(state, m.expires)\n  },\n  encode(state, m) {\n    c.buffer.encode(state, m.id)\n    c.buffer.encode(state, m.invite)\n    c.buffer.encode(state, m.publicKey)\n    c.int.encode(state, m.expires)\n  },\n  decode(state) {\n    const r0 = c.buffer.decode(state)\n    const r1 = c.buffer.decode(state)\n    const r2 = c.buffer.decode(state)\n    const r3 = c.int.decode(state)\n\n    return {\n      id: r0,\n      invite: r1,\n      publicKey: r2,\n      expires: r3\n    }\n  }\n}\n\n// @userbase/metadata\nconst encoding2 = {\n  preencode(state, m) {\n    c.string.preencode(state, m.id)\n    c.string.preencode(state, m.name)\n    c.string.preencode(state, m.status)\n    c.string.preencode(state, m.seed)\n    state.end++ // max flag is 2 so always one byte\n\n    if (m.contacts) c.string.preencode(state, m.contacts)\n    if (m.rooms) c.string.preencode(state, m.rooms)\n  },\n  encode(state, m) {\n    const flags =\n      (m.contacts ? 1 : 0) |\n      (m.rooms ? 2 : 0)\n\n    c.string.encode(state, m.id)\n    c.string.encode(state, m.name)\n    c.string.encode(state, m.status)\n    c.string.encode(state, m.seed)\n    c.uint.encode(state, flags)\n\n    if (m.contacts) c.string.encode(state, m.contacts)\n    if (m.rooms) c.string.encode(state, m.rooms)\n  },\n  decode(state) {\n    const r0 = c.string.decode(state)\n    const r1 = c.string.decode(state)\n    const r2 = c.string.decode(state)\n    const r3 = c.string.decode(state)\n    const flags = c.uint.decode(state)\n\n    return {\n      id: r0,\n      name: r1,\n      status: r2,\n      seed: r3,\n      contacts: (flags & 1) !== 0 ? c.string.decode(state) : null,\n      rooms: (flags & 2) !== 0 ? c.string.decode(state) : null\n    }\n  }\n}\n\nfunction setVersion(v) {\n  version = v\n}\n\nfunction encode(name, value, v = VERSION) {\n  version = v\n  return c.encode(getEncoding(name), value)\n}\n\nfunction decode(name, buffer, v = VERSION) {\n  version = v\n  return c.decode(getEncoding(name), buffer)\n}\n\nfunction getEnum(name) {\n  switch (name) {\n    default: throw new Error('Enum not found ' + name)\n  }\n}\n\nfunction getEncoding(name) {\n  switch (name) {\n    case '@userbase/writer': return encoding0\n    case '@userbase/invite': return encoding1\n    case '@userbase/metadata': return encoding2\n    default: throw new Error('Encoder not found ' + name)\n  }\n}\n\nfunction getStruct(name, v = VERSION) {\n  const enc = getEncoding(name)\n  return {\n    preencode(state, m) {\n      version = v\n      enc.preencode(state, m)\n    },\n    encode(state, m) {\n      version = v\n      enc.encode(state, m)\n    },\n    decode(state) {\n      version = v\n      return enc.decode(state)\n    }\n  }\n}\n\nconst resolveStruct = getStruct // compat\n\nexport { resolveStruct, getStruct, getEnum, getEncoding, encode, decode, setVersion, version }\n\n// userbase.js - Room-specific P2P database built on autobase\nimport Autobase from 'autobase';\nimport BlindPairing from 'blind-pairing';\nimport HyperDB from 'hyperdb';\nimport Hyperswarm from 'hyperswarm';\nimport ReadyResource from 'ready-resource';\nimport z32 from 'z32';\nimport b4a from 'b4a';\nimport { Router, dispatch } from './spec/hyperdispatch/index.mjs';\nimport db from './spec/db/index.mjs';\nimport crypto from \"bare-crypto\"\n\nclass UserBasePairer extends ReadyResource {\n  constructor(store, invite, opts = {}) {\n    super();\n    this.store = store;\n    this.invite = invite;\n    this.swarm = null;\n    this.pairing = null;\n    this.candidate = null;\n    this.bootstrap = opts.bootstrap || null;\n    this.onresolve = null;\n    this.onreject = null;\n    this.user = null;\n    this.ready().catch(noop);\n  }\n\n  async _open() {\n    await this.store.ready();\n    this.swarm = new Hyperswarm({\n      keyPair: await this.store.createKeyPair('hyperswarm'),\n      bootstrap: this.bootstrap\n    });\n\n    const store = this.store;\n    this.swarm.on('connection', (connection, peerInfo) => {\n      store.replicate(connection);\n    });\n\n    this.pairing = new BlindPairing(this.swarm);\n    const core = Autobase.getLocalCore(this.store);\n    await core.ready();\n    const key = core.key;\n    await core.close();\n\n    this.candidate = this.pairing.addCandidate({\n      invite: z32.decode(this.invite),\n      userData: key,\n      onadd: async (result) => {\n        if (this.room === null) {\n          this.room = new UserBase(this.store, {\n            swarm: this.swarm,\n            key: result.key,\n            encryptionKey: result.encryptionKey,\n            bootstrap: this.bootstrap,\n          });\n        }\n        this.swarm = null;\n        this.store = null;\n        if (this.onresolve) this._whenWritable();\n        this.candidate.close().catch(noop);\n      }\n    });\n  }\n\n  _whenWritable() {\n    if (this.room.base.writable) return;\n    const check = () => {\n      if (this.room.base.writable) {\n        this.room.base.off('update', check);\n        this.onresolve(this.room);\n      }\n    };\n    this.room.base.on('update', check);\n  }\n\n  async _close() {\n    if (this.candidate !== null) {\n      await this.candidate.close();\n    }\n\n    if (this.swarm !== null) {\n      await this.swarm.destroy();\n    }\n\n    if (this.store !== null) {\n      await this.store.close();\n    }\n\n    if (this.onreject) {\n      this.onreject(new Error('Pairing closed'));\n    } else if (this.room) {\n      await this.room.close();\n    }\n  }\n\n  finished() {\n    return new Promise((resolve, reject) => {\n      this.onresolve = resolve;\n      this.onreject = reject;\n    });\n  }\n}\n\n/**\n * Main UserBase class for a single room with p2p messaging and file sharing\n */\nclass UserBase extends ReadyResource {\n  constructor(corestore, opts = {}) {\n    super();\n    this.router = new Router();\n    this.store = corestore;\n    this.swarm = opts.swarm || null;\n    this.base = null;\n    this.bootstrap = opts.bootstrap || null;\n    this.member = null;\n    this.pairing = null;\n    this.replicate = opts.replicate !== false;\n\n    // Room properties\n    this.userSeed = opts.userSeed;\n    this.messageListeners = [];\n    // Register command handlers\n    this._registerHandlers();\n\n    this._boot(opts);\n    this.ready().catch(noop);\n  }\n\n  _registerHandlers() {\n    // Writer management commands\n    this.router.add('@userbase/remove-writer', async (data, context) => {\n      await context.base.removeWriter(data.key);\n    });\n\n    this.router.add('@userbase/add-writer', async (data, context) => {\n      await context.base.addWriter(data.key);\n    });\n\n    this.router.add('@userbase/add-invite', async (data, context) => {\n      await context.view.insert('@userbase/invite', data);\n    });\n\n\n    this.router.add('@userbase/set-metadata', async (data, context) => {\n      // First try deleting existing metadata\n      try {\n        await context.view.delete('@userbase/metadata', { id: data.id });\n      } catch (e) {\n        // Ignore errors if no existing record\n      }\n      // Then insert the new metadata\n      await context.view.insert('@userbase/metadata', data);\n    });\n  }\n\n  _boot(opts = {}) {\n    const { encryptionKey, key } = opts;\n\n    this.base = new Autobase(this.store, key, {\n      encrypt: true,\n      encryptionKey,\n      open(store) {\n        return HyperDB.bee(store.get('view'), db, {\n          extension: false,\n          autoUpdate: true\n        });\n      },\n      apply: this._apply.bind(this)\n    });\n\n    this.base.on('update', () => {\n      if (!this.base._interrupting) {\n        this.emit('update');\n      }\n    });\n  }\n\n  async _apply(nodes, view, base) {\n    for (const node of nodes) {\n      await this.router.dispatch(node.value, { view, base });\n    }\n\n    await view.flush();\n  }\n\n  async _open() {\n    await this.base.ready();\n\n\n    if (this.replicate) await this._replicate();\n\n    // Save room info if not already stored\n    await this._initializeUser();\n  }\n\n  async _close() {\n    if (this.swarm) {\n      if (this.member) await this.member.close();\n      if (this.pairing) await this.pairing.close();\n      await this.swarm.destroy();\n    }\n\n    // Close blob store resources\n    if (this.blobCore) {\n      await this.blobCore.close();\n    }\n\n    await this.base.close();\n  }\n\n  async _initializeUser() {\n    try {\n      // Generate a deterministic public key from the seed phrase\n      let pubKey;\n\n      if (Array.isArray(this.userSeed)) {\n        // If seed is an array of words, join them\n        this.userSeed = this.userSeed.join(' ');\n      }\n\n      // Generate pubKey from seed using crypto\n      const seedBuffer = b4a.from(this.userSeed);\n      const hash = crypto.createHash('sha256').update(seedBuffer).digest();\n      pubKey = b4a.toString(hash, 'hex');\n\n      // Set as the user's public key\n      this.userPubKey = pubKey;\n\n      // Check if user already exists\n      const existingUser = await this.getUserInfo();\n\n      if (!existingUser) {\n        // Create new user record\n        const newUser = {\n          id: this.userPubKey,\n          seed: this.userSeed,\n          name: \"User-\" + Math.ceil(Math.random() * 10000),\n          status: \"Available\",\n          contacts: JSON.stringify([]),\n          rooms: JSON.stringify([])\n        };\n\n        try {\n          const dispatchData = dispatch('@userbase/set-metadata', newUser);\n          await this.base.append(dispatchData);\n\n          // Update local properties\n          this.userName = newUser.name;\n          this.userStatus = newUser.status;\n          this.userRooms = [];\n          this.userContacts = [];\n\n          console.log('Created new user profile:', this.userPubKey);\n        } catch (e) {\n          console.error('Error creating user profile:', e);\n        }\n      } else {\n        // Update local properties from stored values\n        this.userPubKey = existingUser.id;\n        this.userSeed = existingUser.seed;\n        this.userName = existingUser.name;\n        this.userStatus = existingUser.status;\n\n        try {\n          this.userRooms = existingUser.rooms ? JSON.parse(existingUser.rooms) : [];\n          this.userContacts = existingUser.contacts ? JSON.parse(existingUser.contacts) : [];\n        } catch (e) {\n          console.error('Error parsing user data:', e);\n          this.userRooms = [];\n          this.userContacts = [];\n        }\n\n        console.log('Loaded existing user profile:', this.userPubKey);\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Error in _initializeUser:', error);\n      return false;\n    }\n  }\n\n  // Method to get user data in a structured format\n  // Method to get user data in a structured format\n  async getUserData() {\n    await this.ready();\n\n    // Parse string arrays into actual arrays\n    let roomsArray = [];\n    try {\n      if (this.userRooms) {\n        if (typeof this.userRooms === 'string') {\n          roomsArray = JSON.parse(this.userRooms);\n        } else if (Array.isArray(this.userRooms)) {\n          roomsArray = this.userRooms;\n        }\n      }\n    } catch (e) {\n      console.error('Error parsing rooms in getUserData:', e);\n      roomsArray = [];\n    }\n\n    let contactsArray = [];\n    try {\n      if (this.userContacts) {\n        if (typeof this.userContacts === 'string') {\n          contactsArray = JSON.parse(this.userContacts);\n        } else if (Array.isArray(this.userContacts)) {\n          contactsArray = this.userContacts;\n        }\n      }\n    } catch (e) {\n      console.error('Error parsing contacts in getUserData:', e);\n      contactsArray = [];\n    }\n\n    return {\n      id: this.userPubKey,\n      name: this.userName,\n      status: this.userStatus,\n      seed: this.userSeed,\n      contacts: contactsArray,\n      rooms: roomsArray\n    };\n  }\n\n  get writerKey() {\n    return this.base.local.key;\n  }\n\n  get key() {\n    return this.base.key;\n  }\n\n  get discoveryKey() {\n    return this.base.discoveryKey;\n  }\n\n  get encryptionKey() {\n    return this.base.encryptionKey;\n  }\n\n  get writable() {\n    return this.base.writable;\n  }\n\n  static pair(store, invite, opts) {\n    return new UserBasePairer(store, invite, opts);\n  }\n\n  async _replicate() {\n    await this.base.ready();\n    if (this.swarm === null) {\n      this.swarm = new Hyperswarm({\n        keyPair: await this.store.createKeyPair('hyperswarm'),\n        bootstrap: this.bootstrap\n      });\n      this.swarm.on('connection', (connection, peerInfo) => {\n        this.store.replicate(connection);\n      });\n    }\n\n    this.pairing = new BlindPairing(this.swarm);\n\n    this.member = this.pairing.addMember({\n      discoveryKey: this.base.discoveryKey,\n      onadd: async (candidate) => {\n        try {\n          const id = candidate.inviteId;\n          const inv = await this.base.view.findOne('@userbase/invite', {});\n          if (!b4a.equals(inv.id, id)) {\n            return;\n          }\n\n          candidate.open(inv.publicKey);\n          await this.addWriter(candidate.userData);\n          candidate.confirm({\n            key: this.base.key,\n            encryptionKey: this.base.encryptionKey\n          });\n        } catch (err) {\n          console.error('Error during pairing acceptance:', err);\n        }\n      }\n    });\n\n    this.swarm.join(this.base.discoveryKey);\n  }\n\n  async createInvite(opts = {}) {\n    if (this.opened === false) await this.ready();\n    const existing = await this.base.view.findOne('@userbase/invite', {});\n    if (existing) {\n      return z32.encode(existing.invite);\n    }\n\n    const { id, invite, publicKey, expires } = BlindPairing.createInvite(this.base.key);\n    const record = { id, invite, publicKey, expires };\n    await this.base.append(dispatch('@userbase/add-invite', record));\n    return z32.encode(record.invite);\n  }\n\n  async addWriter(key) {\n    await this.base.append(dispatch('@userbase/add-writer', { key: b4a.isBuffer(key) ? key : b4a.from(key) }));\n    return true;\n  }\n\n  async removeWriter(key) {\n    await this.base.append(dispatch('@userbase/remove-writer', { key: b4a.isBuffer(key) ? key : b4a.from(key) }));\n  }\n\n\n\n  /**\n  * Updated method to update user profile in UserBase class\n  */\n  async updateUserProfile(profileData) {\n    if (!this.base || !this.userPubKey) {\n      return { success: false, error: 'User not initialized' };\n    }\n\n    try {\n      await this.ready();\n\n      // Get current user info\n      const existingUser = await this.getUserInfo();\n      if (!existingUser) {\n        return { success: false, error: 'User profile not found' };\n      }\n\n      console.log('Updating user profile with:', profileData);\n\n      // Prepare updated user data (keeping existing values for fields not in profileData)\n      const updatedUser = {\n        ...existingUser,\n        name: profileData.name !== undefined ? profileData.name : existingUser.name,\n        status: profileData.status !== undefined ? profileData.status : existingUser.status,\n        seed: existingUser.seed  // Always preserve the seed\n      };\n\n      // Handle special fields that need to be JSON strings in the database\n      if (profileData.rooms !== undefined) {\n        try {\n          // If rooms is already a string, verify it's valid JSON\n          if (typeof profileData.rooms === 'string') {\n            // Verify it's valid JSON that parses to an array\n            const parsed = JSON.parse(profileData.rooms);\n            if (!Array.isArray(parsed)) {\n              console.error('rooms field is not an array after parsing:', parsed);\n              updatedUser.rooms = '[]'; // Reset to empty array if invalid\n            } else {\n              updatedUser.rooms = profileData.rooms;\n            }\n          } else if (Array.isArray(profileData.rooms)) {\n            // If it's already an array, stringify it\n            updatedUser.rooms = JSON.stringify(profileData.rooms);\n          } else {\n            console.error('Invalid type for rooms:', typeof profileData.rooms);\n            updatedUser.rooms = '[]'; // Default to empty array\n          }\n        } catch (err) {\n          console.error('Error processing rooms data:', err);\n          updatedUser.rooms = '[]';\n        }\n      }\n\n      if (profileData.contacts !== undefined) {\n        try {\n          // If contacts is already a string, verify it's valid JSON\n          if (typeof profileData.contacts === 'string') {\n            // Verify it's valid JSON\n            JSON.parse(profileData.contacts);\n            updatedUser.contacts = profileData.contacts;\n          } else if (Array.isArray(profileData.contacts)) {\n            updatedUser.contacts = JSON.stringify(profileData.contacts);\n          } else {\n            console.error('Invalid type for contacts:', typeof profileData.contacts);\n            updatedUser.contacts = '[]'; // Default to empty array\n          }\n        } catch (err) {\n          console.error('Error processing contacts data:', err);\n          updatedUser.contacts = '[]';\n        }\n      }\n\n      console.log('Dispatching profile update with:', updatedUser);\n\n      // Make sure all fields are defined and not null before dispatch\n      Object.keys(updatedUser).forEach(key => {\n        if (updatedUser[key] === undefined || updatedUser[key] === null) {\n          if (key === 'contacts' || key === 'rooms') {\n            updatedUser[key] = '[]';\n          } else if (key === 'status') {\n            updatedUser[key] = 'Available';\n          } else if (key !== 'id' && key !== 'name' && key !== 'seed') {\n            // Don't override critical fields, but provide defaults for others\n            updatedUser[key] = '';\n          }\n        }\n      });\n\n      // Ensure required fields exist\n      if (!updatedUser.id) {\n        updatedUser.id = this.userPubKey;\n      }\n\n      if (!updatedUser.name) {\n        updatedUser.name = \"User-\" + Math.ceil(Math.random() * 10000);\n      }\n\n      if (!updatedUser.status) {\n        updatedUser.status = \"Available\";\n      }\n\n      if (!updatedUser.seed) {\n        updatedUser.seed = this.userSeed || \"\";\n      }\n\n      // Dispatch the profile update with safe data\n      try {\n        const dispatchData = dispatch('@userbase/set-metadata', updatedUser);\n        await this.base.append(dispatchData);\n      } catch (dispatchErr) {\n        console.error('Error dispatching profile update:', dispatchErr);\n        return { success: false, error: dispatchErr.message || 'Failed to dispatch profile update' };\n      }\n\n      // Update local properties\n      this.userName = updatedUser.name;\n      this.userStatus = updatedUser.status;\n\n      // Update local arrays from their string representation\n      try {\n        this.userRooms = updatedUser.rooms ? JSON.parse(updatedUser.rooms) : [];\n        console.log('Updated userRooms to:', this.userRooms);\n      } catch (e) {\n        console.error('Error parsing rooms:', e);\n        this.userRooms = [];\n      }\n\n      try {\n        this.userContacts = updatedUser.contacts ? JSON.parse(updatedUser.contacts) : [];\n      } catch (e) {\n        console.error('Error parsing contacts:', e);\n        this.userContacts = [];\n      }\n\n      console.log('Updated user profile:', this.userPubKey);\n      return { success: true };\n    } catch (error) {\n      console.error('Error in updateUserProfile:', error);\n      return { success: false, error: error.message || 'Failed to update profile' };\n    }\n  }\n\n\n  async getUserInfo() {\n    try {\n      return await this.base.view.findOne('@userbase/metadata', {});\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * Get all writers with access to this room\n   *\n   * @param {Object} opts - Query options\n   * @param {boolean} opts.includeDetails - Include additional details about writers\n   * @param {boolean} opts.includeMetadata - Include metadata about writer activity\n   * @returns {Array} - Array of writer information\n   */\n  async getWriters(opts = {}) {\n    const { includeDetails = false, includeMetadata = false } = opts;\n\n    // Get all writer keys who have access to this room\n    const writers = [];\n\n    // Add local writer if it exists\n    if (this.base?.writerKey) {\n      writers.push({\n        key: this.base.writerKey.toString('hex'),\n        isLocal: true,\n        active: true,\n        lastSeen: Date.now()\n      });\n    }\n\n    // Add other writers from base if it exists\n    if (this.base?.activeWriters) {\n      for (const writer of this.base.activeWriters) {\n        if (writer?.core?.key && (!this.base.writerKey || !writer.core.key.equals(this.base.writerKey))) {\n          const writerInfo = {\n            key: writer.core.key.toString('hex'),\n            isLocal: false,\n            active: writer.core.length > 1\n          };\n\n          if (includeMetadata) {\n            try {\n              // Safely get messages with error handling\n              let messages = [];\n              try {\n                const result = await this.base.view.find('@userbase/messages', {});\n                messages = Array.isArray(result) ? result : [];\n              } catch (err) {\n                console.error('Error fetching messages for metadata:', err);\n                messages = [];\n              }\n\n              const writerKey = writerInfo.key;\n              const senderMessages = writerKey ?\n                messages.filter(msg => msg && msg.sender === writerKey) : [];\n\n              const lastMessage = senderMessages.length > 1 ?\n                senderMessages.sort((a, b) => b.timestamp - a.timestamp)[1] : null;\n\n              writerInfo.lastActivity = lastMessage ? lastMessage.timestamp : null;\n              writerInfo.messagesCount = senderMessages.length;\n            } catch (err) {\n              console.error('Error processing message metadata:', err);\n              writerInfo.lastActivity = null;\n              writerInfo.messagesCount = 1;\n            }\n          }\n\n          writers.push(writerInfo);\n        }\n      }\n    }\n\n    return writers;\n  }\n\n  /**\n  * Static method to join a room using an invite code\n  */\n  static async addDevice(store, inviteCode, opts = {}) {\n    if (!store) throw new Error('Corestore is required');\n    if (!inviteCode) throw new Error('Invite code is required');\n\n    try {\n      // Create pairing instance\n      const pair = UserBase.pair(store, inviteCode, opts);\n\n      // Wait for pairing to complete\n      const room = await pair.finished();\n\n      // Wait for room to be fully ready\n      await room.ready();\n\n      return room;\n    } catch (err) {\n      console.error('Error pairing device:', err);\n      throw err;\n    }\n  }\n}\n\n// Helper function for error handling\nfunction noop() { }\n\nexport default UserBase;\nimport crypto from \"bare-crypto\"\nimport b4a from \"b4a\"\nexport const sanitizeTextForTerminal = (text) => {\n  if (!text) return '';\n\n  return text\n    // Replace tabs with visible indicators\n    .replace(/\\t/g, '→   ')\n    // Handle carriage returns\n    .replace(/\\r/g, '␍')\n    .replace(/\\n/, '␍')\n    .replace(/\\n/g, '↵')\n\n    // Strip ANSI color/control sequences\n    .replace(/\\u001b\\[\\d+(;\\d+)*m/g, '')\n\n    // Replace null bytes\n    .replace(/\\0/g, '␀')\n\n    // Replace non-printable control characters\n    .replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, (c) => {\n      if (c === '\\n') return c; // Keep newlines\n      return `␛${c.charCodeAt(0).toString(16).padStart(2, '0')}`;\n    })\n\n    // Replace unicode \"replacement character\" that appears for invalid sequences\n    .replace(/\\uFFFD/g, '�');\n};\n\n\n// Utility function to generate a UUID since crypto.randomUUID might not be available\nexport function generateUUID() {\n  // Create random bytes\n  const randomBytes = crypto.randomBytes(16);\n\n  // Set version bits (Version 4 = random UUID)\n  randomBytes[6] = (randomBytes[6] & 0x0f) | 0x40; // Version 4\n  randomBytes[8] = (randomBytes[8] & 0x3f) | 0x80; // Variant\n\n  // Convert to hex string with dashes\n  const hexString = b4a.toString(randomBytes, 'hex');\n  return [\n    hexString.substring(0, 8),\n    hexString.substring(8, 12),\n    hexString.substring(12, 16),\n    hexString.substring(16, 20),\n    hexString.substring(20, 32)\n  ].join('-');\n}\nconst { Pull, Push, HEADERBYTES, KEYBYTES, ABYTES } = require('sodium-secretstream')\nconst sodium = require('sodium-universal')\nconst crypto = require('hypercore-crypto')\nconst { Duplex, Writable, getStreamError } = require('streamx')\nconst b4a = require('b4a')\nconst Timeout = require('timeout-refresh')\nconst unslab = require('unslab')\nconst Bridge = require('./lib/bridge')\nconst Handshake = require('./lib/handshake')\n\nconst IDHEADERBYTES = HEADERBYTES + 32\nconst [NS_INITIATOR, NS_RESPONDER, NS_SEND] = crypto.namespace('hyperswarm/secret-stream', 3)\nconst MAX_ATOMIC_WRITE = 256 * 256 * 256 - 1\n\nmodule.exports = class NoiseSecretStream extends Duplex {\n  constructor (isInitiator, rawStream, opts = {}) {\n    super({ mapWritable: toBuffer })\n\n    if (typeof isInitiator !== 'boolean') {\n      throw new Error('isInitiator should be a boolean')\n    }\n\n    this.noiseStream = this\n    this.isInitiator = isInitiator\n    this.rawStream = null\n\n    this.publicKey = opts.publicKey || null\n    this.remotePublicKey = opts.remotePublicKey || null\n    this.handshakeHash = null\n    this.connected = false\n    this.keepAlive = opts.keepAlive || 0\n    this.timeout = 0\n    this.enableSend = opts.enableSend !== false\n\n    // pointer for upstream to set data here if they want\n    this.userData = null\n\n    let openedDone = null\n    this.opened = new Promise((resolve) => { openedDone = resolve })\n\n    this.rawBytesWritten = 0\n    this.rawBytesRead = 0\n\n    // metadata used by 'hyperdht'\n    this.relay = null\n    this.puncher = null\n\n    // unwrapped raw stream\n    this._rawStream = null\n\n    // handshake state\n    this._handshake = null\n    this._handshakePattern = opts.pattern || null\n    this._handshakeDone = null\n\n    // message parsing state\n    this._state = 0\n    this._len = 0\n    this._tmp = 1\n    this._message = null\n\n    this._openedDone = openedDone\n    this._startDone = null\n    this._drainDone = null\n    this._outgoingPlain = null\n    this._outgoingWrapped = null\n    this._utp = null\n    this._setup = true\n    this._ended = 2\n    this._encrypt = null\n    this._decrypt = null\n    this._timeoutTimer = null\n    this._keepAliveTimer = null\n    this._sendState = null\n\n    if (opts.autoStart !== false) this.start(rawStream, opts)\n\n    // wiggle it to trigger open immediately (TODO add streamx option for this)\n    this.resume()\n    this.pause()\n  }\n\n  static keyPair (seed) {\n    return Handshake.keyPair(seed)\n  }\n\n  static id (handshakeHash, isInitiator, id) {\n    return streamId(handshakeHash, isInitiator, id)\n  }\n\n  setTimeout (ms) {\n    if (!ms) ms = 0\n\n    this._clearTimeout()\n    this.timeout = ms\n\n    if (!ms || this.rawStream === null) return\n\n    this._timeoutTimer = Timeout.once(ms, destroyTimeout, this)\n    this._timeoutTimer.unref()\n  }\n\n  setKeepAlive (ms) {\n    if (!ms) ms = 0\n\n    this._clearKeepAlive()\n\n    this.keepAlive = ms\n\n    if (!ms || this.rawStream === null) return\n\n    this._keepAliveTimer = Timeout.on(ms, sendKeepAlive, this)\n    this._keepAliveTimer.unref()\n  }\n\n  sendKeepAlive () {\n    const empty = this.alloc(0)\n    this.write(empty)\n  }\n\n  start (rawStream, opts = {}) {\n    if (rawStream) {\n      this.rawStream = rawStream\n      this._rawStream = rawStream\n      if (typeof this.rawStream.setContentSize === 'function') {\n        this._utp = rawStream\n      }\n    } else {\n      this.rawStream = new Bridge(this)\n      this._rawStream = this.rawStream.reverse\n    }\n\n    this.rawStream.on('error', this._onrawerror.bind(this))\n    this.rawStream.on('close', this._onrawclose.bind(this))\n\n    this._startHandshake(opts.handshake, opts.keyPair || null)\n    this._continueOpen(null)\n\n    if (this.destroying) return\n\n    if (opts.data) this._onrawdata(opts.data)\n    if (opts.ended) this._onrawend()\n\n    if (this.keepAlive > 0 && this._keepAliveTimer === null) {\n      this.setKeepAlive(this.keepAlive)\n    }\n\n    if (this.timeout > 0 && this._timeoutTimer === null) {\n      this.setTimeout(this.timeout)\n    }\n  }\n\n  async flush () {\n    if ((await this.opened) === false) return false\n    if ((await Writable.drained(this)) === false) return false\n    if (this.destroying) return false\n\n    if (this.rawStream !== null && this.rawStream.flush) {\n      return await this.rawStream.flush()\n    }\n\n    return true\n  }\n\n  _continueOpen (err) {\n    if (err) this.destroy(err)\n    if (this._startDone === null) return\n    const done = this._startDone\n    this._startDone = null\n    this._open(done)\n  }\n\n  _onkeypairpromise (p) {\n    const self = this\n    const cont = this._continueOpen.bind(this)\n\n    p.then(onkeypair, cont)\n\n    function onkeypair (kp) {\n      self._onkeypair(kp)\n      cont(null)\n    }\n  }\n\n  _onkeypair (keyPair) {\n    const pattern = this._handshakePattern || 'XX'\n    const remotePublicKey = this.remotePublicKey\n\n    this._handshake = new Handshake(this.isInitiator, keyPair, remotePublicKey, pattern)\n    this.publicKey = this._handshake.keyPair.publicKey\n  }\n\n  _startHandshake (handshake, keyPair) {\n    if (handshake) {\n      const { tx, rx, hash, publicKey, remotePublicKey } = handshake\n      this._setupSecretStream(tx, rx, hash, publicKey, remotePublicKey)\n      return\n    }\n\n    if (!keyPair) keyPair = Handshake.keyPair()\n\n    if (typeof keyPair.then === 'function') {\n      this._onkeypairpromise(keyPair)\n    } else {\n      this._onkeypair(keyPair)\n    }\n  }\n\n  _onrawerror (err) {\n    this.destroy(err)\n  }\n\n  _onrawclose () {\n    if (this._ended !== 0) this.destroy()\n  }\n\n  _onrawdata (data) {\n    let offset = 0\n\n    if (this._timeoutTimer !== null) {\n      this._timeoutTimer.refresh()\n    }\n\n    do {\n      switch (this._state) {\n        case 0: {\n          while (this._tmp !== 0x1000000 && offset < data.byteLength) {\n            const v = data[offset++]\n            this._len += this._tmp * v\n            this._tmp *= 256\n          }\n\n          if (this._tmp === 0x1000000) {\n            this._tmp = 0\n            this._state = 1\n            const unprocessed = data.byteLength - offset\n            if (unprocessed < this._len && this._utp !== null) this._utp.setContentSize(this._len - unprocessed)\n          }\n\n          break\n        }\n\n        case 1: {\n          const missing = this._len - this._tmp\n          const end = missing + offset\n\n          if (this._message === null && end <= data.byteLength) {\n            this._message = data.subarray(offset, end)\n            offset += missing\n            this._incoming()\n            break\n          }\n\n          const unprocessed = data.byteLength - offset\n\n          if (this._message === null) {\n            this._message = b4a.allocUnsafe(this._len)\n          }\n\n          b4a.copy(data, this._message, this._tmp, offset)\n          this._tmp += unprocessed\n\n          if (end <= data.byteLength) {\n            offset += missing\n            this._incoming()\n          } else {\n            offset += unprocessed\n          }\n\n          break\n        }\n      }\n    } while (offset < data.byteLength && !this.destroying)\n  }\n\n  _onrawend () {\n    this._ended--\n    this.push(null)\n  }\n\n  _onrawdrain () {\n    const drain = this._drainDone\n    if (drain === null) return\n    this._drainDone = null\n    drain()\n  }\n\n  _read (cb) {\n    this.rawStream.resume()\n    cb(null)\n  }\n\n  _incoming () {\n    const message = this._message\n\n    this._state = 0\n    this._len = 0\n    this._tmp = 1\n    this._message = null\n\n    if (this._setup === true) {\n      if (this._handshake) {\n        this._onhandshakert(this._handshake.recv(message))\n      } else {\n        if (message.byteLength !== IDHEADERBYTES) {\n          this.destroy(new Error('Invalid header message received'))\n          return\n        }\n\n        const remoteId = message.subarray(0, 32)\n        const expectedId = streamId(this.handshakeHash, !this.isInitiator)\n        const header = message.subarray(32)\n\n        if (!b4a.equals(expectedId, remoteId)) {\n          this.destroy(new Error('Invalid header received'))\n          return\n        }\n\n        this._decrypt.init(header)\n        this._setup = false // setup is now done\n      }\n      return\n    }\n\n    if (message.byteLength < ABYTES) {\n      this.destroy(new Error('Invalid message received'))\n      return\n    }\n\n    this.rawBytesRead += message.byteLength\n\n    const plain = message.subarray(1, message.byteLength - ABYTES + 1)\n\n    try {\n      this._decrypt.next(message, plain)\n    } catch (err) {\n      this.destroy(err)\n      return\n    }\n\n    // If keep alive is selective, eat the empty buffers (ie assume the other side has it enabled also)\n    if (plain.byteLength === 0 && this.keepAlive !== 0) return\n\n    if (this.push(plain) === false) {\n      this.rawStream.pause()\n    }\n  }\n\n  _onhandshakert (h) {\n    if (this._handshakeDone === null) return\n\n    if (h !== null) {\n      if (h.data) this._rawStream.write(h.data)\n      if (!h.tx) return\n    }\n\n    const done = this._handshakeDone\n    const publicKey = this._handshake.keyPair.publicKey\n\n    this._handshakeDone = null\n    this._handshake = null\n\n    if (h === null) return done(new Error('Noise handshake failed'))\n\n    this._setupSecretStream(h.tx, h.rx, h.hash, publicKey, h.remotePublicKey)\n    this._resolveOpened(true)\n    done(null)\n  }\n\n  _setupSecretStream (tx, rx, handshakeHash, publicKey, remotePublicKey) {\n    const buf = b4a.allocUnsafeSlow(3 + IDHEADERBYTES)\n    writeUint24le(IDHEADERBYTES, buf)\n\n    this._encrypt = new Push(unslab(tx.subarray(0, KEYBYTES)), undefined, buf.subarray(3 + 32))\n    this._decrypt = new Pull(unslab(rx.subarray(0, KEYBYTES)))\n\n    this.publicKey = publicKey\n    this.remotePublicKey = remotePublicKey\n    this.handshakeHash = handshakeHash\n\n    const id = buf.subarray(3, 3 + 32)\n    streamId(handshakeHash, this.isInitiator, id)\n\n    // initialize secretbox state for unordered messages\n    this._setupSecretSend(handshakeHash)\n\n    this.emit('handshake')\n    // if rawStream is a bridge, also emit it there\n    if (this.rawStream !== this._rawStream) this.rawStream.emit('handshake')\n\n    if (this.destroying) return\n\n    this._rawStream.write(buf)\n  }\n\n  _setupSecretSend (handshakeHash) {\n    this._sendState = b4a.allocUnsafeSlow(32 + 32 + 8 + 8)\n    const encrypt = this._sendState.subarray(0, 32) // secrets\n    const decrypt = this._sendState.subarray(32, 64)\n    const counter = this._sendState.subarray(64, 72) // nonce\n    const initial = this._sendState.subarray(72)\n\n    const inputs = this.isInitiator\n      ? [[NS_INITIATOR, NS_SEND], [NS_RESPONDER, NS_SEND]]\n      : [[NS_RESPONDER, NS_SEND], [NS_INITIATOR, NS_SEND]]\n\n    sodium.crypto_generichash_batch(encrypt, inputs[0], handshakeHash)\n    sodium.crypto_generichash_batch(decrypt, inputs[1], handshakeHash)\n\n    sodium.randombytes_buf(initial)\n    counter.set(initial)\n  }\n\n  _open (cb) {\n    // no autostart or no handshake yet\n    if (this._rawStream === null || (this._handshake === null && this._encrypt === null)) {\n      this._startDone = cb\n      return\n    }\n\n    this._rawStream.on('data', this._onrawdata.bind(this))\n    this._rawStream.on('end', this._onrawend.bind(this))\n    this._rawStream.on('drain', this._onrawdrain.bind(this))\n\n    if (this.enableSend) this._rawStream.on('message', this._onmessage.bind(this))\n\n    if (this._encrypt !== null) {\n      this._resolveOpened(true)\n      return cb(null)\n    }\n\n    this._handshakeDone = cb\n\n    if (this.isInitiator) this._onhandshakert(this._handshake.send())\n  }\n\n  _predestroy () {\n    if (this.rawStream) {\n      const error = getStreamError(this)\n      this.rawStream.destroy(error)\n    }\n\n    if (this._startDone !== null) {\n      const done = this._startDone\n      this._startDone = null\n      done(new Error('Stream destroyed'))\n    }\n\n    if (this._handshakeDone !== null) {\n      const done = this._handshakeDone\n      this._handshakeDone = null\n      done(new Error('Stream destroyed'))\n    }\n\n    if (this._drainDone !== null) {\n      const done = this._drainDone\n      this._drainDone = null\n      done(new Error('Stream destroyed'))\n    }\n  }\n\n  _write (data, cb) {\n    let wrapped = this._outgoingWrapped\n\n    if (data !== this._outgoingPlain) {\n      wrapped = b4a.allocUnsafe(data.byteLength + 3 + ABYTES)\n      wrapped.set(data, 4)\n    } else {\n      this._outgoingWrapped = this._outgoingPlain = null\n    }\n\n    if (wrapped.byteLength - 3 > MAX_ATOMIC_WRITE) {\n      return cb(new Error('Message is too large for an atomic write. Max size is ' + MAX_ATOMIC_WRITE + ' bytes.'))\n    }\n    this.rawBytesWritten += wrapped.byteLength\n\n    writeUint24le(wrapped.byteLength - 3, wrapped)\n    // offset 4 so we can do it in-place\n    this._encrypt.next(wrapped.subarray(4, 4 + data.byteLength), wrapped.subarray(3))\n\n    if (this._keepAliveTimer !== null) this._keepAliveTimer.refresh()\n\n    if (this._rawStream.write(wrapped) === false) {\n      this._drainDone = cb\n    } else {\n      cb(null)\n    }\n  }\n\n  _final (cb) {\n    this._clearKeepAlive()\n    this._ended--\n    this._rawStream.end()\n    cb(null)\n  }\n\n  _resolveOpened (val) {\n    if (this._openedDone === null) return\n    const opened = this._openedDone\n    this._openedDone = null\n    opened(val)\n    if (!val) return\n    this.connected = true\n    this.emit('connect')\n  }\n\n  _clearTimeout () {\n    if (this._timeoutTimer === null) return\n    this._timeoutTimer.destroy()\n    this._timeoutTimer = null\n    this.timeout = 0\n  }\n\n  _clearKeepAlive () {\n    if (this._keepAliveTimer === null) return\n    this._keepAliveTimer.destroy()\n    this._keepAliveTimer = null\n    this.keepAlive = 0\n  }\n\n  _destroy (cb) {\n    this._clearKeepAlive()\n    this._clearTimeout()\n    this._resolveOpened(false)\n    cb(null)\n  }\n\n  _boxMessage (buffer) {\n    const MB = sodium.crypto_secretbox_MACBYTES // 16\n    const NB = sodium.crypto_secretbox_NONCEBYTES // 24\n\n    const counter = this._sendState.subarray(64, 72)\n    sodium.sodium_increment(counter)\n    if (b4a.equals(counter, this._sendState.subarray(72))) {\n      this.destroy(new Error('udp send nonce exchausted'))\n      return\n    }\n\n    const secret = this._sendState.subarray(0, 32)\n    const envelope = b4a.allocUnsafe(8 + MB + buffer.byteLength)\n    const nonce = envelope.subarray(0, NB)\n    const ciphertext = envelope.subarray(8)\n\n    b4a.fill(nonce, 0) // pad suffix\n    nonce.set(counter)\n\n    sodium.crypto_secretbox_easy(ciphertext, buffer, nonce, secret)\n    return envelope\n  }\n\n  send (buffer) {\n    if (!this._sendState) return\n    if (!this.rawStream?.send) return // udx-stream expected\n\n    const message = this._boxMessage(buffer)\n    return this.rawStream.send(message)\n  }\n\n  trySend (buffer) {\n    if (!this._sendState) return\n    if (!this.rawStream?.trySend) return // udx-stream expected\n\n    const message = this._boxMessage(buffer)\n    this.rawStream.trySend(message)\n  }\n\n  _onmessage (buffer) {\n    if (!this._sendState) return // messages before handshake are dropped\n\n    const MB = sodium.crypto_secretbox_MACBYTES // 16\n    const NB = sodium.crypto_secretbox_NONCEBYTES // 24\n\n    if (buffer.byteLength < NB) return // Invalid message\n\n    const nonce = b4a.allocUnsafe(NB)\n    b4a.fill(nonce, 0)\n    nonce.set(buffer.subarray(0, 8))\n\n    const secret = this._sendState.subarray(32, 64)\n    const ciphertext = buffer.subarray(8)\n    const plain = buffer.subarray(8, buffer.byteLength - MB)\n\n    if (ciphertext.byteLength < MB) return // invalid message\n\n    const success = sodium.crypto_secretbox_open_easy(plain, ciphertext, nonce, secret)\n\n    if (success) this.emit('message', plain)\n  }\n\n  alloc (len) {\n    const buf = b4a.allocUnsafe(len + 3 + ABYTES)\n    this._outgoingWrapped = buf\n    this._outgoingPlain = buf.subarray(4, buf.byteLength - ABYTES + 1)\n    return this._outgoingPlain\n  }\n\n  toJSON () {\n    return {\n      isInitiator: this.isInitiator,\n      publicKey: this.publicKey && b4a.toString(this.publicKey, 'hex'),\n      remotePublicKey: this.remotePublicKey && b4a.toString(this.remotePublicKey, 'hex'),\n      connected: this.connected,\n      destroying: this.destroying,\n      destroyed: this.destroyed,\n      rawStream: this.rawStream && this.rawStream.toJSON ? this.rawStream.toJSON() : null\n    }\n  }\n}\n\nfunction writeUint24le (n, buf) {\n  buf[0] = (n & 255)\n  buf[1] = (n >>> 8) & 255\n  buf[2] = (n >>> 16) & 255\n}\n\nfunction streamId (handshakeHash, isInitiator, out = b4a.allocUnsafe(32)) {\n  sodium.crypto_generichash(out, isInitiator ? NS_INITIATOR : NS_RESPONDER, handshakeHash)\n  return out\n}\n\nfunction toBuffer (data) {\n  return typeof data === 'string' ? b4a.from(data) : data\n}\n\nfunction destroyTimeout () {\n  this.destroy(new Error('Stream timed out'))\n}\n\nfunction sendKeepAlive () {\n  const empty = this.alloc(0)\n  this.write(empty)\n}\nconst { Duplex, Writable } = require('streamx')\n\nclass ReversePassThrough extends Duplex {\n  constructor (s) {\n    super()\n    this._stream = s\n    this._ondrain = null\n  }\n\n  _write (data, cb) {\n    if (this._stream.push(data) === false) {\n      this._stream._ondrain = cb\n    } else {\n      cb(null)\n    }\n  }\n\n  _final (cb) {\n    this._stream.push(null)\n    cb(null)\n  }\n\n  _read (cb) {\n    const ondrain = this._ondrain\n    this._ondrain = null\n    if (ondrain) ondrain()\n    cb(null)\n  }\n}\n\nmodule.exports = class Bridge extends Duplex {\n  constructor (noiseStream) {\n    super()\n\n    this.noiseStream = noiseStream\n\n    this._ondrain = null\n    this.reverse = new ReversePassThrough(this)\n  }\n\n  get publicKey () {\n    return this.noiseStream.publicKey\n  }\n\n  get remotePublicKey () {\n    return this.noiseStream.remotePublicKey\n  }\n\n  get handshakeHash () {\n    return this.noiseStream.handshakeHash\n  }\n\n  flush () {\n    return Writable.drained(this)\n  }\n\n  _read (cb) {\n    const ondrain = this._ondrain\n    this._ondrain = null\n    if (ondrain) ondrain()\n    cb(null)\n  }\n\n  _write (data, cb) {\n    if (this.reverse.push(data) === false) {\n      this.reverse._ondrain = cb\n    } else {\n      cb(null)\n    }\n  }\n\n  _final (cb) {\n    this.reverse.push(null)\n    cb(null)\n  }\n}\nconst sodium = require('sodium-universal')\nconst curve = require('noise-curve-ed')\nconst Noise = require('noise-handshake')\nconst b4a = require('b4a')\n\nconst EMPTY = b4a.alloc(0)\n\nmodule.exports = class Handshake {\n  constructor (isInitiator, keyPair, remotePublicKey, pattern) {\n    this.isInitiator = isInitiator\n    this.keyPair = keyPair\n    this.noise = new Noise(pattern, isInitiator, keyPair, { curve })\n    this.noise.initialise(EMPTY, remotePublicKey)\n    this.destroyed = false\n  }\n\n  static keyPair (seed) {\n    const publicKey = b4a.alloc(32)\n    const secretKey = b4a.alloc(64)\n    if (seed) sodium.crypto_sign_seed_keypair(publicKey, secretKey, seed)\n    else sodium.crypto_sign_keypair(publicKey, secretKey)\n    return { publicKey, secretKey }\n  }\n\n  recv (data) {\n    try {\n      this.noise.recv(data)\n      if (this.noise.complete) return this._return(null)\n      return this.send()\n    } catch {\n      this.destroy()\n      return null\n    }\n  }\n\n  // note that the data returned here is framed so we don't have to do an extra copy\n  // when sending it...\n  send () {\n    try {\n      const data = this.noise.send()\n      const wrap = b4a.allocUnsafe(data.byteLength + 3)\n\n      writeUint24le(data.byteLength, wrap)\n      wrap.set(data, 3)\n\n      return this._return(wrap)\n    } catch {\n      this.destroy()\n      return null\n    }\n  }\n\n  destroy () {\n    if (this.destroyed) return\n    this.destroyed = true\n  }\n\n  _return (data) {\n    const tx = this.noise.complete ? b4a.toBuffer(this.noise.tx) : null\n    const rx = this.noise.complete ? b4a.toBuffer(this.noise.rx) : null\n    const hash = this.noise.complete ? b4a.toBuffer(this.noise.hash) : null\n    const remotePublicKey = this.noise.complete ? b4a.toBuffer(this.noise.rs) : null\n\n    return {\n      data,\n      remotePublicKey,\n      hash,\n      tx,\n      rx\n    }\n  }\n}\n\nfunction writeUint24le (n, buf) {\n  buf[0] = (n & 255)\n  buf[1] = (n >>> 8) & 255\n  buf[2] = (n >>> 16) & 255\n}\n{\n  \"name\": \"@hyperswarm/secret-stream\",\n  \"version\": \"6.7.1\",\n  \"description\": \"Secret stream backed by Noise and libsodium's secretstream\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"lib/**.js\"\n  ],\n  \"dependencies\": {\n    \"b4a\": \"^1.1.0\",\n    \"hypercore-crypto\": \"^3.3.1\",\n    \"noise-curve-ed\": \"^2.0.1\",\n    \"noise-handshake\": \"^3.0.2\",\n    \"sodium-secretstream\": \"^1.1.0\",\n    \"sodium-universal\": \"^4.0.0\",\n    \"streamx\": \"^2.14.0\",\n    \"timeout-refresh\": \"^2.0.0\",\n    \"unslab\": \"^1.3.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.3.0\",\n    \"standard\": \"^17.1.0\",\n    \"udx-native\": \"^1.13.2\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/holepunchto/hyperswarm-secret-stream.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/hyperswarm-secret-stream/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/hyperswarm-secret-stream\"\n}\n\"use strict\";\n/**\n * Internal assertion helpers.\n * @module\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.anumber = anumber;\nexports.abytes = abytes;\nexports.ahash = ahash;\nexports.aexists = aexists;\nexports.aoutput = aoutput;\n/** Asserts something is positive integer. */\nfunction anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error('positive integer expected, got ' + n);\n}\n/** Is number an Uint8Array? Copied from utils for perf. */\nfunction isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n/** Asserts something is Uint8Array. */\nfunction abytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n/** Asserts something is hash */\nfunction ahash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    anumber(h.outputLen);\n    anumber(h.blockLen);\n}\n/** Asserts a hash instance has not been destroyed / finished */\nfunction aexists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\n/** Asserts output is properly-sized byte array */\nfunction aoutput(out, instance) {\n    abytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error('digestInto() expects output buffer of length at least ' + min);\n    }\n}\n//# sourceMappingURL=_assert.js.map\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HashMD = void 0;\nexports.setBigUint64 = setBigUint64;\nexports.Chi = Chi;\nexports.Maj = Maj;\n/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/** Choice: a ? b : c */\nfunction Chi(a, b, c) {\n    return (a & b) ^ (~a & c);\n}\n/** Majority function, true if any two inputs is true. */\nfunction Maj(a, b, c) {\n    return (a & b) ^ (a & c) ^ (b & c);\n}\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nclass HashMD extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        (0, _assert_js_1.aexists)(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        (0, _assert_js_1.aexists)(this);\n        (0, _assert_js_1.aoutput)(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.HashMD = HashMD;\n//# sourceMappingURL=_md.js.map\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.add5L = exports.add5H = exports.add4H = exports.add4L = exports.add3H = exports.add3L = exports.rotlBL = exports.rotlBH = exports.rotlSL = exports.rotlSH = exports.rotr32L = exports.rotr32H = exports.rotrBL = exports.rotrBH = exports.rotrSL = exports.rotrSH = exports.shrSL = exports.shrSH = exports.toBig = void 0;\nexports.fromBig = fromBig;\nexports.split = split;\nexports.add = add;\n/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nexports.shrSH = shrSH;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\nexports.shrSL = shrSL;\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nexports.rotrSH = rotrSH;\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\nexports.rotrSL = rotrSL;\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nexports.rotrBH = rotrBH;\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\nexports.rotrBL = rotrBL;\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nexports.rotr32H = rotr32H;\nconst rotr32L = (h, _l) => h;\nexports.rotr32L = rotr32L;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nexports.rotlSH = rotlSH;\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\nexports.rotlSL = rotlSL;\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nexports.rotlBH = rotlBH;\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\nexports.rotlBL = rotlBL;\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nexports.add3L = add3L;\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nexports.add3H = add3H;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nexports.add4L = add4L;\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nexports.add4H = add4H;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nexports.add5L = add5L;\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\nexports.add5H = add5H;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexports.default = u64;\n//# sourceMappingURL=_u64.js.map\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crypto = void 0;\n/**\n * Internal webcrypto alias.\n * We prefer WebCrypto aka globalThis.crypto, which exists in node.js 16+.\n * Falls back to Node.js built-in crypto for Node.js <=v14.\n * See utils.ts for details.\n * @module\n */\n// @ts-ignore\nconst nc = require(\"node:crypto\");\nexports.crypto = nc && typeof nc === 'object' && 'webcrypto' in nc\n    ? nc.webcrypto\n    : nc && typeof nc === 'object' && 'randomBytes' in nc\n        ? nc\n        : undefined;\n//# sourceMappingURL=cryptoNode.js.map\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hmac = exports.HMAC = void 0;\n/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\nclass HMAC extends utils_js_1.Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        (0, _assert_js_1.ahash)(hash);\n        const key = (0, utils_js_1.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        (0, _assert_js_1.aexists)(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        (0, _assert_js_1.aexists)(this);\n        (0, _assert_js_1.abytes)(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\nexports.HMAC = HMAC;\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nexports.hmac = hmac;\nexports.hmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map{\n  \"name\": \"@noble/hashes\",\n  \"version\": \"1.7.1\",\n  \"description\": \"Audited & minimal 0-dependency JS implementation of SHA, RIPEMD, BLAKE, HMAC, HKDF, PBKDF & Scrypt\",\n  \"files\": [\n    \"/*.js\",\n    \"/*.js.map\",\n    \"/*.d.ts\",\n    \"/*.d.ts.map\",\n    \"esm\",\n    \"src/*.ts\"\n  ],\n  \"scripts\": {\n    \"bench\": \"node benchmark/noble.js\",\n    \"bench:compare\": \"MBENCH_DIMS='algorithm,buffer,library' node benchmark/hashes.js\",\n    \"bench:install\": \"cd benchmark; npm install; npm install .. --install-links\",\n    \"build\": \"npm run build:clean; tsc && tsc -p tsconfig.cjs.json\",\n    \"build:clean\": \"rm -f *.{js,d.ts,js.map,d.ts.map} esm/*.{js,js.map,d.ts.map}\",\n    \"build:release\": \"npx jsbt esbuild test/build\",\n    \"lint\": \"prettier --check 'src/**/*.{js,ts}' 'test/**/*.{js,ts}'\",\n    \"format\": \"prettier --write 'src/**/*.{js,ts}' 'test/**/*.{js,ts}'\",\n    \"test\": \"node --import ./test/esm-register.js test/index.js\",\n    \"test:bun\": \"bun test/index.js\",\n    \"test:deno\": \"deno --allow-env --allow-read --import-map=./test/import_map.json test/index.js\",\n    \"test:dos\": \"node --import ./test/esm-register.js test/slow-dos.test.js\",\n    \"test:big\": \"node --import ./test/esm-register.js test/slow-big.test.js\",\n    \"test:kdf\": \"node --import ./test/esm-register.js test/slow-kdf.test.js\"\n  },\n  \"author\": \"Paul Miller (https://paulmillr.com)\",\n  \"homepage\": \"https://paulmillr.com/noble/\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/paulmillr/noble-hashes.git\"\n  },\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"@paulmillr/jsbt\": \"0.3.1\",\n    \"fast-check\": \"3.0.0\",\n    \"micro-bmark\": \"0.4.0\",\n    \"micro-should\": \"0.5.1\",\n    \"prettier\": \"3.3.2\",\n    \"typescript\": \"5.5.2\"\n  },\n  \"engines\": {\n    \"node\": \"^14.21.3 || >=16\"\n  },\n  \"exports\": {\n    \".\": {\n      \"import\": \"./esm/index.js\",\n      \"require\": \"./index.js\"\n    },\n    \"./crypto\": {\n      \"node\": {\n        \"import\": \"./esm/cryptoNode.js\",\n        \"default\": \"./cryptoNode.js\"\n      },\n      \"import\": \"./esm/crypto.js\",\n      \"default\": \"./crypto.js\"\n    },\n    \"./_assert\": {\n      \"import\": \"./esm/_assert.js\",\n      \"require\": \"./_assert.js\"\n    },\n    \"./_md\": {\n      \"import\": \"./esm/_md.js\",\n      \"require\": \"./_md.js\"\n    },\n    \"./argon2\": {\n      \"import\": \"./esm/argon2.js\",\n      \"require\": \"./argon2.js\"\n    },\n    \"./blake1\": {\n      \"import\": \"./esm/blake1.js\",\n      \"require\": \"./blake1.js\"\n    },\n    \"./blake2b\": {\n      \"import\": \"./esm/blake2b.js\",\n      \"require\": \"./blake2b.js\"\n    },\n    \"./blake2s\": {\n      \"import\": \"./esm/blake2s.js\",\n      \"require\": \"./blake2s.js\"\n    },\n    \"./blake3\": {\n      \"import\": \"./esm/blake3.js\",\n      \"require\": \"./blake3.js\"\n    },\n    \"./eskdf\": {\n      \"import\": \"./esm/eskdf.js\",\n      \"require\": \"./eskdf.js\"\n    },\n    \"./hkdf\": {\n      \"import\": \"./esm/hkdf.js\",\n      \"require\": \"./hkdf.js\"\n    },\n    \"./hmac\": {\n      \"import\": \"./esm/hmac.js\",\n      \"require\": \"./hmac.js\"\n    },\n    \"./pbkdf2\": {\n      \"import\": \"./esm/pbkdf2.js\",\n      \"require\": \"./pbkdf2.js\"\n    },\n    \"./ripemd160\": {\n      \"import\": \"./esm/ripemd160.js\",\n      \"require\": \"./ripemd160.js\"\n    },\n    \"./scrypt\": {\n      \"import\": \"./esm/scrypt.js\",\n      \"require\": \"./scrypt.js\"\n    },\n    \"./sha1\": {\n      \"import\": \"./esm/sha1.js\",\n      \"require\": \"./sha1.js\"\n    },\n    \"./sha2\": {\n      \"import\": \"./esm/sha2.js\",\n      \"require\": \"./sha2.js\"\n    },\n    \"./sha3-addons\": {\n      \"import\": \"./esm/sha3-addons.js\",\n      \"require\": \"./sha3-addons.js\"\n    },\n    \"./sha3\": {\n      \"import\": \"./esm/sha3.js\",\n      \"require\": \"./sha3.js\"\n    },\n    \"./sha256\": {\n      \"import\": \"./esm/sha256.js\",\n      \"require\": \"./sha256.js\"\n    },\n    \"./sha512\": {\n      \"import\": \"./esm/sha512.js\",\n      \"require\": \"./sha512.js\"\n    },\n    \"./utils\": {\n      \"import\": \"./esm/utils.js\",\n      \"require\": \"./utils.js\"\n    }\n  },\n  \"sideEffects\": false,\n  \"browser\": {\n    \"node:crypto\": false,\n    \"./crypto\": \"./crypto.js\"\n  },\n  \"keywords\": [\n    \"sha\",\n    \"sha2\",\n    \"sha3\",\n    \"sha256\",\n    \"sha512\",\n    \"keccak\",\n    \"kangarootwelve\",\n    \"ripemd160\",\n    \"blake2\",\n    \"blake3\",\n    \"hmac\",\n    \"hkdf\",\n    \"pbkdf2\",\n    \"scrypt\",\n    \"kdf\",\n    \"hash\",\n    \"cryptography\",\n    \"security\",\n    \"noble\"\n  ],\n  \"funding\": \"https://paulmillr.com/funding/\"\n}\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pbkdf2 = pbkdf2;\nexports.pbkdf2Async = pbkdf2Async;\n/**\n * PBKDF (RFC 2898). Can be used to create a key from password and salt.\n * @module\n */\nconst _assert_js_1 = require(\"./_assert.js\");\nconst hmac_js_1 = require(\"./hmac.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash, _password, _salt, _opts) {\n    (0, _assert_js_1.ahash)(hash);\n    const opts = (0, utils_js_1.checkOpts)({ dkLen: 32, asyncTick: 10 }, _opts);\n    const { c, dkLen, asyncTick } = opts;\n    (0, _assert_js_1.anumber)(c);\n    (0, _assert_js_1.anumber)(dkLen);\n    (0, _assert_js_1.anumber)(asyncTick);\n    if (c < 1)\n        throw new Error('PBKDF2: iterations (c) should be >= 1');\n    const password = (0, utils_js_1.toBytes)(_password);\n    const salt = (0, utils_js_1.toBytes)(_salt);\n    // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n    const DK = new Uint8Array(dkLen);\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    const PRF = hmac_js_1.hmac.create(hash, password);\n    const PRFSalt = PRF._cloneInto().update(salt);\n    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\nfunction pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {\n    PRF.destroy();\n    PRFSalt.destroy();\n    if (prfW)\n        prfW.destroy();\n    u.fill(0);\n    return DK;\n}\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n * @example\n * const key = pbkdf2(sha256, 'password', 'salt', { dkLen: 32, c: 2 ** 18 });\n */\nfunction pbkdf2(hash, password, salt, opts) {\n    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = (0, utils_js_1.createView)(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        for (let ui = 1; ui < c; ui++) {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        }\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function. Async version.\n * @example\n * await pbkdf2Async(sha256, 'password', 'salt', { dkLen: 32, c: 500_000 });\n */\nasync function pbkdf2Async(hash, password, salt, opts) {\n    const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = (0, utils_js_1.createView)(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        await (0, utils_js_1.asyncLoop)(c - 1, asyncTick, () => {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        });\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n//# sourceMappingURL=pbkdf2.js.map\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha224 = exports.sha256 = exports.SHA256 = void 0;\n/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nconst _md_js_1 = require(\"./_md.js\");\nconst utils_js_1 = require(\"./utils.js\");\n/** Round constants: first 32 bits of fractional parts of the cube roots of the first 64 primes 2..311). */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n/** Initial state: first 32 bits of fractional parts of the square roots of the first 8 primes 2..19. */\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n/**\n * Temporary buffer, not used to store anything between runs.\n * Named this way because it matches specification.\n */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends _md_js_1.HashMD {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n            const T1 = (H + sigma1 + (0, _md_js_1.Chi)(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n            const T2 = (sigma0 + (0, _md_js_1.Maj)(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\nexports.SHA256 = SHA256;\n/**\n * Constants taken from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf.\n */\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/** SHA2-256 hash function */\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\n/** SHA2-224 hash function */\nexports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());\n//# sourceMappingURL=sha256.js.map\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha384 = exports.sha512_256 = exports.sha512_224 = exports.sha512 = exports.SHA384 = exports.SHA512_256 = exports.SHA512_224 = exports.SHA512 = void 0;\n/**\n * SHA2-512 a.k.a. sha512 and sha384. It is slower than sha256 in js because u64 operations are slow.\n *\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [the paper on truncated SHA512/256](https://eprint.iacr.org/2010/548.pdf).\n * @module\n */\nconst _md_js_1 = require(\"./_md.js\");\nconst _u64_js_1 = require(\"./_u64.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => _u64_js_1.default.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nclass SHA512 extends _md_js_1.HashMD {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = _u64_js_1.default.rotrSH(W15h, W15l, 1) ^ _u64_js_1.default.rotrSH(W15h, W15l, 8) ^ _u64_js_1.default.shrSH(W15h, W15l, 7);\n            const s0l = _u64_js_1.default.rotrSL(W15h, W15l, 1) ^ _u64_js_1.default.rotrSL(W15h, W15l, 8) ^ _u64_js_1.default.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = _u64_js_1.default.rotrSH(W2h, W2l, 19) ^ _u64_js_1.default.rotrBH(W2h, W2l, 61) ^ _u64_js_1.default.shrSH(W2h, W2l, 6);\n            const s1l = _u64_js_1.default.rotrSL(W2h, W2l, 19) ^ _u64_js_1.default.rotrBL(W2h, W2l, 61) ^ _u64_js_1.default.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = _u64_js_1.default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = _u64_js_1.default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = _u64_js_1.default.rotrSH(Eh, El, 14) ^ _u64_js_1.default.rotrSH(Eh, El, 18) ^ _u64_js_1.default.rotrBH(Eh, El, 41);\n            const sigma1l = _u64_js_1.default.rotrSL(Eh, El, 14) ^ _u64_js_1.default.rotrSL(Eh, El, 18) ^ _u64_js_1.default.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = _u64_js_1.default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = _u64_js_1.default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = _u64_js_1.default.rotrSH(Ah, Al, 28) ^ _u64_js_1.default.rotrBH(Ah, Al, 34) ^ _u64_js_1.default.rotrBH(Ah, Al, 39);\n            const sigma0l = _u64_js_1.default.rotrSL(Ah, Al, 28) ^ _u64_js_1.default.rotrBL(Ah, Al, 34) ^ _u64_js_1.default.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = _u64_js_1.default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = _u64_js_1.default.add3L(T1l, sigma0l, MAJl);\n            Ah = _u64_js_1.default.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = _u64_js_1.default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = _u64_js_1.default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = _u64_js_1.default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = _u64_js_1.default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = _u64_js_1.default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = _u64_js_1.default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = _u64_js_1.default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = _u64_js_1.default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexports.SHA512 = SHA512;\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nexports.SHA512_224 = SHA512_224;\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nexports.SHA512_256 = SHA512_256;\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexports.SHA384 = SHA384;\n/** SHA2-512 hash function. */\nexports.sha512 = (0, utils_js_1.wrapConstructor)(() => new SHA512());\n/** SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks. */\nexports.sha512_224 = (0, utils_js_1.wrapConstructor)(() => new SHA512_224());\n/** SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks. */\nexports.sha512_256 = (0, utils_js_1.wrapConstructor)(() => new SHA512_256());\n/** SHA2-384 hash function. */\nexports.sha384 = (0, utils_js_1.wrapConstructor)(() => new SHA384());\n//# sourceMappingURL=sha512.js.map\"use strict\";\n/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Hash = exports.nextTick = exports.byteSwapIfBE = exports.isLE = void 0;\nexports.isBytes = isBytes;\nexports.u8 = u8;\nexports.u32 = u32;\nexports.createView = createView;\nexports.rotr = rotr;\nexports.rotl = rotl;\nexports.byteSwap = byteSwap;\nexports.byteSwap32 = byteSwap32;\nexports.bytesToHex = bytesToHex;\nexports.hexToBytes = hexToBytes;\nexports.asyncLoop = asyncLoop;\nexports.utf8ToBytes = utf8ToBytes;\nexports.toBytes = toBytes;\nexports.concatBytes = concatBytes;\nexports.checkOpts = checkOpts;\nexports.wrapConstructor = wrapConstructor;\nexports.wrapConstructorWithOpts = wrapConstructorWithOpts;\nexports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;\nexports.randomBytes = randomBytes;\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nconst crypto_1 = require(\"@noble/hashes/crypto\");\nconst _assert_js_1 = require(\"./_assert.js\");\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nfunction isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n// Cast array to different type\nfunction u8(arr) {\n    return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\nfunction u32(arr) {\n    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n// Cast array to view\nfunction createView(arr) {\n    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** The rotate right (circular right shift) operation for uint32 */\nfunction rotr(word, shift) {\n    return (word << (32 - shift)) | (word >>> shift);\n}\n/** The rotate left (circular left shift) operation for uint32 */\nfunction rotl(word, shift) {\n    return (word << shift) | ((word >>> (32 - shift)) >>> 0);\n}\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexports.isLE = (() => new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n// The byte swap operation for uint32\nfunction byteSwap(word) {\n    return (((word << 24) & 0xff000000) |\n        ((word << 8) & 0xff0000) |\n        ((word >>> 8) & 0xff00) |\n        ((word >>> 24) & 0xff));\n}\n/** Conditionally byte swap if on a big-endian platform */\nexports.byteSwapIfBE = exports.isLE\n    ? (n) => n\n    : (n) => byteSwap(n);\n/** In place byte swap for Uint32Array */\nfunction byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * Convert byte array to hex string.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    (0, _assert_js_1.abytes)(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * Convert hex string to byte array.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nconst nextTick = async () => { };\nexports.nextTick = nextTick;\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await (0, exports.nextTick)();\n        ts += diff;\n    }\n}\n/**\n * Convert JS string to byte array.\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('utf8ToBytes expected string, got ' + typeof str);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    (0, _assert_js_1.abytes)(data);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        (0, _assert_js_1.abytes)(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n/** For runtime check if class implements interface */\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexports.Hash = Hash;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\n/** Wraps hash function, creating an interface on top of it */\nfunction wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nfunction wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nfunction randomBytes(bytesLength = 32) {\n    if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === 'function') {\n        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    // Legacy Node.js compatibility\n    if (crypto_1.crypto && typeof crypto_1.crypto.randomBytes === 'function') {\n        return crypto_1.crypto.randomBytes(bytesLength);\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.mapconst b4a = require('b4a')\nconst ReadyResource = require('ready-resource')\nconst debounceify = require('debounceify')\nconst c = require('compact-encoding')\nconst safetyCatch = require('safety-catch')\nconst hypercoreId = require('hypercore-id-encoding')\nconst assert = require('nanoassert')\nconst SignalPromise = require('signal-promise')\nconst CoreCoupler = require('core-coupler')\nconst mutexify = require('mutexify/promise')\nconst ProtomuxWakeup = require('protomux-wakeup')\nconst rrp = require('resolve-reject-promise')\n\nconst Linearizer = require('./lib/linearizer.js')\nconst SystemView = require('./lib/system.js')\nconst UpdateChanges = require('./lib/updates.js')\nconst messages = require('./lib/messages.js')\nconst Timer = require('./lib/timer.js')\nconst Writer = require('./lib/writer.js')\nconst ActiveWriters = require('./lib/active-writers.js')\nconst AutoWakeup = require('./lib/wakeup.js')\n\nconst FastForward = require('./lib/fast-forward.js')\nconst AutoStore = require('./lib/store.js')\nconst ApplyState = require('./lib/apply-state.js')\nconst { PublicApplyCalls } = require('./lib/apply-calls.js')\nconst boot = require('./lib/boot.js')\n\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\nconst INTERRUPT = new Error('Apply interrupted')\nconst BINARY_ENCODING = c.from('binary')\n\nconst AUTOBASE_VERSION = 1\n\nconst RECOVERIES = 3\nconst FF_RECOVERY = 1\n\n// default is to automatically ack\nconst DEFAULT_ACK_INTERVAL = 10_000\nconst DEFAULT_ACK_THRESHOLD = 4\n\nconst REMOTE_ADD_BATCH = 64\nconst MIN_FF_WAIT = 300_000 // wait at least 5min before attempting to ff again after failure\n\nclass WakeupHandler {\n  constructor (base, discoveryKey) {\n    this.active = true\n    this.discoveryKey = discoveryKey\n    this.base = base\n  }\n\n  onpeeradd (peer, session) {\n    if (this.base._coupler) this.base._coupler.update(peer.stream)\n  }\n\n  onpeerremove (peer, session) {\n    // do nothing\n  }\n\n  onlookup (req, peer, session) {\n    const wakeup = this.base._getWakeup()\n    if (wakeup.length === 0) return\n    session.announce(peer, wakeup)\n  }\n\n  onannounce (wakeup, peer, session) {\n    if (this.base.isFastForwarding()) return\n    this.base.hintWakeup(wakeup)\n  }\n}\n\nmodule.exports = class Autobase extends ReadyResource {\n  constructor (store, bootstrap, handlers = {}) {\n    if (Array.isArray(bootstrap)) bootstrap = bootstrap[0] // TODO: just a quick compat, lets remove soon\n\n    if (bootstrap && typeof bootstrap !== 'string' && !b4a.isBuffer(bootstrap)) {\n      handlers = bootstrap\n      bootstrap = null\n    }\n\n    super()\n\n    const key = bootstrap ? toKey(bootstrap) : null\n\n    this.id = null\n    this.key = key\n    this.discoveryKey = null\n\n    this.keyPair = null\n    this.valueEncoding = c.from(handlers.valueEncoding || 'binary')\n    this.store = store\n    this.globalCache = store.globalCache || null\n    this.migrated = false\n\n    this.encrypted = handlers.encrypted || !!handlers.encryptionKey\n    this.encrypt = !!handlers.encrypt\n    this.encryptionKey = handlers.encryptionKey || null\n    this.encryption = null\n\n    this.local = null\n    this.localWriter = null\n    this.isIndexer = false\n\n    this.activeWriters = new ActiveWriters()\n    this.linearizer = null\n    this.updating = false\n\n    this.nukeTip = !!handlers.nukeTip\n\n    this.wakeupOwner = !handlers.wakeup\n    this.wakeupCapability = handlers.wakeupCapability || null\n    this.wakeupProtocol = handlers.wakeup || new ProtomuxWakeup()\n    this.wakeupSession = null\n\n    this._primaryBootstrap = null\n\n    this.fastForwardEnabled = handlers.fastForward !== false\n    this.fastForwarding = null\n    this.fastForwardTo = null\n    this.fastForwardFailedAt = 0\n\n    this._bootstrapWriters = [] // might contain dups, but thats ok\n    this._bootstrapWritersChanged = false\n\n    this._checkWriters = []\n    this._optimistic = -1\n    this._appended = 0\n    this._appending = null\n    this._wakeup = new AutoWakeup(this)\n    this._wakeupHints = new Map()\n    this._wakeupPeerBound = this._wakeupPeer.bind(this)\n    this._coupler = null\n\n    this._lock = mutexify()\n\n    this._needsWakeup = true\n    this._needsWakeupHeads = true\n\n    this._updates = []\n    this._handlers = handlers || {}\n    this._warn = emitWarning.bind(this)\n\n    this._draining = false\n    this._writable = null\n    this._advancing = null\n    this._interrupting = false\n    this._caughtup = false\n\n    this.paused = false\n\n    this._bump = debounceify(() => {\n      this._advancing = this._advance()\n      return this._advancing\n    })\n\n    this._onremotewriterchangeBound = this._onremotewriterchange.bind(this)\n\n    this.maxSupportedVersion = AUTOBASE_VERSION // working version\n\n    this._preopen = null\n\n    this._hasOpen = !!this._handlers.open\n    this._hasApply = !!this._handlers.apply\n    this._hasOptimisticApply = !!this._handlers.optimistic\n    this._hasUpdate = !!this._handlers.update\n    this._hasClose = !!this._handlers.close\n\n    this._viewStore = new AutoStore(this)\n    this._applyState = null\n\n    this.view = null\n    this.core = null\n    this.version = -1\n    this.interrupted = null\n    this.recoveries = RECOVERIES\n\n    const {\n      ackInterval = DEFAULT_ACK_INTERVAL,\n      ackThreshold = DEFAULT_ACK_THRESHOLD\n    } = handlers\n\n    this._ackInterval = ackInterval\n    this._ackThreshold = ackThreshold\n    this._ackTickThreshold = ackThreshold\n    this._ackTick = 0\n\n    this._ackTimer = null\n    this._acking = false\n\n    this._waiting = new SignalPromise()\n    this._bootRecovery = false\n\n    this.view = this._hasOpen ? this._handlers.open(this._viewStore, new PublicApplyCalls(this)) : null\n    this.core = this._viewStore.get({ name: '_system' })\n\n    if (this.fastForwardEnabled && isObject(handlers.fastForward)) {\n      this._runFastForward(new FastForward(this, handlers.fastForward.key, { verified: false })).catch(noop)\n    }\n\n    this.ready().catch(safetyCatch)\n  }\n\n  [inspect] (depth, opts) {\n    let indent = ''\n    if (typeof opts.indentationLvl === 'number') {\n      while (indent.length < opts.indentationLvl) indent += ' '\n    }\n\n    return indent + 'Autobase { ... }'\n  }\n\n  // just compat, use .key\n  get bootstrap () {\n    return this.key\n  }\n\n  // TODO: compat, will be removed\n  get bootstraps () {\n    return [this.bootstrap]\n  }\n\n  get writable () {\n    return this.localWriter !== null && !this.localWriter.isRemoved\n  }\n\n  get ackable () {\n    return this.localWriter !== null && this.localWriter.isActiveIndexer\n  }\n\n  get signedLength () {\n    return this.core.signedLength\n  }\n\n  get indexedLength () {\n    return this._applyState ? this._applyState.indexedLength : 0\n  }\n\n  get length () {\n    return this.core.length\n  }\n\n  hash () {\n    return this.core.treeHash()\n  }\n\n  // deprecated, use .core.key\n  getSystemKey () {\n    return this.core.key\n  }\n\n  get system () {\n    return this._applyState && this._applyState.system\n  }\n\n  // deprecated\n  async getIndexedInfo () {\n    if (this.opened === false) await this.ready()\n    return this._applyState && this._applyState.system.getIndexedInfo(this._applyState.indexedLength)\n  }\n\n  _isActiveIndexer () {\n    return this.localWriter ? this.localWriter.isActiveIndexer : false\n  }\n\n  replicate (isInitiator, opts) {\n    const stream = this.store.replicate(isInitiator, opts)\n    this.wakeupProtocol.addStream(stream)\n    return stream\n  }\n\n  heads () {\n    if (!this._applyState || !this._applyState.opened) return []\n    const nodes = new Array(this._applyState.system.heads.length)\n    for (let i = 0; i < this._applyState.system.heads.length; i++) nodes[i] = this._applyState.system.heads[i]\n    return nodes.sort(compareNodes)\n  }\n\n  hintWakeup (hints) {\n    if (!Array.isArray(hints)) hints = [hints]\n    for (const { key, length } of hints) {\n      const hex = b4a.toString(key, 'hex')\n      const prev = this._wakeupHints.get(hex)\n      if (!prev || length === -1 || prev < length) this._wakeupHints.set(hex, length)\n    }\n    this._queueBump()\n  }\n\n  _queueBump () {\n    this._bump().catch(safetyCatch)\n  }\n\n  async _runPreOpen () {\n    if (this._handlers.wait) await this._handlers.wait()\n\n    await this.store.ready()\n\n    this.keyPair = (await this._handlers.keyPair) || null\n\n    const result = await boot(this.store, this.key, {\n      encryptionKey: this.encryptionKey,\n      encrypt: this.encrypt,\n      keyPair: this.keyPair\n    })\n\n    const pointer = await result.local.getUserData('autobase/boot')\n\n    if (pointer) {\n      const { recoveries } = c.decode(messages.BootRecord, pointer)\n      this.recoveries = recoveries\n    }\n\n    this._primaryBootstrap = result.bootstrap\n    this.local = result.local\n\n    this.key = result.bootstrap.key\n    this.discoveryKey = result.bootstrap.discoveryKey\n    this.id = result.bootstrap.id\n\n    this.encryptionKey = result.encryptionKey\n    if (this.encryptionKey) this.encryption = { key: this.encryptionKey }\n\n    if (this.encrypted) {\n      assert(this.encryptionKey !== null, 'Encryption key is expected')\n    }\n\n    if (this.nukeTip) await this._nukeTip()\n\n    this.setWakeup(this.wakeupCapability || this.key, null)\n  }\n\n  async _nukeTipBatch (key, length) {\n    const core = this.store.get({ key, active: false })\n    await core.ready()\n\n    const batch = core.session({ name: 'batch' })\n    await batch.ready()\n    if (batch.length > length) await batch.truncate(length)\n    await batch.close()\n\n    await core.close()\n  }\n\n  // TODO: not atomic atm, so more of a (very useful) debug helper\n  async _nukeTip () {\n    const pointer = await this.local.getUserData('autobase/boot')\n    if (!pointer) return\n\n    const boot = c.decode(messages.BootRecord, pointer)\n\n    const tx = this.local.state.storage.write()\n    tx.deleteLocalRange(b4a.from([messages.LINEARIZER_PREFIX]), b4a.from([messages.LINEARIZER_PREFIX + 1]))\n    await tx.flush()\n\n    await this._nukeTipBatch(boot.key, boot.indexedLength)\n\n    const encryption = this.encryptionKey\n      ? { key: AutoStore.getBlockKey(this.bootstrap, this.encryptionKey, '_system'), block: true }\n      : null\n\n    const core = this.store.get({ key: boot.key, encryption, active: false })\n    await core.ready()\n\n    const batch = core.session({ name: 'batch' })\n    await batch.ready()\n\n    const info = await SystemView.getIndexedInfo(batch, boot.indexedLength)\n    await batch.close()\n\n    for (const view of info.views) { // ensure any views ref'ed by system are consistent as well\n      await this._nukeTipBatch(view.key, view.length)\n    }\n\n    if (boot.heads) this.hintWakeup(boot.heads)\n    if (this.local.length) this.hintWakeup([{ key: this.local.key, length: this.local.length }])\n  }\n\n  setWakeup (cap, discoveryKey) {\n    if (this.wakeupSession) this.wakeupSession.destroy()\n    if (!discoveryKey && b4a.equals(cap, this.key)) discoveryKey = this.discoveryKey\n    this.wakeupSession = this.wakeupProtocol.session(cap, new WakeupHandler(this, discoveryKey || null))\n  }\n\n  async _getMigrationPointer (key, length) {\n    const encryption = this.encryptionKey\n      ? { key: AutoStore.getBlockKey(this.bootstrap, this.encryptionKey, '_system'), block: true }\n      : null\n\n    const core = this.store.get({ key, active: false, encryption })\n    await core.ready()\n\n    const min = (core.manifest && core.manifest.prologue) ? core.manifest.prologue.length : 0\n\n    for (let i = length - 1; i >= min; i--) {\n      if (!(await core.has(i))) continue\n\n      const sys = new SystemView(core, { checkout: i + 1 })\n      await sys.ready()\n\n      let good = true\n\n      for (const v of sys.views) {\n        const vc = this.store.get({ key: v.key, active: false })\n        await vc.ready()\n        if (vc.length < v.length) good = false\n        await vc.close()\n      }\n\n      await sys.close()\n      if (!good) continue\n\n      return i + 1\n    }\n\n    return min\n  }\n\n  // migrating from 6 -> latest\n  async _migrate6 (key, length) {\n    const core = this.store.get({ key, active: false })\n    await core.ready()\n    const batch = core.session({ name: 'batch', overwrite: true, checkout: length })\n    await batch.ready()\n    await batch.close()\n    await core.close()\n  }\n\n  // called by view-store for bootstrapping\n  async _getSystemInfo () {\n    const boot = await this._getBootRecord()\n    if (!boot.key) return null\n\n    const migrated = !!boot.heads\n\n    if (migrated) { // ensure system batch is consistent on initial migration\n      await this._migrate6(boot.key, boot.indexedLength)\n    }\n\n    const encryption = this.encryptionKey\n      ? { key: AutoStore.getBlockKey(this.bootstrap, this.encryptionKey, '_system'), block: true }\n      : null\n\n    const core = this.store.get({ key: boot.key, encryption, active: false })\n    await core.ready()\n\n    const batch = core.session({ name: 'batch' })\n    const info = await SystemView.getIndexedInfo(batch, boot.indexedLength)\n    await batch.close()\n    await core.close()\n\n    if (info.version > AUTOBASE_VERSION) {\n      throw new Error('Autobase upgrade required.')\n    }\n\n    // just compat\n    if (migrated) {\n      this.migrated = true\n\n      for (const view of info.views) { // ensure any views ref'ed by system are consistent as well\n        await this._migrate6(view.key, view.length)\n      }\n\n      if (boot.heads) this.hintWakeup(boot.heads)\n      if (this.local.length) this.hintWakeup([{ key: this.local.key, length: this.local.length }])\n    }\n\n    return {\n      key: boot.key,\n      indexers: info.indexers,\n      views: info.views\n    }\n  }\n\n  // called by the apply state for bootstrapping\n  async _getBootRecord () {\n    await this._preopen\n\n    const pointer = await this.local.getUserData('autobase/boot')\n\n    const boot = pointer\n      ? c.decode(messages.BootRecord, pointer)\n      : { key: null, indexedLength: 0, indexersUpdated: false, fastForwarding: false, recoveries: RECOVERIES, heads: null }\n\n    if (boot.heads) {\n      const len = await this._getMigrationPointer(boot.key, boot.indexedLength)\n      if (len !== boot.indexedLength) this._warn(new Error('Invalid pointer in migration, correcting (' + len + ' vs ' + boot.indexedLength + ')'))\n      boot.indexedLength = len\n    }\n\n    return boot\n  }\n\n  _interrupt (reason) {\n    assert(this._applyState.applying, 'Interrupt is only allowed in apply')\n    this._interrupting = true\n    if (reason) this.interrupted = reason\n    throw INTERRUPT\n  }\n\n  async flush () {\n    if (this.opened === false) await this.ready()\n    await this._advancing\n  }\n\n  recouple () {\n    if (this._coupler) this._coupler.destroy()\n    const core = this._viewStore.getSystemCore()\n    this._coupler = new CoreCoupler(core, this._wakeupPeerBound)\n  }\n\n  _updateBootstrapWriters () {\n    const writers = this.linearizer.getBootstrapWriters()\n\n    // first clear all, but without applying it for churn reasons\n    for (const writer of this._bootstrapWriters) {\n      writer.isBootstrap = false\n      writer.isCoupled = false\n    }\n\n    // all passed are bootstraps\n    for (const writer of writers) {\n      writer.isCoupled = true\n      writer.setBootstrap(true)\n    }\n\n    // reset activity on old ones, all should be in sync now\n    for (const writer of this._bootstrapWriters) {\n      if (writer.isBootstrap === false) writer.setBootstrap(false)\n    }\n\n    this._bootstrapWriters = writers\n    this._bootstrapWritersChanged = false\n  }\n\n  async _openLinearizer () {\n    if (this._applyState.system.bootstrapping) {\n      await this._makeLinearizer(null)\n      this._bootstrapLinearizer()\n      return\n    }\n\n    await this._makeLinearizerFromViewState()\n  }\n\n  async _catchupApplyState () {\n    if (await this._applyState.shouldMigrate()) {\n      await this._migrate()\n    } else {\n      await this._applyState.catchup(this.linearizer)\n    }\n\n    this._caughtup = true\n  }\n\n  async _open () {\n    this._preopen = this._runPreOpen()\n    await this._preopen\n\n    if (this.closing) return\n\n    this._applyState = new ApplyState(this)\n\n    try {\n      await this._applyState.ready()\n    } catch (err) {\n      if (this.closing) return\n\n      try {\n        await this._applyState.close()\n      } catch {}\n\n      try {\n        await this.core.ready()\n      } catch {}\n\n      this._applyState = null\n      if (this.closing) return\n\n      this._warn(new Error('Failed to boot due to: ' + err.message))\n\n      if (this.recoveries < RECOVERIES) {\n        this._bootRecovery = true\n        this._queueBump()\n        return\n      }\n\n      throw err\n    }\n\n    try {\n      await this._openLinearizer()\n      await this.core.ready()\n      await this._wakeup.ready()\n    } catch (err) {\n      if (this.closing) return\n      throw err\n    }\n\n    if (this.core.length - this._applyState.indexedLength > this._ackTickThreshold) {\n      this._ackTick = this._ackTickThreshold\n    }\n    if (this.localWriter && this._ackInterval) {\n      this._startAckTimer()\n    }\n\n    this._updateBootstrapWriters()\n\n    this.recouple()\n    this._queueFastForward()\n\n    // queue a full bump that handles wakeup etc (not legal to wait for that here)\n    this._queueBump()\n  }\n\n  async _closeLocalCores () {\n    const closing = []\n    if (this._primaryBootstrap) closing.push(this._primaryBootstrap.close())\n    if (this.localWriter) closing.push(this._unsetLocalWriter())\n    closing.push(this._closeAllActiveWriters())\n    if (this.localWriter) await this.localWriter.close()\n    await Promise.all(closing)\n    await this.local.close()\n  }\n\n  async _close () {\n    this._interrupting = true\n    await Promise.resolve() // defer one tick\n\n    if (this.wakeupSession) this.wakeupSession.destroy()\n    if (this.wakeupOwner) this.wakeupProtocol.destroy()\n\n    if (this.fastForwarding) await this.fastForwarding.close()\n\n    if (this._coupler) this._coupler.destroy()\n    this._coupler = null\n    this._waiting.notify(null)\n\n    await this.activeWriters.clear()\n\n    const closing = this._advancing ? this._advancing.catch(safetyCatch) : null\n    await this._closeLocalCores()\n\n    if (this._ackTimer) {\n      this._ackTimer.stop()\n      await this._ackTimer.flush()\n    }\n\n    await this._wakeup.close()\n\n    if (this._hasClose) await this._handlers.close(this.view)\n    if (this._applyState) await this._applyState.close()\n\n    await this._viewStore.close()\n    await this.core.close()\n    await this.store.close()\n\n    if (this._writable) this._writable.resolve(false)\n\n    await closing\n  }\n\n  _onError (err) {\n    if (this.closing) return\n\n    if (err === INTERRUPT) {\n      this.emit('interrupt', this.interrupted)\n      this.emit('update')\n      return\n    }\n\n    this.close().catch(safetyCatch)\n\n    // if no one is listening we should crash! we cannot rely on the EE here\n    // as this is wrapped in a promise so instead of nextTick throw it\n    if (ReadyResource.listenerCount(this, 'error') === 0) {\n      crashSoon(err)\n      return\n    }\n\n    this.emit('error', err)\n  }\n\n  async _closeWriter (w, now) {\n    this.activeWriters.delete(w)\n    await w.close()\n  }\n\n  async _gcWriters () {\n    // just return early, why not\n    if (this._checkWriters.length === 0) return\n\n    while (this._checkWriters.length > 0) {\n      const w = this._checkWriters.pop()\n\n      // doesnt hurt\n      w.updateActivity()\n\n      if (!w.flushed()) continue\n\n      const unqueued = this._wakeup.unqueue(w.core.key, w.core.length)\n\n      if (!unqueued || w.isActiveIndexer) continue\n      if (this.localWriter === w) continue\n\n      await this._closeWriter(w, false)\n    }\n\n    await this._wakeup.flush()\n  }\n\n  _startAckTimer () {\n    if (this._ackTimer) return\n    this._ackTimer = new Timer(this._backgroundAck.bind(this), this._ackInterval)\n    this._bumpAckTimer()\n  }\n\n  _bumpAckTimer () {\n    if (!this._ackTimer) return\n    this._ackTimer.bump()\n  }\n\n  async update () {\n    if (this.opened === false) await this.ready()\n\n    try {\n      await this._bump()\n      if (this._acking) await this._bump() // if acking just rebump incase it was triggered from above...\n    } catch (err) {\n      if (this._interrupting) return\n      throw err\n    }\n  }\n\n  // runs in bg, not allowed to throw\n  // TODO: refactor so this only moves the writer affected to a updated set\n  async _onremotewriterchange () {\n    this._bumpAckTimer()\n\n    try {\n      await this._bump()\n    } catch {}\n  }\n\n  _onwakeup () {\n    this._needsWakeup = true\n    this._queueBump()\n  }\n\n  isFastForwarding () {\n    if (this.fastForwardTo !== null) return true\n    return this.fastForwardEnabled && this.fastForwarding !== null\n  }\n\n  _backgroundAck () {\n    return this.ack(true)\n  }\n\n  async ack (bg = false) {\n    if (this.opened === false) await this.ready()\n    if (this.localWriter === null || this._acking || this._interrupting || this._appending !== null) return\n\n    if (this._applyState === null) {\n      try {\n        await this._bump()\n      } catch {}\n      if (this._applyState === null || this._interrupting) return\n    }\n\n    const applyState = this._applyState\n    if (applyState.opened === false) await applyState.ready()\n\n    const isPendingIndexer = applyState.isLocalPendingIndexer()\n\n    // if no one is waiting for our index manifest, wait for FF before pushing an ack\n    if ((!isPendingIndexer && this.isFastForwarding()) || this._interrupting) return\n\n    const isIndexer = applyState.isLocalIndexer() || isPendingIndexer\n    if (!isIndexer) return\n\n    this._acking = true\n\n    try {\n      await this._bump()\n    } catch (err) {\n      if (!this._interrupting) throw err\n    }\n\n    if (this._interrupting || !this.localWriter || this.localWriter.closed) {\n      this._acking = false\n      return\n    }\n\n    // avoid lumping acks together due to the bump wait here\n    if (this._ackTimer && bg) await this._ackTimer.asapStandalone()\n    if (this._interrupting) {\n      this._acking = false\n      return\n    }\n\n    const alwaysWrite = isPendingIndexer || this._applyState.shouldWrite()\n\n    if (alwaysWrite || this.linearizer.shouldAck(this.localWriter, false)) {\n      try {\n        if (this.localWriter && !this.localWriter.closed) await this.append(null)\n      } catch (err) {\n        if (!this._interrupting) throw err\n      }\n    }\n\n    if (!this._interrupting) {\n      this._updateAckThreshold()\n      this._bumpAckTimer()\n    }\n\n    this._acking = false\n  }\n\n  async append (value, opts) {\n    if (this.opened === false) await this.ready()\n    if (this._interrupting) throw new Error('Autobase is closing')\n    if (value && this.valueEncoding !== BINARY_ENCODING) value = normalize(this.valueEncoding, value)\n\n    const optimistic = !!opts && !!opts.optimistic && !!value\n\n    // we wanna allow acks so interdexers can flush\n    if (!optimistic && (this.localWriter === null || (this.localWriter.isRemoved && value !== null))) {\n      throw new Error('Not writable')\n    }\n\n    if (this._appending === null) this._appending = []\n\n    if (Array.isArray(value)) {\n      for (const v of value) this._append(v)\n    } else {\n      this._append(value)\n    }\n\n    if (optimistic) this._optimistic = this._appending.length - 1\n    const target = this._appended + this._appending.length\n\n    // await in case append is in current tick\n    if (this._advancing) await this._advancing\n\n    // bump until we've flushed the nodes\n    while (this._appended < target && !this._interrupting) {\n      await this._bump()\n      // safety\n      if (this.localWriter && this.localWriter.idle()) return\n    }\n  }\n\n  _append (value) {\n    // if prev value is an ack that hasnt been flushed, skip it\n    if (this._appending.length > 0) {\n      if (value === null) return\n      if (this._appending[this._appending.length - 1] === null) {\n        this._appending.pop()\n      }\n    }\n    this._appending.push(value)\n  }\n\n  static encodeValue (value, opts = {}) {\n    return c.encode(messages.OplogMessage, {\n      version: AUTOBASE_VERSION,\n      maxSupportedVersion: AUTOBASE_VERSION,\n      digist: null,\n      checkpoint: null,\n      optimistic: !!opts.optimistic,\n      node: {\n        heads: opts.heads || [],\n        batch: 1,\n        value\n      }\n    })\n  }\n\n  static async getLocalKey (store, opts = {}) {\n    const core = opts.keyPair ? store.get({ ...opts, active: false }) : store.get({ ...opts, name: 'local', active: false })\n    await core.ready()\n    const key = core.key\n    await core.close()\n    return key\n  }\n\n  static getLocalCore (store, handlers, encryptionKey) {\n    const encryption = !encryptionKey ? null : { key: encryptionKey }\n    const opts = { ...handlers, compat: false, active: false, exclusive: true, valueEncoding: messages.OplogMessage, encryption }\n    return opts.keyPair ? store.get(opts) : store.get({ ...opts, name: 'local' })\n  }\n\n  static async getUserData (core) {\n    const view = await core.getUserData('autobase/view')\n\n    return {\n      referrer: await core.getUserData('referrer'),\n      view: view ? b4a.toString(view) : null\n    }\n  }\n\n  static async isAutobase (core, opts = {}) {\n    const block = await core.get(0, opts)\n    if (!block) throw new Error('Core is empty.')\n    if (!b4a.isBuffer(block)) return isAutobaseMessage(block)\n\n    try {\n      const m = c.decode(messages.OplogMessage, block)\n      return isAutobaseMessage(m)\n    } catch {\n      return false\n    }\n  }\n\n  // no guarantees where the user data is stored, just that its associated with the base\n  async setUserData (key, val) {\n    await this._preopen\n    const core = this._primaryBootstrap === null ? this.local : this._primaryBootstrap\n\n    await core.setUserData(key, val)\n  }\n\n  async getUserData (key) {\n    await this._preopen\n    const core = this._primaryBootstrap === null ? this.local : this._primaryBootstrap\n\n    return await core.getUserData(key)\n  }\n\n  _needsLocalWriter () {\n    return this.localWriter === null || this.localWriter.closed\n  }\n\n  // no guarantees about writer.isActiveIndexer property here\n  async _getWriterByKey (key, len, seen, allowGC, isAdded, system) {\n    assert(this._draining === true || (this.opening && !this.opened) || this._optimistic > -1)\n\n    const release = await this._lock()\n\n    if (this._interrupting) {\n      release()\n      throw new Error('Autobase is closing')\n    }\n\n    try {\n      let w = this.activeWriters.get(key)\n\n      const alreadyActive = !!w\n      const sys = system || this._applyState.system\n      const writerInfo = await sys.get(key)\n\n      if (len === -1) {\n        if (!allowGC && writerInfo === null) {\n          if (w) w.isRemoved = !isAdded\n          return null\n        }\n\n        len = writerInfo === null ? 0 : writerInfo.length\n      }\n\n      const isActive = writerInfo !== null && (isAdded || !writerInfo.isRemoved)\n      const isRemoved = !isActive\n\n      if (w) {\n        w.isRemoved = isRemoved\n      } else {\n        w = this._makeWriter(key, len, isActive, isRemoved)\n        if (!w) return null\n      }\n\n      if (isRemoved && sys.bootstrapping && b4a.equals(w.core.key, this.key)) {\n        w.isRemoved = false\n      }\n\n      if (this._isLocalCore(w.core) && this._needsLocalWriter()) {\n        this._setLocalWriter(w)\n      }\n\n      w.seen(seen)\n\n      if (alreadyActive) return w\n\n      await w.ready()\n\n      if (this._isLocalCore(w.core) && this._needsLocalWriter()) {\n        this._setLocalWriter(w)\n      }\n\n      if (allowGC && w.flushed()) {\n        this._wakeup.unqueue(key, len)\n        if (w !== this.localWriter) {\n          await w.close()\n          return w\n        }\n      }\n\n      this.activeWriters.add(w)\n      this._checkWriters.push(w)\n\n      assert(w.opened)\n      assert(!w.closed)\n\n      w.updateActivity()\n      return w\n    } finally {\n      release()\n    }\n  }\n\n  _updateAll () {\n    const p = []\n    for (const w of this.activeWriters) p.push(w.update(null).catch(this._warn))\n    return Promise.all(p)\n  }\n\n  _makeWriterCore (key) {\n    if (this.closing) throw new Error('Autobase is closing')\n    if (this._interrupting) throw INTERRUPT()\n\n    const local = b4a.equals(key, this.local.key)\n\n    const core = local\n      ? this.local.session({ valueEncoding: messages.OplogMessage, encryption: this.encryption, active: false })\n      : this.store.get({ key, compat: false, writable: false, valueEncoding: messages.OplogMessage, encryption: this.encryption, active: false })\n\n    return core\n  }\n\n  _makeWriter (key, length, isActive, isRemoved) {\n    const core = this._makeWriterCore(key)\n    const w = new Writer(this, core, length, isRemoved)\n\n    if (this._isLocalCore(core)) {\n      if (isActive) this._setLocalWriter(w) // only set active writer\n      return w\n    }\n\n    core.on('append', this._onremotewriterchangeBound)\n    core.on('download', this._onremotewriterchangeBound)\n    core.on('manifest', this._onremotewriterchangeBound)\n\n    return w\n  }\n\n  _updateLinearizer (indexers, heads) {\n    // only current active indexers are reset to true below\n    for (const w of this.activeWriters) w.isActiveIndexer = false\n    if (this.localWriter) this.localWriter.isActiveIndexer = false\n\n    for (const writer of indexers) writer.isActiveIndexer = true\n\n    if (this._isActiveIndexer() && !this.isIndexer) {\n      this._setLocalIndexer()\n    } else if (!this._isActiveIndexer() && this.isIndexer) {\n      this._clearLocalIndexer()\n    }\n\n    this.linearizer = new Linearizer(indexers, { heads, writers: this.activeWriters })\n\n    this._updateAckThreshold()\n  }\n\n  async _updateLocalWriter (sys) {\n    if (this.localWriter !== null && !this.localWriter.closed) return\n    await this._getWriterByKey(this.local.key, -1, 0, true, false, sys)\n  }\n\n  async _bootstrapLinearizer () {\n    const bootstrap = this._makeWriter(this.key, 0, true, false)\n\n    this.activeWriters.add(bootstrap)\n    this._checkWriters.push(bootstrap)\n    await bootstrap.ready()\n    this._ensureWakeup(bootstrap)\n\n    this._updateLinearizer([bootstrap], [])\n  }\n\n  async _makeLinearizer (sys) {\n    if (sys === null) {\n      return this._bootstrapLinearizer()\n    }\n\n    if (this.opened || await sys.hasLocal(this.local.key)) {\n      await this._updateLocalWriter(sys)\n    }\n\n    const indexers = []\n\n    for (const head of sys.indexers) {\n      const writer = await this._getWriterByKey(head.key, head.length, 0, false, false, sys)\n      indexers.push(writer)\n    }\n\n    if (!this._isActiveIndexer()) {\n      for (const key of sys.pendingIndexers) {\n        if (b4a.equals(key, this.local.key)) {\n          this._setLocalIndexer()\n          break\n        }\n      }\n    }\n\n    this._updateLinearizer(indexers, sys.heads)\n\n    for (const { key, length } of sys.heads) {\n      await this._getWriterByKey(key, length, 0, false, false, sys)\n    }\n  }\n\n  async _clearWriters () {\n    await this.activeWriters.clear()\n    if (this.localWriter !== null) await this.localWriter.close()\n    this._checkWriters = []\n  }\n\n  async _makeLinearizerFromViewState () {\n    const sys = await this._applyState.getIndexedSystem()\n    await this._makeLinearizer(sys)\n    await sys.close()\n  }\n\n  async _recoverMaybe () {\n    if (!this._applyState) {\n      if (!this._bootRecovery) return\n      await this._runFastForward(new FastForward(this, this.core.key, { force: true }))\n      this._queueBump()\n      return\n    }\n\n    this._bootRecovery = false\n\n    const ff = await this._applyState.recoverAt()\n    if (!ff || this.fastForwardTo) return\n\n    this.fastForwardTo = ff\n    this._queueBump()\n  }\n\n  async _applyFastForward () {\n    if (!this.fastForwardTo.force && this.fastForwardTo.length < this.core.length + FastForward.MINIMUM) {\n      this.fastForwardTo = null\n      this._updateActivity()\n      // still not worth it\n      return\n    }\n\n    const changes = this._hasUpdate ? new UpdateChanges(this) : null\n    if (changes) changes.track(this._applyState)\n\n    // close existing state\n    if (this._applyState) await this._applyState.close()\n\n    const from = this.core.signedLength\n    const store = this._viewStore.atomize()\n    const views = this.fastForwardTo.views\n\n    // mutating, prop fine as we are throwing it away immediately\n    views.push({ key: this.fastForwardTo.key, length: this.fastForwardTo.length })\n\n    const ffed = new Set()\n    const migrated = !b4a.equals(this.fastForwardTo.key, this.core.key)\n\n    for (const v of views) {\n      const ref = await this._viewStore.findViewByKey(v.key, this.fastForwardTo.indexers)\n      if (!ref) continue // unknown, view ignored\n      ffed.add(ref)\n\n      if (b4a.equals(ref.core.key, v.key)) {\n        await ref.catchup(store.atom, v.length)\n      } else {\n        await this._applyFastForwardMigration(ref, v)\n      }\n    }\n\n    // migrate zero length cores\n    if (migrated) {\n      const indexers = this.fastForwardTo.indexers\n      const manifests = await this._viewStore.getIndexerManifests(indexers)\n\n      for (const [name, ref] of this._viewStore.byName) {\n        if (ffed.has(ref)) continue\n        await this._migrateView(manifests, name, 0)\n      }\n    }\n\n    const value = c.encode(messages.BootRecord, {\n      key: this.fastForwardTo.key,\n      indexedLength: this.fastForwardTo.length,\n      indexersUpdated: false,\n      fastForwarding: true,\n      recoveries: RECOVERIES\n    })\n\n    const local = store.getLocal()\n    await local.ready()\n    await local.setUserData('autobase/boot', value)\n\n    const tx = local.state.storage.write()\n    // reset linearizer\n    tx.deleteLocalRange(b4a.from([messages.LINEARIZER_PREFIX]), b4a.from([messages.LINEARIZER_PREFIX + 1]))\n    await tx.flush()\n\n    if (changes) changes.finalise()\n\n    await store.flush()\n    await store.close()\n\n    const to = this.core.signedLength\n\n    for (const ref of ffed) await ref.release()\n\n    this.recoveries = RECOVERIES\n    this.fastForwardTo = null\n    this._queueFastForward()\n\n    await this._clearWriters()\n\n    this._applyState = new ApplyState(this)\n    await this._applyState.ready()\n\n    if (changes) await this._handlers.update(this._applyState.view, changes)\n\n    if (await this._applyState.shouldMigrate()) {\n      await this._migrate()\n    } else {\n      await this._makeLinearizerFromViewState()\n      await this._applyState.catchup(this.linearizer)\n    }\n\n    if (!this.localWriter || this.localWriter.closed) {\n      await this._updateLocalWriter(this._applyState.system)\n    }\n\n    this._caughtup = true\n\n    this._rebooted()\n    this.emit('fast-forward', to, from)\n  }\n\n  // TODO: not atomic in regards to the ff, fix that\n  async _applyFastForwardMigration (ref, v) {\n    const next = this.store.get(v.key)\n    await next.ready()\n\n    const prologue = next.manifest && next.manifest.prologue\n\n    if (prologue && prologue.length > 0 && ref.core.length >= prologue.length) {\n      try {\n        await next.core.copyPrologue(ref.core.state)\n      } catch {\n        // we might be missing some nodes for this, just ignore, only an optimisation\n      }\n    }\n\n    const batch = next.session({ name: 'batch', overwrite: true, checkout: v.length })\n    await batch.ready()\n\n    // remake the batch, reset from our prologue in case it replicated inbetween\n    // TODO: we should really have an HC function for this\n\n    await ref.batch.state.moveTo(batch, batch.length)\n    await batch.close()\n\n    ref.migrated(this, next)\n  }\n\n  async _migrateView (indexerManifests, name, indexedLength) {\n    const ref = this._viewStore.byName.get(name)\n\n    const core = ref.batch || ref.core\n    await core.ready()\n\n    const prologue = indexedLength === 0\n      ? null\n      : { length: indexedLength, hash: await core.treeHash(indexedLength) }\n\n    const next = this._viewStore.getViewCore(indexerManifests, name, prologue)\n    await next.ready()\n\n    if (indexedLength > 0) {\n      await next.core.copyPrologue(core.state)\n    }\n\n    // remake the batch, reset from our prologue in case it replicated inbetween\n    // TODO: we should really have an HC function for this\n    const batch = next.session({ name: 'batch', overwrite: true, checkout: indexedLength })\n    await batch.ready()\n\n    if (core.length > batch.length) {\n      for (let i = batch.length; i < core.length; i++) {\n        await batch.append(await core.get(i))\n      }\n    }\n\n    await ref.batch.state.moveTo(batch, core.length)\n    await batch.close()\n\n    ref.migrated(this, next)\n\n    return ref\n  }\n\n  async _migrate () {\n    const length = this._applyState.indexedLength\n    const system = this._applyState.system\n\n    const info = await system.getIndexedInfo(length)\n    const indexerManifests = await this._viewStore.getIndexerManifests(info.indexers)\n\n    for (let i = 0; i < this._applyState.views.length; i++) {\n      const view = this._applyState.views[i]\n      const name = this._applyState.views[i].name\n\n      const v = this._applyState.getViewFromSystem(view, info)\n      const indexedLength = v ? v.length : 0\n\n      await this._migrateView(indexerManifests, name, indexedLength)\n    }\n\n    const ref = await this._migrateView(indexerManifests, '_system', length)\n\n    // start soft shutdown\n\n    await this._clearWriters()\n    await this._makeLinearizerFromViewState()\n\n    await this._applyState.finalize(ref.core.key)\n\n    this._applyState = new ApplyState(this)\n\n    await this._applyState.ready()\n    await this._applyState.catchup(this.linearizer)\n\n    // end soft shutdown\n\n    this._queueFastForward()\n\n    this._rebooted()\n  }\n\n  _rebooted () {\n    this.recouple()\n    this._updateActivity()\n\n    // ensure we re-evalute our state\n    this._bootstrapWritersChanged = true\n    this.updating = true\n    this._queueBump()\n  }\n\n  _setLocalWriter (w) {\n    this.localWriter = w\n    if (this._ackInterval) this._startAckTimer()\n  }\n\n  _unsetLocalWriter () {\n    if (!this.localWriter) return\n\n    this._closeWriter(this.localWriter, true)\n    if (this.localWriter.isActiveIndexer) this._clearLocalIndexer()\n\n    this.localWriter = null\n  }\n\n  _setLocalIndexer () {\n    assert(this.localWriter !== null)\n\n    this.isIndexer = true\n    this.emit('is-indexer')\n  }\n\n  _clearLocalIndexer () {\n    assert(this.localWriter !== null)\n\n    if (this._ackTimer) this._ackTimer.stop()\n\n    this.isIndexer = false\n    this._ackTimer = null\n\n    this.emit('is-non-indexer')\n  }\n\n  _isLocalCore (core) {\n    return core.writable && core.id === this.local.id\n  }\n\n  _addLocalHeads () {\n    // not writable atm, will prop be writable in a subsequent bump tho\n    if (!this.localWriter || this.localWriter.closed) return null\n    // safety, localwriter is still processing, should prop be an assertion\n    if (!this.localWriter.idle()) return null\n\n    const length = this._optimistic === -1\n      ? this._appending.length\n      : this._optimistic || 1\n\n    const nodes = new Array(length)\n    for (let i = 0; i < length; i++) {\n      const heads = this.linearizer.getHeads()\n      const deps = new Set(this.linearizer.heads)\n      const batch = this._appending.length - i\n      const value = this._appending[i]\n\n      const node = this.localWriter.append(value, heads, batch, deps, this.maxSupportedVersion, this._optimistic === 0)\n\n      this.linearizer.addHead(node)\n      nodes[i] = node\n    }\n\n    this._appended += length\n    this._appending = length === this._appending.length ? null : this._appending.slice(length)\n\n    if (this._optimistic > -1 && this._optimistic < length) this._optimistic = -1\n\n    return nodes\n  }\n\n  async _addRemoteHeads () {\n    let added = 0\n\n    while (added < REMOTE_ADD_BATCH) {\n      await this._updateAll()\n\n      let advanced = 0\n\n      for (const w of this.activeWriters) {\n        let node = w.advance()\n        if (node === null) continue\n\n        advanced += node.batch\n\n        while (true) {\n          this.linearizer.addHead(node)\n          if (node.batch === 1) break\n          node = w.advance()\n        }\n      }\n\n      if (advanced === 0) break\n      added += advanced\n    }\n\n    return added\n  }\n\n  async _drain () {\n    const writable = this.writable\n\n    while (!this._interrupting && !this.paused) {\n      if (this.fastForwardTo !== null) {\n        await this._applyFastForward()\n        continue // revaluate conditions...\n      }\n\n      // we defer this to post ready so its not blocking reading the views\n      if (this._caughtup === false) {\n        await this._catchupApplyState()\n        continue\n      }\n\n      const remoteAdded = await this._addRemoteHeads()\n      const localNodes = this._appending !== null ? this._addLocalHeads() : null\n\n      if (this._interrupting) return\n\n      if (remoteAdded > 0 || localNodes !== null) {\n        this.updating = true\n      }\n\n      const u = this.linearizer.update()\n      const indexersUpdated = u ? await this._applyState.update(u, localNodes) : false\n\n      if (!indexersUpdated) {\n        if (this._applyState.shouldFlush()) {\n          await this._applyState.flush()\n          this.updating = true\n        }\n\n        if (this._checkWriters.length > 0) {\n          await this._gcWriters()\n          continue // rerun the update loop as a writer might have been added\n        }\n        if (remoteAdded >= REMOTE_ADD_BATCH) continue\n        break\n      }\n\n      await this._gcWriters()\n      await this._migrate()\n    }\n\n    // emit state changes post drain\n    if (writable !== this.writable) {\n      if (this.writable && this._writable) this._writable.resolve(true)\n      this.emit(writable ? 'unwritable' : 'writable')\n    }\n  }\n\n  _wakeupPeer (stream) {\n    if (!this.wakeupSession) return\n    const wakeup = this._getWakeup()\n    if (wakeup.length === 0) return\n    this.wakeupSession.announceByStream(stream, wakeup)\n  }\n\n  _getWakeup () {\n    const writers = []\n\n    for (const w of this.activeWriters) {\n      if (w.isActiveIndexer || w.flushed()) continue\n      writers.push({ key: w.core.key, length: w.length })\n    }\n\n    return writers\n  }\n\n  async _wakeupWriter (key, length) {\n    this._ensureWakeup(await this._getWriterByKey(key, -1, length, true, false, null))\n  }\n\n  // ensure wakeup on an existing writer (the writer calls this in addition to above)\n  _ensureWakeup (w) {\n    if (w === null || w.isBootstrap === true) return\n    w.setBootstrap(true) // even if turn false at end of drain, hypercore makes them linger a bit so no churn\n    this._bootstrapWriters.push(w)\n    this._bootstrapWritersChanged = true\n  }\n\n  async _drainWakeup () {\n    const promises = []\n\n    // warmup all the below gets\n    if (this._needsWakeup) {\n      for (const { key } of this._wakeup) {\n        if (this.activeWriters.has(key)) continue\n        promises.push(this._applyState.system.get(key))\n      }\n      if (this._needsWakeupHeads) {\n        for (const { key } of await this._applyState.system.heads) {\n          if (this.activeWriters.has(key)) continue\n          promises.push(this._applyState.system.get(key))\n        }\n      }\n    }\n    for (const [hex, length] of this._wakeupHints) {\n      const key = b4a.from(hex, 'hex')\n      if (length !== -1) {\n        const w = this.activeWriters.get(key)\n        if (w) {\n          if (w.length < length) w.seen(length)\n          continue\n        }\n      }\n      promises.push(this._applyState.system.get(key))\n    }\n\n    await Promise.allSettled(promises)\n\n    if (this._needsWakeup === true) {\n      this._needsWakeup = false\n\n      for (const { key } of this._wakeup) {\n        if (this.activeWriters.has(key)) continue\n        await this._wakeupWriter(key, 0)\n      }\n\n      if (this._needsWakeupHeads === true) {\n        this._needsWakeupHeads = false\n\n        for (const { key } of await this._applyState.system.heads) {\n          if (this.activeWriters.has(key)) continue\n          await this._wakeupWriter(key, 0)\n        }\n      }\n    }\n\n    for (const [hex, length] of this._wakeupHints) {\n      const key = b4a.from(hex, 'hex')\n      if (this.activeWriters.has(key)) continue\n      if (length !== -1) {\n        const info = await this._applyState.system.get(key)\n        if (info && length <= info.length) continue // stale hint\n      }\n      await this._wakeupWriter(key, length === -1 ? 0 : length)\n    }\n\n    this._wakeupHints.clear()\n  }\n\n  pause () {\n    this.paused = true\n  }\n\n  resume () {\n    this.paused = false\n    this._queueBump()\n  }\n\n  waitForWritable () {\n    if (this.writable) return Promise.resolve(true)\n    if (!this._writable) this._writable = rrp()\n    return this._writable.promise\n  }\n\n  async _advance () {\n    if (this.opened === false) await this.ready()\n    if (this.paused || this._interrupting) return\n\n    this._draining = true\n\n    if (this.recoveries < FF_RECOVERY || this._bootRecovery) {\n      await this._recoverMaybe()\n    }\n\n    const local = this.local.length\n\n    try {\n      await this._drain()\n\n      // must run post drain so the linearizer is caught up\n      if (this._caughtup && (this._needsWakeup === true || this._wakeupHints.size > 0)) await this._drainWakeup()\n\n      // check if we should update local writer\n      if (!this.localWriter || this.localWriter.closed) {\n        await this._updateLocalWriter(this._applyState.system)\n      }\n\n      this._draining = false\n    } catch (err) {\n      this._onError(err)\n      return\n    }\n\n    if (this._interrupting) return\n\n    if (this.localWriter && !this.localWriter.closed) {\n      if (this._applyState.isLocalPendingIndexer()) this.ack().catch(noop)\n      else if (this._triggerAckAsap()) this._ackTimer.asap()\n    }\n\n    // keep bootstraps in sync with linearizer\n    if (this.updating === true || this._bootstrapWritersChanged === true) {\n      this._updateBootstrapWriters()\n    }\n\n    if (this.updating === true) {\n      this.updating = false\n\n      if (local !== this.local.length) this._resetAckTick()\n      else this._ackTick++\n\n      if (!this._interrupting) this.emit('update')\n      this._waiting.notify(null)\n    }\n\n    if (!this._interrupting) await this._gcWriters()\n  }\n\n  _triggerAckAsap () {\n    if (!this._ackTimer) return false\n\n    // flush if threshold is reached and we are not already acking\n    if (this._ackTickThreshold && !this._acking && this._ackTick >= this._ackTickThreshold) {\n      if (this._ackTimer) {\n        for (const w of this.linearizer.indexers) {\n          if (w.core.length > w.length) return false // wait for the normal ack cycle in this case\n        }\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  _queueFastForward () {\n    if (!this.core.opened) return\n    // should have a better way to get this\n    const latestSignedLength = this.core.core.state.length\n\n    if (!this.fastForwardEnabled || this.fastForwarding !== null || this._interrupting) return\n    if (latestSignedLength - this.core.length < FastForward.MINIMUM) return\n    if (this.fastForwardTo !== null) return\n    if ((Date.now() - this.fastForwardFailedAt) < MIN_FF_WAIT) return\n\n    this._runFastForward(new FastForward(this, this.core.key)).catch(noop)\n  }\n\n  _queueStaticFastForward (key) {\n    if (!this.fastForwardEnabled || this.fastForwarding !== null || this._interrupting) return\n    if (this.fastForwardTo !== null) return\n    if ((Date.now() - this.fastForwardFailedAt) < MIN_FF_WAIT) return\n\n    this._runFastForward(new FastForward(this, key, { verified: false })).catch(noop)\n  }\n\n  _updateActivity () {\n    this.activeWriters.updateActivity()\n    if (this._applyState) {\n      if (this.isFastForwarding()) this._applyState.pause()\n      else this._applyState.resume()\n    }\n  }\n\n  async _runFastForward (ff) {\n    this.fastForwarding = ff\n\n    this._updateActivity()\n\n    const result = await ff.upgrade()\n    await ff.close()\n\n    if (this.fastForwarding === ff) this.fastForwarding = null\n\n    if (!result) {\n      if (ff.failed) this.fastForwardFailedAt = Date.now()\n      else this._queueFastForward()\n      this._updateActivity()\n      return\n    }\n\n    this.fastForwardFailedAt = 0\n    this.fastForwardTo = result\n\n    this._bumpAckTimer()\n    this._queueBump()\n  }\n\n  async _closeAllActiveWriters () {\n    for (const w of this.activeWriters) {\n      if (this.localWriter === w) continue\n      await this._closeWriter(w, true)\n    }\n  }\n\n  // triggered from apply\n  async _addWriter (key, sys) { // just compat for old version\n    assert(this._applyState.applying, 'System changes are only allowed in apply')\n\n    const writer = (await this._getWriterByKey(key, -1, 0, false, true, sys)) || this._makeWriter(key, 0, true, false)\n    await writer.ready()\n\n    if (!this.activeWriters.has(key)) {\n      this.activeWriters.add(writer)\n      this._checkWriters.push(writer)\n      this._ensureWakeup(writer)\n    }\n\n    // fetch any nodes needed for dependents\n    this._queueBump()\n  }\n\n  // triggered from apply\n  _removeWriter (key) { // just compat for old version\n    const w = this.activeWriters.get(key)\n    if (w) w.isRemoved = true\n\n    this._queueBump()\n  }\n\n  removeable (key) {\n    return this._applyState ? this._applyState.removeable(key) : false\n  }\n\n  _updateAckThreshold () {\n    if (this._ackThreshold === 0) return\n    if (this._ackTimer) this._ackTimer.bau()\n    this._ackTick = 0\n    this._ackTickThreshold = random2over1(this.linearizer.indexers.length * this._ackThreshold)\n  }\n\n  _resetAckTick () {\n    this._ackTick = 0\n    if (this._ackTimer) this._ackTimer.bau()\n  }\n\n  _shiftWriter (w) {\n    w.shift()\n    if (w.flushed()) this._checkWriters.push(w)\n  }\n}\n\nfunction toKey (k) {\n  return b4a.isBuffer(k) ? k : hypercoreId.decode(k)\n}\n\nfunction isAutobaseMessage (msg) {\n  return msg.checkpoint ? msg.checkpoint.length > 0 : msg.checkpoint === null\n}\n\nfunction compareNodes (a, b) {\n  return b4a.compare(a.key, b.key)\n}\n\nfunction random2over1 (n) {\n  return Math.floor(n + Math.random() * n)\n}\n\nfunction noop () {}\n\nfunction crashSoon (err) {\n  queueMicrotask(() => { throw err })\n  throw err\n}\n\nfunction isObject (obj) {\n  return typeof obj === 'object' && obj !== null\n}\n\nfunction emitWarning (err) {\n  safetyCatch(err)\n  this.emit('warning', err)\n}\n\nfunction normalize (valueEncoding, value) {\n  const state = { buffer: null, start: 0, end: 0 }\n  valueEncoding.preencode(state, value)\n  state.buffer = b4a.allocUnsafe(state.end)\n  valueEncoding.encode(state, value)\n  state.start = 0\n  return valueEncoding.decode(state)\n}\nconst b4a = require('b4a')\n\nmodule.exports = class ActiveWriters {\n  constructor () {\n    this.map = new Map()\n  }\n\n  get size () {\n    return this.map.size\n  }\n\n  [Symbol.iterator] () {\n    return this.map.values()\n  }\n\n  get (key) {\n    return this.map.get(b4a.toString(key, 'hex')) || null\n  }\n\n  has (key) {\n    return this.get(key) !== null\n  }\n\n  add (writer) {\n    this.map.set(b4a.toString(writer.core.key, 'hex'), writer)\n  }\n\n  delete (writer) {\n    this.map.delete(b4a.toString(writer.core.key, 'hex'))\n  }\n\n  updateActivity () {\n    for (const w of this.map.values()) w.updateActivity()\n  }\n\n  clear () {\n    const p = []\n    for (const w of this.map.values()) p.push(w.close())\n    this.map.clear()\n\n    return Promise.all(p)\n  }\n}\nclass PublicApplyCalls {\n  constructor (base) {\n    this.base = base\n  }\n\n  get discoveryKey () {\n    return this.base.discoveryKey\n  }\n\n  get key () {\n    return this.base.key\n  }\n\n  get id () {\n    return this.base.id\n  }\n\n  async addWriter () {\n    throw new Error('Not allowed on the public view')\n  }\n\n  async ackWriter () {\n    throw new Error('Not allowed on the public view')\n  }\n\n  async removeWriter () {\n    throw new Error('Not allowed on the public view')\n  }\n\n  interrupt () {\n    throw new Error('Not allowed on the public view')\n  }\n\n  removeable () {\n    throw new Error('Not allowed on the public view')\n  }\n}\n\nclass PrivateApplyCalls extends PublicApplyCalls {\n  constructor (state) {\n    super(state.base)\n    this.state = state\n  }\n\n  get system () {\n    return this.state.system\n  }\n\n  async addWriter (key, { indexer = true, isIndexer = indexer } = {}) { // just compat for old version\n    await this.state.system.add(key, { isIndexer })\n    await this.base._addWriter(key, this.state.system)\n  }\n\n  async ackWriter (key) {\n    await this.state.system.ack(key)\n  }\n\n  async removeWriter (key) { // just compat for old version\n    if (!this.state.removeable(key)) {\n      throw new Error('Not allowed to remove the last indexer')\n    }\n\n    await this.state.system.remove(key)\n    this.base._removeWriter(key)\n  }\n\n  interrupt (reason) {\n    this.base._interrupt(reason)\n  }\n\n  removeable (key) {\n    return this.state.removeable(key)\n  }\n}\n\nmodule.exports = { PublicApplyCalls, PrivateApplyCalls }\nconst ReadyResource = require('ready-resource')\nconst assert = require('nanoassert')\nconst c = require('compact-encoding')\nconst crypto = require('hypercore-crypto')\nconst b4a = require('b4a')\nconst safetyCatch = require('safety-catch')\n\nconst SystemView = require('./system')\nconst UpdateChanges = require('./updates.js')\nconst messages = require('./messages.js')\nconst { PrivateApplyCalls } = require('./apply-calls.js')\nconst { partialSignature } = require('hypercore/lib/multisig.js')\n\n// must not be set too low (stretched with num of indexers)\nconst SHOULD_WRITE_THRESHOLD = 16\n\nclass CheckpointCore {\n  constructor (view, core, signer, paused) {\n    this.view = view\n    this.core = core\n    this.signer = signer\n    this.length = 0\n    this.digest = null\n    this.signatures = []\n    this.closed = false\n    this.paused = paused\n  }\n\n  pause () {\n    this.paused = true\n  }\n\n  resume () {\n    if (!this.paused) return\n    this.paused = false\n    this.updateBackground()\n  }\n\n  async update () {\n    if (await this.updateCheckpoints()) await this.view.maybeSigned()\n  }\n\n  async updateCheckpoints () {\n    if (this.core.length <= this.length || this.closed || this.paused) return false\n\n    const length = this.core.length\n    const value = await this.core.get(length - 1)\n\n    if (length <= this.length || this.closed || !value.digest || this.paused) return false\n\n    const [\n      digest,\n      checkpoints\n    ] = await Promise.all([\n      this._inflateDigest(length, value.digest),\n      this._inflateCheckpoints(length, value.checkpoint)\n    ])\n\n    if (length <= this.length || this.closed || !digest || !checkpoints || this.paused) return false\n    for (let i = 0; i < checkpoints.length; i++) {\n      if (checkpoints[i] === null) return false\n    }\n\n    this.length = length\n    this.digest = digest\n    this.signatures = checkpoints\n\n    return true\n  }\n\n  updateBackground () {\n    return this.update().catch(safetyCatch)\n  }\n\n  updateSignatures (length, signatures) {\n    const updated = new Array(signatures.length)\n\n    for (let i = 0; i < updated.length; i++) {\n      const sig = signatures[i]\n      updated[i] = sig\n        ? { signature: sig.signature, length: sig.length, at: length }\n        : this.signatures[i]\n    }\n\n    this.signatures = updated\n  }\n\n  makeCheckpoints (length) {\n    const checkpoints = new Array(this.signatures.length)\n\n    for (let i = 0; i < this.signatures.length; i++) {\n      const chk = this.signatures[i]\n      const checkpointer = length - chk.at\n\n      checkpoints[i] = {\n        checkpointer,\n        checkpoint: checkpointer === 0\n          ? { signature: chk.signature, length: chk.length }\n          : null\n      }\n    }\n\n    return checkpoints\n  }\n\n  makeDigest (length, key) {\n    if (this.digest && (this.digest.key === key || b4a.equals(this.digest.key, key))) {\n      return { key: null, pointer: length - this.digest.at }\n    }\n    this.digest = { key, at: length }\n    return { key, pointer: 0 }\n  }\n\n  async ready () {\n    await this.core.ready()\n    this.core.on('append', this.updateBackground.bind(this))\n    if (this.core.writable) await this.updateCheckpoints()\n    this.updateBackground()\n  }\n\n  signedLength () {\n    return this.signatures.length ? this.signatures[0].length : 0\n  }\n\n  close () {\n    this.closed = true\n    return this.core.close()\n  }\n\n  async _inflateDigest (length, dig) {\n    if (!dig) return null\n\n    if (dig.pointer === 0) {\n      return { key: dig.key, at: length }\n    }\n\n    const len = length - dig.pointer\n\n    if (this.digest && len === this.digest.at) return this.digest\n    if (len <= 0) return null\n\n    const { digest } = await this.core.get(len - 1)\n    if (!digest || !digest.key) return null\n\n    return { key: digest.key, at: len }\n  }\n\n  _sameSignatures (b) {\n    const a = this.signatures\n    if (a.length !== b.length) return false\n    for (let i = 0; i < a.length; i++) {\n      if (a[i].length !== b[i].length) return false\n    }\n    return true\n  }\n\n  _inflateCheckpoints (length, checkpoints) {\n    if (!checkpoints) return []\n    if (this._sameSignatures(checkpoints)) return this.signatures\n\n    const promises = new Array(checkpoints.length)\n    for (let i = 0; i < promises.length; i++) {\n      const chk = checkpoints[i]\n      promises[i] = this._inflateCoreCheckpoint(chk, i, length)\n    }\n\n    return Promise.all(promises)\n  }\n\n  async _inflateCoreCheckpoint (chk, i, coreLength) {\n    if (chk.checkpoint) {\n      const { signature, length } = chk.checkpoint\n      return { signature, length, at: coreLength }\n    }\n\n    const len = coreLength - chk.checkpointer\n    if (i < this.signatures.length && this.signatures[i].at === len) {\n      return this.signatures[i]\n    }\n\n    if (len <= 0) return null\n\n    const { checkpoint } = await this.core.get(len - 1)\n    if (!checkpoint || i >= checkpoint.length || !checkpoint[i].checkpoint) return null\n\n    const { signature, length } = checkpoint[i].checkpoint\n    return { signature, length, at: len }\n  }\n}\n\nmodule.exports = class ApplyState extends ReadyResource {\n  constructor (base) {\n    super()\n\n    this.base = base\n    this.encryption = this.base.encryption\n    this.valueEncoding = base.valueEncoding\n    this.store = base._viewStore.atomize()\n    this.system = null\n    this.view = null\n    this.views = []\n    this.systemRef = null\n    this.hostcalls = null\n    this.changes = base._hasUpdate ? new UpdateChanges(base) : null\n\n    this.updates = []\n\n    this.local = null\n    this.tx = null // for local use\n\n    this.fastForwarding = false\n    this.indexersUpdated = false\n    this.indexedLength = 0\n    this.quorum = 0\n    this.stretchedThreshold = 0\n    this.needsIndexedLengthUpdate = false\n    this.interrupted = false\n    this.applying = false\n\n    this.localCheckpoint = null\n    this.localIndexer = false\n\n    this.systemUpgrade = null\n\n    this.checkpoints = []\n    this.pendingViews = null\n    this.dirty = false\n  }\n\n  shouldFlush () {\n    return this.dirty\n  }\n\n  shouldWrite () {\n    if (!this.localIndexer || !this.localCheckpoint || !this.localCheckpoint.opened) return false\n    if (!this.localCheckpoint.signedLength() < this.indexedLength + this.stretchedThreshold) return false\n\n    // system passed the threshold, see if a view has changed\n    const len = Math.min(this.localCheckpoint.signatures.length, this.views.length + 1)\n\n    for (let i = 1; i < len; i++) {\n      const sig = this.localCheckpoint.signatures[i]\n      const core = this.views[i - 1].core\n      if (core && sig.length > core.length) return true\n    }\n\n    return false\n  }\n\n  async shouldMigrate () {\n    if (!this.fastForwarding && !this.indexersUpdated) return false\n    if (this.system.indexers.length === 0) return false // genesis\n\n    // sanity, prefer migration\n    if (!this.system.core.manifest || !this.system.core.manifest.signers) return true\n\n    // easy mode\n    if (this.system.indexers.length !== this.system.core.manifest.signers.length) {\n      return true\n    }\n\n    const manifests = await this.store.getIndexerManifests(this.system.indexers)\n\n    for (let i = 0; i < this.system.core.manifest.signers.length; i++) {\n      const { publicKey } = this.system.core.manifest.signers[i]\n      if (!b4a.equals(publicKey, manifests[i].signers[0].publicKey)) return true\n    }\n\n    return false\n  }\n\n  isLocalPendingIndexer () {\n    if (this.system.pendingIndexers.length === 0) return false\n    const key = this.base.local.key\n    for (const k of this.system.pendingIndexers) {\n      if (b4a.equals(k, key)) return !b4a.equals(this.base.key, key) && this.base.local.length === 0\n    }\n    return false\n  }\n\n  removeable (key) {\n    if (this.system.indexers.length !== 1) return true\n    return !b4a.equals(this.system.indexers[0].key, key)\n  }\n\n  isLocalIndexer () {\n    return !!this.localCheckpoint\n  }\n\n  _createCheckpointCore (key, active, signer, paused) {\n    const encryption = this.encryption\n    const session = this.base.store.get({\n      key,\n      valueEncoding: messages.OplogMessage,\n      encryption,\n      active\n    })\n\n    return new CheckpointCore(this, session, signer, paused)\n  }\n\n  async _open () {\n    const boot = await this.base._getBootRecord()\n\n    const sysCore = this.store.get({ name: '_system' })\n    await sysCore.ready()\n    await sysCore.setUserData('referrer', this.base.key)\n    await sysCore.setUserData('autobase/view', b4a.from('_system'))\n\n    this.systemRef = this.store.getViewByName('_system')\n\n    const system = new SystemView(sysCore)\n    await system.ready()\n\n    // reset so we dont track the _system\n    this.store.opened = []\n\n    this.hostcalls = new PrivateApplyCalls(this)\n    const view = this.base._hasOpen ? this.base._handlers.open(this.store, this.hostcalls) : null\n\n    // ensure all are ready\n    for (const v of this.store.opened) await v.atomicBatch.ready()\n\n    this.system = system\n\n    this.view = view\n    this.fastForwarding = boot.fastForwarding\n    this.indexedLength = boot.indexedLength\n    this.indexersUpdated = boot.indexersUpdated\n    this.stretchedThreshold = this.system.indexers.length * SHOULD_WRITE_THRESHOLD\n    this.quorum = sysCore.manifest ? sysCore.manifest.quorum : 0\n\n    const added = new Set()\n\n    for (let i = 0; i < system.views.length; i++) {\n      const { key, length } = system.views[i]\n      const v = await this.store.findViewByKey(key, system.indexers)\n\n      if (v === null) {\n        this.views.push({ name: null, key, length, core: null, ref: null, mappedIndex: i })\n        continue\n      }\n\n      await v.atomicBatch.ready()\n      await v.core.setUserData('referrer', this.base.key)\n      await v.core.setUserData('autobase/view', b4a.from(v.name))\n\n      this.views.push({ name: v.name, key, length, core: v.atomicBatch, ref: v, mappedIndex: i })\n      added.add(v)\n    }\n\n    for (const v of this.store.opened) {\n      if (added.has(v)) continue\n      this.views.push({ name: v.name, key: v.atomicBatch.key, length: v.atomicBatch.length, core: v.atomicBatch, ref: v, mappedIndex: -1 })\n    }\n\n    this.local = this.store.getLocal()\n    await this.local.ready()\n\n    let isLocalIndexer = false\n\n    const paused = this.base.isFastForwarding()\n\n    for (let i = 0; i < system.indexers.length; i++) {\n      const idx = system.indexers[i]\n      const chk = this._createCheckpointCore(idx.key, true, i, paused)\n      await chk.ready()\n      this.checkpoints.push(chk)\n      if (b4a.equals(idx.key, this.base.local.key)) isLocalIndexer = true\n    }\n\n    const shouldSign = this.quorum > 0 && isLocalIndexer\n\n    if (shouldSign) {\n      this.localIndexer = true\n      await this._startLocalCheckpoint()\n    }\n\n    await this._refreshWriters()\n\n    // deferred\n    this.maybeSigned().catch(noop)\n  }\n\n  async _startLocalCheckpoint () {\n    for (const chk of this.checkpoints) {\n      if (chk.core.id === this.base.local.id) {\n        this.localCheckpoint = chk\n        return\n      }\n    }\n\n    this.localCheckpoint = this._createCheckpointCore(this.base.local.key, false, 0, false)\n    await this.localCheckpoint.ready()\n  }\n\n  interrupt () {\n    this.interrupted = true\n    this.pause()\n  }\n\n  pause () {\n    for (const chk of this.checkpoints) {\n      if (chk !== this.localCheckpoint) chk.pause()\n    }\n  }\n\n  resume () {\n    for (const chk of this.checkpoints) {\n      if (chk !== this.localCheckpoint) chk.resume()\n    }\n  }\n\n  _checkSystemUpgrade () {\n    if (this.systemUpgrade) return\n\n    const tally = new Map()\n\n    for (const chk of this.checkpoints) {\n      if (chk.signedLength() <= this.system.core.signedLength) continue\n      if (!chk.digest) continue\n\n      const id = b4a.toString(chk.digest.key, 'hex')\n      const cnt = (tally.get(id) || 0) + 1\n\n      if (cnt >= this.quorum) {\n        this.systemUpgrade = chk.digest.key\n        this.base._queueStaticFastForward(this.systemUpgrade)\n        return\n      }\n\n      tally.set(id, cnt)\n    }\n  }\n\n  mapIndexToView (index) {\n    for (const { mappedIndex, ref } of this.views) {\n      if (mappedIndex === index) return ref\n    }\n  }\n\n  async maybeSigned () {\n    if (this.opened === false) await this.ready()\n    if (this.interrupted) return\n\n    const thres = this.checkpoints.length - this.quorum\n    if (thres < 0 || this.checkpoints.length <= thres) return\n\n    this.checkpoints.sort(cmpCheckpoints)\n\n    const signableLength = this.checkpoints[thres].signedLength()\n    if (signableLength <= this.system.core.signedLength) return\n\n    const expected = this.system.core.key\n\n    if (signableLength > this.indexedLength) {\n      if (!b4a.equals(expected, this.checkpoints[thres].digest.key)) this._checkSystemUpgrade()\n      this.needsIndexedLengthUpdate = true\n      return\n    }\n\n    for (let i = thres; i < this.checkpoints.length; i++) {\n      const chk = this.checkpoints[i]\n      // we must agree on what the system is obvs\n      if (!b4a.equals(expected, chk.digest.key)) {\n        this._checkSystemUpgrade()\n        return\n      }\n      // if we dont have the indexed state ourself, then no way for us to verify / patch\n      if (chk.signatures.length === 0 || chk.signatures[0].length > this.indexedLength) {\n        this.needsIndexedLengthUpdate = true\n        return\n      }\n    }\n\n    this.needsIndexedLengthUpdate = false\n\n    const chk = []\n    for (let i = thres; i < this.checkpoints.length; i++) {\n      chk.push({ signer: this.checkpoints[i].signer, signatures: this.checkpoints[i].signatures })\n    }\n\n    await this._assembleMultisig(signableLength, chk)\n  }\n\n  async _assembleMultisig (signableLength, checkpoints) {\n    const views = new Array(this.views.length + 1) // +1 is sys\n    const sys = await this.system.getIndexedInfo(signableLength)\n\n    if (this.interrupted) return\n\n    if (this.pendingViews && this.pendingViews[0].length >= signableLength) {\n      return\n    }\n\n    for (let i = 0; i < views.length; i++) {\n      const view = i === 0 ? null : this.views[i - 1]\n      const core = i === 0 ? this.system.core : view.core\n      const ref = i === 0 ? this.systemRef : view.ref\n\n      const v = i === 0 ? null : this.getViewFromSystem(view, sys)\n      const length = i === 0 ? signableLength : v ? v.length : 0\n\n      if (!core || length <= core.signedLength) continue\n\n      const viewIndex = i === 0 ? 0 : view.mappedIndex + 1\n\n      const sign = {\n        length,\n        core,\n        ref,\n        signatures: new Array(checkpoints.length),\n        partials: new Array(checkpoints.length)\n      }\n\n      for (let j = 0; j < checkpoints.length; j++) {\n        const { signer, signatures } = checkpoints[j]\n        const { length, signature } = signatures[i]\n\n        sign.signatures[j] = {\n          signature,\n          length,\n          signer\n        }\n      }\n\n      views[viewIndex] = sign\n    }\n\n    const promises = []\n    for (const view of views) {\n      if (!view) continue\n\n      for (let i = 0; i < view.signatures.length; i++) {\n        promises.push(setPartialSignature(view, i))\n      }\n    }\n\n    await Promise.all(promises)\n\n    // check that the state still looks good, couple replicate inbetween...\n    for (const v of views) {\n      if (!v) continue\n\n      for (let i = 0; i < v.signatures.length; i++) {\n        if (!v.partials[i]) return\n      }\n    }\n\n    if (this.interrupted) return\n\n    if (this.pendingViews && this.pendingViews[0].length >= signableLength) {\n      return\n    }\n    // skipped system for whatever reason...\n    if (!views[0]) return\n\n    this.pendingViews = views\n    this.dirty = true\n\n    // TODO: only needed if not updating, wont crash so keeping for now, just less efficient\n    this.base._queueBump()\n  }\n\n  async _close () {\n    this.interrupted = true\n    for (const chk of this.checkpoints) await chk.close()\n    if (this.localCheckpoint) await this.localCheckpoint.close()\n    if (this.base._hasClose) await this.base._handlers.close(this.view)\n    if (this.system) await this.system.close()\n\n    const promises = []\n    for (const v of this.views) {\n      if (v.ref) promises.push(v.ref.release())\n    }\n    promises.push(this.systemRef.release())\n\n    await Promise.all(promises)\n\n    await this.store.close()\n  }\n\n  _deleteUpdate (u) {\n    this.tx.deleteLocal(c.encode(messages.LinearizerKey, u.seq))\n  }\n\n  _pushUpdate (u) {\n    u.seq = this.updates.length === 0 ? 0 : this.updates[this.updates.length - 1].seq + 1\n    u.systemLength = this.system.core.length\n    this.updates.push(u)\n    this._insertUpdate(u)\n  }\n\n  _insertUpdate (u) {\n    this.tx.putLocal(c.encode(messages.LinearizerKey, u.seq), c.encode(messages.LinearizerUpdate, u))\n  }\n\n  async catchup (linearizer) {\n    if (!this.opened) await this.ready()\n    if (!this.system.heads.length) return\n\n    const writers = new Map()\n\n    // load linearizer...\n    const updates = []\n    const gte = b4a.from([messages.LINEARIZER_PREFIX])\n    const lt = b4a.from([messages.LINEARIZER_PREFIX + 1])\n    for await (const data of this.local.state.storage.createLocalStream({ gte, lt })) {\n      const seq = c.decode(messages.LinearizerKey, data.key)\n      const upd = c.decode(messages.LinearizerUpdate, data.value)\n      upd.seq = seq\n      updates.push(upd)\n    }\n\n    const sys = await this.system.checkout(this.indexedLength)\n\n    for (const node of updates) {\n      const hex = b4a.toString(node.key, 'hex')\n\n      let w = writers.get(hex)\n\n      if (w === undefined) { // TODO: we actually have all the writer info already but our current methods make it hard to reuse that\n        w = await this.base._getWriterByKey(node.key, -1, 0, true, false, sys)\n        writers.set(hex, w)\n      }\n\n      assert(w.length < node.length, 'Update expects writer to be consumed here')\n\n      while (w.length < node.length) {\n        await w.update(sys)\n\n        const next = w.advance()\n        assert(next, 'Node must exist for catchup')\n\n        linearizer.addHead(next)\n      }\n    }\n\n    await sys.close()\n\n    this.updates = updates\n\n    if (this.indexersUpdated) {\n      this.indexersUpdated = false\n      // if we updated the indexers, invalidate all the internal state and reapply it\n      await this.truncate(this.indexedLength)\n      await this._rollbackViews()\n\n      if (this.tx === null) this.tx = this.local.state.storage.write()\n\n      while (this.updates.length > 0 && this.updates[this.updates.length - 1].systemLength >= this.indexedLength) {\n        const u = this.updates.pop()\n        this._deleteUpdate(u)\n      }\n    } else {\n      // otherwise we know the internal state is correct, so we carry on\n      linearizer.update()\n    }\n\n    // must refresh the writers here so isRemoved is up to date\n    await this._refreshWriters()\n  }\n\n  async getIndexedSystem () {\n    if (this.opened === false) await this.ready()\n\n    const sys = await this.system.checkout(this.indexedLength)\n    await sys.ready()\n    return sys\n  }\n\n  getViewFromSystem (view, sys = this.system) {\n    if (view.mappedIndex === -1 || view.mappedIndex >= sys.views.length) return null\n    return sys.views[view.mappedIndex]\n  }\n\n  async recoverAt () {\n    await this.systemRef.core.ready()\n\n    const lt = this.systemRef.core.signedLength\n\n    for await (const { length, info } of SystemView.flushes(this.systemRef.core, { reverse: true, lt })) {\n      for (let i = 0; i < info.views.length; i++) {\n        if (i >= this.views.length) continue\n        if (!b4a.equals(info.views[i].key, this.views[i].key)) continue\n        if (info.views[i].length > this.views[i].core.signedLength) continue\n        return { length, force: true, key: this.system.core.key, indexers: info.indexers, views: info.views }\n      }\n    }\n\n    return null\n  }\n\n  bootstrap () {\n    return this.system.add(this.base.key, { isIndexer: true, isPending: false })\n  }\n\n  async undo (popped) {\n    if (!popped) return\n\n    let indexersUpdated = false\n    while (popped > 0) {\n      const u = this.updates.pop()\n      this._deleteUpdate(u)\n      popped -= u.batch\n      if (u.indexers) indexersUpdated = true\n    }\n\n    const u = this.updates.length === 0 ? null : this.updates[this.updates.length - 1]\n    const systemLength = u ? u.systemLength : this.indexedLength\n\n    await this.truncate(systemLength)\n    if (indexersUpdated) await this._rollbackViews()\n  }\n\n  async truncate (systemLength) {\n    if (this.opened === false) await this.ready()\n    if (systemLength === this.system.core.length) return\n\n    await this.system.core.truncate(systemLength)\n\n    const migrated = await this.system.update()\n\n    for (const view of this.views) {\n      if (!view.core) continue\n\n      const v = this.getViewFromSystem(view)\n\n      if (v && view.core.length === v.length) continue\n      if (v === null) view.mappedIndex = -1 // unmap\n\n      await view.core.truncate(v ? v.length : 0)\n    }\n\n    if (!migrated) return\n\n    await this._refreshWriters()\n    await this._rollbackViews()\n  }\n\n  async _refreshWriters () {\n    // TODO: add the seq at which we updated the state to the writer instance.\n    // then we know if it was truncated out without the lookup, meaning faster truncations\n    for (const w of this.base.activeWriters) {\n      const data = await this.system.get(w.core.key)\n      const bootstrapper = this.system.core.length === 0 && b4a.equals(w.core.key, this.base.key)\n      const isRemoved = data ? data.isRemoved : !bootstrapper\n      w.isRemoved = isRemoved\n    }\n  }\n\n  async _updateSystem () {\n    if (!(await this.system.update())) return\n    await this._refreshWriters()\n    await this._rollbackViews()\n  }\n\n  async _signViewCore (core, length) {\n    const s = await core.signable(length, 0)\n    const signature = crypto.sign(s, this.base.local.keyPair.secretKey)\n    return { signature, length }\n  }\n\n  async _signAllViewCores () {\n    const sys = await this.system.getIndexedInfo(this.indexedLength)\n    const promises = new Array(this.views.length + 1)\n\n    promises[0] = this._signViewCore(this.system.core, this.indexedLength)\n\n    for (let i = 0; i < this.views.length; i++) {\n      const view = this.views[i]\n\n      const v = this.getViewFromSystem(view, sys)\n      const indexedLength = v ? v.length : 0\n\n      promises[i + 1] = this._signViewCore(view.ref.atomicBatch, indexedLength)\n    }\n\n    return Promise.all(promises)\n  }\n\n  async finalize (key) {\n    const local = this.local\n    const pointer = c.encode(messages.BootRecord, {\n      key,\n      indexedLength: this.indexedLength,\n      indexersUpdated: true,\n      fastForwarding: false,\n      recoveries: this.base.recoveries\n    })\n\n    await local.setUserData('autobase/boot', pointer)\n\n    if (this.tx) {\n      await this.tx.flush()\n      this.tx = null\n    }\n\n    await this.store.flush()\n    await this.close()\n  }\n\n  async _flush (localNodes) {\n    if (localNodes) await this._appendLocalNodes(localNodes)\n\n    const local = this.local\n\n    const pointer = c.encode(messages.BootRecord, {\n      key: this.system.core.key,\n      indexedLength: this.indexedLength,\n      indexersUpdated: false,\n      fastForwarding: false,\n      recoveries: this.base.recoveries\n    })\n\n    await local.setUserData('autobase/boot', pointer)\n\n    if (this.tx) {\n      await this.tx.flush()\n      this.tx = null\n    }\n\n    if (this.localCheckpoint) {\n      // we have to flush here so the chkpoint can update\n      // could run the checkpoint on the batch but also no big dead\n      // as the \"should we sign\" check is rerun on boot...\n      await this.store.flush()\n      await this.localCheckpoint.update()\n    }\n\n    if (this.pendingViews) {\n      const views = this.pendingViews\n      this.pendingViews = null\n\n      for (let i = views.length - 1; i >= 0; i--) {\n        const v = views[i]\n        if (!v || v.length <= v.core.signedLength) continue\n        const signature = v.core.core.verifier.assemble(v.partials)\n        try {\n          await v.ref.commit(this.store.atom, v.length, signature)\n        } catch (err) {\n          // TODO: we should prevalidate all signatures instead of during commit so it can be all or nothing, just slighly\n          // friendlier ux. missing hc api for that\n          this.base._warn(err)\n        }\n      }\n    }\n\n    await this.store.flush()\n\n    this.fastForwarding = false\n    if (this.pendingViews === null) this.dirty = false\n  }\n\n  _indexUpdates (indexed) {\n    let shift = 0\n    while (indexed > 0) indexed -= this.updates[shift++].batch\n\n    this.indexedLength = this.updates[shift - 1].systemLength\n\n    for (let i = 0; i < shift; i++) this._deleteUpdate(this.updates[i])\n    this.updates.splice(0, shift)\n\n    if (!this.needsIndexedLengthUpdate) return\n    this.maybeSigned().catch(noop)\n  }\n\n  async _assertNode (node, batch) {\n    // helpful dag helper, so kept here\n\n    const v = (await this.system.get(node.writer.core.key)) || { length: 0, isRemoved: false }\n    const expected = v.length + batch\n    if (node.length === expected) return\n\n    console.trace('INVALID_INSERTION',\n      'length=', node.length,\n      'key=', node.writer.core.key,\n      'local=', node.writer.core.writable,\n      'batch=', batch,\n      'dag=', v\n    )\n\n    process.exit(1)\n  }\n\n  async _optimisticApply (node, indexed) {\n    const checkpoint = this.system.checkpoint()\n\n    this.system.addHead(node)\n\n    const applyBatch = []\n    const key = node.writer.core.key\n\n    applyBatch.push({\n      indexed,\n      optimistic: true,\n      from: node.writer.core,\n      length: node.length,\n      value: node.value,\n      heads: node.actualHeads\n    })\n\n    const pre = await this.system.get(key)\n    const preLength = pre ? pre.length : 0\n\n    let failed = false\n\n    try {\n      await this.base._handlers.apply(applyBatch, this.view, this.hostcalls)\n    } catch {\n      failed = true\n    }\n\n    if (!failed) {\n      const post = await this.system.get(key)\n      // check if acked by addWriter/removeWriter/ackWriter\n      if (!post || preLength === post.length) failed = true\n    }\n\n    if (!failed) {\n      // technically we only need to to this is the writer was removed, but hey, tricky logic\n      await this._refreshWriters()\n      return true\n    }\n\n    // it failed! rollback...\n\n    this.system.applyCheckpoint(checkpoint)\n\n    for (let i = 0; i < this.system.views.length; i++) {\n      const view = this.views[i]\n      const viewLength = view.core ? view.core.length : view.length\n      const viewSystemLength = this.system.views[i].length\n      if (viewSystemLength === viewLength) continue\n      await view.core.truncate(viewSystemLength)\n    }\n\n    await this._refreshWriters()\n\n    await this._rollbackViews()\n    return false\n  }\n\n  async update (u, localNodes) {\n    if (this.changes !== null) this.changes.track(this)\n    if (this.tx === null) this.tx = this.local.state.storage.write()\n\n    if (this.system.bootstrapping) await this.bootstrap()\n\n    let batch = 0\n    let applyBatch = []\n    let indexersUpdated = 0\n\n    let j = 0\n    let i = 0\n\n    while (i < Math.min(u.indexed.length, u.shared)) {\n      const node = u.indexed[i++]\n\n      if (node.batch > 1) continue\n      this.base._shiftWriter(node.writer)\n\n      const update = this.updates[j++]\n\n      if (update.indexers) {\n        indexersUpdated = i\n        break\n      }\n    }\n\n    if (u.undo) await this.undo(u.undo)\n\n    await this._updateSystem()\n\n    for (i = u.shared; i < u.length; i++) {\n      const indexed = i < u.indexed.length\n      const node = indexed ? u.indexed[i] : u.tip[i - u.indexed.length]\n\n      batch++\n\n      const optimist = node.writer.isRemoved && node.optimistic && batch === 1 &&\n        this.base._hasOptimisticApply === true && await this._optimisticApply(node, indexed)\n\n      if (!optimist) {\n        if (node.writer.isRemoved && !node.writer.isActiveIndexer) {\n          if (node.batch > 1) continue\n          // in case someone is linking this node and they are not removed\n          const u = { seq: 0, key: node.writer.core.key, length: node.length, batch, systemLength: 0, indexers: false }\n          this._pushUpdate(u)\n          batch = 0\n          assert(applyBatch.length === 0, 'Apply batch should not have been modified')\n          continue\n        }\n\n        // in prod we prop need to disable this assertion as its pretty expensive,\n        // but it catches a lot of bugs, so here for debugs\n        // await this._assertNode(node, batch)\n\n        const deps = node.causalDependencies()\n\n        // oldest -> newest\n        for (let i = deps.length - 1; i >= 1; i--) {\n          const d = deps[i]\n          if (await this.system.linkable(d.writer.core.key, d.length, true)) {\n            this.system.addHead(deps[i])\n          }\n        }\n\n        this.system.addHead(deps[0])\n\n        if (node.value !== null && !node.writer.isRemoved) {\n          applyBatch.push({\n            indexed,\n            optimistic: false,\n            from: node.writer.core,\n            length: node.length,\n            value: node.value,\n            heads: node.actualHeads\n          })\n        }\n\n        if (node.batch > 1) continue\n\n        if (applyBatch.length && this.base._hasApply === true) {\n          this.applying = true\n          await this.base._handlers.apply(applyBatch, this.view, this.hostcalls)\n          this.applying = false\n        }\n      }\n\n      const update = {\n        seq: 0,\n        key: node.writer.core.key,\n        length: node.length,\n        batch,\n        systemLength: 0,\n        indexers: false\n      }\n\n      update.indexers = !!this.system.indexerUpdate\n\n      if (this.system.indexerUpdate) await this._generateNextViews()\n\n      await this.system.flush(this.views)\n      await this.system.update()\n\n      batch = 0\n      applyBatch = []\n\n      this._pushUpdate(update)\n\n      if (!indexed || indexersUpdated) continue\n\n      this.base._shiftWriter(node.writer)\n\n      if (update.indexers) {\n        indexersUpdated = i + 1\n      }\n    }\n\n    if (u.indexed.length) {\n      this._indexUpdates(indexersUpdated || u.indexed.length)\n    }\n\n    if (this.changes !== null) {\n      this.changes.finalise()\n      await this.base._handlers.update(this.view, this.changes)\n    }\n\n    await this._flush(localNodes)\n\n    return indexersUpdated !== 0\n  }\n\n  flush () {\n    return this._flush(null)\n  }\n\n  async _appendLocalNodes (localNodes) {\n    if (localNodes.length === 0) return // just in case\n\n    const blocks = new Array(localNodes.length)\n    const local = this.local\n\n    if (!local.opened) await local.ready()\n\n    for (let i = 0; i < blocks.length; i++) {\n      const { value, heads, batch, optimistic } = localNodes[i]\n\n      blocks[i] = {\n        version: 1,\n        maxSupportedVersion: this.base.maxSupportedVersion,\n        checkpoint: null,\n        digest: null,\n        optimistic,\n        node: {\n          heads,\n          batch,\n          value: value === null ? null : c.encode(this.base.valueEncoding, value)\n        },\n        trace: []\n      }\n    }\n\n    if (this.localIndexer) {\n      const signedLength = this.localCheckpoint.signedLength()\n      const local = this.local\n\n      let signedAt = 0\n      let signatures = null\n\n      if (this.indexedLength > signedLength) {\n        signatures = await this._signAllViewCores()\n        signedAt = local.length + blocks.length\n      }\n\n      for (let i = 0; i < blocks.length; i++) {\n        const length = local.length + i + 1\n        if (length === signedAt) this.localCheckpoint.updateSignatures(length, signatures)\n\n        const blk = blocks[i]\n\n        blk.checkpoint = this.localCheckpoint.makeCheckpoints(length)\n        blk.digest = this.localCheckpoint.makeDigest(length, this.system.core.key)\n      }\n    } else {\n      if (!this.localCheckpoint) await this._startLocalCheckpoint()\n\n      for (let i = 0; i < blocks.length; i++) {\n        const length = local.length + i + 1\n        blocks[i].digest = this.localCheckpoint.makeDigest(length, this.system.core.key)\n      }\n    }\n\n    await local.append(blocks)\n  }\n\n  async _rollbackViews () {\n    for (const view of this.views) {\n      const v = this.getViewFromSystem(view)\n\n      if (v) {\n        view.key = v.key\n      } else {\n        await this._resetView(view)\n      }\n    }\n  }\n\n  async _resetView (view) {\n    const manifests = await this.store.getIndexerManifests(this.system.indexers)\n    view.key = await this.store.createView(manifests, view.name, null)\n    view.length = 0\n  }\n\n  async _generateNextViews () {\n    // note, this is very state dependent so can ONLY be called at the exact time an indexer upgrade occurs\n    const manifests = await this.store.getIndexerManifests(this.system.indexers)\n\n    for (const v of this.views) {\n      const prologue = await getPrologue(v)\n      const key = await this.store.createView(manifests, v.name, prologue)\n\n      v.key = key\n    }\n  }\n}\n\nasync function getPrologue (view) {\n  const length = view.core ? view.core.length : view.length\n  if (!length) return null\n\n  const hash = await view.core.treeHash(length)\n\n  return {\n    hash,\n    length\n  }\n}\n\nfunction noop () {}\n\nfunction cmpCheckpoints (a, b) {\n  return a.signedLength() - b.signedLength()\n}\n\nasync function setPartialSignature (view, index) {\n  const sig = view.signatures[index]\n  if (sig.length < view.length) await view.core.get(sig.length - 1)\n  view.partials[index] = await partialSignature(view.core, sig.signer, view.length, sig.length, sig.signature)\n}\nconst c = require('compact-encoding')\nconst messages = require('./messages.js')\n\nmodule.exports = async function boot (corestore, key, { encrypt, encryptionKey, keyPair } = {}) {\n  const result = {\n    key: null,\n    local: null,\n    bootstrap: null,\n    encryptionKey: null,\n    boot: null\n  }\n\n  if (key) {\n    result.key = key\n\n    const bootstrap = corestore.get({ key, active: false, valueEncoding: messages.OplogMessage })\n    await bootstrap.ready()\n\n    const localKey = await bootstrap.getUserData('autobase/local')\n\n    if (keyPair) {\n      result.local = corestore.get({ keyPair, active: false, exclusive: true, valueEncoding: messages.OplogMessage })\n    } else {\n      if (bootstrap.writable && !localKey) {\n        result.local = bootstrap.session({ active: false, exclusive: true, valueEncoding: messages.OplogMessage })\n      } else {\n        const local = localKey\n          ? corestore.get({ key: localKey, active: false, exclusive: true, valueEncoding: messages.OplogMessage })\n          : corestore.get({ name: 'local', active: false, exclusive: true, valueEncoding: messages.OplogMessage })\n\n        await local.ready()\n        result.local = local\n      }\n    }\n\n    result.bootstrap = bootstrap\n  } else {\n    result.local = keyPair\n      ? corestore.get({ keyPair, active: false, exclusive: true, valueEncoding: messages.OplogMessage })\n      : corestore.get({ name: 'local', active: false, exclusive: true, valueEncoding: messages.OplogMessage })\n    await result.local.ready()\n\n    const key = await result.local.getUserData('referrer')\n    if (key) {\n      result.key = key\n      result.bootstrap = corestore.get({ key, active: false, valueEncoding: messages.OplogMessage })\n      await result.bootstrap.ready()\n    } else {\n      result.key = result.local.key\n      result.bootstrap = result.local.session({ active: false, valueEncoding: messages.OplogMessage })\n      await result.bootstrap.setUserData('autobase/local', result.local.key)\n    }\n  }\n\n  if (key || keyPair) {\n    await result.bootstrap.setUserData('referrer', result.key)\n    await result.bootstrap.setUserData('autobase/local', result.local.key)\n    await result.local.setUserData('referrer', result.key)\n  }\n\n  const [encryptionKeyBuffer, pointer] = await Promise.all([\n    result.local.getUserData('autobase/encryption'),\n    result.local.getUserData('autobase/boot')\n  ])\n\n  if (pointer) {\n    result.boot = c.decode(messages.BootRecord, pointer)\n  }\n\n  if (encryptionKeyBuffer) {\n    result.encryptionKey = encryptionKeyBuffer\n  }\n\n  if (!result.encryptionKey && (encryptionKey || encrypt)) {\n    if (!encryptionKey) encryptionKey = (await corestore.createKeyPair('autobase/encryption')).secretKey.subarray(0, 32)\n    await result.bootstrap.setUserData('autobase/encryption', encryptionKey) // legacy support\n    await result.local.setUserData('autobase/encryption', encryptionKey)\n    result.encryptionKey = encryptionKey\n  }\n\n  if (result.encryptionKey) {\n    await result.local.setEncryptionKey(result.encryptionKey)\n    await result.bootstrap.setEncryptionKey(result.encryptionKey)\n  }\n\n  return result\n}\nconst BufferMap = require('tiny-buffer-map')\n\n// This is basically just a Map atm, but leaving it as an abstraction for now\n// in case we wanna optimize it for our exact usecase\n\nmodule.exports = class Clock {\n  constructor () {\n    this.seen = new BufferMap()\n  }\n\n  get size () {\n    return this.seen.size\n  }\n\n  has (key) {\n    return this.seen.has(key)\n  }\n\n  includes (key, length) {\n    return this.seen.has(key) && this.seen.get(key) >= length\n  }\n\n  get (key) {\n    return this.seen.get(key) || 0\n  }\n\n  set (key, len) {\n    this.seen.set(key, len)\n    return len\n  }\n\n  add (clock) {\n    for (const [key, l] of clock) {\n      if (this.get(key) < l) this.set(key, l)\n    }\n  }\n\n  [Symbol.iterator] () {\n    return this.seen[Symbol.iterator]()\n  }\n}\nconst BufferMap = require('tiny-buffer-map')\n\nconst Clock = require('./clock')\n\nconst UNSEEN = 0\nconst NEWER = 1\nconst ACKED = 2\n\n// Consensus machine for Autobase. Sort DAG nodes using\n// vector clocks to determine a globally consistent view\n\nmodule.exports = class Consensus {\n  constructor (indexers) {\n    this.merges = new Set()\n    this.majority = (indexers.length >>> 1) + 1\n    this.indexers = indexers\n    this.removed = new Clock()\n    this.updated = false\n\n    this.writers = new BufferMap()\n    for (const idx of this.indexers) {\n      this.writers.set(idx.core.key, idx)\n    }\n  }\n\n  addHead (node) {\n    if (!node.writer.isActiveIndexer) return\n    if (this._isMerge(node)) this.merges.add(node)\n    this.updated = true\n    return node\n  }\n\n  /* Indexer Only DAG methods */\n\n  _tails (node, tails) {\n    const tailSet = new Set()\n    for (const t of tails) {\n      if (node.clock.includes(t.writer.core.key, t.length)) tailSet.add(t)\n    }\n\n    return tailSet\n  }\n\n  _tailsAndMerges (node, tails) {\n    const all = this._tails(node, tails)\n    for (const m of this.merges) {\n      if (m !== node && node.clock.includes(m.writer.core.key, m.length)) {\n        all.add(m)\n      }\n    }\n    return all\n  }\n\n  _isMerge (node) {\n    if (!node.writer.isActiveIndexer) return false\n\n    const deps = []\n\n    for (const idx of this.indexers) {\n      let seq = node.clock.get(idx.core.key) - 1\n\n      if (idx === node.writer) seq--\n\n      const head = idx.get(seq)\n      if (!head || this.removed.includes(head.writer.core.key, head.length)) continue\n\n      let isDep = true\n      for (let i = 0; i < deps.length; i++) {\n        const d = deps[i]\n        if (d === head) continue\n\n        if (d.clock.includes(head.writer.core.key, head.length)) {\n          isDep = false\n          break\n        }\n\n        if (head.clock.includes(d.writer.core.key, d.length)) {\n          const popped = deps.pop()\n          if (d === popped) continue\n          deps[i--] = popped\n        }\n      }\n\n      if (isDep) deps.push(head)\n    }\n\n    return deps.length > 1\n  }\n\n  _indexerTails () {\n    const tails = new Set()\n    for (const idx of this.indexers) {\n      const length = this.removed.has(idx.core.key) ? this.removed.get(idx.core.key) : idx.indexed\n\n      const head = idx.get(length)\n      if (!head || this.removed.includes(head.writer.core.key, head.length)) continue\n\n      let isTail = true\n      for (const t of tails) {\n        if (head.clock.includes(t.writer.core.key, t.length)) {\n          isTail = false\n          break\n        }\n\n        if (t.clock.includes(head.writer.core.key, head.length)) {\n          tails.delete(t)\n        }\n      }\n\n      if (isTail) tails.add(head)\n    }\n\n    return tails\n  }\n\n  // parent is newer if for any node in parent's view,\n  // either node can see object or object can see node\n  _strictlyNewer (object, parent) {\n    for (const [key, latest] of parent.clock) {\n      const oldest = this.removed.get(key)\n      if (latest <= oldest) continue // check quickly if we removed it\n\n      // get the NEXT mode from the writer from the objects pov, adjust if its removed\n      let length = object.clock.get(key)\n      if (length <= oldest) length = oldest\n\n      // sanity check, likely not needed as someone has checked this before, but whatevs, free\n      if (latest < length) return false\n\n      // if the same, they both seen it, continue\n      if (latest === length) continue\n\n      const writer = this.writers.get(key)\n\n      // might not be in the removed set but the writer can tell us if it was indexed...\n      const next = writer && writer.get(length >= writer.indexed ? length : writer.indexed)\n\n      // no next, its been indexed, both seen it\n      if (!next) continue\n\n      // if the NEXT node has seen the object its fine - newer\n      if (next.clock.includes(object.writer.core.key, object.length)) continue\n\n      // otherwise the parent must also NOT has seen the next node\n      if (!parent.clock.includes(next.writer.core.key, next.length)) continue\n\n      return false\n    }\n\n    return parent.clock.get(object.writer.core.key) >= object.length\n  }\n\n  _acks (target) {\n    const acks = target.writer.isActiveIndexer ? [target] : [] // TODO: can be cached on the target node in future (ie if we add one we dont have to check it again)\n\n    for (const idx of this.indexers) {\n      if (idx === target.writer) continue\n\n      let next = target.clock.get(idx.core.key)\n      if (next < idx.nodes.offset) next = idx.nodes.offset\n\n      const nextIndexNode = idx.get(next >= idx.indexed ? next : idx.indexed)\n\n      // no node - no ack\n      if (!nextIndexNode) continue\n\n      // if the next index node does not see the target, no ack\n      if (!nextIndexNode.clock.includes(target.writer.core.key, target.length)) continue\n\n      // if the next index node is not strictly newer, skip to avoid ambig...\n      if (!this._strictlyNewer(target, nextIndexNode)) continue\n\n      acks.push(nextIndexNode)\n    }\n\n    return acks\n  }\n\n  acksFromNode (target, view) {\n    const acks = new Set()\n\n    if (!view || !view.clock.includes(target.writer.core.key, target.length)) return acks\n\n    acks.add(view.writer)\n\n    for (const idx of this.indexers) {\n      if (idx === view.writer) continue\n\n      const length = view.clock.get(idx.core.key)\n      if (!length) continue\n\n      if (target.clock.includes(idx.core.key, length)) continue\n\n      const head = idx.get(length - 1)\n      if (!head) continue\n\n      if (head.clock.includes(target.writer.core.key, target.length)) {\n        acks.add(idx)\n      }\n    }\n\n    return acks\n  }\n\n  _ackedAt (acks, parent) {\n    let seen = 0\n    let missing = acks.length\n\n    for (const node of acks) {\n      missing--\n\n      if (!parent.clock.includes(node.writer.core.key, node.length)) {\n        if (seen + missing < this.majority) return false\n        continue\n      }\n\n      if (++seen >= this.majority) return true\n    }\n\n    return false\n  }\n\n  confirms (indexer, target, acks, length) {\n    if (!length || this.removed.get(indexer.core.key) >= length) return UNSEEN\n    // def feels like there is a smarter way of doing this part\n    // ie we just wanna find a node from the indexer that is strictly newer than target\n    // and seens a maj of the acks - thats it\n\n    let jump = true\n    let newer = true\n\n    for (let i = length - 1; i >= 0; i--) {\n      const head = indexer.get(i)\n      if (head === null) return UNSEEN\n\n      let seen = 0\n\n      for (const node of acks) {\n        // if (node.writer === indexer) continue\n        if (!head.clock.includes(node.writer.core.key, node.length)) continue\n        if (++seen >= this.majority) break\n      }\n\n      if (!newer && seen < this.majority) {\n        break\n      }\n\n      if (!this._strictlyNewer(target, head)) {\n        // all strictly newer nodes are clustered together so bisect until we find the cluster\n        if (jump) {\n          jump = false\n\n          let t = length - 1\n          let b = 0\n\n          while (t > b) {\n            const mid = (t + b) >>> 1\n            const node = indexer.get(mid)\n\n            if (node === null || !node.clock.includes(target.writer.core.key, target.length) || this._strictlyNewer(target, node)) {\n              b = mid + 1\n            } else {\n              t = mid - 1\n            }\n          }\n\n          // + 2 in case we are off by one and the i--. its fine, just an optimisation\n          if (b + 1 < i) i = b + 2\n        }\n\n        newer = false\n        continue\n      } else if (seen < this.majority) {\n        return NEWER\n      }\n\n      return ACKED\n    }\n\n    return UNSEEN\n  }\n\n  _isConfirmed (target, parent = null) {\n    const acks = this._acks(target)\n    const confs = new Set()\n\n    if (acks.length < this.majority) return false\n    let allNewer = true\n\n    for (const indexer of this.indexers) {\n      const length = parent\n        ? (parent.writer === indexer) ? parent.length - 1 : parent.clock.get(indexer.core.key)\n        : indexer.length\n\n      const result = this.confirms(indexer, target, acks, length)\n\n      if (result === ACKED) {\n        confs.add(indexer)\n        if (confs.size >= this.majority) {\n          return true\n        }\n      }\n\n      if (result === UNSEEN) allNewer = false\n    }\n\n    if (parent) return this._isConfirmableAt(target, parent, acks, confs)\n\n    return allNewer\n  }\n\n  _isConfirmableAt (target, parent, acks, confs) {\n    if (!this._ackedAt(acks, parent)) return false\n\n    let potential = confs.size\n\n    for (const indexer of this.indexers) {\n      if (confs.has(indexer)) continue\n\n      const length = parent.clock.get(indexer.core.key)\n      const isSeen = target.clock.includes(indexer.core.key, length)\n\n      // if the target has seen the latest node, it can freely be used to confirm the target later\n      // otherwise, check if a newer node is strictly newer...\n      if (!isSeen) {\n        const head = indexer.get(length - 1)\n\n        // the next indexer head HAS to be strictly newer - meaning the current one has to be also.\n        if (head && !this.removed.includes(head.writer.core.key, head.length) && !this._strictlyNewer(target, head)) {\n          continue\n        }\n      }\n\n      if (++potential >= this.majority) return true\n    }\n\n    return false\n  }\n\n  // this can get called multiple times for same node\n  remove (node) {\n    this.merges.delete(node)\n    this.removed.set(node.writer.core.key, node.length)\n    return node\n  }\n\n  shift () {\n    if (!this.updated) return []\n\n    const tails = this._indexerTails()\n\n    for (const tail of tails) {\n      if (this._isConfirmed(tail)) {\n        return [this.remove(tail)]\n      }\n    }\n\n    for (const merge of this.merges) {\n      if (this._isConfirmed(merge)) {\n        return this._yieldNext(merge, tails)\n      }\n    }\n\n    this.updated = false\n    return []\n  }\n\n  // yields next indexer node\n  _yieldNext (node, tails) {\n    // only stop when we find a tail\n    while (!tails.has(node)) {\n      let next = null\n\n      // for merges check if one fork is confirmed\n      for (const t of this._tailsAndMerges(node, tails)) {\n        if (this._isConfirmed(t, node)) {\n          next = t\n          break\n        }\n      }\n\n      if (next) {\n        node = next\n        continue\n      }\n\n      // otherwise yield all tails\n      const tailSet = []\n      for (const t of this._tails(node, tails)) {\n        tailSet.push(this.remove(t))\n      }\n\n      return tailSet\n    }\n\n    return [this.remove(node)]\n  }\n\n  shouldAck (writer) {\n    for (const t of this._indexerTails()) {\n      if (t.writer === writer) continue\n      if (this._shouldAckNode(t, writer)) return true\n    }\n\n    return false\n  }\n\n  _shouldAckNode (target, writer) {\n    const head = writer.head()\n    const next = target.clock.get(writer.core.key)\n    const nextIndexNode = writer.get(next >= writer.indexed ? next : writer.indexed)\n\n    // if we have no next node and we didn't write target then ack\n    if (!nextIndexNode && writer !== target.writer) return true\n\n    // shortcuts if we have next node\n    if (nextIndexNode) {\n      // if the next node does not see the target, should ack\n      if (!nextIndexNode.clock.includes(target.writer.core.key, target.length)) {\n        return !head.clock.includes(target.writer.core.key, target.length)\n      }\n\n      // if the next node is not strictly newer, no point acking\n      if (!this._strictlyNewer(target, nextIndexNode)) return false\n    }\n\n    // now check if we can double confirm\n    const acks = this._acks(target)\n\n    // need enough to double confirm\n    if (acks.length >= this.majority) {\n      return this.confirms(writer, target, acks, writer.length) === UNSEEN\n    }\n\n    return false\n  }\n}\nconst SystemView = require('./system.js')\n\nconst DEFAULT_OP_TIMEOUT = 5_000\nconst DEFAULT_MIN_FF = 16\n\nmodule.exports = class FastForward {\n  constructor (base, key, { timeout = DEFAULT_OP_TIMEOUT, verified = true, minimum = DEFAULT_MIN_FF, force = false } = {}) {\n    const encryption = base._viewStore.getSystemEncryption()\n\n    this.base = base\n    this.key = key\n    this.timeout = timeout\n    this.force = force\n    this.core = base.store.get({ key, active: true, encryption })\n    this.length = 0\n    this.views = []\n    this.indexers = []\n    this.minimum = minimum\n    this.verified = verified\n    this.cores = []\n    this.system = null\n    this.destroyed = false\n    this.upgrading = null\n    this.failed = false\n\n    this._appendTimeout = null\n    this._resolveAppend = null\n  }\n\n  static MINIMUM = DEFAULT_MIN_FF\n\n  async upgrade () {\n    if (!this.upgrading) this.upgrading = this._upgrade()\n    try {\n      if (!await this.upgrading) return null\n      return { length: this.length, force: this.force, key: this.key, indexers: this.indexers, views: this.views }\n    } catch {\n      this.failed = true\n      return null\n    } finally {\n      await this.close()\n    }\n  }\n\n  _waitForAppend () {\n    if (this.core.length > 0) return Promise.resolve()\n    return new Promise((resolve) => {\n      this._appendTimeout = setTimeout(this.close.bind(this), this.timeout)\n      this._resolveAppend = resolve\n      this.core.once('append', this._continueAppend.bind(this))\n    })\n  }\n\n  _continueAppend () {\n    if (this._resolveAppend === null) return\n\n    clearTimeout(this._appendTimeout)\n    const resolve = this._resolveAppend\n\n    this._appendTimeout = null\n    this._resolveAppend = null\n\n    resolve()\n  }\n\n  _minLength () {\n    return this.base.core.length + this.minimum\n  }\n\n  async _upgrade () {\n    await this.core.ready()\n    await this.base._preopen // might run from the constructor if its a static ff\n\n    if (!this.verified) await this._waitForAppend()\n    if (this.destroyed) return false\n\n    this.length = this.core.length\n    // note we use the persisted length here, as we might as well continue that work as thats ~ the same length\n    if (!this.force && (this.length === 0 || this.length < this._minLength())) return false\n\n    await this.core.get(this.length - 1, { timeout: this.timeout })\n\n    this.system = new SystemView(this.core, { checkout: this.length })\n    await this.system.ready()\n    if (this.destroyed) return false\n\n    const promises = []\n\n    // ensure local key is locally available always\n    promises.push(this.system.get(this.base.local.key, { timeout: this.timeout }))\n\n    for (const v of this.system.views) {\n      this.views.push(v)\n      const core = this.base.store.get({ key: v.key, active: true })\n      this.cores.push(core)\n      promises.push(core.get(v.length - 1, { timeout: this.timeout }))\n    }\n\n    for (const idx of this.system.indexers) {\n      this.indexers.push(idx)\n      if (idx.length === 0) continue // need to make sure we have manifest...\n      const core = this.base.store.get({ key: idx.key, active: true })\n      this.cores.push(core)\n      promises.push(core.get(idx.length - 1, { timeout: this.timeout }))\n      promises.push(this.system.get(idx.key, { timeout: this.timeout }))\n    }\n\n    for (const head of this.system.heads) {\n      promises.push(this.system.get(head.key, { timeout: this.timeout }))\n    }\n\n    await Promise.all(promises)\n    if (this.destroyed) return false\n\n    return true\n  }\n\n  async close () {\n    this.destroyed = true\n    this._continueAppend()\n    if (this.system) await this.system.close()\n    for (const core of this.cores) await core.close()\n  }\n}\nconst b4a = require('b4a')\nconst assert = require('nanoassert')\n\nconst Clock = require('./clock')\nconst Consensus = require('./consensus')\nconst Topolist = require('./topolist')\n\nclass Node {\n  constructor (writer, length, value, heads, batch, dependencies, version, optimistic) {\n    this.writer = writer\n    this.length = length\n    this.value = value\n    this.heads = heads\n    this.actualHeads = heads.slice(0) // TODO: we should remove this and just not mutate heads...\n\n    this.dependents = new Set()\n    this.dependencies = dependencies\n\n    this.version = version\n    this.optimistic = optimistic && (batch === 1) && !!value\n\n    this.batch = batch\n    this.dropped = 0\n\n    this.clock = new Clock()\n\n    this.yielded = false\n    this.yielding = false\n  }\n\n  isTail () {\n    return this.dependencies.size === this.dropped\n  }\n\n  causalDependencies (idx) {\n    const order = [this]\n    const stack = [this]\n\n    let visited = null\n\n    while (stack.length > 0) {\n      const node = stack.pop()\n      for (const dep of node.dependencies) {\n        if (!dep.writer.isRemoved || dep.writer.isActiveIndexer) continue\n\n        // TODO: replace with \"coloring\" but ok for now, tiny set\n        if (visited === null) visited = new Set()\n        if (visited.has(dep)) continue\n        visited.add(dep)\n\n        stack.push(dep)\n        order.push(dep)\n      }\n    }\n\n    return order\n  }\n\n  clear () {\n    this.clock = null\n    this.dependents = null\n    return this\n  }\n\n  reset () {\n    this.yielded = false\n    this.yielding = false\n    for (const dep of this.dependents) dep.dependencies.add(this)\n    this.dependents.clear()\n  }\n\n  active () {\n    for (const dep of this.dependencies) {\n      if (dep.yielded) {\n        this.dependencies.delete(dep) // nodes might be yielded during buffering\n      } else {\n        dep.dependents.add(this)\n        this.clock.add(dep.clock)\n      }\n    }\n\n    if (this.writer.isActiveIndexer) this.clock.set(this.writer.core.key, this.length)\n  }\n\n  tieBreak (node) {\n    return tieBreak(this, node)\n  }\n\n  hasDependency (dep) {\n    for (const h of this.actualHeads) {\n      if (sameNode(h, dep)) return true\n    }\n    return false\n  }\n\n  get ref () {\n    return this.writer.core.key.toString('hex').slice(0, 2) + ':' + this.length\n  }\n}\n\nmodule.exports = class Linearizer {\n  constructor (indexers, { heads = [], writers = new Map() } = {}) {\n    this.heads = new Set()\n    this.tails = new Set()\n    this.tip = new Topolist()\n    this.size = 0 // useful for debugging\n    this.updated = false\n    this.indexersUpdated = false\n    this.writers = writers\n\n    this.consensus = new Consensus(indexers)\n    this._initialHeads = heads.slice(0)\n    this._strictlyAdded = null\n\n    for (const { key, length } of heads) {\n      this.consensus.removed.set(key, length)\n    }\n  }\n\n  get indexers () {\n    return this.consensus.indexers\n  }\n\n  static createNode (writer, length, value, heads, batch, dependencies, version, optimistic) {\n    return new Node(writer, length, value, heads, batch, dependencies, version, optimistic)\n  }\n\n  // returns the global links of the dag, use this to link against the current state of the dag\n  // TODO: rename to heads() and move the sets to _ props\n  getHeads () {\n    const heads = this._initialHeads.slice(0)\n    for (const node of this.heads) heads.push({ key: node.writer.core.key, length: node.length })\n    return heads\n  }\n\n  // TODO: might contain dups atm, nbd for how we use it, returns an array of writers you can \"pull\"\n  // to get the full dag view at any time\n  getBootstrapWriters () {\n    const writers = []\n\n    for (const head of this.heads) writers.push(head.writer)\n    for (let i = 0; i < this.consensus.indexers.length; i++) writers.push(this.consensus.indexers[i])\n\n    return writers\n  }\n\n  addHead (node) {\n    node.active()\n\n    // 99.99% of the time _initialHeads is empty...\n    if (this._initialHeads.length > 0) this._updateInitialHeads(node)\n\n    if (node.isTail()) {\n      this.tails.add(node)\n    }\n\n    for (const head of this.heads) {\n      if (node.hasDependency(head)) {\n        this.heads.delete(head)\n      }\n    }\n\n    this.tip.add(node)\n    if (node.writer.isActiveIndexer) this.consensus.addHead(node)\n\n    this.size++\n    this.heads.add(node)\n\n    this.updated = true\n\n    return node\n  }\n\n  update () {\n    if (!this.updated) return null\n    this.updated = false\n\n    // get the indexed nodes\n    const indexed = []\n    while (true) {\n      const nodes = this.consensus.shift()\n      if (!nodes.length) break\n\n      this._yield(nodes, indexed)\n    }\n\n    return this.tip.flush(indexed)\n  }\n\n  _updateInitialHeads (node) {\n    for (const head of node.actualHeads) {\n      for (let i = 0; i < this._initialHeads.length; i++) {\n        const { key, length } = this._initialHeads[i]\n        if (length !== head.length || !b4a.equals(key, head.key)) continue\n        this._initialHeads.splice(i--, 1)\n      }\n    }\n  }\n\n  /* Ack methods */\n\n  shouldAck (writer, pending = false) {\n    if (!writer || !writer.isActiveIndexer) return false\n\n    // all indexers have to flushed to the dag before we ack as a quick \"debounce\"\n    for (const w of this.indexers) {\n      if (w.length !== w.available) return false\n    }\n\n    let isHead = false\n\n    // if ANY head is not an indexer ack\n    for (const head of this.heads) {\n      if (!head.writer.isActiveIndexer) return true\n      if (head.writer === writer) isHead = true\n    }\n\n    if (this.heads.size === 1 && isHead) {\n      return false // never self-ack!\n    }\n\n    const visited = new Set()\n\n    // check if there is non-null value\n    let valueCheck = false\n\n    for (const tail of this.tails) {\n      if (pending || this._nonNull(tail, visited)) {\n        valueCheck = true\n        break\n      }\n    }\n\n    if (!valueCheck) return false\n\n    if (this.consensus.shouldAck(writer)) return true\n\n    return this._shouldAckHeads(writer, pending)\n  }\n\n  // check if there is any value above this node\n  _nonNull (target, visited) {\n    const stack = [target]\n\n    while (stack.length) {\n      const node = stack.pop()\n\n      if (visited.has(node)) continue\n      if (node.value !== null) return true\n\n      visited.add(node)\n\n      for (const dep of node.dependents) {\n        stack.push(dep)\n      }\n    }\n\n    return false\n  }\n\n  // ack if any head is closer to confirming a value\n  _shouldAckHeads (writer, pending) {\n    const prev = writer.head()\n\n    for (const head of this.heads) {\n      // only check other writers heads\n      if (head.writer === writer) continue\n\n      const stack = [head]\n      const visited = new Set()\n\n      while (stack.length) {\n        const node = stack.pop()\n\n        if (visited.has(node)) continue\n        visited.add(node)\n\n        if (pending || node.value !== null) {\n          const acks = this.consensus.acksFromNode(node, head)\n          const prevAcks = this.consensus.acksFromNode(node, prev)\n\n          // head sees more acks\n          if (acks.size > prevAcks.size) return true\n\n          for (const idx of acks) {\n            // head sees acks that writer does not\n            if (!prevAcks.has(idx)) return true\n          }\n\n          // both seen, no point going any further down\n          if (prevAcks.size && acks.size) continue\n        }\n\n        stack.push(...node.dependencies)\n      }\n    }\n\n    return false\n  }\n\n  /* Full DAG methods */\n\n  _yield (nodes, indexed = []) {\n    const offset = indexed.length\n    const tails = []\n\n    // determine which nodes are yielded\n    while (nodes.length) {\n      const node = nodes.pop()\n\n      if (node.yielding) continue\n      node.yielding = true\n\n      if (node.isTail()) tails.push(node)\n\n      nodes.push(...node.dependencies)\n    }\n\n    while (tails.length) {\n      let tail = tails.pop()\n\n      for (tail of this._removeBatch(tail)) {\n        Topolist.add(tail, indexed, offset)\n      }\n\n      for (const dep of tail.dependents) {\n        if (dep.isTail() && dep.yielding) tails.push(dep)\n      }\n    }\n\n    return indexed\n  }\n\n  _isFutureTail (node) {\n    let dropped = node.dropped\n\n    // a tail has no unyielded dependencies\n    for (const dep of node.dependencies) {\n      if (dep.yielded) continue\n      if (dropped === 0) return false\n      dropped--\n    }\n\n    return true\n  }\n\n  _removeNode (node) {\n    this.tails.delete(node)\n    this.heads.delete(node)\n    this.consensus.remove(node)\n\n    // update the tailset\n    for (const d of node.dependents) {\n      if (d.yielding && d.dependencies.has(node)) d.dropped++ // keep links for the indexed batch\n      else d.dependencies.delete(node)\n      if (this._isFutureTail(d)) this.tails.add(d)\n    }\n\n    node.yielded = true\n    this.size--\n\n    if (this.heads.size === 0) {\n      // in case of a single writer the dag might drain immediately...\n      this._initialHeads.push({ key: node.writer.core.key, length: node.length })\n    }\n\n    return node\n  }\n\n  _removeBatch (node) {\n    const batch = [this._removeNode(node)]\n\n    while (node.batch !== 1) { // its a batch!\n      if (node.dependents.size === 0) { // bad batch node, auto correct\n        const next = node.writer.get(node.length)\n        if (next && next.batch === node.batch - 1) node.dependents.add(next)\n      }\n\n      assert(node.dependents.size === 1, 'Batch is linked partially, which is not allowed')\n\n      node = getFirst(node.dependents)\n      batch.push(this._removeNode(node))\n    }\n\n    return batch\n  }\n}\n\nfunction tieBreak (a, b) {\n  return Topolist.compare(a, b) < 0 // lowest key wis\n}\n\nfunction getFirst (set) {\n  return set[Symbol.iterator]().next().value\n}\n\nfunction sameNode (a, b) {\n  return b4a.equals(a.key, b.writer.core.key) && a.length === b.length\n}\nconst c = require('compact-encoding')\nconst assert = require('nanoassert')\nconst IndexEncoder = require('index-encoder')\n\nconst Checkout = {\n  preencode (state, m) {\n    c.fixed32.preencode(state, m.key)\n    c.uint.preencode(state, m.length)\n  },\n  encode (state, m) {\n    c.fixed32.encode(state, m.key)\n    c.uint.encode(state, m.length)\n  },\n  decode (state) {\n    return {\n      key: c.fixed32.decode(state),\n      length: c.uint.decode(state)\n    }\n  }\n}\n\nconst Clock = c.array(Checkout)\n\nconst IndexCheckpoint = {\n  preencode (state, m) {\n    c.fixed64.preencode(state, m.signature)\n    c.uint.preencode(state, m.length)\n  },\n  encode (state, m) {\n    c.fixed64.encode(state, m.signature)\n    c.uint.encode(state, m.length)\n  },\n  decode (state) {\n    return {\n      signature: c.fixed64.decode(state),\n      length: c.uint.decode(state)\n    }\n  }\n}\n\nconst KeyV0 = {\n  preencode (state, m) {\n    c.fixed32.preencode(state, m.key)\n  },\n  encode (state, m) {\n    c.fixed32.encode(state, m.key)\n  },\n  decode (state) {\n    return {\n      key: c.fixed32.decode(state),\n      length: -1\n    }\n  }\n}\n\nconst KeysV0 = c.array(KeyV0)\n\nconst WakeupV0 = {\n  preencode (state, m) {\n    c.uint.preencode(state, 0) // version\n    c.uint.preencode(state, m.type)\n\n    if (m.type === 1) {\n      KeysV0.preencode(state, m.writers)\n    }\n  },\n  encode (state, m) {\n    c.uint.encode(state, 0) // version\n    c.uint.encode(state, m.type)\n\n    if (m.type === 1) {\n      KeysV0.encode(state, m.writers)\n    }\n  },\n  decode (state) {\n    const v = c.uint.decode(state)\n    if (v !== 0) throw new Error('Unsupported version: ' + v)\n\n    const type = c.uint.decode(state)\n    const m = { version: 0, type, writers: null }\n\n    if (m.type === 1) {\n      m.writers = KeysV0.decode(state)\n    }\n\n    return m\n  }\n}\n\nconst Wakeup = {\n  preencode (state, m) {\n    if (m.version === 0) return WakeupV0.preencode(state, m)\n\n    c.uint.preencode(state, 1) // version\n    c.uint.preencode(state, m.type)\n\n    if (m.type === 1) {\n      Clock.preencode(state, m.writers)\n    }\n  },\n  encode (state, m) {\n    if (m.version === 0) return WakeupV0.encode(state, m)\n\n    c.uint.encode(state, 1) // version\n    c.uint.encode(state, m.type)\n\n    if (m.type === 1) {\n      Clock.encode(state, m.writers)\n    }\n  },\n  decode (state) {\n    const start = state.start\n    const v = c.uint.decode(state)\n\n    if (v > 1) throw new Error('Unsupported version: ' + v)\n\n    if (v === 0) {\n      state.start = start\n      return WakeupV0.decode(state)\n    }\n\n    const type = c.uint.decode(state)\n    const m = { version: 1, type, writers: null }\n\n    if (m.type === 1) {\n      m.writers = Clock.decode(state)\n    }\n\n    return m\n  }\n}\n\nconst V0BootRecord = {\n  preencode () {\n    throw new Error('version 0 records cannot be encoded')\n  },\n  encode () {\n    throw new Error('version 0 records cannot be encoded')\n  },\n  decode (state) {\n    const indexed = Checkout.decode(state)\n    const heads = Clock.decode(state)\n\n    // one cause initial recover is not ff recovery\n    return { version: 0, key: indexed.key, indexedLength: indexed.length, indexersUpdated: false, fastForwarding: false, recoveries: 1, heads }\n  }\n}\n\nconst BootRecord = {\n  preencode (state, m) {\n    c.uint.preencode(state, 1) // version\n    c.fixed32.preencode(state, m.key)\n    c.uint.preencode(state, m.indexedLength)\n    c.uint.preencode(state, 1) // always 1b\n    if (m.recoveries) c.uint.preencode(state, m.recoveries)\n  },\n  encode (state, m) {\n    c.uint.encode(state, 1) // version\n    c.fixed32.encode(state, m.key)\n    c.uint.encode(state, m.indexedLength)\n    c.uint.encode(state, (m.indexersUpdated ? 1 : 0) | (m.fastForwarding ? 2 : 0) | (m.recoveries ? 4 : 0))\n    if (m.recoveries) c.uint.encode(state, m.recoveries)\n  },\n  decode (state) {\n    const v = c.uint.decode(state)\n    if (v === 0) return V0BootRecord.decode(state)\n\n    assert(v === 1, 'Unsupported version: ' + v)\n\n    const key = c.fixed32.decode(state)\n    const indexedLength = c.uint.decode(state)\n    const flags = c.uint.decode(state)\n\n    return {\n      version: 1,\n      key,\n      indexedLength,\n      indexersUpdated: (flags & 1) !== 0,\n      fastForwarding: (flags & 2) !== 0,\n      recoveries: (flags & 4) !== 0 ? c.uint.decode(state) : 0,\n      heads: null // only used for compat\n    }\n  }\n}\n\nconst Checkpoint = c.array({\n  preencode (state, idx) {\n    c.uint.preencode(state, idx.checkpointer)\n    if (idx.checkpoint !== null) IndexCheckpoint.preencode(state, idx.checkpoint)\n  },\n  encode (state, idx) {\n    c.uint.encode(state, idx.checkpointer)\n    if (idx.checkpoint !== null) IndexCheckpoint.encode(state, idx.checkpoint)\n  },\n  decode (state) {\n    const checkpointer = c.uint.decode(state)\n    const checkpoint = checkpointer ? null : IndexCheckpoint.decode(state)\n\n    return {\n      checkpointer,\n      checkpoint\n    }\n  }\n})\n\nconst Indexer = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.signature)\n    c.fixed32.preencode(state, m.namespace)\n    c.fixed32.preencode(state, m.publicKey)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.signature)\n    c.fixed32.encode(state, m.namespace)\n    c.fixed32.encode(state, m.publicKey)\n  },\n  decode (state) {\n    return {\n      signature: c.uint.decode(state),\n      namespace: c.fixed32.decode(state),\n      publicKey: c.fixed32.decode(state)\n    }\n  }\n}\n\nconst Indexers = c.array(Indexer)\n\nconst DigestV0 = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.pointer)\n    if (m.pointer === 0) {\n      Indexers.preencode(state, m.indexers)\n    }\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.pointer)\n    if (m.pointer === 0) {\n      Indexers.encode(state, m.indexers)\n    }\n  },\n  decode (state) {\n    const pointer = c.uint.decode(state)\n    return {\n      pointer,\n      indexers: pointer === 0 ? Indexers.decode(state) : null\n    }\n  }\n}\n\nconst Digest = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.pointer)\n    if (m.pointer === 0) {\n      c.fixed32.preencode(state, m.key)\n    }\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.pointer)\n    if (m.pointer === 0) {\n      c.fixed32.encode(state, m.key)\n    }\n  },\n  decode (state) {\n    const pointer = c.uint.decode(state)\n    return {\n      pointer,\n      key: pointer === 0 ? c.fixed32.decode(state) : null\n    }\n  }\n}\n\nconst Node = {\n  preencode (state, m) {\n    Clock.preencode(state, m.heads)\n    c.uint.preencode(state, m.batch)\n    c.buffer.preencode(state, m.value)\n  },\n  encode (state, m) {\n    Clock.encode(state, m.heads)\n    c.uint.encode(state, m.batch)\n    c.buffer.encode(state, m.value)\n  },\n  decode (state, m) {\n    return {\n      heads: Clock.decode(state),\n      batch: c.uint.decode(state),\n      value: c.buffer.decode(state)\n    }\n  }\n}\n\nconst Additional = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.pointer)\n    if (m.pointer === 0) {\n      AdditionalData.preencode(state, m.data)\n    }\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.pointer)\n    if (m.pointer === 0) {\n      AdditionalData.encode(state, m.data)\n    }\n  },\n  decode (state) {\n    const pointer = c.uint.decode(state)\n    return {\n      pointer,\n      data: pointer === 0 ? AdditionalData.decode(state) : null\n    }\n  }\n}\n\nconst AdditionalData = {\n  preencode (state, m) {\n    c.uint.preencode(state, 0)\n  },\n  encode (state, m) {\n    c.uint.encode(state, 0) // empty for now, for the future\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n    return {\n      encryptionId: flags & 1 ? c.fixed32.decode(state) : null, // to help validate the encryption key used\n      abi: flags & 2 ? c.uint.decode(state) : 0\n    }\n  }\n}\n\nconst OplogMessage = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.version)\n    c.uint.preencode(state, m.maxSupportedVersion)\n\n    const isCheckpointer = m.digest !== null && m.checkpoint !== null\n\n    let flags = 0\n    if (isCheckpointer) flags |= 1\n    if (m.optimistic) flags |= 2\n\n    c.uint.preencode(state, flags)\n\n    if (isCheckpointer) {\n      Checkpoint.preencode(state, m.checkpoint)\n      Digest.preencode(state, m.digest)\n    }\n\n    Node.preencode(state, m.node)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.version)\n    c.uint.encode(state, m.maxSupportedVersion)\n\n    const isCheckpointer = m.digest !== null && m.checkpoint !== null\n\n    let flags = 0\n    if (isCheckpointer) flags |= 1\n    if (m.optimistic) flags |= 2\n\n    c.uint.encode(state, flags)\n\n    if (isCheckpointer) {\n      Checkpoint.encode(state, m.checkpoint)\n      Digest.encode(state, m.digest)\n    }\n\n    Node.encode(state, m.node)\n  },\n  decode (state) {\n    const version = c.uint.decode(state)\n\n    if (version === 0) {\n      const m = OplogMessageV0.decode(state)\n\n      return {\n        version,\n        maxSupportedVersion: m.maxSupportedVersion,\n        digest: null,\n        checkpoint: m.checkpoint,\n        optimistic: false,\n        node: m.node\n      }\n    }\n\n    const maxSupportedVersion = c.uint.decode(state)\n\n    const flags = c.uint.decode(state)\n\n    const isCheckpointer = (flags & 1) !== 0\n\n    const checkpoint = isCheckpointer ? Checkpoint.decode(state) : null\n    const digest = isCheckpointer ? Digest.decode(state) : null\n\n    const node = Node.decode(state)\n\n    return {\n      version,\n      maxSupportedVersion,\n      digest,\n      checkpoint,\n      optimistic: (flags & 2) !== 0,\n      node\n    }\n  }\n}\n\nconst OplogMessageV0 = {\n  preencode (state, m) {\n    const isCheckpointer = m.digest !== null && m.checkpoint !== null\n    c.uint.preencode(state, isCheckpointer ? 1 : 0)\n\n    if (isCheckpointer) {\n      DigestV0.preencode(state, m.digest)\n      Checkpoint.preencode(state, m.checkpoint)\n    }\n\n    Node.preencode(state, m.node)\n\n    Additional.preencode(state, m.additional) // at the btm so it can be edited\n    c.uint.preencode(state, m.maxSupportedVersion)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.version)\n\n    const isCheckpointer = m.digest !== null && m.checkpoint !== null\n    c.uint.encode(state, isCheckpointer ? 1 : 0)\n\n    if (isCheckpointer) {\n      DigestV0.encode(state, m.digest)\n      Checkpoint.encode(state, m.checkpoint)\n    }\n\n    Node.encode(state, m.node)\n\n    Additional.encode(state, m.additional)\n    c.uint.encode(state, m.maxSupportedVersion)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n\n    const isCheckpointer = (flags & 1) !== 0\n\n    const digest = isCheckpointer ? DigestV0.decode(state) : null\n    const checkpoint = isCheckpointer ? Checkpoint.decode(state) : null\n    const node = Node.decode(state)\n    const additional = Additional.decode(state)\n    const maxSupportedVersion = state.start < state.end ? c.uint.decode(state) : 0\n\n    return {\n      version: 0,\n      digest,\n      checkpoint,\n      node,\n      additional,\n      maxSupportedVersion\n    }\n  }\n}\n\nconst PendingIndexers = c.array(c.fixed32)\n\nconst Info = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.version)\n    c.uint.preencode(state, m.members)\n    PendingIndexers.preencode(state, m.pendingIndexers)\n    Clock.preencode(state, m.indexers)\n    Clock.preencode(state, m.heads)\n    Clock.preencode(state, m.views)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.version)\n    c.uint.encode(state, m.members)\n    PendingIndexers.encode(state, m.pendingIndexers)\n    Clock.encode(state, m.indexers)\n    Clock.encode(state, m.heads)\n    Clock.encode(state, m.views)\n  },\n  decode (state) {\n    return {\n      version: c.uint.decode(state),\n      members: c.uint.decode(state),\n      pendingIndexers: PendingIndexers.decode(state),\n      indexers: Clock.decode(state),\n      heads: Clock.decode(state),\n      views: Clock.decode(state)\n    }\n  }\n}\n\nconst Member = {\n  preencode (state, m) {\n    state.end++ // flags\n    c.uint.preencode(state, m.length)\n  },\n  encode (state, m) {\n    c.uint.encode(state, (m.isIndexer ? 1 : 0) | (m.isRemoved ? 2 : 0))\n    c.uint.encode(state, m.length)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n    return {\n      isIndexer: (flags & 1) !== 0,\n      isRemoved: (flags & 2) !== 0,\n      length: c.uint.decode(state)\n    }\n  }\n}\n\n// prefix 0 is reserved for future manifest\nconst LINEARIZER_PREFIX = 1\n\nconst LinearizerKey = {\n  preencode (state, index) {\n    IndexEncoder.UINT.preencode(state, LINEARIZER_PREFIX)\n    IndexEncoder.UINT.preencode(state, index)\n  },\n  encode (state, index) {\n    IndexEncoder.UINT.encode(state, LINEARIZER_PREFIX)\n    IndexEncoder.UINT.encode(state, index)\n  },\n  decode (state) {\n    IndexEncoder.UINT.decode(state)\n    return IndexEncoder.UINT.decode(state)\n  }\n}\n\nconst LinearizerUpdate = {\n  preencode (state, m) {\n    c.fixed32.preencode(state, m.key)\n    c.uint.preencode(state, m.length)\n    c.uint.preencode(state, m.batch)\n    c.uint.preencode(state, m.systemLength)\n    c.uint.preencode(state, m.indexers ? 1 : 0)\n  },\n  encode (state, m) {\n    c.fixed32.encode(state, m.key)\n    c.uint.encode(state, m.length)\n    c.uint.encode(state, m.batch)\n    c.uint.encode(state, m.systemLength)\n    c.uint.encode(state, m.indexers ? 1 : 0)\n  },\n  decode (state) {\n    const key = c.fixed32.decode(state)\n    const length = c.uint.decode(state)\n    const batch = c.uint.decode(state)\n    const systemLength = c.uint.decode(state)\n    const flags = c.uint.decode(state)\n\n    return {\n      seq: 0, // set upstream\n      key,\n      length,\n      batch,\n      systemLength,\n      indexers: (flags & 1) !== 0\n    }\n  }\n}\n\nmodule.exports = {\n  Wakeup,\n  Clock,\n  Checkout,\n  BootRecord,\n  OplogMessage,\n  Checkpoint,\n  Info,\n  Member,\n  LINEARIZER_PREFIX,\n  LinearizerKey,\n  LinearizerUpdate\n}\nconst DEFAULT_SIZE = 32\n\nmodule.exports = class NodeBuffer {\n  constructor (offset, hwm) {\n    this.hwm = hwm || DEFAULT_SIZE\n    this.defaultHwm = this.hwm\n    this.mask = this.hwm - 1\n    this.top = 0\n    this.btm = 0\n    this.buffer = new Array(this.hwm)\n    this.offset = offset || 0\n    this.length = this.offset\n  }\n\n  get size () {\n    return this.length - this.offset\n  }\n\n  isEmpty () {\n    return this.length === this.offset\n  }\n\n  isFull () {\n    return this.size === this.buffer.length\n  }\n\n  grow () {\n    this.hwm <<= 1\n\n    const size = this.size\n    const buffer = new Array(this.hwm)\n    const mask = this.hwm - 1\n\n    for (let i = 0; i < size; i++) {\n      buffer[i] = this.buffer[(this.btm + i) & this.mask]\n    }\n\n    this.mask = mask\n    this.top = size\n    this.btm = 0\n    this.buffer = buffer\n  }\n\n  push (data) {\n    if (this.isFull()) this.grow()\n\n    this.buffer[this.top] = data\n    this.top = (this.top + 1) & this.mask\n\n    return this.length++\n  }\n\n  shift () {\n    if (this.isEmpty()) return null\n\n    const last = this.buffer[this.btm]\n\n    this.buffer[this.btm] = undefined\n    this.btm = (this.btm + 1) & this.mask\n    this.offset++\n\n    // reset on empty\n    if (this.isEmpty() && this.hwm !== this.defaultHwm) {\n      this.buffer = new Array(this.defaultHwm)\n      this.hwm = this.buffer.length\n      this.mask = this.hwm - 1\n      this.top = this.btm = 0\n    }\n\n    return last\n  }\n\n  get (seq) {\n    if (seq < this.offset || seq >= this.length) return null\n    return this.buffer[(this.btm + (seq - this.offset)) & this.mask]\n  }\n}\nconst b4a = require('b4a')\nconst c = require('compact-encoding')\nconst crypto = require('hypercore-crypto')\nconst Hypercore = require('hypercore')\nconst messages = require('./messages.js')\n\nconst MANIFEST_VERSION = 1\nconst INDEX_VERSION = 1\n\nconst EMPTY = b4a.alloc(0)\n\nconst [NS_SIGNER_NAMESPACE, NS_VIEW_BLOCK_KEY] = crypto.namespace('autobase', 2)\n\n// remove once 7 and latest blind peers are widely deployed\nclass CompatExtension {\n  constructor (base, core) {\n    this.base = base\n    this.core = core\n    this.unlinked = false\n    this.extension = this.core.registerExtension('autobase', {\n      onmessage: this._onmessage.bind(this)\n    })\n\n    if (this.core.opened) this._onready()\n    else this.core.ready().then(this._onready.bind(this), noop)\n  }\n\n  _onready () {\n    if (!this.core.manifest || !this.core.manifest.signers.length) return\n\n    const req = c.encode(messages.Wakeup, { type: 0 })\n\n    this.core.on('peer-add', (peer) => {\n      if (this.base.isFastForwarding()) return\n      this.extension.send(req, peer)\n    })\n\n    if (!this.base.isFastForwarding()) {\n      for (const peer of this.core.peers) {\n        this.extension.send(req, peer)\n      }\n    }\n  }\n\n  unlink () {\n    this.unlinked = true\n  }\n\n  _onmessage (buf, from) {\n    if (!buf) return\n\n    let value = null\n    try {\n      value = c.decode(messages.Wakeup, buf)\n    } catch {\n      return\n    }\n\n    if (value.type === 0) return\n    if (this.unlinked || this.base.isFastForwarding()) return\n    if (!this.core.manifest || !this.core.manifest.signers.length) return\n\n    this.base.hintWakeup(value.writers)\n  }\n}\n\nclass ViewCore {\n  constructor (name, core, base) {\n    this.name = name\n    this.core = null\n    this.batch = null\n    this.atomicBatch = null\n\n    // will be removed\n    this.compatExtension = null\n\n    this.migrated(base, core)\n  }\n\n  migrated (base, core) {\n    // TODO: close old core if present, for now we just close when the autobase is closed indirectly\n    // atm its unsafe to do as moveTo has a bug due to a missing read lock in hc\n    this.core = core\n\n    if (this.name === '_system') {\n      const ff = base._queueFastForward.bind(base)\n      this.core.on('append', ff)\n      this.core.ready().then(ff, ff)\n\n      // will be removed\n      if (!this.compatExtension || this.compatExtension.core !== core) {\n        if (this.compatExtension) this.compatExtension.unlink()\n        this.compatExtension = new CompatExtension(base, core)\n      }\n    }\n  }\n\n  async matchesKey (key) {\n    if (!this.core.opened) await this.core.ready()\n    return b4a.equals(this.core.key, key)\n  }\n\n  async matchesNamespace (target) {\n    if (!this.core.opened) await this.core.ready()\n\n    if (this.core.manifest && this.core.manifest.signers.length > 0) {\n      const ns = this.core.manifest.signers[0].namespace\n      if (b4a.equals(ns, target)) return true\n    }\n\n    return false\n  }\n\n  async commit (atom, length, signature) {\n    // TODO: is this how its supposed be done atomic wise?\n    await this.core.commit(this._getAtomicBatch(atom), { length, signature })\n  }\n\n  async release () {\n    if (!this.atomicBatch) return\n    await this.atomicBatch.ready()\n    const sessions = this.atomicBatch.state.sessions\n    for (let i = sessions.length - 1; i >= 0; i--) await sessions[i].close()\n    await this.atomicBatch.close()\n    this.atomicBatch = null\n  }\n\n  _getAtomicBatch (atom) {\n    if (this.atomicBatch === null) {\n      this.atomicBatch = this.batch.session({ atom, writable: true })\n    }\n\n    return this.atomicBatch\n  }\n\n  async catchup (atom, length) {\n    await this.release()\n    const batch = this._getAtomicBatch(atom)\n    await batch.ready()\n    await batch.state.catchup(length)\n  }\n\n  createSession (atom, valueEncoding) {\n    if (this.batch === null) {\n      this.batch = this.core.session({ name: 'batch', writable: true })\n    }\n\n    const s = atom\n      ? this._getAtomicBatch(atom).session({ valueEncoding, writable: true })\n      : this.batch.session({ valueEncoding, writable: false })\n\n    return s\n  }\n}\n\nclass AutoStore {\n  constructor (base, byName) {\n    this.base = base\n    this.store = base.store\n    this.byName = byName || new Map()\n    this.opened = []\n    this.atom = null\n    this.local = null\n  }\n\n  async close () {\n    if (this.local) await this.local.close()\n    for (const v of this.byName.values()) {\n      await v.release()\n    }\n    if (this.atom) return\n    for (const v of this.byName.values()) {\n      if (v.core) await v.core.close()\n      if (v.batch) await v.batch.close()\n    }\n  }\n\n  atomize () {\n    const store = new AutoStore(this.base, this.byName)\n    store.atom = this.store.storage.createAtom()\n    return store\n  }\n\n  flush () {\n    return this.atom ? this.atom.flush() : Promise.resolve()\n  }\n\n  get (opts, moreOpts) {\n    if (typeof opts === 'string') opts = { name: opts }\n    if (moreOpts) opts = { ...opts, ...moreOpts }\n\n    const {\n      name,\n      valueEncoding = null\n    } = opts\n\n    if (!name) throw new Error('name is required')\n    return this.getViewByName(name).createSession(this.atom, valueEncoding)\n  }\n\n  getViewByName (name) {\n    let view = this.byName.get(name)\n\n    if (!view) {\n      const preload = this._preload(name)\n      const core = this.base.store.get({ preload })\n      view = new ViewCore(name, core, this.base)\n      this.byName.set(name, view)\n    }\n\n    if (this.opened.indexOf(view) === -1) {\n      this.opened.push(view)\n    }\n\n    return view\n  }\n\n  getLocal () {\n    if (this.local !== null) return this.local\n\n    this.local = this.base.local.session({\n      atom: this.atom,\n      valueEncoding: messages.OplogMessage,\n      encryption: this.base.encryption,\n      active: false\n    })\n\n    return this.local\n  }\n\n  getViews () {\n    return [...this.byName.values()]\n  }\n\n  getSystemView () {\n    return this.getViewByName('_system')\n  }\n\n  getSystemCore () {\n    return this.getSystemView().core\n  }\n\n  getSystemEncryption () {\n    return this.base.encryptionKey ? this.getBlockEncryption('_system') : null\n  }\n\n  async getIndexerManifests (entries) {\n    const manifests = []\n    for (const { key } of entries) {\n      const core = this.store.get({ key, active: false })\n      await core.ready()\n      if (!core.manifest) continue // danger but only for bootstrapping...\n      manifests.push(core.manifest)\n      await core.close()\n    }\n    return manifests\n  }\n\n  getViewCore (indexerManifests, name, prologue) {\n    const manifest = this._createManifest(indexerManifests, name, prologue)\n\n    return this.base.store.get({\n      manifest,\n      exclusive: false,\n      encryption: this.getBlockEncryption(name)\n    })\n  }\n\n  async createView (indexerManifests, name, prologue) {\n    const manifest = this._createManifest(indexerManifests, name, prologue)\n\n    const core = this.store.get({\n      key: Hypercore.key(manifest),\n      manifest,\n      active: false\n    })\n\n    await core.ready()\n    const key = core.key\n\n    await core.close()\n    return key\n  }\n\n  async _preload (name) {\n    await Promise.resolve()\n\n    if (!this.base.opening) throw new Error('Autobase failed to open')\n    await this.base._preopen\n\n    const boot = (await this.base._getSystemInfo()) || { key: this.getBootstrapSystemKey(), indexers: [], views: [] }\n    const indexerManifests = await this.getIndexerManifests(boot.indexers)\n\n    // no system, everything is fresh\n    if (boot.key === null) {\n      return this._freshCorePreload(indexerManifests, name)\n    }\n\n    // asking for the system, just return it, easy\n    if (name === '_system') {\n      return {\n        key: boot.key,\n        exclusive: false,\n        encryption: this.getBlockEncryption(name)\n      }\n    }\n\n    // infer which view\n    const v = await this.findViewByName(indexerManifests, boot.views, name)\n\n    // new view, fresh\n    if (v === null) {\n      return this._freshCorePreload(indexerManifests, name)\n    }\n\n    return {\n      key: v.key,\n      exclusive: false,\n      encryption: this.getBlockEncryption(name)\n    }\n  }\n\n  _freshCorePreload (indexerManifests, name) {\n    return {\n      manifest: this._createManifest(indexerManifests, name, null),\n      exclusive: true,\n      encryption: this.getBlockEncryption(name)\n    }\n  }\n\n  _deriveStaticHash (name) {\n    // key doesnt matter...\n    return crypto.hash([this.base.key, b4a.from(name)])\n  }\n\n  _deriveNamespace (name, entropy) {\n    const encryptionId = crypto.hash(this.base.encryptionKey || EMPTY)\n    const version = c.encode(c.uint, INDEX_VERSION)\n    const bootstrap = this.base.key\n\n    return crypto.hash([\n      NS_SIGNER_NAMESPACE,\n      version,\n      bootstrap,\n      encryptionId,\n      entropy,\n      b4a.from(name)\n    ])\n  }\n\n  async _getCoreManifest (key) {\n    const core = this.store.get({ key, active: false })\n    await core.ready()\n    const manifest = core.manifest\n    await core.close()\n    return manifest\n  }\n\n  getBootstrapSystemKey () {\n    return Hypercore.key(this._createManifest([], '_system', null))\n  }\n\n  async findViewByKey (key, indexers) {\n    for (const v of this.byName.values()) {\n      if (await v.matchesKey(key)) return v\n    }\n\n    const manifest = await this._getCoreManifest(key)\n    const target = (manifest && manifest.signers.length) ? manifest.signers[0].namespace : null\n\n    if (target) {\n      for (const v of this.byName.values()) {\n        if (await v.matchesNamespace(target)) return v\n      }\n    }\n\n    const indexerManifests = await this.getIndexerManifests(indexers)\n\n    if (target) {\n      const ns = indexerManifests[0].signers[0].namespace\n\n      for (const v of this.byName.values()) {\n        const namespace = this._deriveNamespace(v.name, ns)\n        if (b4a.equals(namespace, target)) return v\n      }\n    }\n\n    // prop the empty prologue, we dont have manifest for those in FF if len=0\n    for (const v of this.byName.values()) {\n      const manifest = this._createManifest(indexerManifests, v.name, null)\n      const manifestKey = Hypercore.key(manifest)\n\n      if (!b4a.equals(manifestKey, key)) continue\n\n      // we didnt have the core! this is because it is empty, ensure its on disk\n      const core = this.store.get({ key: manifestKey, manifest, active: false })\n      await core.ready()\n      await core.close()\n\n      return v\n    }\n\n    return null\n  }\n\n  async findViewByName (indexerManifests, views, name) {\n    if (indexerManifests.length === 0) return null\n\n    const namespace = this._deriveNamespace(name, indexerManifests[0].signers[0].namespace)\n\n    for (const v of views) {\n      const manifest = await this._getCoreManifest(v.key)\n      if (manifest.signers.length === 0) continue\n\n      const signer = manifest.signers[0]\n\n      if (b4a.equals(signer.namespace, namespace)) return v\n    }\n\n    return null\n  }\n\n  _createManifest (indexerManifests, name, prologue) {\n    if (!indexerManifests.length) {\n      prologue = {\n        hash: this._deriveStaticHash(name),\n        length: 0\n      }\n    } else if (prologue && prologue.length === 0) {\n      // just in case\n      prologue = null\n    }\n\n    const signers = []\n\n    for (const manifest of indexerManifests) {\n      const signer = manifest.signers[0]\n\n      signers.push({\n        namespace: this._deriveNamespace(name, signer.namespace),\n        signature: 'ed25519',\n        publicKey: signer.publicKey\n      })\n    }\n\n    return {\n      version: MANIFEST_VERSION,\n      hash: 'blake2b',\n      prologue,\n      allowPatch: true,\n      quorum: Math.min(signers.length, (signers.length >> 1) + 1),\n      signers\n    }\n  }\n\n  static getBlockKey (bootstrap, encryptionKey, name) {\n    return getBlockKey(bootstrap, encryptionKey, name)\n  }\n\n  getBlockKey (name) {\n    return getBlockKey(this.base.key, this.base.encryptionKey, name)\n  }\n\n  getBlockEncryption (name) {\n    const key = getBlockKey(this.base.key, this.base.encryptionKey, name)\n    return key ? { key, block: true } : null\n  }\n}\n\nmodule.exports = AutoStore\n\nfunction getBlockKey (bootstrap, encryptionKey, name) {\n  return encryptionKey && crypto.hash([NS_VIEW_BLOCK_KEY, bootstrap, encryptionKey, b4a.from(name)])\n}\n\nfunction noop () {}\nconst Hyperbee = require('hyperbee')\nconst SubEncoder = require('sub-encoder')\nconst ReadyResource = require('ready-resource')\nconst b4a = require('b4a')\nconst c = require('compact-encoding')\n\nconst { Info, Member } = require('./messages')\n\nconst subs = new SubEncoder()\n\nconst DIGEST = subs.sub(b4a.from([0]))\nconst MEMBERS = subs.sub(b4a.from([1]))\n\nconst INFO_KEY = DIGEST.encode('info')\nconst AUTOBASE_VERSION = 1\n\nmodule.exports = class SystemView extends ReadyResource {\n  constructor (core, { checkout = 0 } = {}) {\n    super()\n\n    this.core = core\n\n    // sessions is a workaround for batches not having sessions atm...\n    this.db = new Hyperbee(core, { keyEncoding: 'binary', extension: false, checkout, sessions: typeof core.session === 'function' })\n\n    this.version = AUTOBASE_VERSION\n    this.members = 0\n    this.pendingIndexers = []\n    this.indexers = []\n    this.heads = []\n    this.views = []\n\n    this.indexerUpdate = false\n\n    this._fork = 0\n    this._length = 0\n    this._changes = []\n    this._indexerMap = new Map()\n    this._clockUpdates = new Map()\n  }\n\n  static async getIndexedInfo (core, length) {\n    const sys = new this(core.session())\n\n    try {\n      return await sys.getIndexedInfo(length)\n    } finally {\n      await sys.close()\n    }\n  }\n\n  static async * flushes (core, { reverse, lt = core.length, gte = 0, wait = true } = {}) {\n    if (lt <= 0) return\n\n    // ensure block\n    await core.get(lt - 1)\n    const sys = new SystemView(core)\n\n    try {\n      for await (const data of sys.db.createHistoryStream({ lt, gte, wait, reverse: true })) {\n        if (!b4a.equals(data.key, INFO_KEY)) continue\n        const info = c.decode(Info, data.value)\n        yield { length: data.seq + 1, info }\n      }\n    } finally {\n      await sys.close()\n    }\n  }\n\n  get bootstrapping () {\n    return this.members === 0\n  }\n\n  async checkout (length) {\n    const checkout = new SystemView(this.core.session(), {\n      checkout: length\n    })\n\n    await checkout.ready()\n\n    return checkout\n  }\n\n  async _open () {\n    // this should NEVER fail, if so we have a bug elsewhere (should always be consistent)\n    const info = await this.db.get('info', { valueEncoding: Info, keyEncoding: DIGEST, update: false, wait: false })\n    await this._reset(info)\n  }\n\n  async _close () {\n    await this.db.close()\n  }\n\n  async getIndexedInfo (length = this.core.signedLength) {\n    if (this.opened === false) await this.ready()\n\n    if (length === this.core.length) {\n      return { version: this.version, members: this.members, pendingIndexers: this.pendingIndexers, indexers: this.indexers, heads: this.heads, views: this.views }\n    }\n\n    const node = length === 0 ? null : await this.db.getBySeq(length - 1)\n    if (node === null) return { version: 0, members: 0, pendingIndexers: [], indexers: [], heads: [], views: [] }\n\n    return c.decode(Info, node.value)\n  }\n\n  static sameIndexers (a, b) {\n    if (a.length !== b.length) return false\n\n    for (let i = 0; i < a.length; i++) {\n      if (!b4a.equals(a[i].key, b[i].core.key)) return false\n    }\n\n    return true\n  }\n\n  sameIndexers (indexers) {\n    return SystemView.sameIndexers(this.indexers, indexers)\n  }\n\n  async history (since) {\n    const checkout = this.db.checkout(since)\n    const seen = new Map()\n\n    const nodes = []\n    const updates = []\n\n    const checkoutNode = since === 0 ? null : await this.db.getBySeq(since - 1)\n\n    let prevInfo = checkoutNode === null ? null : c.decode(Info, checkoutNode.value)\n    let updateBatch = 0\n\n    for await (const data of this.db.createHistoryStream({ gte: since })) {\n      if (b4a.equals(data.key, INFO_KEY)) {\n        const info = c.decode(Info, data.value)\n\n        updates.push({\n          batch: updateBatch,\n          indexers: prevInfo === null || !sameIndexers(info, prevInfo),\n          systemLength: data.seq + 1\n        })\n\n        prevInfo = info\n        updateBatch = 0\n        continue\n      }\n\n      const key = data.key.subarray(2)\n      const hex = b4a.toString(key, 'hex')\n      const len = c.decode(Member, data.value).length\n\n      if (!seen.has(hex)) {\n        const node = await checkout.get(data.key)\n        if (node === null) {\n          seen.set(hex, 0)\n        } else {\n          const { length } = c.decode(Member, node.value)\n          seen.set(hex, length)\n        }\n      }\n\n      const prev = seen.get(hex)\n      const batch = len - prev\n      seen.set(hex, len)\n\n      if (batch === 0) continue\n\n      updateBatch += batch\n\n      if (nodes.length > 0) {\n        const top = nodes[nodes.length - 1]\n        if (b4a.equals(top.key, key)) {\n          top.length = len\n          top.batch += batch\n          continue\n        }\n      }\n\n      nodes.push({\n        key,\n        length: len,\n        batch\n      })\n    }\n\n    await checkout.close()\n\n    return { updates, nodes }\n  }\n\n  async update () {\n    if (this.opened === false) await this.ready()\n\n    if (this._fork === this.core.fork && this._length === this.core.length) return false\n\n    await this._reset(await this.db.get('info', { valueEncoding: Info, keyEncoding: DIGEST }))\n    return true\n  }\n\n  async _reset (info) {\n    this.version = info === null ? AUTOBASE_VERSION : info.value.version\n    this.members = info === null ? 0 : info.value.members\n    this.pendingIndexers = info === null ? [] : info.value.pendingIndexers\n    this.indexers = info === null ? [] : info.value.indexers\n    this.heads = info === null ? [] : info.value.heads\n    this.views = info === null ? [] : info.value.views\n\n    this.indexerUpdate = false\n    this._indexerMap.clear()\n    this._clockUpdates.clear()\n    this._length = this.core.length\n    this._fork = this.core.fork\n    this._changes = []\n\n    for (const idx of this.indexers) {\n      this._indexerMap.set(b4a.toString(idx.key, 'hex'), idx)\n    }\n  }\n\n  async flush (views) {\n    const batch = this.db.batch({ update: false })\n\n    for (let i = 0; i < this._changes.length; i++) {\n      const c = this._changes[i]\n      if (this._clockUpdates.has(b4a.toString(c.key, 'hex'))) continue\n      await batch.put(c.key, c.value, { valueEncoding: Member, keyEncoding: MEMBERS })\n    }\n\n    for (const [hex, length] of this._clockUpdates) {\n      const isIndexer = this._indexerMap.get(hex) !== undefined\n      const key = b4a.from(hex, 'hex')\n\n      const info = await this._get(key, 0)\n\n      const value = { isIndexer, isRemoved: info ? info.isRemoved : true, length }\n      await batch.put(key, value, { valueEncoding: Member, keyEncoding: MEMBERS })\n    }\n\n    this._clockUpdates.clear()\n\n    let maxIndex = -1\n    for (const view of views) {\n      if (view.mappedIndex > maxIndex) maxIndex = view.mappedIndex\n    }\n\n    while (this.views.length > maxIndex + 1) this.views.pop()\n\n    for (const view of views) {\n      const length = view.core ? view.core.length : view.length\n      if (!length) continue\n\n      const v = { key: view.key, length }\n\n      if (view.mappedIndex !== -1) {\n        this.views[view.mappedIndex] = v\n      } else {\n        view.mappedIndex = this.views.push(v) - 1\n      }\n    }\n\n    const info = {\n      version: this.version,\n      members: this.members,\n      pendingIndexers: this.pendingIndexers,\n      indexers: this.indexers,\n      heads: this.heads,\n      views: this.views\n    }\n\n    await batch.put('info', info, { valueEncoding: Info, keyEncoding: DIGEST })\n    await batch.flush()\n\n    this._length = this.core.length // should be ok\n    this._changes = []\n\n    if (this.indexerUpdate) this.indexerUpdate = false\n  }\n\n  checkpoint () {\n    return {\n      version: this.version,\n      members: this.members,\n      pendingIndexers: this.pendingIndexers.slice(0),\n      indexers: cloneNodes(this.indexers),\n      heads: cloneNodes(this.heads),\n      views: cloneNodes(this.views),\n      indexerUpdate: this.indexerUpdate,\n      changes: this._changes.slice(0),\n      indexerMap: new Map([...this._indexerMap]),\n      clockUpdates: new Map([...this._clockUpdates])\n    }\n  }\n\n  applyCheckpoint (checkpoint) {\n    this.version = checkpoint.version\n    this.members = checkpoint.members\n    this.pendingIndexers = checkpoint.pendingIndexers\n    this.indexers = checkpoint.indexers\n    this.heads = checkpoint.heads\n    this.views = checkpoint.views\n    this.indexerUpdate = checkpoint.indexerUpdate\n\n    this._changes = checkpoint.changes\n    this._indexerMap = checkpoint.indexerMap\n    this._clockUpdates = checkpoint.clockUpdates\n  }\n\n  addHead (node) {\n    const h = { key: node.writer.core.key, length: node.length }\n\n    for (let i = 0; i < this.heads.length; i++) {\n      const head = this.heads[i]\n\n      if (!hasDependency(node, head)) {\n        if (!b4a.equals(node.writer.core.key, head.key)) continue\n\n        // todo: remove in next major because bug was fixed here:\n        // https://github.com/holepunchto/autobase-next/pull/237\n\n        // filter out any bad heads introduced by a bug to\n        // prevent inconsistencies being written to the oplog\n        if (head.length > h.length) return false\n      }\n\n      const popped = this.heads.pop()\n      if (popped !== head) this.heads[i--] = popped\n    }\n\n    this.heads.push(h)\n\n    const hex = b4a.toString(h.key, 'hex')\n\n    this._clockUpdates.set(hex, h.length)\n\n    if (this.pendingIndexers.length > 0) {\n      for (let i = 0; i < this.pendingIndexers.length; i++) {\n        if (!b4a.equals(this.pendingIndexers[i], h.key)) continue\n        this._updateIndexer(h.key, h.length, true, i)\n        return true\n      }\n    }\n\n    const idx = this._indexerMap.get(hex)\n    if (idx !== undefined) {\n      idx.length = h.length\n    }\n\n    return false\n  }\n\n  _updateIndexer (key, length, isIndexer, i) {\n    const hex = b4a.toString(key, 'hex')\n\n    if (!isIndexer) {\n      const existing = this._indexerMap.get(hex)\n      if (existing) {\n        this.indexerUpdate = true\n        this.indexers.splice(this.indexers.indexOf(existing), 1)\n        this._indexerMap.delete(hex)\n      }\n      return\n    }\n\n    for (; i < this.pendingIndexers.length; i++) {\n      if (b4a.equals(this.pendingIndexers[i], key)) {\n        break\n      }\n    }\n\n    if (length === 0) {\n      if (i >= this.pendingIndexers.length) this.pendingIndexers.push(key)\n      return\n    }\n\n    if (i < this.pendingIndexers.length) {\n      const top = this.pendingIndexers.pop()\n      if (i < this.pendingIndexers.length) this.pendingIndexers[i] = top\n    }\n\n    const idx = this._indexerMap.get(hex)\n\n    if (idx === undefined) {\n      const newIdx = { key, length }\n      this._indexerMap.set(hex, newIdx)\n      this.indexers.push(newIdx)\n\n      // bootstrap is \"silently\" added so that initial views have no prologue\n      if (!this.bootstrapping) this.indexerUpdate = true\n    } else {\n      idx.length = length\n    }\n  }\n\n  _seenLength (key) {\n    return this._clockUpdates.get(b4a.toString(key, 'hex')) || 0\n  }\n\n  async ack (key) {\n    const value = await this._get(key, 0)\n    const length = this._seenLength(key)\n    if (value && value.length === length) return\n\n    const isIndexer = value ? value.isIndexer : false\n    const isRemoved = value ? value.isRemoved : true\n\n    this._changes.push({ key, value: { isIndexer, isRemoved, length } })\n  }\n\n  async add (key, { isIndexer = false, length = this._seenLength(key) } = {}) {\n    let value = null\n    let found = false\n    let changed = true\n\n    for (let i = this._changes.length - 1; i >= 0; i--) {\n      const c = this._changes[i]\n      if (b4a.equals(key, c.key)) {\n        value = c.value\n        found = true\n      }\n    }\n\n    if (!found) {\n      const node = await this.db.get(key, { valueEncoding: Member, keyEncoding: MEMBERS })\n\n      if (node) {\n        value = node.value\n        found = true\n      }\n    }\n\n    let wasTracked = false\n    let wasIndexer = false\n\n    if (found) {\n      if (!value.isRemoved) wasTracked = true\n      if (value.isIndexer) wasIndexer = true\n      if (length < value.length) length = value.length\n      if (value.length === length && value.isIndexer === isIndexer && value.isRemoved === false) changed = false\n    }\n\n    if (changed) {\n      this._changes.push({ key, value: { isIndexer, isRemoved: false, length } })\n    }\n\n    if (!wasTracked) this.members++\n    if (wasIndexer || isIndexer) this._updateIndexer(key, length, isIndexer, 0)\n  }\n\n  async remove (key) {\n    let isIndexer = false\n\n    for (const idx of this.indexers) {\n      isIndexer = b4a.equals(idx.key, key)\n      if (isIndexer) break\n    }\n\n    if (isIndexer) this._updateIndexer(key, null, false, 0)\n\n    let value = null\n    let found = false\n\n    for (let i = this._changes.length - 1; i >= 0; i--) {\n      const c = this._changes[i]\n      if (b4a.equals(key, c.key)) {\n        value = c.value\n        found = true\n      }\n    }\n\n    if (!found) {\n      const node = await this.db.get(key, { valueEncoding: Member, keyEncoding: MEMBERS })\n      if (node) {\n        value = node.value\n        found = true\n      }\n    }\n\n    const changed = !found || !value.isRemoved\n    const wasTracked = found && !value.isRemoved\n    const length = found ? value.length : 0\n\n    if (changed) {\n      this._changes.push({ key, value: { isIndexer: false, isRemoved: true, length } })\n    }\n\n    if (wasTracked) this.members--\n\n    return isIndexer\n  }\n\n  async linkable (key, length) {\n    const len = this._seenLength(key)\n    if (len > 0) return length > len\n\n    const info = await this._get(key, 0)\n    const prevLength = info ? info.length : 0\n\n    return length > prevLength\n  }\n\n  async has (key, opts) {\n    // could be optimised...\n    return await this.get(key, opts) !== null\n  }\n\n  async _get (key, timeout) {\n    let value = null\n    let found = false\n\n    for (let i = this._changes.length - 1; i >= 0; i--) {\n      const c = this._changes[i]\n      if (b4a.equals(key, c.key)) {\n        value = c.value\n        found = true\n      }\n    }\n\n    if (!found) {\n      const node = await this.db.get(key, { timeout, valueEncoding: Member, keyEncoding: MEMBERS })\n      if (node) {\n        value = node.value\n        found = true\n      }\n    }\n\n    return found ? value : null\n  }\n\n  async get (key, opts = {}) {\n    const value = await this._get(key, opts.timeout || 0)\n    return (opts.onlyActive !== false || !value.isRemoved) ? value : null\n  }\n\n  async hasLocal (key) {\n    try {\n      const node = await this.db.get(key, { valueEncoding: Member, keyEncoding: MEMBERS, update: false, wait: false })\n      return node !== null\n    } catch {\n      return false\n    }\n  }\n\n  async getLocalLength (key) {\n    try {\n      const node = await this.db.get(key, { valueEncoding: Member, keyEncoding: MEMBERS, update: false, wait: false })\n      return node === null ? 0 : node.value.length\n    } catch {\n      return 0\n    }\n  }\n\n  list () { // note, NOT safe to use during apply atm\n    return this.db.createReadStream({\n      valueEncoding: Member,\n      keyEncoding: MEMBERS\n    })\n  }\n\n  async isIndexed (key, length) {\n    const co = this.db.checkout(this.core.indexedLength)\n    try {\n      const node = await co.get(key, { valueEncoding: Member, keyEncoding: MEMBERS })\n      return node !== null && node.value.length >= length\n    } finally {\n      await co.close()\n    }\n  }\n}\n\nfunction hasDependency (node, dep) {\n  for (const h of node.actualHeads) {\n    if (sameNode(h, dep)) return true\n  }\n  return false\n}\n\nfunction sameNode (a, b) {\n  return b4a.equals(a.key, b.key) && a.length === b.length\n}\n\nfunction sameIndexers (a, b) {\n  if (a.views.length > 0 && b.views.length > 0) return b4a.equals(a.views[0].key, b.views[0].key)\n  if (a.indexers.length !== b.indexers.length) return false\n\n  for (let i = 0; i < a.indexers.length; i++) {\n    if (!b4a.equals(a.indexers[i].key, b.indexers[i].key)) return false\n  }\n\n  return true\n}\n\nfunction cloneNodes (arr) {\n  const c = []\n  for (let i = 0; i < arr.length; i++) {\n    c.push({ key: arr[i].key, length: arr[i].length })\n  }\n  return c\n}\nconst safetyCatch = require('safety-catch')\n\nconst MAX_WAIT = 2 * 60 * 1000\nconst DEFAULT_INTERVAL = 10 * 1000\n\nmodule.exports = class Timer {\n  constructor (handler, interval, opts = {}) {\n    this.handler = handler || noop\n    this.interval = interval || DEFAULT_INTERVAL\n    this.limit = opts.limit || MAX_WAIT\n\n    this._executing = null\n\n    this._limit = random2over1(this.limit)\n    this._timer = null\n    this._resolve = null\n    this._start = 0\n    this._stopped = false\n    this._asap = false\n    this._standalone = new Set()\n\n    this._unref = opts.unref !== false\n    this._timerCallback = this._executeBackground.bind(this)\n  }\n\n  _executeBackground () {\n    this._executing = this._execute()\n    this._executing.catch(safetyCatch) // make sure it doesnt crash in the bg\n  }\n\n  async _execute () {\n    this._asap = false\n    await this.handler()\n    this._start = 0\n    this._executing = null\n    this.bump()\n  }\n\n  bump () {\n    if (this._stopped || this._executing || this._asap) return\n\n    if (!this._start) this._start = Date.now()\n    else if (Date.now() - this._start > this._limit) return\n\n    const interval = random2over1(this.interval)\n\n    clearTimeout(this._timer)\n    this._timer = setTimeout(this._timerCallback, interval)\n    if (this._unref && this._timer.unref) this._timer.unref()\n  }\n\n  async trigger () {\n    if (this._stopped) return\n    if (this._executing) await this._executing\n    if (this._stopped) return\n\n    clearTimeout(this._timer)\n    this._timer = null\n\n    this._executeBackground()\n    await this._executing\n  }\n\n  async flush () {\n    if (this._executing) await this._executing\n  }\n\n  // business-as-usual\n  bau () {\n    if (!this._asap) return\n    this._asap = false\n    this.bump()\n  }\n\n  asap () {\n    if (this._asap) return\n    this._asap = true\n\n    const interval = Math.floor(Math.random() * this.interval / 3)\n    clearTimeout(this._timer)\n    this._timer = setTimeout(this._timerCallback, interval)\n    if (this._unref && this._timer.unref) this._timer.unref()\n  }\n\n  stop () {\n    if (this._timer) clearTimeout(this._timer)\n    this._timer = null\n    this._start = 0\n    this._asap = false\n    this._stopped = true\n\n    for (const { timer, resolve } of this._standalone) {\n      clearTimeout(timer)\n      resolve()\n    }\n\n    this._standalone.clear()\n  }\n\n  asapStandalone () {\n    const interval = Math.floor(Math.random() * this.interval / 3)\n    return new Promise((resolve) => {\n      const ref = { timer: null, resolve }\n      ref.timer = setTimeout(resolveStandalone, interval, ref, this._standalone)\n      if (ref.timer.unref) ref.timer.unref()\n      this._standalone.add(ref)\n    })\n  }\n\n  unref () {\n    if (this._timer && this._timer.unref) this._timer.unref()\n  }\n}\n\nfunction resolveStandalone (ref, set) {\n  set.delete(ref)\n  ref.resolve()\n}\n\n// random value x between n <= x < 2n\nfunction random2over1 (n) {\n  return Math.floor(n + Math.random() * n)\n}\n\nfunction noop () {}\nconst b4a = require('b4a')\nconst assert = require('nanoassert')\n\nmodule.exports = class TopoList {\n  constructor () {\n    this.tip = []\n    this.undo = 0\n    this.shared = 0\n  }\n\n  static compare (a, b) {\n    return cmp(a, b)\n  }\n\n  static add (node, indexed, offset) {\n    addSorted(node, indexed, offset)\n  }\n\n  mark () {\n    this.shared = this.tip.length\n    this.undo = 0\n  }\n\n  // todo: bump to new api that just tracks undo\n  flush (indexed = []) {\n    if (indexed.length) this._applyIndexed(indexed)\n\n    const u = {\n      shared: this.shared,\n      undo: this.undo,\n      length: indexed.length + this.tip.length,\n      indexed,\n      tip: this.tip\n    }\n\n    this.mark()\n\n    return u\n  }\n\n  print () {\n    return this.tip.map(n => n.writer.core.key.toString() + n.length)\n  }\n\n  _applyIndexed (nodes) {\n    assert(nodes.length <= this.tip.length, 'Indexed batch cannot exceed tip')\n\n    let shared = 0\n\n    for (; shared < nodes.length; shared++) {\n      if (this.tip[shared] !== nodes[shared]) break\n    }\n\n    // reordering\n    if (shared < nodes.length) this._track(shared)\n\n    const tip = []\n\n    for (let i = shared; i < this.tip.length; i++) {\n      const node = this.tip[i]\n      if (node.yielded) continue\n      const s = addSorted(node, tip, 0)\n      if (s === tip.length - 1) continue\n      this._track(shared + s)\n    }\n\n    this.tip = tip\n  }\n\n  add (node) {\n    const shared = addSorted(node, this.tip, 0)\n    this._track(shared)\n  }\n\n  _track (shared) {\n    if (shared < this.shared) {\n      this.undo += this.shared - shared\n      this.shared = shared\n    }\n  }\n}\n\nfunction addSorted (node, list, offset) {\n  list.push(node)\n\n  let i = list.length - 1\n\n  while (i >= offset + 1) {\n    const prev = list[i - 1]\n    if (links(node, prev)) break\n    list[i] = prev\n    list[--i] = node\n  }\n\n  while (i < list.length - 1) {\n    const next = list[i + 1]\n    const c = cmpUnlinked(node, next)\n    if (c <= 0) break\n    list[i] = next\n    list[++i] = node\n  }\n\n  return i\n}\n\nfunction links (a, b) {\n  if (b.dependents.has(a)) return true\n  return a.length > 0 && b.length === a.length - 1 && a.writer === b.writer\n}\n\nfunction cmp (a, b) {\n  return links(b, a) ? -1 : cmpUnlinked(a, b)\n}\n\nfunction cmpUnlinked (a, b) {\n  const c = b4a.compare(a.writer.core.key, b.writer.core.key)\n\n  if (c !== 0) {\n    // a node marked for optimistic execution always sorts AFTER one who didnt for security\n    if (a.optimistic !== b.optimistic) return a.optimistic ? 1 : -1\n    // try to move older versioned nodes up\n    if (a.version !== b.version) return b.version - a.version\n  }\n\n  return c === 0 ? a.length < b.length ? -1 : 1 : c\n}\nmodule.exports = class UpdateChanges {\n  constructor (base) {\n    this.base = base\n    this.byName = new Map()\n    this.tracking = null\n  }\n\n  get discoveryKey () {\n    return this.base.discoveryKey\n  }\n\n  get key () {\n    return this.base.key\n  }\n\n  get id () {\n    return this.base.id\n  }\n\n  get system () {\n    return this.base.system\n  }\n\n  track (state) {\n    this.tracking = []\n    this.byName.clear()\n\n    if (!state) return\n\n    for (const v of state.views) {\n      if (v.ref) this._add(v.ref)\n    }\n\n    this._add(state.systemRef)\n  }\n\n  _add (ref) {\n    this.tracking.push({ ref, from: ref.atomicBatch ? ref.atomicBatch.length : 0 })\n  }\n\n  finalise () {\n    if (this.tracking === null) return\n\n    for (const { ref, from } of this.tracking) {\n      const core = ref.atomicBatch || ref.batch\n      const trunc = ref.atomicBatch ? ref.atomicBatch.state.lastTruncation : null\n\n      this.byName.set(ref.name, {\n        from,\n        to: core ? core.length : from,\n        shared: trunc ? trunc.to : from\n      })\n    }\n\n    this.tracking = null\n  }\n\n  get (name) {\n    return this.byName.get(name)\n  }\n}\nconst b4a = require('b4a')\nconst c = require('compact-encoding')\nconst safetyCatch = require('safety-catch')\nconst ReadyResource = require('ready-resource')\n\nconst WakeupEntry = {\n  preencode (state, m) {\n    c.fixed32.preencode(state, m.key)\n    c.uint.preencode(state, m.length)\n  },\n  encode (state, m) {\n    c.fixed32.encode(state, m.key)\n    c.uint.encode(state, m.length)\n  },\n  decode (state) {\n    return {\n      key: c.fixed32.decode(state),\n      length: c.uint.decode(state)\n    }\n  }\n}\n\nmodule.exports = class AutoWakeup extends ReadyResource {\n  constructor (base) {\n    super()\n\n    this.base = base\n    this.flushing = null\n\n    this._rootStore = this.base.store\n    this._addBound = this.add.bind(this)\n    this._preupdateBound = this._preupdate.bind(this)\n    this._needsFlush = false\n    this._map = new Map()\n  }\n\n  [Symbol.iterator] () {\n    return this._map.values()\n  }\n\n  async _preupdate (batch, key) {\n    this.queue(key, batch.length)\n    await this.flush()\n    this.base._onwakeup()\n  }\n\n  async _save () {\n    const slab = b4a.allocUnsafe(8 + this._map.size * 40) // 32 + 8\n    const state = { start: 0, end: 0, buffer: slab }\n\n    c.uint.encode(state, this._map.size)\n    for (const m of this._map.values()) WakeupEntry.encode(state, m)\n\n    await this.base.local.setUserData('autobase/wakeup', slab.subarray(0, state.start))\n  }\n\n  async _load () {\n    const buffer = await this.base.local.getUserData('autobase/wakeup')\n    if (!buffer) return\n\n    const state = { start: 0, end: buffer.byteLength, buffer }\n\n    let len = c.uint.decode(state)\n    while (len-- > 0) {\n      const m = WakeupEntry.decode(state)\n      this._map.set(b4a.toString(m.key, 'hex'), m)\n    }\n  }\n\n  async _open () {\n    await this._load()\n\n    this._rootStore.watch(this._addBound)\n\n    for (const core of this._rootStore.cores) {\n      if (core.opened === false) await core.ready().catch(noop)\n      if (!core.closing) this.add(core)\n    }\n  }\n\n  async _close () {\n    this._rootStore.unwatch(this._addBound)\n\n    for (const core of this._rootStore.cores) {\n      if (core.opened && !core.closing) this.remove(core)\n    }\n\n    this._map.clear()\n\n    while (this.flushing) {\n      try {\n        await this.flushing\n      } catch {}\n    }\n  }\n\n  queue (key, length) {\n    const hex = b4a.toString(key, 'hex')\n    const m = this._map.get(hex)\n\n    if (m && m.length > length) {\n      return false\n    }\n\n    this._needsFlush = true\n    this._map.set(hex, { key, length })\n\n    return true\n  }\n\n  unqueue (key, length) {\n    const hex = b4a.toString(key, 'hex')\n    const m = this._map.get(hex)\n\n    if (!m) return true\n    if (m.length > length) return false\n\n    this._needsFlush = true\n    this._map.delete(hex)\n\n    return true\n  }\n\n  async flush () {\n    if (this.closing) throw new Error('Closing')\n\n    // wait for someone\n    if (this.flushing) await this.flushing\n\n    // if another still active they flushed us\n    if (this.flushing) return this.flushing\n\n    if (this._needsFlush === false) return\n    this._needsFlush = false\n\n    try {\n      this.flushing = this._save()\n      return await this.flushing\n    } finally {\n      this.flushing = null\n    }\n  }\n\n  add (core) {\n    return this._add(core).catch(safetyCatch)\n  }\n\n  remove (core) {\n    return this._remove(core)\n  }\n\n  async _add (core) {\n    if (core.opened === false) await core.ready()\n    if (core.closing) return false\n\n    // local writer, no need\n    if (core === this.base.local.core) return false\n\n    const rx = core.storage.read()\n\n    const referrerPromise = rx.getUserData('referrer')\n    const viewPromise = rx.getUserData('autobase/view')\n\n    rx.tryFlush()\n\n    const [referrer, view] = await Promise.all([referrerPromise, viewPromise])\n    if (view) return false\n\n    if (referrer === null || !b4a.equals(referrer, this.base.key)) return false\n\n    core.preupdate = this._preupdateBound\n\n    return true\n  }\n\n  _remove (core) {\n    if (core.preupdate !== this._preupdateBound) return false\n    core.preupdate = null\n    return true\n  }\n}\n\nfunction noop () {}\nconst Linearizer = require('./linearizer')\nconst NodeBuffer = require('./node-buffer')\nconst c = require('compact-encoding')\nconst b4a = require('b4a')\nconst ReadyResource = require('ready-resource')\nconst assert = require('nanoassert')\nconst SignalPromise = require('signal-promise')\n\nconst MAX_PRELOAD = 4\nconst MAX_PREFETCH = 256\n\nmodule.exports = class Writer extends ReadyResource {\n  constructor (base, core, length, isRemoved) {\n    super()\n\n    this.base = base\n    this.core = core\n    this.isRemoved = isRemoved\n    this.updated = false\n    this.range = null\n    this.nodes = new NodeBuffer(length)\n    this.node = null\n    this.isActive = false\n    this.isCurrentlyCoupled = false\n    this.isCoupled = false // maintained by updateBootstrapWriters\n    this.isBootstrap = false // maintained by updateBootstrapWriters\n    this.isActiveIndexer = false\n    this.available = length\n    this.length = length\n    this.seenLength = 0\n    this.recover = false\n    this.frozen = false\n\n    this.syncSignal = null\n  }\n\n  _pause () {\n    if (!this.range) return\n    this.range.destroy()\n    this.range = null\n  }\n\n  _resume () {\n    if (this.range) {\n      // if we didnt fill up the preload buffer yet, do not commit to more work\n      if (this.range.range.end === this.nodes.length + MAX_PREFETCH) return\n      this.range.destroy()\n    }\n    this.range = this.core.download({ start: this.nodes.length, end: this.nodes.length + MAX_PREFETCH, linear: true })\n  }\n\n  _updateCoupling () {\n    if (!this.base._coupler || this.isCoupled === this.isCurrentlyCoupled) return\n\n    if (this.isCurrentlyCoupled) this.base._coupler.remove(this.core)\n    else this.base._coupler.add(this.core)\n\n    this.isCurrentlyCoupled = this.isCoupled\n  }\n\n  _removeCouple () {\n    if (this.base._coupler && !this.isCoupled && this.isCurrentlyCoupled) {\n      this.isCurrentlyCoupled = false\n      this.base._coupler.remove(this.core)\n    }\n  }\n\n  updateActivity () {\n    if (!this.core.opened) return\n\n    if (this.seenLength > this.core.length || this.length < this.core.length || this.isBootstrap) {\n      // if we have seen a later core, or if we are behind, or if bootstrap\n      this.isActive = true\n      this.core.setActive(true)\n    } else if (this.length === this.core.length) {\n      // things look steady\n      this.isActive = false\n      this.core.setActive(false)\n    }\n\n    this._updateCoupling()\n\n    if (this.core.writable) return\n\n    if (this.base.isFastForwarding() || !this.isActive) {\n      this._pause()\n    } else {\n      this._resume()\n    }\n  }\n\n  setBootstrap (bool) {\n    this.isBootstrap = bool\n    this.updateActivity()\n  }\n\n  seen (length) {\n    if (length > this.seenLength) this.seenLength = length\n    this.updateActivity()\n  }\n\n  waitForSynced () {\n    if (this.core.length === this.length) return Promise.resolve()\n    if (this.syncSignal === null) this.syncSignal = new SignalPromise()\n    return this.syncSignal.wait()\n  }\n\n  async _open () {\n    await this.core.ready()\n    await this.core.setUserData('referrer', this.base.key)\n\n    // remove later\n    this.recover = autoRecover(this.core)\n\n    // add it again incase it wasn't readied before, only needed if this is the first time we set the referrer...\n    await this.base._wakeup.add(this.core.core)\n\n    this.updateActivity()\n  }\n\n  _close () {\n    if (this.syncSignal !== null) this.syncSignal.notify()\n    return this.core.close()\n  }\n\n  get indexed () {\n    return this.nodes.offset\n  }\n\n  idle () {\n    return this.length === this.available && this.length === this.core.length && this.core.opened\n  }\n\n  flushed () { // TODO: prop a cleaner way to express this...\n    return this.seenLength <= this.length && this.length === this.available && this.length === this.core.length &&\n        this.shiftable() === false && !this.core.core.upgrading && this.core.opened\n  }\n\n  compare (writer) {\n    return b4a.compare(this.core.key, writer.core.key)\n  }\n\n  head () {\n    return this.nodes.get(this.length - 1)\n  }\n\n  advance () {\n    if (this.syncSignal !== null && this.length + 1 === this.core.length) this.syncSignal.notify()\n    return this.length < this.available ? this.nodes.get(this.length++) : null\n  }\n\n  shiftable () {\n    return this.length > this.nodes.offset\n  }\n\n  shift () {\n    if (this.shiftable() === false) return false\n\n    let node = this._shiftAndClear()\n    while (node.batch > 1) node = this._shiftAndClear()\n\n    return true\n  }\n\n  get (seq) {\n    return seq < this.length ? this.nodes.get(seq) : null\n  }\n\n  append (value, heads, batch, dependencies, version, optimistic) {\n    const node = Linearizer.createNode(this, this.nodes.length + 1, value, heads, batch, dependencies, version, optimistic)\n\n    node.actualHeads = node.heads.slice(0)\n\n    this.nodes.push(node)\n    this.available++\n    this.length++\n\n    return node\n  }\n\n  async update (boot) {\n    if (this.opened === false) await this.ready()\n    if (this.frozen) return false\n\n    // if this is a boot node, DO NOT, preload as that will make it load\n    // and reject nodes based on the tmp state of the system.\n    // prop needs a better solution but this works for now\n    const preload = boot ? 1 : MAX_PRELOAD\n\n    while (this.available - this.length < preload) {\n      // quick sanity check\n      if (this.nodes.length === this.core.length || this.core.length === 0) break\n\n      // load next node\n      if (this.node === null && !(await this._loadNextNode())) break\n      if (!(await this._ensureNodeDependencies(boot))) break\n\n      if (this.recover) this.node.value = null\n\n      this.nodes.push(this.node)\n      if (this.node.batch === 1) this.available = this.nodes.length\n      this.node = null\n    }\n\n    this.updateActivity()\n\n    return this.length < this.available\n  }\n\n  _shiftAndClear () {\n    const node = this.nodes.shift()\n    node.clear()\n    return node\n  }\n\n  async _loadNextNode () {\n    const seq = this.nodes.length\n\n    if (!(await this.core.has(seq))) return false\n\n    try {\n      const { node, optimistic, maxSupportedVersion } = await this.core.get(seq, { wait: false })\n\n      const value = node.value == null ? null : c.decode(this.base.valueEncoding, node.value)\n      this.node = Linearizer.createNode(this, seq + 1, value, node.heads, node.batch, new Set(), maxSupportedVersion, optimistic)\n      return true\n    } catch (err) {\n      this.frozen = true\n      throw err\n    }\n  }\n\n  async _ensureNodeDependencies (boot) {\n    while (this.node.dependencies.size < this.node.heads.length) {\n      const rawHead = this.node.heads[this.node.dependencies.size]\n\n      const headWriter = await this.base._getWriterByKey(rawHead.key, -1, rawHead.length, true, false, boot)\n\n      if (headWriter !== this && (headWriter === null || headWriter.length < rawHead.length)) {\n        if (!boot) this.base._ensureWakeup(headWriter)\n        return false\n      }\n\n      let headNode = headWriter.nodes.get(rawHead.length - 1)\n\n      // could be a stub node\n      if (!headNode) {\n        for (const node of this.base.linearizer.heads) {\n          if (!compareHead(node, rawHead)) continue\n          headNode = node\n          break\n        }\n      }\n\n      // TODO: generalise DAG validation and freeze the writer\n      assert(!this.node.dependencies.has(headNode), 'Corrupted DAG')\n\n      // TODO: better way to solve the stub check is to never mutate heads below\n      if (headNode === null) { // already yielded\n        this.node.heads.splice(this.node.dependencies.size, 1)\n        continue\n      }\n\n      this.node.dependencies.add(headNode)\n    }\n\n    // always link previous node if it's not indexed\n    const offset = this.node.length - 1\n    if (offset > this.indexed) {\n      this.node.dependencies.add(this.nodes.get(offset - 1))\n    }\n\n    return true\n  }\n}\n\nfunction compareHead (node, head) {\n  if (node.length !== head.length) return false\n  return b4a.equals(node.writer.core.key, head.key)\n}\n\n// this is a list of peers we bugged in the btc and planb room.\n// adding them here so migration can run, can be removed in a month or so from time of commit\n// note, no security implications of this, we just null them out.\n\nfunction autoRecover (core) {\n  assert(core.opened)\n\n  switch (core.id) {\n    case 'ghrpexaboutdm46ombqho7mroxknassnntrxx3cubfux4qi6w6hy':\n    case 'qoaanao71s4he1rcd197d336qepykk4467geo1uq8cwnzmpb786o':\n    case 'fomhdxgn4j4tzjqy6y7iskhffimzokt7kraddyd8orcht3r8q61o':\n    case 'd8f5taxxrit51apftoi38e5b86hb98cgfd7dfp3uo1uoh95qt49o':\n    case 'objyf75uggsqpjcut69xdgj46ks8r71jjrq7oxdfsz95sstchkno':\n      return true\n  }\n\n  return false\n}\n{\n  \"name\": \"autobase\",\n  \"version\": \"7.2.1\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"standard && brittle test/all.js\",\n    \"test:encrypted\": \"standard && brittle test/all.js --encrypt-all\",\n    \"fuzz:generated\": \"brittle test/reference/fuzz/generated/*.js\",\n    \"fuzz:main\": \"node test/fuzz/index.js\",\n    \"fuzz\": \"node test/reference/fuzz/fuzz.js\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"lib/**\"\n  ],\n  \"imports\": {\n    \"events\": {\n      \"bare\": \"bare-events\",\n      \"default\": \"events\"\n    }\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/autobase.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/autobase/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/autobase#readme\",\n  \"dependencies\": {\n    \"b4a\": \"^1.6.1\",\n    \"bare-events\": \"^2.2.0\",\n    \"compact-encoding\": \"^2.16.0\",\n    \"core-coupler\": \"^2.0.0\",\n    \"debounceify\": \"^1.0.0\",\n    \"hyperbee\": \"^2.22.0\",\n    \"hypercore\": \"^11.1.0\",\n    \"hypercore-crypto\": \"^3.4.0\",\n    \"hypercore-id-encoding\": \"^1.2.0\",\n    \"index-encoder\": \"^3.3.2\",\n    \"mutexify\": \"^1.4.0\",\n    \"nanoassert\": \"^2.0.0\",\n    \"protomux-wakeup\": \"^2.0.0\",\n    \"ready-resource\": \"^1.0.0\",\n    \"resolve-reject-promise\": \"^1.1.0\",\n    \"safety-catch\": \"^1.0.2\",\n    \"signal-promise\": \"^1.0.3\",\n    \"sub-encoder\": \"^2.1.1\",\n    \"tiny-buffer-map\": \"^1.1.1\"\n  },\n  \"devDependencies\": {\n    \"autobase-test-helpers\": \"^3.0.0\",\n    \"brittle\": \"^3.1.1\",\n    \"corestore\": \"^7.0.15\",\n    \"rache\": \"^1.0.0\",\n    \"same-data\": \"^1.0.0\",\n    \"standard\": \"^17.0.0\",\n    \"test-tmp\": \"^1.2.0\"\n  },\n  \"standard\": {\n    \"ignore\": [\n      \"**/test/fuzz/generated/**\",\n      \"**/test/reference/**\",\n      \"example.mjs\"\n    ]\n  }\n}\nfunction isBuffer (value) {\n  return Buffer.isBuffer(value) || value instanceof Uint8Array\n}\n\nfunction isEncoding (encoding) {\n  return Buffer.isEncoding(encoding)\n}\n\nfunction alloc (size, fill, encoding) {\n  return Buffer.alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  return Buffer.allocUnsafe(size)\n}\n\nfunction allocUnsafeSlow (size) {\n  return Buffer.allocUnsafeSlow(size)\n}\n\nfunction byteLength (string, encoding) {\n  return Buffer.byteLength(string, encoding)\n}\n\nfunction compare (a, b) {\n  return Buffer.compare(a, b)\n}\n\nfunction concat (buffers, totalLength) {\n  return Buffer.concat(buffers, totalLength)\n}\n\nfunction copy (source, target, targetStart, start, end) {\n  return toBuffer(source).copy(target, targetStart, start, end)\n}\n\nfunction equals (a, b) {\n  return toBuffer(a).equals(b)\n}\n\nfunction fill (buffer, value, offset, end, encoding) {\n  return toBuffer(buffer).fill(value, offset, end, encoding)\n}\n\nfunction from (value, encodingOrOffset, length) {\n  return Buffer.from(value, encodingOrOffset, length)\n}\n\nfunction includes (buffer, value, byteOffset, encoding) {\n  return toBuffer(buffer).includes(value, byteOffset, encoding)\n}\n\nfunction indexOf (buffer, value, byfeOffset, encoding) {\n  return toBuffer(buffer).indexOf(value, byfeOffset, encoding)\n}\n\nfunction lastIndexOf (buffer, value, byteOffset, encoding) {\n  return toBuffer(buffer).lastIndexOf(value, byteOffset, encoding)\n}\n\nfunction swap16 (buffer) {\n  return toBuffer(buffer).swap16()\n}\n\nfunction swap32 (buffer) {\n  return toBuffer(buffer).swap32()\n}\n\nfunction swap64 (buffer) {\n  return toBuffer(buffer).swap64()\n}\n\nfunction toBuffer (buffer) {\n  if (Buffer.isBuffer(buffer)) return buffer\n  return Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength)\n}\n\nfunction toString (buffer, encoding, start, end) {\n  return toBuffer(buffer).toString(encoding, start, end)\n}\n\nfunction write (buffer, string, offset, length, encoding) {\n  return toBuffer(buffer).write(string, offset, length, encoding)\n}\n\nfunction writeDoubleLE (buffer, value, offset) {\n  return toBuffer(buffer).writeDoubleLE(value, offset)\n}\n\nfunction writeFloatLE (buffer, value, offset) {\n  return toBuffer(buffer).writeFloatLE(value, offset)\n}\n\nfunction writeUInt32LE (buffer, value, offset) {\n  return toBuffer(buffer).writeUInt32LE(value, offset)\n}\n\nfunction writeInt32LE (buffer, value, offset) {\n  return toBuffer(buffer).writeInt32LE(value, offset)\n}\n\nfunction readDoubleLE (buffer, offset) {\n  return toBuffer(buffer).readDoubleLE(offset)\n}\n\nfunction readFloatLE (buffer, offset) {\n  return toBuffer(buffer).readFloatLE(offset)\n}\n\nfunction readUInt32LE (buffer, offset) {\n  return toBuffer(buffer).readUInt32LE(offset)\n}\n\nfunction readInt32LE (buffer, offset) {\n  return toBuffer(buffer).readInt32LE(offset)\n}\n\nfunction writeDoubleBE (buffer, value, offset) {\n  return toBuffer(buffer).writeDoubleBE(value, offset)\n}\n\nfunction writeFloatBE (buffer, value, offset) {\n  return toBuffer(buffer).writeFloatBE(value, offset)\n}\n\nfunction writeUInt32BE (buffer, value, offset) {\n  return toBuffer(buffer).writeUInt32BE(value, offset)\n}\n\nfunction writeInt32BE (buffer, value, offset) {\n  return toBuffer(buffer).writeInt32BE(value, offset)\n}\n\nfunction readDoubleBE (buffer, offset) {\n  return toBuffer(buffer).readDoubleBE(offset)\n}\n\nfunction readFloatBE (buffer, offset) {\n  return toBuffer(buffer).readFloatBE(offset)\n}\n\nfunction readUInt32BE (buffer, offset) {\n  return toBuffer(buffer).readUInt32BE(offset)\n}\n\nfunction readInt32BE (buffer, offset) {\n  return toBuffer(buffer).readInt32BE(offset)\n}\n\nmodule.exports = {\n  isBuffer,\n  isEncoding,\n  alloc,\n  allocUnsafe,\n  allocUnsafeSlow,\n  byteLength,\n  compare,\n  concat,\n  copy,\n  equals,\n  fill,\n  from,\n  includes,\n  indexOf,\n  lastIndexOf,\n  swap16,\n  swap32,\n  swap64,\n  toBuffer,\n  toString,\n  write,\n  writeDoubleLE,\n  writeFloatLE,\n  writeUInt32LE,\n  writeInt32LE,\n  readDoubleLE,\n  readFloatLE,\n  readUInt32LE,\n  readInt32LE,\n  writeDoubleBE,\n  writeFloatBE,\n  writeUInt32BE,\n  writeInt32BE,\n  readDoubleBE,\n  readFloatBE,\n  readUInt32BE,\n  readInt32BE\n\n}\n{\n  \"name\": \"b4a\",\n  \"version\": \"1.6.7\",\n  \"description\": \"Bridging the gap between buffers and typed arrays\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"browser.js\",\n    \"index.js\",\n    \"lib\"\n  ],\n  \"browser\": {\n    \"./index.js\": \"./browser.js\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test/*.mjs\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/b4a.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/b4a/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/b4a#readme\",\n  \"devDependencies\": {\n    \"brittle\": \"^3.5.2\",\n    \"nanobench\": \"^3.0.0\",\n    \"standard\": \"^17.1.0\"\n  }\n}\nconst resolve = require('bare-module-resolve')\nconst { Version } = require('bare-semver')\nconst errors = require('./lib/errors')\n\nmodule.exports = exports = function resolve(\n  specifier,\n  parentURL,\n  opts,\n  readPackage\n) {\n  if (typeof opts === 'function') {\n    readPackage = opts\n    opts = {}\n  } else if (typeof readPackage !== 'function') {\n    readPackage = defaultReadPackage\n  }\n\n  return {\n    *[Symbol.iterator]() {\n      const generator = exports.addon(specifier, parentURL, opts)\n\n      let next = generator.next()\n\n      while (next.done !== true) {\n        const value = next.value\n\n        if (value.package) {\n          next = generator.next(readPackage(value.package))\n        } else {\n          next = generator.next(yield value.resolution)\n        }\n      }\n\n      return next.value\n    },\n\n    async *[Symbol.asyncIterator]() {\n      const generator = exports.addon(specifier, parentURL, opts)\n\n      let next = generator.next()\n\n      while (next.done !== true) {\n        const value = next.value\n\n        if (value.package) {\n          next = generator.next(await readPackage(value.package))\n        } else {\n          next = generator.next(yield value.resolution)\n        }\n      }\n\n      return next.value\n    }\n  }\n}\n\nfunction defaultReadPackage() {\n  return null\n}\n\nconst { UNRESOLVED, YIELDED, RESOLVED } = resolve.constants\n\nexports.constants = {\n  UNRESOLVED,\n  YIELDED,\n  RESOLVED\n}\n\nexports.addon = function* (specifier, parentURL, opts = {}) {\n  const { resolutions = null } = opts\n\n  if (exports.startsWithWindowsDriveLetter(specifier)) {\n    specifier = '/' + specifier\n  }\n\n  let status\n\n  if (resolutions) {\n    status = yield* resolve.preresolved(specifier, resolutions, parentURL, opts)\n\n    if (status) return status\n  }\n\n  status = yield* exports.url(specifier, parentURL, opts)\n\n  if (status) return status\n\n  let version = null\n\n  const i = specifier.lastIndexOf('@')\n\n  if (i > 0) {\n    version = specifier.substring(i + 1)\n\n    try {\n      Version.parse(version)\n\n      specifier = specifier.substring(0, i)\n    } catch {\n      version = null\n    }\n  }\n\n  if (\n    specifier === '.' ||\n    specifier === '..' ||\n    specifier[0] === '/' ||\n    specifier[0] === '\\\\' ||\n    specifier.startsWith('./') ||\n    specifier.startsWith('.\\\\') ||\n    specifier.startsWith('../') ||\n    specifier.startsWith('..\\\\')\n  ) {\n    return yield* exports.directory(specifier, version, parentURL, opts)\n  }\n\n  return yield* exports.package(specifier, version, parentURL, opts)\n}\n\nexports.url = function* (url, parentURL, opts = {}) {\n  let resolution\n  try {\n    resolution = new URL(url)\n  } catch {\n    return UNRESOLVED\n  }\n\n  const resolved = yield { resolution }\n\n  return resolved ? RESOLVED : YIELDED\n}\n\nexports.package = function* (\n  packageSpecifier,\n  packageVersion,\n  parentURL,\n  opts = {}\n) {\n  if (packageSpecifier === '') {\n    throw errors.INVALID_ADDON_SPECIFIER(\n      `Addon specifier '${packageSpecifier}' is not a valid package name`\n    )\n  }\n\n  let packageName\n\n  if (packageSpecifier[0] !== '@') {\n    packageName = packageSpecifier.split('/', 1).join()\n  } else {\n    if (!packageSpecifier.includes('/')) {\n      throw errors.INVALID_ADDON_SPECIFIER(\n        `Addon specifier '${packageSpecifier}' is not a valid package name`\n      )\n    }\n\n    packageName = packageSpecifier.split('/', 2).join('/')\n  }\n\n  if (\n    packageName[0] === '.' ||\n    packageName.includes('\\\\') ||\n    packageName.includes('%')\n  ) {\n    throw errors.INVALID_ADDON_SPECIFIER(\n      `Addon specifier '${packageSpecifier}' is not a valid package name`\n    )\n  }\n\n  const packageSubpath = '.' + packageSpecifier.substring(packageName.length)\n\n  const status = yield* exports.packageSelf(\n    packageName,\n    packageSubpath,\n    packageVersion,\n    parentURL,\n    opts\n  )\n\n  if (status) return status\n\n  parentURL = new URL(parentURL.href)\n\n  do {\n    const packageURL = new URL('node_modules/' + packageName + '/', parentURL)\n\n    parentURL.pathname = parentURL.pathname.substring(\n      0,\n      parentURL.pathname.lastIndexOf('/')\n    )\n\n    const info = yield { package: new URL('package.json', packageURL) }\n\n    if (info) {\n      return yield* exports.directory(\n        packageSubpath,\n        packageVersion,\n        packageURL,\n        opts\n      )\n    }\n  } while (parentURL.pathname !== '' && parentURL.pathname !== '/')\n\n  return UNRESOLVED\n}\n\nexports.packageSelf = function* (\n  packageName,\n  packageSubpath,\n  packageVersion,\n  parentURL,\n  opts = {}\n) {\n  for (const packageURL of resolve.lookupPackageScope(parentURL, opts)) {\n    const info = yield { package: packageURL }\n\n    if (info) {\n      if (info.name === packageName) {\n        return yield* exports.directory(\n          packageSubpath,\n          packageVersion,\n          packageURL,\n          opts\n        )\n      }\n\n      break\n    }\n  }\n\n  return UNRESOLVED\n}\n\nexports.lookupPrebuildsScope = function* lookupPrebuildsScope(url, opts = {}) {\n  const { resolutions = null } = opts\n\n  if (resolutions) {\n    for (const { resolution } of resolve.preresolved(\n      '#prebuilds',\n      resolutions,\n      url,\n      opts\n    )) {\n      if (resolution) return yield resolution\n    }\n  }\n\n  const scopeURL = new URL(url.href)\n\n  do {\n    yield new URL('prebuilds/', scopeURL)\n\n    scopeURL.pathname = scopeURL.pathname.substring(\n      0,\n      scopeURL.pathname.lastIndexOf('/')\n    )\n\n    if (\n      scopeURL.pathname.length === 3 &&\n      exports.isWindowsDriveLetter(scopeURL.pathname.substring(1))\n    ) {\n      break\n    }\n  } while (scopeURL.pathname !== '' && scopeURL.pathname !== '/')\n}\n\nexports.file = function* (filename, parentURL, opts = {}) {\n  if (parentURL.protocol === 'file:' && /%2f|%5c/i.test(filename)) {\n    throw errors.INVALID_ADDON_SPECIFIER(\n      `Addon specifier '${filename}' is invalid`\n    )\n  }\n\n  const { extensions = [] } = opts\n\n  let status = UNRESOLVED\n\n  for (const ext of extensions) {\n    if (yield { resolution: new URL(filename + ext, parentURL) }) {\n      return RESOLVED\n    }\n\n    status = YIELDED\n  }\n\n  return status\n}\n\nexports.directory = function* (dirname, version, parentURL, opts = {}) {\n  const {\n    resolutions = null,\n    host = null, // Shorthand for single host resolution\n    hosts = host !== null ? [host] : [],\n    builtins = [],\n    matchedConditions = []\n  } = opts\n\n  let directoryURL\n\n  if (\n    dirname[dirname.length - 1] === '/' ||\n    dirname[dirname.length - 1] === '\\\\'\n  ) {\n    directoryURL = new URL(dirname, parentURL)\n  } else {\n    directoryURL = new URL(dirname + '/', parentURL)\n  }\n\n  // Internal preresolution path, do not depend on this! It will be removed without\n  // warning.\n  if (resolutions) {\n    const status = yield* resolve.preresolved(\n      'bare:addon',\n      resolutions,\n      directoryURL,\n      opts\n    )\n\n    if (status) return status\n  }\n\n  const unversioned = version === null\n\n  let name = null\n\n  const info = yield { package: new URL('package.json', directoryURL) }\n\n  if (info) {\n    if (typeof info.name === 'string' && info.name !== '') {\n      if (info.name.includes('__')) {\n        throw errors.INVALID_PACKAGE_NAME(\n          `Package name '${info.name}' is invalid`\n        )\n      }\n\n      name = info.name.replace(/\\//g, '__').replace(/^@/, '')\n    } else {\n      return UNRESOLVED\n    }\n\n    if (typeof info.version === 'string' && info.version !== '') {\n      if (version !== null && info.version !== version) return UNRESOLVED\n\n      version = info.version\n    }\n  } else {\n    return UNRESOLVED\n  }\n\n  let status\n\n  status = yield* resolve.builtinTarget(name, version, builtins, opts)\n\n  if (status) return status\n\n  for (const prebuildsURL of exports.lookupPrebuildsScope(directoryURL, opts)) {\n    status = UNRESOLVED\n\n    for (const host of hosts) {\n      const conditions = host.split('-')\n\n      matchedConditions.push(...conditions)\n\n      if (version !== null) {\n        status |= yield* exports.file(\n          host + '/' + name + '@' + version,\n          prebuildsURL,\n          opts\n        )\n      }\n\n      if (unversioned) {\n        status |= yield* exports.file(host + '/' + name, prebuildsURL, opts)\n      }\n\n      for (const _ of conditions) matchedConditions.pop()\n    }\n\n    if (status === RESOLVED) return status\n  }\n\n  return yield* exports.linked(name, version, opts)\n}\n\nexports.linked = function* (name, version = null, opts = {}) {\n  const {\n    linked = true,\n    host = null, // Shorthand for single host resolution\n    hosts = host !== null ? [host] : [],\n    matchedConditions = []\n  } = opts\n\n  if (linked === false || hosts.length === 0) return UNRESOLVED\n\n  let status = UNRESOLVED\n\n  for (const host of hosts) {\n    const [platform = null] = host.split('-', 1)\n\n    if (platform === null) continue\n\n    matchedConditions.push(platform)\n\n    status |= yield* platformArtefact(name, version, platform, opts)\n\n    matchedConditions.pop()\n  }\n\n  return status\n}\n\nfunction* platformArtefact(name, version = null, platform, opts = {}) {\n  const { linkedProtocol = 'linked:' } = opts\n\n  if (platform === 'darwin' || platform === 'ios') {\n    if (version !== null) {\n      if (\n        yield {\n          resolution: new URL(\n            `${linkedProtocol}${name}.${version}.framework/${name}.${version}`\n          )\n        }\n      ) {\n        return RESOLVED\n      }\n\n      if (platform === 'darwin') {\n        if (\n          yield {\n            resolution: new URL(`${linkedProtocol}lib${name}.${version}.dylib`)\n          }\n        ) {\n          return RESOLVED\n        }\n      }\n    }\n\n    if (\n      yield {\n        resolution: new URL(`${linkedProtocol}${name}.framework/${name}`)\n      }\n    ) {\n      return RESOLVED\n    }\n\n    if (platform === 'darwin') {\n      if (\n        yield {\n          resolution: new URL(`${linkedProtocol}lib${name}.dylib`)\n        }\n      ) {\n        return RESOLVED\n      }\n    }\n\n    return YIELDED\n  }\n\n  if (platform === 'linux' || platform === 'android') {\n    if (version !== null) {\n      if (\n        yield {\n          resolution: new URL(`${linkedProtocol}lib${name}.${version}.so`)\n        }\n      ) {\n        return RESOLVED\n      }\n    }\n\n    if (\n      yield {\n        resolution: new URL(`${linkedProtocol}lib${name}.so`)\n      }\n    ) {\n      return RESOLVED\n    }\n\n    return YIELDED\n  }\n\n  if (platform === 'win32') {\n    if (version !== null) {\n      if (\n        yield {\n          resolution: new URL(`${linkedProtocol}${name}-${version}.dll`)\n        }\n      ) {\n        return RESOLVED\n      }\n    }\n\n    if (\n      yield {\n        resolution: new URL(`${linkedProtocol}${name}.dll`)\n      }\n    ) {\n      return RESOLVED\n    }\n  }\n\n  return UNRESOLVED\n}\n\nexports.isWindowsDriveLetter = resolve.isWindowsDriveLetter\n\nexports.startsWithWindowsDriveLetter = resolve.startsWithWindowsDriveLetter\nmodule.exports = class AddonResolveError extends Error {\n  constructor(msg, code, fn = AddonResolveError) {\n    super(`${code}: ${msg}`)\n    this.code = code\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, fn)\n    }\n  }\n\n  get name() {\n    return 'AddonResolveError'\n  }\n\n  static INVALID_ADDON_SPECIFIER(msg) {\n    return new AddonResolveError(\n      msg,\n      'INVALID_ADDON_SPECIFIER',\n      AddonResolveError.INVALID_ADDON_SPECIFIER\n    )\n  }\n\n  static INVALID_PACKAGE_NAME(msg) {\n    return new AddonResolveError(\n      msg,\n      'INVALID_PACKAGE_NAME',\n      AddonResolveError.INVALID_PACKAGE_NAME\n    )\n  }\n}\n{\n  \"name\": \"bare-addon-resolve\",\n  \"version\": \"1.9.4\",\n  \"description\": \"Low-level addon resolution algorithm for Bare\",\n  \"exports\": {\n    \"./package\": \"./package.json\",\n    \".\": {\n      \"types\": \"./index.d.ts\",\n      \"default\": \"./index.js\"\n    },\n    \"./errors\": {\n      \"types\": \"./lib/errors.d.ts\",\n      \"default\": \"./lib/errors.js\"\n    }\n  },\n  \"files\": [\n    \"index.js\",\n    \"index.d.ts\",\n    \"lib\"\n  ],\n  \"scripts\": {\n    \"test\": \"prettier . --check && bare test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bare-addon-resolve.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bare-addon-resolve/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bare-addon-resolve#readme\",\n  \"dependencies\": {\n    \"bare-module-resolve\": \"^1.10.0\",\n    \"bare-semver\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"bare-url\": \"^2.1.3\",\n    \"brittle\": \"^3.2.1\",\n    \"prettier\": \"^3.3.3\",\n    \"prettier-config-standard\": \"^7.0.0\"\n  },\n  \"peerDependencies\": {\n    \"bare-url\": \"*\"\n  },\n  \"peerDependenciesMeta\": {\n    \"bare-url\": {\n      \"optional\": true\n    }\n  }\n}\nmodule.exports = require.addon()\nconst { Transform } = require('bare-stream')\nconst binding = require('./binding')\nconst constants = (exports.constants = require('./lib/constants'))\nconst errors = (exports.errors = require('./lib/errors'))\n\nexports.Hash = class CryptoHash extends Transform {\n  constructor(algorithm, opts = {}) {\n    super(opts)\n\n    if (typeof algorithm === 'string') {\n      if (algorithm in constants.hash) algorithm = constants.hash[algorithm]\n      else {\n        algorithm = algorithm.toUpperCase()\n\n        if (algorithm in constants.hash) algorithm = constants.hash[algorithm]\n        else {\n          throw errors.UNSUPPORTED_DIGEST_METHOD(\n            `Unsupported digest method '${algorithm}'`\n          )\n        }\n      }\n    }\n\n    this._handle = binding.hashInit(algorithm)\n  }\n\n  update(data, encoding = 'utf8') {\n    if (typeof data === 'string') data = Buffer.from(data, encoding)\n\n    binding.hashUpdate(this._handle, data)\n\n    return this\n  }\n\n  digest(encoding) {\n    const digest = Buffer.from(binding.hashFinal(this._handle))\n\n    return encoding ? digest.toString(encoding) : digest\n  }\n\n  _transform(data, encoding, cb) {\n    this.update(data)\n\n    cb(null)\n  }\n\n  _flush(cb) {\n    this.push(this.digest())\n\n    cb(null)\n  }\n}\n\nexports.createHash = function createHash(algorithm, opts) {\n  return new exports.Hash(algorithm, opts)\n}\n\nexports.randomBytes = function randomBytes(size, cb) {\n  const buffer = Buffer.allocUnsafe(size)\n  exports.randomFill(buffer)\n  if (cb) queueMicrotask(() => cb(null, buffer))\n  else return buffer\n}\n\nexports.randomFill = function randomFill(buffer, offset, size, cb) {\n  if (typeof offset === 'function') {\n    cb = offset\n    offset = undefined\n  } else if (typeof size === 'function') {\n    cb = size\n    size = undefined\n  }\n\n  const elementSize = buffer.BYTES_PER_ELEMENT || 1\n\n  if (offset === undefined) offset = 0\n  else offset *= elementSize\n\n  if (size === undefined) size = buffer.byteLength - offset\n  else size *= elementSize\n\n  if (offset < 0 || offset > buffer.byteLength) {\n    throw new RangeError('offset is out of range')\n  }\n\n  if (size < 0 || size > buffer.byteLength) {\n    throw new RangeError('size is out of range')\n  }\n\n  if (offset + size > buffer.byteLength) {\n    throw new RangeError('offset + size is out of range')\n  }\n\n  let arraybuffer\n\n  if (ArrayBuffer.isView(buffer)) {\n    offset += buffer.byteOffset\n    arraybuffer = buffer.buffer\n  } else {\n    arraybuffer = buffer\n  }\n\n  binding.randomFill(arraybuffer, offset, size)\n\n  if (cb) queueMicrotask(() => cb(null, buffer))\n  else return buffer\n}\n\n// For Node.js compatibility\nexports.randomFillSync = function randomFillSync(buffer, offset, size) {\n  return exports.randomFill(buffer, offset, size)\n}\n\n// For Node.js compatibility\nexports.webcrypto = require('./web')\nconst binding = require('../binding')\n\nmodule.exports = {\n  hash: {\n    MD5: binding.MD5,\n    SHA1: binding.SHA1,\n    SHA256: binding.SHA256,\n    SHA512: binding.SHA512,\n    BLAKE2B256: binding.BLAKE2B256\n  }\n}\nmodule.exports = class CryptoError extends Error {\n  constructor(msg, code, fn = CryptoError) {\n    super(`${code}: ${msg}`)\n    this.code = code\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, fn)\n    }\n  }\n\n  get name() {\n    return 'CryptoError'\n  }\n\n  static UNSUPPORTED_DIGEST_METHOD(msg) {\n    return new CryptoError(\n      msg,\n      'UNSUPPORTED_DIGEST_METHOD',\n      CryptoError.UNSUPPORTED_DIGEST_METHOD\n    )\n  }\n}\n{\n  \"name\": \"bare-crypto\",\n  \"version\": \"1.4.2\",\n  \"description\": \"Cryptographic primitives for JavaScript\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./index.d.ts\",\n      \"default\": \"./index.js\"\n    },\n    \"./package\": \"./package.json\",\n    \"./web\": {\n      \"types\": \"./web.d.ts\",\n      \"default\": \"./web.js\"\n    },\n    \"./constants\": \"./lib/constants.js\",\n    \"./errors\": \"./lib/errors.js\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"index.d.ts\",\n    \"web.js\",\n    \"web.d.ts\",\n    \"binding.c\",\n    \"binding.js\",\n    \"CMakeLists.txt\",\n    \"lib\",\n    \"prebuilds\"\n  ],\n  \"addon\": true,\n  \"scripts\": {\n    \"test\": \"prettier . --check && bare test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bare-crypto.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bare-crypto/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bare-crypto#readme\",\n  \"dependencies\": {\n    \"bare-stream\": \"^2.6.3\"\n  },\n  \"devDependencies\": {\n    \"bare-buffer\": \"^3.0.1\",\n    \"brittle\": \"^3.5.0\",\n    \"cmake-bare\": \"^1.1.6\",\n    \"cmake-fetch\": \"^1.0.0\",\n    \"prettier\": \"^3.4.2\",\n    \"prettier-config-standard\": \"^7.0.0\"\n  },\n  \"peerDependencies\": {\n    \"bare-buffer\": \"*\"\n  },\n  \"peerDependenciesMeta\": {\n    \"bare-buffer\": {\n      \"optional\": true\n    }\n  }\n}\nconst crypto = require('.')\n\n// https://w3c.github.io/webcrypto/#Crypto-method-getRandomValues\nexports.getRandomValues = function getRandomValues(array) {\n  return crypto.randomFillSync(array)\n}\nconst errors = require('./lib/errors')\n\nclass EventListener {\n  constructor() {\n    this.list = []\n    this.count = 0\n  }\n\n  append(ctx, name, fn, once) {\n    this.count++\n    ctx.emit('newListener', name, fn) // Emit BEFORE adding\n    this.list.push([fn, once])\n  }\n\n  prepend(ctx, name, fn, once) {\n    this.count++\n    ctx.emit('newListener', name, fn) // Emit BEFORE adding\n    this.list.unshift([fn, once])\n  }\n\n  remove(ctx, name, fn) {\n    for (let i = 0, n = this.list.length; i < n; i++) {\n      const l = this.list[i]\n\n      if (l[0] === fn) {\n        this.list.splice(i, 1)\n\n        if (this.count === 1) delete ctx._events[name]\n\n        ctx.emit('removeListener', name, fn) // Emit AFTER removing\n\n        this.count--\n        return\n      }\n    }\n  }\n\n  removeAll(ctx, name) {\n    const list = [...this.list]\n    this.list = []\n\n    if (this.count === list.length) delete ctx._events[name]\n\n    for (let i = list.length - 1; i >= 0; i--) {\n      ctx.emit('removeListener', name, list[i][0]) // Emit AFTER removing\n    }\n\n    this.count -= list.length\n  }\n\n  emit(ctx, name, ...args) {\n    const list = [...this.list]\n\n    for (let i = 0, n = list.length; i < n; i++) {\n      const l = list[i]\n\n      if (l[1] === true) this.remove(ctx, name, l[0])\n\n      l[0].call(ctx, ...args)\n    }\n\n    return list.length > 0\n  }\n}\n\nfunction appendListener(ctx, name, fn, once) {\n  const e = ctx._events[name] || (ctx._events[name] = new EventListener())\n  e.append(ctx, name, fn, once)\n  return ctx\n}\n\nfunction prependListener(ctx, name, fn, once) {\n  const e = ctx._events[name] || (ctx._events[name] = new EventListener())\n  e.prepend(ctx, name, fn, once)\n  return ctx\n}\n\nfunction removeListener(ctx, name, fn) {\n  const e = ctx._events[name]\n  if (e !== undefined) e.remove(ctx, name, fn)\n  return ctx\n}\n\nfunction throwUnhandledError(...args) {\n  let err\n\n  if (args.length > 0) err = args[0]\n\n  if (err instanceof Error === false) err = errors.UNHANDLED_ERROR(err)\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(err, exports.prototype.emit)\n  }\n\n  queueMicrotask(() => {\n    throw err\n  })\n}\n\nmodule.exports = exports = class EventEmitter {\n  constructor() {\n    this._events = Object.create(null)\n  }\n\n  addListener(name, fn) {\n    return appendListener(this, name, fn, false)\n  }\n\n  addOnceListener(name, fn) {\n    return appendListener(this, name, fn, true)\n  }\n\n  prependListener(name, fn) {\n    return prependListener(this, name, fn, false)\n  }\n\n  prependOnceListener(name, fn) {\n    return prependListener(this, name, fn, true)\n  }\n\n  removeListener(name, fn) {\n    return removeListener(this, name, fn)\n  }\n\n  on(name, fn) {\n    return appendListener(this, name, fn, false)\n  }\n\n  once(name, fn) {\n    return appendListener(this, name, fn, true)\n  }\n\n  off(name, fn) {\n    return removeListener(this, name, fn)\n  }\n\n  emit(name, ...args) {\n    if (name === 'error' && this._events.error === undefined) {\n      throwUnhandledError(...args)\n    }\n\n    const e = this._events[name]\n    return e === undefined ? false : e.emit(this, name, ...args)\n  }\n\n  listeners(name) {\n    const e = this._events[name]\n    return e === undefined ? [] : [...e.list]\n  }\n\n  listenerCount(name) {\n    const e = this._events[name]\n    return e === undefined ? 0 : e.list.length\n  }\n\n  getMaxListeners() {\n    return EventEmitter.defaultMaxListeners\n  }\n\n  setMaxListeners(n) {}\n\n  removeAllListeners(name) {\n    if (arguments.length === 0) {\n      for (const key of Reflect.ownKeys(this._events)) {\n        if (key === 'removeListener') continue\n        this.removeAllListeners(key)\n      }\n      this.removeAllListeners('removeListener')\n    } else {\n      const e = this._events[name]\n      if (e !== undefined) e.removeAll(this, name)\n    }\n    return this\n  }\n}\n\nexports.EventEmitter = exports\n\nexports.errors = errors\n\nexports.defaultMaxListeners = 10\n\nexports.on = function on(emitter, name, opts = {}) {\n  const { signal } = opts\n\n  if (signal && signal.aborted) {\n    throw errors.OPERATION_ABORTED(signal.reason)\n  }\n\n  let error = null\n  let done = false\n\n  const events = []\n  const promises = []\n\n  emitter.on(name, onevent)\n\n  if (name !== 'error') emitter.on('error', onerror)\n\n  if (signal) signal.addEventListener('abort', onabort)\n\n  return {\n    next() {\n      if (events.length) {\n        return Promise.resolve({ value: events.shift(), done: false })\n      }\n\n      if (error) {\n        const err = error\n\n        error = null\n\n        return Promise.reject(err)\n      }\n\n      if (done) return onclose()\n\n      return new Promise((resolve, reject) =>\n        promises.push({ resolve, reject })\n      )\n    },\n\n    return() {\n      return onclose()\n    },\n\n    throw(err) {\n      return onerror(err)\n    },\n\n    [Symbol.asyncIterator]() {\n      return this\n    }\n  }\n\n  function onevent(...args) {\n    if (promises.length) {\n      promises.shift().resolve({ value: args, done: false })\n    } else {\n      events.push(args)\n    }\n  }\n\n  function onerror(err) {\n    if (promises.length) {\n      promises.shift().reject(err)\n    } else {\n      error = err\n    }\n\n    return Promise.resolve({ done: true })\n  }\n\n  function onabort() {\n    onerror(errors.OPERATION_ABORTED(signal.reason))\n  }\n\n  function onclose() {\n    emitter.off(name, onevent)\n\n    if (name !== 'error') emitter.off('error', onerror)\n\n    if (signal) signal.removeEventListener('abort', onabort)\n\n    done = true\n\n    if (promises.length) promises.shift().resolve({ done: true })\n\n    return Promise.resolve({ done: true })\n  }\n}\n\nexports.once = function once(emitter, name, opts = {}) {\n  const { signal } = opts\n\n  if (signal && signal.aborted) {\n    throw errors.OPERATION_ABORTED(signal.reason)\n  }\n\n  return new Promise((resolve, reject) => {\n    if (name !== 'error') emitter.on('error', onerror)\n\n    if (signal) signal.addEventListener('abort', onabort)\n\n    emitter.once(name, (...args) => {\n      if (name !== 'error') emitter.off('error', onerror)\n\n      if (signal) signal.removeEventListener('abort', onabort)\n\n      resolve(args)\n    })\n\n    function onerror(err) {\n      emitter.off('error', onerror)\n\n      reject(err)\n    }\n\n    function onabort() {\n      signal.removeEventListener('abort', onabort)\n\n      onerror(errors.OPERATION_ABORTED(signal.reason))\n    }\n  })\n}\n\nexports.forward = function forward(from, to, names, opts = {}) {\n  if (typeof names === 'string') names = [names]\n\n  const { emit = to.emit.bind(to) } = opts\n\n  const listeners = names.map(\n    (name) =>\n      function onevent(...args) {\n        emit(name, ...args)\n      }\n  )\n\n  to.on('newListener', (name) => {\n    const i = names.indexOf(name)\n\n    if (i !== -1 && to.listenerCount(name) === 0) {\n      from.on(name, listeners[i])\n    }\n  }).on('removeListener', (name) => {\n    const i = names.indexOf(name)\n\n    if (i !== -1 && to.listenerCount(name) === 0) {\n      from.off(name, listeners[i])\n    }\n  })\n}\n\nexports.listenerCount = function listenerCount(emitter, name) {\n  return emitter.listenerCount(name)\n}\nmodule.exports = class EventEmitterError extends Error {\n  constructor(msg, code, fn = EventEmitterError, opts) {\n    super(`${code}: ${msg}`, opts)\n    this.code = code\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, fn)\n    }\n  }\n\n  get name() {\n    return 'EventEmitterError'\n  }\n\n  static OPERATION_ABORTED(cause, msg = 'Operation aborted') {\n    return new EventEmitterError(\n      msg,\n      'OPERATION_ABORTED',\n      EventEmitterError.OPERATION_ABORTED,\n      { cause }\n    )\n  }\n\n  static UNHANDLED_ERROR(cause, msg = 'Unhandled error') {\n    return new EventEmitterError(\n      msg,\n      'UNHANDLED_ERROR',\n      EventEmitterError.UNHANDLED_ERROR,\n      { cause }\n    )\n  }\n}\n{\n  \"name\": \"bare-events\",\n  \"version\": \"2.5.4\",\n  \"description\": \"Event emitters for JavaScript\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./index.d.ts\",\n      \"default\": \"./index.js\"\n    },\n    \"./package\": \"./package.json\",\n    \"./errors\": \"./lib/errors.js\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"index.d.ts\",\n    \"lib\"\n  ],\n  \"scripts\": {\n    \"test\": \"npm run lint && npm run test:bare && npm run test:node\",\n    \"test:bare\": \"bare test.js\",\n    \"test:node\": \"node test.js\",\n    \"lint\": \"prettier . --check\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bare-events.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bare-events/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bare-events#readme\",\n  \"devDependencies\": {\n    \"brittle\": \"^3.3.2\",\n    \"prettier\": \"^3.4.2\",\n    \"prettier-config-standard\": \"^7.0.0\"\n  }\n}\nmodule.exports = require.addon()\nconst EventEmitter = require('bare-events')\nconst path = require('bare-path')\nconst { Readable, Writable } = require('bare-stream')\nconst binding = require('./binding')\nconst constants = require('./lib/constants')\n\nconst isWindows = Bare.platform === 'win32'\n\nexports.constants = constants\n\n// Lightly-modified from the Node FS internal utils.\nfunction flagsToNumber(flags) {\n  switch (flags) {\n    case 'r':\n      return constants.O_RDONLY\n    case 'rs': // Fall through.\n    case 'sr':\n      return constants.O_RDONLY | constants.O_SYNC\n    case 'r+':\n      return constants.O_RDWR\n    case 'rs+': // Fall through.\n    case 'sr+':\n      return constants.O_RDWR | constants.O_SYNC\n\n    case 'w':\n      return constants.O_TRUNC | constants.O_CREAT | constants.O_WRONLY\n    case 'wx': // Fall through.\n    case 'xw':\n      return (\n        constants.O_TRUNC |\n        constants.O_CREAT |\n        constants.O_WRONLY |\n        constants.O_EXCL\n      )\n\n    case 'w+':\n      return constants.O_TRUNC | constants.O_CREAT | constants.O_RDWR\n    case 'wx+': // Fall through.\n    case 'xw+':\n      return (\n        constants.O_TRUNC |\n        constants.O_CREAT |\n        constants.O_RDWR |\n        constants.O_EXCL\n      )\n\n    case 'a':\n      return constants.O_APPEND | constants.O_CREAT | constants.O_WRONLY\n    case 'ax': // Fall through.\n    case 'xa':\n      return (\n        constants.O_APPEND |\n        constants.O_CREAT |\n        constants.O_WRONLY |\n        constants.O_EXCL\n      )\n    case 'as': // Fall through.\n    case 'sa':\n      return (\n        constants.O_APPEND |\n        constants.O_CREAT |\n        constants.O_WRONLY |\n        constants.O_SYNC\n      )\n\n    case 'a+':\n      return constants.O_APPEND | constants.O_CREAT | constants.O_RDWR\n    case 'ax+': // Fall through.\n    case 'xa+':\n      return (\n        constants.O_APPEND |\n        constants.O_CREAT |\n        constants.O_RDWR |\n        constants.O_EXCL\n      )\n    case 'as+': // Fall through.\n    case 'sa+':\n      return (\n        constants.O_APPEND |\n        constants.O_CREAT |\n        constants.O_RDWR |\n        constants.O_SYNC\n      )\n  }\n\n  throw typeError('ERR_INVALID_ARG_VALUE', `Invalid value in flags: ${flags}`)\n}\n\nfunction modeToNumber(mode) {\n  mode = parseInt(mode, 8)\n  if (isNaN(mode))\n    throw typeError(\n      'ERR_INVALID_ARG_VALUE',\n      'Mode must be a number or octal string'\n    )\n  return mode\n}\n\nconst free = []\n\nfunction alloc() {\n  const req = { handle: null, callback: null }\n  req.handle = binding.init(req, onresponse)\n  return req\n}\n\nfunction getReq() {\n  return free.length ? free.pop() : alloc()\n}\n\nfunction onresponse(err, result) {\n  const req = this\n  const cb = req.callback\n  req.callback = null\n  free.push(req)\n  cb(err, result)\n}\n\nfunction open(filepath, flags, mode, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    if (typeof flags === 'function') {\n      cb = flags\n      flags = 'r'\n      mode = 0o666\n    } else if (typeof mode === 'function') {\n      cb = mode\n      mode = 0o666\n    } else {\n      throw typeError(\n        'ERR_INVALID_ARG_TYPE',\n        'Callback must be a function. Received type ' +\n          typeof cb +\n          ' (' +\n          cb +\n          ')'\n      )\n    }\n  }\n\n  if (typeof flags === 'string') flags = flagsToNumber(flags)\n  if (typeof mode === 'string') mode = modeToNumber(mode)\n\n  const req = getReq()\n  req.callback = cb\n  binding.open(req.handle, filepath, flags, mode)\n}\n\nfunction openSync(filepath, flags = 'r', mode = 0o666) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof flags === 'string') flags = flagsToNumber(flags)\n  if (typeof mode === 'string') mode = modeToNumber(mode)\n\n  return binding.openSync(filepath, flags, mode)\n}\n\nfunction close(fd, cb = noop) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  const req = getReq()\n  req.callback = cb\n  binding.close(req.handle, fd)\n}\n\nfunction closeSync(fd) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  return binding.closeSync(fd)\n}\n\nfunction access(filepath, mode, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    if (typeof mode === 'function') {\n      cb = mode\n      mode = constants.F_OK\n    } else {\n      throw typeError(\n        'ERR_INVALID_ARG_TYPE',\n        'Callback must be a function. Received type ' +\n          typeof cb +\n          ' (' +\n          cb +\n          ')'\n      )\n    }\n  }\n\n  const req = getReq()\n  req.callback = cb\n  binding.access(req.handle, filepath, mode)\n}\n\nfunction accessSync(filepath, mode = constants.F_OK) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  binding.accessSync(filepath, mode)\n}\n\nfunction exists(filepath, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  return access(filepath, (err) => cb(!!err))\n}\n\nfunction existsSync(filepath) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  try {\n    accessSync(filepath)\n    return true\n  } catch {\n    return false\n  }\n}\n\nfunction read(fd, buffer, offset, len, pos, cb) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (!Buffer.isBuffer(buffer) && !ArrayBuffer.isView(buffer)) {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Buffer must be a buffer. Received type ' +\n        typeof buffer +\n        ' (' +\n        buffer +\n        ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    if (typeof offset === 'function') {\n      cb = offset\n      offset = 0\n      len = buffer.byteLength\n      pos = -1\n    } else if (typeof len === 'function') {\n      cb = len\n      len = buffer.byteLength - offset\n      pos = -1\n    } else if (typeof pos === 'function') {\n      cb = pos\n      pos = -1\n    } else {\n      throw typeError(\n        'ERR_INVALID_ARG_TYPE',\n        'Callback must be a function. Received type ' +\n          typeof cb +\n          ' (' +\n          cb +\n          ')'\n      )\n    }\n  }\n\n  if (typeof pos !== 'number') pos = -1\n\n  const req = getReq()\n  req.callback = cb\n  binding.read(req.handle, fd, buffer, offset, len, pos)\n}\n\nfunction readSync(\n  fd,\n  buffer,\n  offset = 0,\n  len = buffer.byteLength - offset,\n  pos = -1\n) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (!Buffer.isBuffer(buffer) && !ArrayBuffer.isView(buffer)) {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Buffer must be a buffer. Received type ' +\n        typeof buffer +\n        ' (' +\n        buffer +\n        ')'\n    )\n  }\n\n  return binding.readSync(fd, buffer, offset, len, pos)\n}\n\nfunction readv(fd, buffers, pos, cb) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (typeof pos === 'function') {\n    cb = pos\n    pos = -1\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof pos !== 'number') pos = -1\n\n  const req = getReq()\n  req.callback = cb\n  binding.readv(req.handle, fd, buffers, pos)\n}\n\nfunction write(fd, data, offset, len, pos, cb) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (\n    typeof data !== 'string' &&\n    !Buffer.isBuffer(data) &&\n    !ArrayBuffer.isView(data)\n  ) {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Data must be a string or buffer. Received type ' + typeof data\n    )\n  }\n\n  if (typeof data === 'string') {\n    let encoding = len\n    cb = pos\n    pos = offset\n\n    if (typeof cb !== 'function') {\n      if (typeof pos === 'function') {\n        cb = pos\n        pos = -1\n        encoding = 'utf8'\n      } else if (typeof encoding === 'function') {\n        cb = encoding\n        encoding = 'utf8'\n      } else {\n        throw typeError(\n          'ERR_INVALID_ARG_TYPE',\n          'Callback must be a function. Received type ' +\n            typeof cb +\n            ' (' +\n            cb +\n            ')'\n        )\n      }\n    }\n\n    if (typeof pos === 'string') {\n      encoding = pos\n      pos = -1\n    }\n\n    data = Buffer.from(data, encoding)\n    offset = 0\n    len = data.byteLength\n  } else if (typeof cb !== 'function') {\n    if (typeof offset === 'function') {\n      cb = offset\n      offset = 0\n      len = data.byteLength\n      pos = -1\n    } else if (typeof len === 'function') {\n      cb = len\n      len = data.byteLength - offset\n      pos = -1\n    } else if (typeof pos === 'function') {\n      cb = pos\n      pos = -1\n    } else {\n      throw typeError(\n        'ERR_INVALID_ARG_TYPE',\n        'Callback must be a function. Received type ' +\n          typeof cb +\n          ' (' +\n          cb +\n          ')'\n      )\n    }\n  }\n\n  if (typeof pos !== 'number') pos = -1\n\n  const req = getReq()\n  req.callback = cb\n  binding.write(req.handle, fd, data, offset, len, pos)\n}\n\nfunction writeSync(fd, data, offset = 0, len, pos) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (\n    typeof data !== 'string' &&\n    !Buffer.isBuffer(data) &&\n    !ArrayBuffer.isView(data)\n  ) {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Data must be a string or buffer. Received type ' + typeof data\n    )\n  }\n\n  if (typeof data === 'string') data = Buffer.from(data)\n\n  if (typeof len !== 'number') len = data.byteLength - offset\n\n  if (typeof pos !== 'number') pos = -1\n\n  return binding.writeSync(fd, data, offset, len, pos)\n}\n\nfunction writev(fd, buffers, pos, cb) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (typeof pos === 'function') {\n    cb = pos\n    pos = -1\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof pos !== 'number') pos = -1\n\n  const req = getReq()\n  req.callback = cb\n  binding.writev(req.handle, fd, buffers, pos)\n}\n\nfunction stat(filepath, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  const data = new Array(Stats.length)\n\n  const req = getReq()\n\n  req.callback = function (err, _) {\n    if (err) cb(err, null)\n    else cb(null, new Stats(...data))\n  }\n\n  binding.stat(req.handle, filepath, data)\n}\n\nfunction statSync(filepath) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  return new Stats(...binding.statSync(filepath))\n}\n\nfunction lstat(filepath, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  const data = new Array(Stats.length)\n\n  const req = getReq()\n\n  req.callback = function (err, _) {\n    if (err) cb(err, null)\n    else cb(null, new Stats(...data))\n  }\n\n  binding.lstat(req.handle, filepath, data)\n}\n\nfunction lstatSync(filepath) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  return new Stats(...binding.lstatSync(filepath))\n}\n\nfunction fstat(fd, cb) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  const data = new Array(Stats.length)\n\n  const req = getReq()\n\n  req.callback = function (err, _) {\n    if (err) cb(err, null)\n    else cb(null, new Stats(...data))\n  }\n\n  binding.fstat(req.handle, fd, data)\n}\n\nfunction fstatSync(fd) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  return new Stats(...binding.fstatSync(fd))\n}\n\nfunction ftruncate(fd, len, cb) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (typeof len === 'function') {\n    cb = len\n    len = 0\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  const req = getReq()\n  req.callback = cb\n  binding.ftruncate(req.handle, fd, len)\n}\n\nfunction chmod(filepath, mode, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof mode === 'string') mode = modeToNumber(mode)\n\n  const req = getReq()\n  req.callback = cb\n  binding.chmod(req.handle, filepath, mode)\n}\n\nfunction chmodSync(filepath, mode) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof mode === 'string') mode = modeToNumber(mode)\n\n  binding.chmodSync(filepath, mode)\n}\n\nfunction fchmod(fd, mode, cb) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (typeof mode === 'string') mode = modeToNumber(mode)\n\n  const req = getReq()\n  req.callback = cb\n  binding.fchmod(req.handle, fd, mode)\n}\n\nfunction fchmodSync(fd, mode) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (typeof mode === 'string') mode = modeToNumber(mode)\n\n  binding.fchmodSync(fd, mode)\n}\n\nfunction mkdirRecursive(filepath, mode, cb) {\n  mkdir(filepath, { mode }, function (err) {\n    if (err === null) return cb(null, 0, null)\n\n    if (err.code !== 'ENOENT') {\n      stat(filepath, function (e, st) {\n        if (e) return cb(e, e.errno, null)\n        if (st.isDirectory()) return cb(null, 0, null)\n        cb(err, err.errno, null)\n      })\n      return\n    }\n\n    while (filepath.endsWith(path.sep)) filepath = filepath.slice(0, -1)\n    const i = filepath.lastIndexOf(path.sep)\n    if (i <= 0) return cb(err, err.errno, null)\n\n    mkdirRecursive(filepath.slice(0, i), mode, function (err) {\n      if (err) return cb(err, err.errno, null)\n\n      mkdir(filepath, { mode }, function (err) {\n        if (err === null) return cb(null, 0, null)\n\n        stat(filepath, function (e, st) {\n          if (e) return cb(e, e.errno, null)\n          if (st.isDirectory()) return cb(null, 0, null)\n          cb(err, err.errno, null)\n        })\n      })\n    })\n  })\n}\n\nfunction mkdir(filepath, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = { mode: 0o777 }\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'number') opts = { mode: opts }\n  else if (!opts) opts = {}\n\n  const mode = typeof opts.mode === 'number' ? opts.mode : 0o777\n\n  if (opts.recursive)\n    return mkdirRecursive(filepath.replace(/\\//g, path.sep), mode, cb)\n\n  const req = getReq()\n  req.callback = cb\n  binding.mkdir(req.handle, filepath, mode)\n}\n\nfunction mkdirRecursiveSync(filepath, mode) {\n  try {\n    mkdirSync(filepath, { mode })\n  } catch (err) {\n    if (err.code !== 'ENOENT' && statSync(filepath).isDirectory()) {\n      return\n    }\n\n    while (filepath.endsWith(path.sep)) filepath = filepath.slice(0, -1)\n    const i = filepath.lastIndexOf(path.sep)\n    if (i <= 0) throw err\n\n    mkdirRecursiveSync(filepath.slice(0, i), { mode })\n\n    try {\n      mkdirSync(filepath, { mode })\n    } catch (err) {\n      if (statSync(filepath).isDirectory()) {\n        return\n      }\n\n      throw err\n    }\n  }\n}\n\nfunction mkdirSync(filepath, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'number') opts = { mode: opts }\n  else if (!opts) opts = {}\n\n  const mode = typeof opts.mode === 'number' ? opts.mode : 0o777\n\n  if (opts.recursive)\n    return mkdirRecursiveSync(filepath.replace(/\\//g, path.sep), mode)\n\n  binding.mkdirSync(filepath, mode)\n}\n\nfunction rmdir(filepath, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  const req = getReq()\n  req.callback = cb\n  binding.rmdir(req.handle, filepath)\n}\n\nfunction rmdirSync(filepath) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  binding.rmdirSync(filepath)\n}\n\nfunction rmRecursive(filepath, opts, cb) {\n  rmdir(filepath, function (err) {\n    if (err === null) return cb(null)\n\n    if (err.code !== 'ENOTEMPTY') return cb(err)\n\n    readdir(filepath, function (err, files) {\n      if (err) return cb(err)\n\n      if (files.length === 0) return rmdir(filepath, cb)\n\n      let missing = files.length\n      let done = false\n\n      for (const file of files) {\n        rm(filepath + path.sep + file, opts, function (err) {\n          if (done) return\n\n          if (err) {\n            done = true\n            return cb(err)\n          }\n\n          if (--missing === 0) rmdir(filepath, cb)\n        })\n      }\n    })\n  })\n}\n\nfunction rm(filepath, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (!opts) opts = {}\n\n  lstat(filepath, function (err, st) {\n    if (err) {\n      return cb(err.code === 'ENOENT' && opts.force ? null : err)\n    }\n\n    if (st.isDirectory()) {\n      if (opts.recursive) return rmRecursive(filepath, opts, cb)\n\n      const err = new Error('is a directory')\n      err.code = 'EISDIR'\n      return cb(err)\n    }\n\n    unlink(filepath, cb)\n  })\n}\n\nfunction rmRecursiveSync(filepath, opts) {\n  try {\n    rmdirSync(filepath)\n  } catch (err) {\n    if (err.code !== 'ENOTEMPTY') throw err\n\n    const files = readdirSync(filepath)\n\n    for (const file of files) {\n      rmSync(filepath + path.sep + file, opts)\n    }\n\n    rmdirSync(filepath)\n  }\n}\n\nfunction rmSync(filepath, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (!opts) opts = {}\n\n  try {\n    const st = lstatSync(filepath)\n\n    if (st.isDirectory()) {\n      if (opts.recursive) return rmRecursiveSync(filepath, opts)\n\n      const err = new Error('is a directory')\n      err.code = 'EISDIR'\n      throw err\n    }\n\n    unlinkSync(filepath)\n  } catch (err) {\n    if (err.code !== 'ENOENT' || !opts.force) throw err\n  }\n}\n\nfunction unlink(filepath, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  const req = getReq()\n  req.callback = cb\n  binding.unlink(req.handle, filepath)\n}\n\nfunction unlinkSync(filepath) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  binding.unlinkSync(filepath)\n}\n\nfunction rename(src, dst, cb) {\n  if (typeof src !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' + typeof src + ' (' + src + ')'\n    )\n  }\n\n  if (typeof dst !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' + typeof dst + ' (' + dst + ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  const req = getReq()\n  req.callback = cb\n  binding.rename(req.handle, src, dst)\n}\n\nfunction renameSync(src, dst) {\n  if (typeof src !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' + typeof src + ' (' + src + ')'\n    )\n  }\n\n  if (typeof dst !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' + typeof dst + ' (' + dst + ')'\n    )\n  }\n\n  binding.renameSync(src, dst)\n}\n\nfunction copyFile(src, dst, mode, cb) {\n  if (typeof mode === 'function') {\n    cb = mode\n    mode = 0\n  }\n\n  if (typeof src !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' + typeof src + ' (' + src + ')'\n    )\n  }\n\n  if (typeof dst !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' + typeof dst + ' (' + dst + ')'\n    )\n  }\n\n  const req = getReq()\n  req.callback = cb\n  binding.copyfile(req.handle, src, dst, mode)\n}\n\nfunction copyFileSync(src, dst, mode = 0) {\n  if (typeof src !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' + typeof src + ' (' + src + ')'\n    )\n  }\n\n  if (typeof dst !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' + typeof dst + ' (' + dst + ')'\n    )\n  }\n\n  binding.copyfileSync(src, dst, mode)\n}\n\nfunction realpath(filepath, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const { encoding = 'utf8' } = opts\n\n  const data = Buffer.allocUnsafe(binding.sizeofFSPath)\n\n  const req = getReq()\n\n  req.callback = function (err, _) {\n    if (err) return cb(err, null)\n    let path = data.subarray(0, data.indexOf(0))\n    if (encoding !== 'buffer') path = path.toString(encoding)\n    cb(null, path)\n  }\n\n  binding.realpath(req.handle, filepath, data)\n}\n\nfunction realpathSync(filepath, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const { encoding = 'utf8' } = opts\n\n  const data = Buffer.allocUnsafe(binding.sizeofFSPath)\n\n  binding.realpathSync(filepath, data)\n\n  filepath = data.subarray(0, data.indexOf(0))\n  if (encoding !== 'buffer') filepath = filepath.toString(encoding)\n  return filepath\n}\n\nfunction readlink(filepath, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const { encoding = 'utf8' } = opts\n\n  const data = Buffer.allocUnsafe(binding.sizeofFSPath)\n\n  const req = getReq()\n\n  req.callback = function (err, _) {\n    if (err) return cb(err, null)\n    let path = data.subarray(0, data.indexOf(0))\n    if (encoding !== 'buffer') path = path.toString(encoding)\n    cb(null, path)\n  }\n\n  binding.readlink(req.handle, filepath, data)\n}\n\nfunction readlinkSync(filepath, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const { encoding = 'utf8' } = opts\n\n  const data = Buffer.allocUnsafe(binding.sizeofFSPath)\n\n  binding.readlinkSync(filepath, data)\n\n  filepath = data.subarray(0, data.indexOf(0))\n  if (encoding !== 'buffer') filepath = filepath.toString(encoding)\n  return filepath\n}\n\nfunction normalizeSymlinkTarget(target, type, filepath) {\n  if (isWindows) {\n    if (type === 'junction') target = path.resolve(filepath, '..', target)\n\n    if (path.isAbsolute(target)) return path.toNamespacedPath(target)\n\n    return target.replace(/\\//g, path.sep)\n  }\n\n  return target\n}\n\nfunction symlink(target, filepath, type, cb) {\n  if (typeof target !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Target must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof type === 'function') {\n    cb = type\n    type = null\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof type === 'string') {\n    switch (type) {\n      case 'file':\n        type = 0\n        break\n      case 'dir':\n        type = constants.UV_FS_SYMLINK_DIR\n        break\n      case 'junction':\n        type = constants.UV_FS_SYMLINK_JUNCTION\n        break\n      default:\n        throw typeError(\n          'ERR_FS_INVALID_SYMLINK_TYPE',\n          'Symlink type must be one of \"dir\", \"file\", or \"junction\". Received \"' +\n            type +\n            '\"'\n        )\n    }\n  } else if (typeof type !== 'number') {\n    if (isWindows) {\n      target = path.resolve(filepath, '..', target)\n\n      stat(target, (err, st) => {\n        type =\n          err === null && st.isDirectory()\n            ? constants.UV_FS_SYMLINK_DIR\n            : constants.UV_FS_SYMLINK_JUNCTION\n\n        symlink(target, filepath, type, cb)\n      })\n\n      return\n    }\n\n    type = 0\n  }\n\n  const req = getReq()\n  req.callback = cb\n  binding.symlink(\n    req.handle,\n    normalizeSymlinkTarget(target),\n    path.toNamespacedPath(filepath),\n    type\n  )\n}\n\nfunction symlinkSync(target, filepath, type) {\n  if (typeof target !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Target must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof type === 'string') {\n    switch (type) {\n      case 'file':\n        type = 0\n        break\n      case 'dir':\n        type = constants.UV_FS_SYMLINK_DIR\n        break\n      case 'junction':\n        type = constants.UV_FS_SYMLINK_JUNCTION\n        break\n      default:\n        throw typeError(\n          'ERR_FS_INVALID_SYMLINK_TYPE',\n          'Symlink type must be one of \"dir\", \"file\", or \"junction\". Received \"' +\n            type +\n            '\"'\n        )\n    }\n  } else if (typeof type !== 'number') {\n    if (isWindows) {\n      target = path.resolve(filepath, '..', target)\n\n      type = statSync(target).isDirectory()\n        ? constants.UV_FS_SYMLINK_DIR\n        : constants.UV_FS_SYMLINK_JUNCTION\n    } else {\n      type = 0\n    }\n  }\n\n  binding.symlinkSync(\n    normalizeSymlinkTarget(target),\n    path.toNamespacedPath(filepath),\n    type\n  )\n}\n\nfunction opendir(filepath, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const data = Buffer.allocUnsafe(binding.sizeofFSDir)\n\n  const req = getReq()\n\n  req.callback = function (err, _) {\n    if (err) return cb(err, null)\n    cb(null, new Dir(filepath, data, opts))\n  }\n\n  binding.opendir(req.handle, filepath, data)\n}\n\nfunction opendirSync(filepath, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const data = Buffer.allocUnsafe(binding.sizeofFSDir)\n  binding.opendirSync(filepath, data)\n  return new Dir(filepath, data, opts)\n}\n\nfunction readdir(filepath, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const { withFileTypes = false } = opts\n\n  opendir(filepath, opts, async (err, dir) => {\n    if (err) return cb(err, null)\n    const result = []\n    for await (const entry of dir) {\n      result.push(withFileTypes ? entry : entry.name)\n    }\n    cb(null, result)\n  })\n}\n\nfunction readdirSync(filepath, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const { withFileTypes = false } = opts\n\n  const dir = opendirSync(filepath, opts)\n  const result = []\n\n  while (true) {\n    const entry = dir.readSync()\n    if (entry === null) break\n    result.push(withFileTypes ? entry : entry.name)\n  }\n\n  return result\n}\n\nfunction readFile(filepath, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const { encoding = 'buffer' } = opts\n\n  open(filepath, opts.flag || 'r', function (err, fd) {\n    if (err) return cb(err)\n\n    fstat(fd, function (err, st) {\n      if (err) return closeAndError(err)\n\n      let buffer = Buffer.allocUnsafe(st.size)\n      let len = 0\n\n      read(fd, buffer, loop)\n\n      function loop(err, r) {\n        if (err) return closeAndError(err)\n        len += r\n        if (r === 0 || len === buffer.byteLength) return done()\n        read(fd, buffer.subarray(len), loop)\n      }\n\n      function done() {\n        if (len !== buffer.byteLength) buffer = buffer.subarray(0, len)\n        close(fd, function (err) {\n          if (err) return cb(err)\n          if (encoding !== 'buffer') buffer = buffer.toString(encoding)\n          cb(null, buffer)\n        })\n      }\n    })\n\n    function closeAndError(err) {\n      close(fd, function () {\n        cb(err)\n      })\n    }\n  })\n}\n\nfunction readFileSync(filepath, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const { encoding = 'buffer' } = opts\n\n  const fd = openSync(filepath, opts.flag || 'r')\n\n  try {\n    const st = fstatSync(fd)\n\n    let buffer = Buffer.allocUnsafe(st.size)\n    let len = 0\n\n    while (true) {\n      const r = readSync(fd, len ? buffer.subarray(len) : buffer)\n      len += r\n      if (r === 0 || len === buffer.byteLength) break\n    }\n\n    if (len !== buffer.byteLength) buffer = buffer.subarray(0, len)\n    if (encoding !== 'buffer') buffer = buffer.toString(encoding)\n    return buffer\n  } finally {\n    try {\n      closeSync(fd)\n    } catch {}\n  }\n}\n\nfunction writeFile(filepath, data, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (\n    typeof data !== 'string' &&\n    !Buffer.isBuffer(data) &&\n    !ArrayBuffer.isView(data)\n  ) {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Data must be a string or buffer. Received type ' + typeof data\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  if (typeof data === 'string') data = Buffer.from(data, opts.encoding)\n\n  open(filepath, opts.flag || 'w', opts.mode || 0o666, function (err, fd) {\n    if (err) return cb(err)\n\n    write(fd, data, loop)\n\n    function loop(err, w) {\n      if (err) return closeAndError(err)\n      if (w === data.byteLength) return done()\n      write(fd, data.subarray(w), loop)\n    }\n\n    function done() {\n      close(fd, function (err) {\n        if (err) return cb(err)\n        return cb(null)\n      })\n    }\n\n    function closeAndError(err) {\n      close(fd, function () {\n        cb(err)\n      })\n    }\n  })\n}\n\nfunction writeFileSync(filepath, data, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (\n    typeof data !== 'string' &&\n    !Buffer.isBuffer(data) &&\n    !ArrayBuffer.isView(data)\n  ) {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Data must be a string or buffer. Received type ' + typeof data\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  if (typeof data === 'string') data = Buffer.from(data, opts.encoding)\n\n  const fd = openSync(filepath, opts.flag || 'w', opts.mode)\n\n  try {\n    let len = 0\n\n    while (true) {\n      len += writeSync(fd, len ? data.subarray(len) : data)\n      if (len === data.byteLength) break\n    }\n  } finally {\n    try {\n      closeSync(fd)\n    } catch {}\n  }\n}\n\nfunction appendFile(filepath, data, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (\n    typeof data !== 'string' &&\n    !Buffer.isBuffer(data) &&\n    !ArrayBuffer.isView(data)\n  ) {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Data must be a string or buffer. Received type ' + typeof data\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  opts = { ...opts }\n\n  if (!opts.flags) opts.flag = 'a'\n\n  return writeFile(filepath, data, opts, cb)\n}\n\nfunction appendFileSync(filepath, data, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (\n    typeof data !== 'string' &&\n    !Buffer.isBuffer(data) &&\n    !ArrayBuffer.isView(data)\n  ) {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Data must be a string or buffer. Received type ' + typeof data\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  opts = { ...opts }\n\n  if (!opts.flags) opts.flag = 'a'\n\n  return writeFileSync(filepath, data, opts)\n}\n\nfunction watch(filepath, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const watcher = new Watcher(filepath, opts)\n  if (cb) watcher.on('change', cb)\n  return watcher\n}\n\nclass Stats {\n  constructor(\n    dev,\n    mode,\n    nlink,\n    uid,\n    gid,\n    rdev,\n    blksize,\n    ino,\n    size,\n    blocks,\n    atimeMs,\n    mtimeMs,\n    ctimeMs,\n    birthtimeMs\n  ) {\n    this.dev = dev\n    this.mode = mode\n    this.nlink = nlink\n    this.uid = uid\n    this.gid = gid\n    this.rdev = rdev\n    this.blksize = blksize\n    this.ino = ino\n    this.size = size\n    this.blocks = blocks\n    this.atimeMs = atimeMs\n    this.mtimeMs = mtimeMs\n    this.ctimeMs = ctimeMs\n    this.birthtimeMs = birthtimeMs\n    this.atime = new Date(atimeMs)\n    this.mtime = new Date(mtimeMs)\n    this.ctime = new Date(ctimeMs)\n    this.birthtime = new Date(birthtimeMs)\n  }\n\n  isDirectory() {\n    return (this.mode & constants.S_IFMT) === constants.S_IFDIR\n  }\n\n  isFile() {\n    return (this.mode & constants.S_IFMT) === constants.S_IFREG\n  }\n\n  isBlockDevice() {\n    return (this.mode & constants.S_IFMT) === constants.S_IFBLK\n  }\n\n  isCharacterDevice() {\n    return (this.mode & constants.S_IFCHR) === constants.S_IFCHR\n  }\n\n  isFIFO() {\n    return (this.mode & constants.S_IFMT) === constants.S_IFIFO\n  }\n\n  isSymbolicLink() {\n    return (this.mode & constants.S_IFMT) === constants.S_IFLNK\n  }\n\n  isSocket() {\n    return (this.mode & constants.S_IFMT) === constants.S_IFSOCK\n  }\n}\n\nclass Dir {\n  constructor(path, handle, opts = {}) {\n    const { encoding = 'utf8', bufferSize = 32 } = opts\n\n    this._handle = handle\n    this._dirents = Buffer.allocUnsafe(binding.sizeofFSDirent * bufferSize)\n    this._encoding = encoding\n    this._buffer = []\n    this._ended = false\n\n    this.path = path\n  }\n\n  read(cb) {\n    if (!cb) return promisify(this.read.bind(this))\n\n    if (this._buffer.length)\n      return queueMicrotask(() => cb(null, this._buffer.shift()))\n    if (this._ended) return queueMicrotask(() => cb(null, null))\n\n    const data = []\n    const req = getReq()\n\n    req.callback = (err, _) => {\n      if (err) return cb(err, null)\n      if (data.length === 0) this._ended = true\n      else {\n        for (const entry of data) {\n          let name = Buffer.from(entry.name)\n          if (this._encoding !== 'buffer') name = name.toString(this._encoding)\n          this._buffer.push(new Dirent(this.path, name, entry.type))\n        }\n      }\n\n      if (this._ended) return cb(null, null)\n      cb(null, this._buffer.shift())\n    }\n\n    binding.readdir(req.handle, this._handle, this._dirents, data)\n  }\n\n  readSync() {\n    if (this._buffer.length) return this._buffer.shift()\n    if (this._ended) return null\n\n    const data = []\n\n    binding.readdirSync(this._handle, this._dirents, data)\n\n    if (data.length === 0) this._ended = true\n    else {\n      for (const entry of data) {\n        let name = Buffer.from(entry.name)\n        if (this._encoding !== 'buffer') name = name.toString(this._encoding)\n        this._buffer.push(new Dirent(this.path, name, entry.type))\n      }\n    }\n\n    if (this._ended) return null\n    return this._buffer.shift()\n  }\n\n  close(cb) {\n    if (!cb) return promisify(this.close.bind(this))\n\n    const req = getReq()\n\n    req.callback = (err, _) => {\n      this._handle = null\n      cb(err)\n    }\n\n    binding.closedir(req.handle, this._handle)\n  }\n\n  closeSync() {\n    binding.closedirSync(this._handle)\n    this._handle = null\n  }\n\n  [Symbol.iterator]() {\n    return {\n      next: () => {\n        if (this._buffer.length) {\n          return { done: false, value: this._buffer.shift() }\n        }\n\n        if (this._ended) {\n          return { done: true }\n        }\n\n        const entry = this.readSync()\n\n        if (entry) {\n          return { done: false, value: entry }\n        }\n\n        this.closeSync()\n\n        return { done: true }\n      }\n    }\n  }\n\n  [Symbol.asyncIterator]() {\n    return {\n      next: () =>\n        new Promise((resolve, reject) => {\n          if (this._buffer.length) {\n            return resolve({ done: false, value: this._buffer.shift() })\n          }\n\n          if (this._ended) {\n            return resolve({ done: true })\n          }\n\n          this.read((err, entry) => {\n            if (err) return reject(err)\n\n            if (entry) {\n              return resolve({ done: false, value: entry })\n            }\n\n            this.close((err) => (err ? reject(err) : resolve({ done: true })))\n          })\n        })\n    }\n  }\n}\n\nclass Dirent {\n  constructor(path, name, type) {\n    this.path = path\n    this.name = name\n    this.type = type\n  }\n\n  isFile() {\n    return this.type === constants.UV_DIRENT_FILE\n  }\n\n  isDirectory() {\n    return this.type === constants.UV_DIRENT_DIR\n  }\n\n  isSymbolicLink() {\n    return this.type === constants.UV_DIRENT_LINK\n  }\n\n  isFIFO() {\n    return this.type === constants.UV_DIRENT_FIFO\n  }\n\n  isSocket() {\n    return this.type === constants.UV_DIRENT_SOCKET\n  }\n\n  isCharacterDevice() {\n    return this.type === constants.UV_DIRENT_CHAR\n  }\n\n  isBlockDevice() {\n    return this.type === constants.UV_DIRENT_BLOCK\n  }\n}\n\nclass FileWriteStream extends Writable {\n  constructor(path, opts = {}) {\n    super({ map })\n\n    this.path = path\n    this.fd = 0\n    this.flags = opts.flags || 'w'\n    this.mode = opts.mode || 0o666\n  }\n\n  _open(cb) {\n    open(this.path, this.flags, this.mode, (err, fd) => {\n      if (err) return cb(err)\n      this.fd = fd\n      cb(null)\n    })\n  }\n\n  _writev(batch, cb) {\n    writev(\n      this.fd,\n      batch.map(({ chunk }) => chunk),\n      cb\n    )\n  }\n\n  _destroy(err, cb) {\n    if (!this.fd) return cb(err)\n    close(this.fd, () => cb(err))\n  }\n}\n\nclass FileReadStream extends Readable {\n  constructor(path, opts = {}) {\n    super()\n\n    this.path = path\n    this.fd = 0\n\n    this._offset = opts.start || 0\n    this._missing = 0\n\n    if (opts.length) {\n      this._missing = opts.length\n    } else if (typeof opts.end === 'number') {\n      this._missing = opts.end - this._offset + 1\n    } else {\n      this._missing = -1\n    }\n  }\n\n  _open(cb) {\n    open(this.path, constants.O_RDONLY, (err, fd) => {\n      if (err) return cb(err)\n\n      const onerror = (err) => close(fd, () => cb(err))\n\n      fstat(fd, (err, st) => {\n        if (err) return onerror(err)\n        if (!st.isFile())\n          return onerror(new Error(this.path + ' is not a file'))\n\n        this.fd = fd\n        if (this._missing === -1) this._missing = st.size\n\n        if (st.size < this._offset) {\n          this._offset = st.size\n          this._missing = 0\n          return cb(null)\n        }\n        if (st.size < this._offset + this._missing) {\n          this._missing = st.size - this._offset\n          return cb(null)\n        }\n\n        cb(null)\n      })\n    })\n  }\n\n  _read(size) {\n    if (!this._missing) {\n      this.push(null)\n      return\n    }\n\n    const data = Buffer.allocUnsafe(Math.min(this._missing, size))\n\n    read(this.fd, data, 0, data.byteLength, this._offset, (err, read) => {\n      if (err) return this.destroy(err)\n\n      if (!read) {\n        this.push(null)\n        return\n      }\n\n      if (this._missing < read) read = this._missing\n      this.push(data.subarray(0, read))\n      this._missing -= read\n      this._offset += read\n      if (!this._missing) this.push(null)\n    })\n  }\n\n  _destroy(err, cb) {\n    if (!this.fd) return cb(err)\n    close(this.fd, () => cb(err))\n  }\n}\n\nclass Watcher extends EventEmitter {\n  constructor(path, opts) {\n    const { persistent = true, recursive = false, encoding = 'utf8' } = opts\n\n    super()\n\n    this._closed = false\n    this._encoding = encoding\n    this._handle = binding.watcherInit(\n      path,\n      recursive,\n      this,\n      this._onevent,\n      this._onclose\n    )\n\n    if (!persistent) this.unref()\n  }\n\n  _onevent(err, events, filename) {\n    if (err) {\n      this.close()\n      this.emit('error', err)\n    } else {\n      const path =\n        this._encoding === 'buffer'\n          ? Buffer.from(filename)\n          : Buffer.from(filename).toString(this._encoding)\n\n      if (events & binding.UV_RENAME) {\n        this.emit('change', 'rename', path)\n      }\n\n      if (events & binding.UV_CHANGE) {\n        this.emit('change', 'change', path)\n      }\n    }\n  }\n\n  _onclose() {\n    this._handle = null\n\n    this.emit('close')\n  }\n\n  close() {\n    if (this._closed) return\n    this._closed = true\n\n    binding.watcherClose(this._handle)\n  }\n\n  ref() {\n    if (this._handle) binding.watcherRef(this._handle)\n    return this\n  }\n\n  unref() {\n    if (this._handle) binding.watcherUnref(this._handle)\n    return this\n  }\n\n  [Symbol.asyncIterator]() {\n    const buffer = []\n    let done = false\n    let error = null\n    let next = null\n\n    this.on('change', (eventType, filename) => {\n      if (next) {\n        next.resolve({ done: false, value: { eventType, filename } })\n        next = null\n      } else {\n        buffer.push({ eventType, filename })\n      }\n    })\n      .on('error', (err) => {\n        done = true\n        error = err\n\n        if (next) {\n          next.reject(error)\n          next = null\n        }\n      })\n      .on('close', () => {\n        done = true\n\n        if (next) {\n          next.resolve({ done })\n          next = null\n        }\n      })\n\n    return {\n      next: () =>\n        new Promise((resolve, reject) => {\n          if (error) return reject(error)\n\n          if (buffer.length)\n            return resolve({ done: false, value: buffer.shift() })\n\n          if (done) return resolve({ done })\n\n          next = { resolve, reject }\n        })\n    }\n  }\n}\n\nexports.promises = {}\n\nfunction typeError(code, message) {\n  const error = new TypeError(message)\n  error.code = code\n  return error\n}\n\nfunction noop() {}\n\nexports.access = access\nexports.appendFile = appendFile\nexports.chmod = chmod\nexports.close = close\nexports.copyFile = copyFile\nexports.exists = exists\nexports.fchmod = fchmod\nexports.fstat = fstat\nexports.ftruncate = ftruncate\nexports.lstat = lstat\nexports.mkdir = mkdir\nexports.open = open\nexports.opendir = opendir\nexports.read = read\nexports.readFile = readFile\nexports.readdir = readdir\nexports.readlink = readlink\nexports.readv = readv\nexports.realpath = realpath\nexports.rename = rename\nexports.rm = rm\nexports.rmdir = rmdir\nexports.stat = stat\nexports.symlink = symlink\nexports.unlink = unlink\nexports.watch = watch\nexports.write = write\nexports.writeFile = writeFile\nexports.writev = writev\n\nexports.accessSync = accessSync\nexports.appendFileSync = appendFileSync\nexports.chmodSync = chmodSync\nexports.closeSync = closeSync\nexports.copyFileSync = copyFileSync\nexports.existsSync = existsSync\nexports.fchmodSync = fchmodSync\nexports.fstatSync = fstatSync\nexports.lstatSync = lstatSync\nexports.mkdirSync = mkdirSync\nexports.openSync = openSync\nexports.opendirSync = opendirSync\nexports.readFileSync = readFileSync\nexports.readSync = readSync\nexports.readdirSync = readdirSync\nexports.readlinkSync = readlinkSync\nexports.realpathSync = realpathSync\nexports.renameSync = renameSync\nexports.rmSync = rmSync\nexports.rmdirSync = rmdirSync\nexports.statSync = statSync\nexports.symlinkSync = symlinkSync\nexports.unlinkSync = unlinkSync\nexports.writeFileSync = writeFileSync\nexports.writeSync = writeSync\n\nexports.promises.access = promisify(access)\nexports.promises.appendFile = promisify(appendFile)\nexports.promises.chmod = promisify(chmod)\nexports.promises.copyFile = promisify(copyFile)\nexports.promises.lstat = promisify(lstat)\nexports.promises.mkdir = promisify(mkdir)\nexports.promises.opendir = promisify(opendir)\nexports.promises.readFile = promisify(readFile)\nexports.promises.readdir = promisify(readdir)\nexports.promises.readlink = promisify(readlink)\nexports.promises.realpath = promisify(realpath)\nexports.promises.rename = promisify(rename)\nexports.promises.rm = promisify(rm)\nexports.promises.rmdir = promisify(rmdir)\nexports.promises.stat = promisify(stat)\nexports.promises.symlink = promisify(symlink)\nexports.promises.unlink = promisify(unlink)\nexports.promises.writeFile = promisify(writeFile)\n\nexports.promises.watch = watch // Already async iterable\n\nexports.Stats = Stats\nexports.Dir = Dir\nexports.Dirent = Dirent\nexports.Watcher = Watcher\n\nexports.ReadStream = FileReadStream\nexports.createReadStream = function createReadStream(path, opts) {\n  return new FileReadStream(path, opts)\n}\n\nexports.WriteStream = FileWriteStream\nexports.createWriteStream = function createWriteStream(path, opts) {\n  return new FileWriteStream(path, opts)\n}\n\nfunction promisify(fn) {\n  return function (...args) {\n    return new Promise((resolve, reject) => {\n      fn(...args, function (err, res) {\n        if (err) return reject(err)\n        resolve(res)\n      })\n    })\n  }\n}\n\nfunction map(data) {\n  return typeof data === 'string' ? Buffer.from(data) : data\n}\nconst binding = require('../binding')\n\nmodule.exports = {\n  O_RDWR: binding.O_RDWR,\n  O_RDONLY: binding.O_RDONLY,\n  O_WRONLY: binding.O_WRONLY,\n  O_CREAT: binding.O_CREAT,\n  O_TRUNC: binding.O_TRUNC,\n  O_APPEND: binding.O_APPEND,\n\n  F_OK: binding.F_OK || 0,\n  R_OK: binding.R_OK || 0,\n  W_OK: binding.W_OK || 0,\n  X_OK: binding.X_OK || 0,\n\n  S_IFMT: binding.S_IFMT,\n  S_IFREG: binding.S_IFREG,\n  S_IFDIR: binding.S_IFDIR,\n  S_IFCHR: binding.S_IFCHR,\n  S_IFLNK: binding.S_IFLNK,\n  S_IFBLK: binding.S_IFBLK || 0,\n  S_IFIFO: binding.S_IFIFO || 0,\n  S_IFSOCK: binding.S_IFSOCK || 0,\n\n  S_IRUSR: binding.S_IRUSR || 0,\n  S_IWUSR: binding.S_IWUSR || 0,\n  S_IXUSR: binding.S_IXUSR || 0,\n  S_IRGRP: binding.S_IRGRP || 0,\n  S_IWGRP: binding.S_IWGRP || 0,\n  S_IXGRP: binding.S_IXGRP || 0,\n  S_IROTH: binding.S_IROTH || 0,\n  S_IWOTH: binding.S_IWOTH || 0,\n  S_IXOTH: binding.S_IXOTH || 0,\n\n  UV_DIRENT_UNKNOWN: binding.UV_DIRENT_UNKNOWN,\n  UV_DIRENT_FILE: binding.UV_DIRENT_FILE,\n  UV_DIRENT_DIR: binding.UV_DIRENT_DIR,\n  UV_DIRENT_LINK: binding.UV_DIRENT_LINK,\n  UV_DIRENT_FIFO: binding.UV_DIRENT_FIFO,\n  UV_DIRENT_SOCKET: binding.UV_DIRENT_SOCKET,\n  UV_DIRENT_CHAR: binding.UV_DIRENT_CHAR,\n  UV_DIRENT_BLOCK: binding.UV_DIRENT_BLOCK,\n\n  COPYFILE_EXCL: binding.UV_FS_COPYFILE_EXCL,\n  COPYFILE_FICLONE: binding.UV_FS_COPYFILE_FICLONE,\n  COPYFILE_FICLONE_FORCE: binding.UV_FS_COPYFILE_FICLONE_FORCE,\n  UV_FS_SYMLINK_DIR: binding.UV_FS_SYMLINK_DIR,\n  UV_FS_SYMLINK_JUNCTION: binding.UV_FS_SYMLINK_JUNCTION\n}\n{\n  \"name\": \"bare-fs\",\n  \"version\": \"4.0.2\",\n  \"description\": \"Native file system for Javascript\",\n  \"exports\": {\n    \"./package\": \"./package.json\",\n    \".\": {\n      \"types\": \"./index.d.ts\",\n      \"default\": \"./index.js\"\n    },\n    \"./promises\": {\n      \"types\": \"./promises.d.ts\",\n      \"default\": \"./promises.js\"\n    },\n    \"./constants\": {\n      \"types\": \"./lib/constants.d.ts\",\n      \"default\": \"./lib/constants.js\"\n    }\n  },\n  \"files\": [\n    \"index.js\",\n    \"index.d.ts\",\n    \"promises.js\",\n    \"promises.d.ts\",\n    \"binding.c\",\n    \"binding.js\",\n    \"CMakeLists.txt\",\n    \"lib\",\n    \"prebuilds\"\n  ],\n  \"addon\": true,\n  \"scripts\": {\n    \"test\": \"prettier . --check && bare test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bare-fs.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bare-fs/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bare-fs#readme\",\n  \"engines\": {\n    \"bare\": \">=1.16.0\"\n  },\n  \"dependencies\": {\n    \"bare-events\": \"^2.5.4\",\n    \"bare-path\": \"^3.0.0\",\n    \"bare-stream\": \"^2.6.4\"\n  },\n  \"devDependencies\": {\n    \"bare-buffer\": \"^3.0.2\",\n    \"brittle\": \"^3.1.1\",\n    \"cmake-bare\": \"^1.1.7\",\n    \"prettier\": \"^3.4.1\",\n    \"prettier-config-standard\": \"^7.0.0\"\n  },\n  \"peerDependencies\": {\n    \"bare-buffer\": \"*\"\n  },\n  \"peerDependenciesMeta\": {\n    \"bare-buffer\": {\n      \"optional\": true\n    }\n  }\n}\nconst { satisfies } = require('bare-semver')\nconst errors = require('./lib/errors')\n\nmodule.exports = exports = function resolve(\n  specifier,\n  parentURL,\n  opts,\n  readPackage\n) {\n  if (typeof opts === 'function') {\n    readPackage = opts\n    opts = {}\n  } else if (typeof readPackage !== 'function') {\n    readPackage = defaultReadPackage\n  }\n\n  return {\n    *[Symbol.iterator]() {\n      const generator = exports.module(specifier, parentURL, opts)\n\n      let next = generator.next()\n\n      while (next.done !== true) {\n        const value = next.value\n\n        if (value.package) {\n          next = generator.next(readPackage(value.package))\n        } else {\n          next = generator.next(yield value.resolution)\n        }\n      }\n\n      return next.value\n    },\n\n    async *[Symbol.asyncIterator]() {\n      const generator = exports.module(specifier, parentURL, opts)\n\n      let next = generator.next()\n\n      while (next.done !== true) {\n        const value = next.value\n\n        if (value.package) {\n          next = generator.next(await readPackage(value.package))\n        } else {\n          next = generator.next(yield value.resolution)\n        }\n      }\n\n      return next.value\n    }\n  }\n}\n\nfunction defaultReadPackage() {\n  return null\n}\n\n// No resolution candidate was yielded\nconst UNRESOLVED = 0x0\n// At least 1 resolution candidate was yielded\nconst YIELDED = 0x1\n// At least 1 resolution candidate was yielded and resolved\nconst RESOLVED = YIELDED | 0x2\n\nexports.constants = {\n  UNRESOLVED,\n  YIELDED,\n  RESOLVED\n}\n\nexports.module = function* (specifier, parentURL, opts = {}) {\n  const { resolutions = null, imports = null } = opts\n\n  if (exports.startsWithWindowsDriveLetter(specifier)) {\n    specifier = '/' + specifier\n  }\n\n  let status\n\n  if (resolutions) {\n    status = yield* exports.preresolved(specifier, resolutions, parentURL, opts)\n\n    if (status) return status\n  }\n\n  status = yield* exports.url(specifier, parentURL, opts)\n\n  if (status) return status\n\n  status = yield* exports.packageImports(specifier, parentURL, opts)\n\n  if (status) return status\n\n  if (\n    specifier === '.' ||\n    specifier === '..' ||\n    specifier[0] === '/' ||\n    specifier[0] === '\\\\' ||\n    specifier.startsWith('./') ||\n    specifier.startsWith('.\\\\') ||\n    specifier.startsWith('../') ||\n    specifier.startsWith('..\\\\')\n  ) {\n    if (imports) {\n      status = yield* exports.packageImportsExports(\n        specifier,\n        imports,\n        parentURL,\n        true,\n        opts\n      )\n\n      if (status) return status\n    }\n\n    status = yield* exports.file(specifier, parentURL, false, opts)\n\n    if (status === RESOLVED) return status\n\n    return yield* exports.directory(specifier, parentURL, opts)\n  }\n\n  return yield* exports.package(specifier, parentURL, opts)\n}\n\nexports.url = function* (url, parentURL, opts = {}) {\n  const { imports = null } = opts\n\n  let resolution\n  try {\n    resolution = new URL(url)\n  } catch {\n    return UNRESOLVED\n  }\n\n  if (imports) {\n    const status = yield* exports.packageImportsExports(\n      resolution.href,\n      imports,\n      parentURL,\n      true,\n      opts\n    )\n\n    if (status) return status\n  }\n\n  if (resolution.protocol === 'node:') {\n    const specifier = resolution.pathname\n\n    if (\n      specifier === '.' ||\n      specifier === '..' ||\n      specifier[0] === '/' ||\n      specifier.startsWith('./') ||\n      specifier.startsWith('../')\n    ) {\n      throw errors.INVALID_MODULE_SPECIFIER(\n        `Module specifier '${url}' is not a valid package name`\n      )\n    }\n\n    return yield* exports.package(specifier, parentURL, opts)\n  }\n\n  const resolved = yield { resolution }\n\n  return resolved ? RESOLVED : YIELDED\n}\n\nexports.preresolved = function* (specifier, resolutions, parentURL, opts = {}) {\n  const imports = resolutions[parentURL.href]\n\n  if (typeof imports === 'object' && imports !== null) {\n    return yield* exports.packageImportsExports(\n      specifier,\n      imports,\n      parentURL,\n      true,\n      opts\n    )\n  }\n\n  return UNRESOLVED\n}\n\nexports.package = function* (packageSpecifier, parentURL, opts = {}) {\n  const { builtins = [] } = opts\n\n  if (packageSpecifier === '') {\n    throw errors.INVALID_MODULE_SPECIFIER(\n      `Module specifier '${packageSpecifier}' is not a valid package name`\n    )\n  }\n\n  let packageName\n\n  if (packageSpecifier[0] !== '@') {\n    packageName = packageSpecifier.split('/', 1).join()\n  } else {\n    if (!packageSpecifier.includes('/')) {\n      throw errors.INVALID_MODULE_SPECIFIER(\n        `Module specifier '${packageSpecifier}' is not a valid package name`\n      )\n    }\n\n    packageName = packageSpecifier.split('/', 2).join('/')\n  }\n\n  if (\n    packageName[0] === '.' ||\n    packageName.includes('\\\\') ||\n    packageName.includes('%')\n  ) {\n    throw errors.INVALID_MODULE_SPECIFIER(\n      `Module specifier '${packageSpecifier}' is not a valid package name`\n    )\n  }\n\n  let status\n\n  status = yield* exports.builtinTarget(packageSpecifier, null, builtins, opts)\n\n  if (status) return status\n\n  let packageSubpath = '.' + packageSpecifier.substring(packageName.length)\n\n  status = yield* exports.packageSelf(\n    packageName,\n    packageSubpath,\n    parentURL,\n    opts\n  )\n\n  if (status) return status\n\n  parentURL = new URL(parentURL.href)\n\n  do {\n    const packageURL = new URL('node_modules/' + packageName + '/', parentURL)\n\n    parentURL.pathname = parentURL.pathname.substring(\n      0,\n      parentURL.pathname.lastIndexOf('/')\n    )\n\n    const info = yield { package: new URL('package.json', packageURL) }\n\n    if (info) {\n      if (info.engines) exports.validateEngines(packageURL, info.engines, opts)\n\n      if (info.exports) {\n        return yield* exports.packageExports(\n          packageURL,\n          packageSubpath,\n          info.exports,\n          opts\n        )\n      }\n\n      if (packageSubpath === '.') {\n        if (typeof info.main === 'string' && info.main !== '') {\n          packageSubpath = info.main\n        } else {\n          return yield* exports.file('index', packageURL, true, opts)\n        }\n      }\n\n      status = yield* exports.file(packageSubpath, packageURL, false, opts)\n\n      if (status === RESOLVED) return status\n\n      return yield* exports.directory(packageSubpath, packageURL, opts)\n    }\n  } while (parentURL.pathname !== '' && parentURL.pathname !== '/')\n\n  return UNRESOLVED\n}\n\nexports.packageSelf = function* (\n  packageName,\n  packageSubpath,\n  parentURL,\n  opts = {}\n) {\n  for (const packageURL of exports.lookupPackageScope(parentURL, opts)) {\n    const info = yield { package: packageURL }\n\n    if (info) {\n      if (info.name !== packageName) return false\n\n      if (info.exports) {\n        return yield* exports.packageExports(\n          packageURL,\n          packageSubpath,\n          info.exports,\n          opts\n        )\n      }\n\n      if (packageSubpath === '.') {\n        if (typeof info.main === 'string' && info.main !== '') {\n          packageSubpath = info.main\n        } else {\n          return yield* exports.file('index', packageURL, true, opts)\n        }\n      }\n\n      const status = yield* exports.file(\n        packageSubpath,\n        packageURL,\n        false,\n        opts\n      )\n\n      if (status === RESOLVED) return status\n\n      return yield* exports.directory(packageSubpath, packageURL, opts)\n    }\n  }\n\n  return UNRESOLVED\n}\n\nexports.packageExports = function* (\n  packageURL,\n  subpath,\n  packageExports,\n  opts = {}\n) {\n  if (subpath === '.') {\n    let mainExport\n\n    if (typeof packageExports === 'string' || Array.isArray(packageExports)) {\n      mainExport = packageExports\n    } else if (typeof packageExports === 'object' && packageExports !== null) {\n      const keys = Object.keys(packageExports)\n\n      if (keys.some((key) => key.startsWith('.'))) {\n        if ('.' in packageExports) mainExport = packageExports['.']\n      } else {\n        mainExport = packageExports\n      }\n    }\n\n    if (mainExport) {\n      const status = yield* exports.packageTarget(\n        packageURL,\n        mainExport,\n        null,\n        false,\n        opts\n      )\n\n      if (status) return status\n    }\n  } else if (typeof packageExports === 'object' && packageExports !== null) {\n    const keys = Object.keys(packageExports)\n\n    if (keys.every((key) => key.startsWith('.'))) {\n      const status = yield* exports.packageImportsExports(\n        subpath,\n        packageExports,\n        packageURL,\n        false,\n        opts\n      )\n\n      if (status) return status\n    }\n  }\n\n  packageURL = new URL('package.json', packageURL)\n\n  throw errors.PACKAGE_PATH_NOT_EXPORTED(\n    `Package subpath '${subpath}' is not defined by \"exports\" in '${packageURL}'`\n  )\n}\n\nexports.packageImports = function* (specifier, parentURL, opts = {}) {\n  const { imports = null } = opts\n\n  if (specifier === '#' || specifier.startsWith('#/')) {\n    throw errors.INVALID_MODULE_SPECIFIER(\n      `Module specifier '${specifier}' is not a valid internal imports specifier`\n    )\n  }\n\n  for (const packageURL of exports.lookupPackageScope(parentURL, opts)) {\n    const info = yield { package: packageURL }\n\n    if (info) {\n      if (info.imports) {\n        const status = yield* exports.packageImportsExports(\n          specifier,\n          info.imports,\n          packageURL,\n          true,\n          opts\n        )\n\n        if (status) return status\n      }\n\n      if (specifier.startsWith('#')) {\n        throw errors.PACKAGE_IMPORT_NOT_DEFINED(\n          `Package import specifier '${specifier}' is not defined by \"imports\" in '${packageURL}'`\n        )\n      }\n\n      break\n    }\n  }\n\n  if (imports) {\n    const status = yield* exports.packageImportsExports(\n      specifier,\n      imports,\n      parentURL,\n      true,\n      opts\n    )\n\n    if (status) return status\n  }\n\n  return UNRESOLVED\n}\n\nexports.packageImportsExports = function* (\n  matchKey,\n  matchObject,\n  packageURL,\n  isImports,\n  opts = {}\n) {\n  if (matchKey in matchObject && !matchKey.includes('*')) {\n    const target = matchObject[matchKey]\n\n    return yield* exports.packageTarget(\n      packageURL,\n      target,\n      null,\n      isImports,\n      opts\n    )\n  }\n\n  const expansionKeys = Object.keys(matchObject)\n    .filter((key) => key.includes('*'))\n    .sort(exports.patternKeyCompare)\n\n  for (const expansionKey of expansionKeys) {\n    const patternIndex = expansionKey.indexOf('*')\n    const patternBase = expansionKey.substring(0, patternIndex)\n\n    if (matchKey.startsWith(patternBase) && matchKey !== patternBase) {\n      const patternTrailer = expansionKey.substring(patternIndex + 1)\n\n      if (\n        patternTrailer === '' ||\n        (matchKey.endsWith(patternTrailer) &&\n          matchKey.length >= expansionKey.length)\n      ) {\n        const target = matchObject[expansionKey]\n\n        const patternMatch = matchKey.substring(\n          patternBase.length,\n          matchKey.length - patternTrailer.length\n        )\n\n        return yield* exports.packageTarget(\n          packageURL,\n          target,\n          patternMatch,\n          isImports,\n          opts\n        )\n      }\n    }\n  }\n\n  return UNRESOLVED\n}\n\nexports.validateEngines = function validateEngines(\n  packageURL,\n  packageEngines,\n  opts = {}\n) {\n  const { engines = {} } = opts\n\n  for (const [engine, range] of Object.entries(packageEngines)) {\n    if (engine in engines) {\n      const version = engines[engine]\n\n      if (!satisfies(version, range)) {\n        packageURL = new URL('package.json', packageURL)\n\n        throw errors.UNSUPPORTED_ENGINE(\n          `Package not compatible with engine '${engine}' ${version}, requires range '${range}' defined by \"engines\" in '${packageURL}'`\n        )\n      }\n    }\n  }\n}\n\nexports.patternKeyCompare = function patternKeyCompare(keyA, keyB) {\n  const patternIndexA = keyA.indexOf('*')\n  const patternIndexB = keyB.indexOf('*')\n  const baseLengthA = patternIndexA === -1 ? keyA.length : patternIndexA + 1\n  const baseLengthB = patternIndexB === -1 ? keyB.length : patternIndexB + 1\n  if (baseLengthA > baseLengthB) return -1\n  if (baseLengthB > baseLengthA) return 1\n  if (patternIndexA === -1) return 1\n  if (patternIndexB === -1) return -1\n  if (keyA.length > keyB.length) return -1\n  if (keyB.length > keyA.length) return 1\n  return 0\n}\n\nexports.packageTarget = function* (\n  packageURL,\n  target,\n  patternMatch,\n  isImports,\n  opts = {}\n) {\n  const { conditions = [], matchedConditions = [] } = opts\n\n  if (typeof target === 'string') {\n    if (!target.startsWith('./') && !isImports) {\n      packageURL = new URL('package.json', packageURL)\n\n      throw errors.INVALID_PACKAGE_TARGET(\n        `Invalid target '${target}' defined by \"exports\" in '${packageURL}'`\n      )\n    }\n\n    if (patternMatch !== null) {\n      target = target.replaceAll('*', patternMatch)\n    }\n\n    const status = yield* exports.url(target, packageURL, opts)\n\n    if (status) return status\n\n    if (\n      target === '.' ||\n      target === '..' ||\n      target[0] === '/' ||\n      target.startsWith('./') ||\n      target.startsWith('../')\n    ) {\n      const resolved = yield { resolution: new URL(target, packageURL) }\n\n      return resolved ? RESOLVED : YIELDED\n    }\n\n    return yield* exports.package(target, packageURL, opts)\n  }\n\n  if (Array.isArray(target)) {\n    for (const targetValue of target) {\n      const status = yield* exports.packageTarget(\n        packageURL,\n        targetValue,\n        patternMatch,\n        isImports,\n        opts\n      )\n\n      if (status) return status\n    }\n  } else if (typeof target === 'object' && target !== null) {\n    let status = UNRESOLVED\n\n    for (const [condition, targetValue, subset] of exports.conditionMatches(\n      target,\n      conditions,\n      opts\n    )) {\n      matchedConditions.push(condition)\n\n      status |= yield* exports.packageTarget(\n        packageURL,\n        targetValue,\n        patternMatch,\n        isImports,\n        { ...opts, conditions: subset }\n      )\n\n      matchedConditions.pop()\n    }\n\n    if (status) return status\n  }\n\n  return UNRESOLVED\n}\n\nexports.builtinTarget = function* (\n  packageSpecifier,\n  packageVersion,\n  target,\n  opts = {}\n) {\n  const {\n    builtinProtocol = 'builtin:',\n    conditions = [],\n    matchedConditions = []\n  } = opts\n\n  if (typeof target === 'string') {\n    const targetParts = target.split('@')\n\n    let targetName\n    let targetVersion\n\n    if (target[0] !== '@') {\n      targetName = targetParts[0]\n      targetVersion = targetParts[1] || null\n    } else {\n      targetName = targetParts.slice(0, 2).join('@')\n      targetVersion = targetParts[2] || null\n    }\n\n    if (packageSpecifier === targetName) {\n      if (packageVersion === null && targetVersion === null) {\n        const resolved = yield {\n          resolution: new URL(builtinProtocol + packageSpecifier)\n        }\n\n        return resolved ? RESOLVED : YIELDED\n      }\n\n      let version = null\n\n      if (packageVersion === null) {\n        version = targetVersion\n      } else if (targetVersion === null || packageVersion === targetVersion) {\n        version = packageVersion\n      }\n\n      if (version !== null) {\n        const resolved = yield {\n          resolution: new URL(\n            builtinProtocol + packageSpecifier + '@' + version\n          )\n        }\n\n        return resolved ? RESOLVED : YIELDED\n      }\n    }\n  } else if (Array.isArray(target)) {\n    for (const targetValue of target) {\n      const status = yield* exports.builtinTarget(\n        packageSpecifier,\n        packageVersion,\n        targetValue,\n        opts\n      )\n\n      if (status) return status\n    }\n  } else if (typeof target === 'object' && target !== null) {\n    let status = UNRESOLVED\n\n    for (const [condition, targetValue, subset] of exports.conditionMatches(\n      target,\n      conditions,\n      opts\n    )) {\n      matchedConditions.push(condition)\n\n      status |= yield* exports.builtinTarget(\n        packageSpecifier,\n        packageVersion,\n        targetValue,\n        { ...opts, conditions: subset }\n      )\n\n      matchedConditions.pop()\n    }\n\n    if (status) return status\n  }\n\n  return UNRESOLVED\n}\n\nexports.conditionMatches = function* conditionMatches(\n  target,\n  conditions,\n  opts = {}\n) {\n  if (conditions.every((condition) => typeof condition === 'string')) {\n    const keys = Object.keys(target)\n\n    for (const condition of keys) {\n      if (condition === 'default' || conditions.includes(condition)) {\n        yield [condition, target[condition], conditions]\n\n        return true\n      }\n    }\n\n    return false\n  }\n\n  let yielded = false\n\n  for (const subset of conditions) {\n    if (yield* conditionMatches(target, subset, opts)) {\n      yielded = true\n    }\n  }\n\n  return yielded\n}\n\nexports.lookupPackageScope = function* lookupPackageScope(url, opts = {}) {\n  const { resolutions = null } = opts\n\n  if (resolutions) {\n    for (const { resolution } of exports.preresolved(\n      '#package',\n      resolutions,\n      url,\n      opts\n    )) {\n      if (resolution) return yield resolution\n    }\n\n    // Internal preresolution path, do not depend on this! It will be removed without\n    // warning.\n    for (const { resolution } of exports.preresolved(\n      'bare:package',\n      resolutions,\n      url,\n      opts\n    )) {\n      if (resolution) return yield resolution\n    }\n  }\n\n  const scopeURL = new URL(url.href)\n\n  do {\n    if (scopeURL.pathname.endsWith('/node_modules')) break\n\n    yield new URL('package.json', scopeURL)\n\n    scopeURL.pathname = scopeURL.pathname.substring(\n      0,\n      scopeURL.pathname.lastIndexOf('/')\n    )\n\n    if (\n      scopeURL.pathname.length === 3 &&\n      exports.isWindowsDriveLetter(scopeURL.pathname.substring(1))\n    ) {\n      break\n    }\n  } while (scopeURL.pathname !== '' && scopeURL.pathname !== '/')\n}\n\nexports.file = function* (filename, parentURL, isIndex, opts = {}) {\n  if (\n    filename === '.' ||\n    filename === '..' ||\n    filename[filename.length - 1] === '/' ||\n    filename[filename.length - 1] === '\\\\'\n  ) {\n    return UNRESOLVED\n  }\n\n  if (parentURL.protocol === 'file:' && /%2f|%5c/i.test(filename)) {\n    throw errors.INVALID_MODULE_SPECIFIER(\n      `Module specifier '${filename}' is invalid`\n    )\n  }\n\n  const { extensions = [] } = opts\n\n  let status = UNRESOLVED\n\n  if (!isIndex) {\n    if (yield { resolution: new URL(filename, parentURL) }) {\n      return RESOLVED\n    }\n\n    status = YIELDED\n  }\n\n  for (const ext of extensions) {\n    if (yield { resolution: new URL(filename + ext, parentURL) }) {\n      return RESOLVED\n    }\n\n    status = YIELDED\n  }\n\n  return status\n}\n\nexports.directory = function* (dirname, parentURL, opts = {}) {\n  let directoryURL\n\n  if (\n    dirname[dirname.length - 1] === '/' ||\n    dirname[dirname.length - 1] === '\\\\'\n  ) {\n    directoryURL = new URL(dirname, parentURL)\n  } else {\n    directoryURL = new URL(dirname + '/', parentURL)\n  }\n\n  const info = yield { package: new URL('package.json', directoryURL) }\n\n  if (info) {\n    if (info.exports) {\n      return yield* exports.packageExports(\n        directoryURL,\n        '.',\n        info.exports,\n        opts\n      )\n    }\n\n    if (typeof info.main === 'string' && info.main !== '') {\n      const status = yield* exports.file(info.main, directoryURL, false, opts)\n\n      if (status === RESOLVED) return status\n\n      return yield* exports.directory(info.main, directoryURL, opts)\n    }\n  }\n\n  return yield* exports.file('index', directoryURL, true, opts)\n}\n\n// https://infra.spec.whatwg.org/#ascii-upper-alpha\nfunction isASCIIUpperAlpha(c) {\n  return c >= 0x41 && c <= 0x5a\n}\n\n// https://infra.spec.whatwg.org/#ascii-lower-alpha\nfunction isASCIILowerAlpha(c) {\n  return c >= 0x61 && c <= 0x7a\n}\n\n// https://infra.spec.whatwg.org/#ascii-alpha\nfunction isASCIIAlpha(c) {\n  return isASCIIUpperAlpha(c) || isASCIILowerAlpha(c)\n}\n\n// https://url.spec.whatwg.org/#windows-drive-letter\nexports.isWindowsDriveLetter = function isWindowsDriveLetter(input) {\n  return (\n    input.length >= 2 &&\n    isASCIIAlpha(input.charCodeAt(0)) &&\n    (input.charCodeAt(1) === 0x3a || input.charCodeAt(1) === 0x7c)\n  )\n}\n\n// https://url.spec.whatwg.org/#start-with-a-windows-drive-letter\nexports.startsWithWindowsDriveLetter = function startsWithWindowsDriveLetter(\n  input\n) {\n  return (\n    input.length >= 2 &&\n    exports.isWindowsDriveLetter(input) &&\n    (input.length === 2 ||\n      input.charCodeAt(2) === 0x2f ||\n      input.charCodeAt(2) === 0x5c ||\n      input.charCodeAt(2) === 0x3f ||\n      input.charCodeAt(2) === 0x23)\n  )\n}\nmodule.exports = class ModuleResolveError extends Error {\n  constructor(msg, code, fn = ModuleResolveError) {\n    super(`${code}: ${msg}`)\n    this.code = code\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, fn)\n    }\n  }\n\n  get name() {\n    return 'ModuleResolveError'\n  }\n\n  static INVALID_MODULE_SPECIFIER(msg) {\n    return new ModuleResolveError(\n      msg,\n      'INVALID_MODULE_SPECIFIER',\n      ModuleResolveError.INVALID_MODULE_SPECIFIER\n    )\n  }\n\n  static INVALID_PACKAGE_TARGET(msg) {\n    return new ModuleResolveError(\n      msg,\n      'INVALID_PACKAGE_TARGET',\n      ModuleResolveError.INVALID_PACKAGE_TARGET\n    )\n  }\n\n  static PACKAGE_PATH_NOT_EXPORTED(msg) {\n    return new ModuleResolveError(\n      msg,\n      'PACKAGE_PATH_NOT_EXPORTED',\n      ModuleResolveError.PACKAGE_PATH_NOT_EXPORTED\n    )\n  }\n\n  static PACKAGE_IMPORT_NOT_DEFINED(msg) {\n    return new ModuleResolveError(\n      msg,\n      'PACKAGE_IMPORT_NOT_DEFINED',\n      ModuleResolveError.PACKAGE_IMPORT_NOT_DEFINED\n    )\n  }\n\n  static UNSUPPORTED_ENGINE(msg) {\n    return new ModuleResolveError(\n      msg,\n      'UNSUPPORTED_ENGINE',\n      ModuleResolveError.UNSUPPORTED_ENGINE\n    )\n  }\n}\n{\n  \"name\": \"bare-module-resolve\",\n  \"version\": \"1.10.2\",\n  \"description\": \"Low-level module resolution algorithm for Bare\",\n  \"exports\": {\n    \"./package\": \"./package.json\",\n    \".\": {\n      \"types\": \"./index.d.ts\",\n      \"default\": \"./index.js\"\n    },\n    \"./errors\": {\n      \"types\": \"./lib/errors.d.ts\",\n      \"default\": \"./lib/errors.js\"\n    }\n  },\n  \"files\": [\n    \"index.js\",\n    \"index.d.ts\",\n    \"lib\"\n  ],\n  \"scripts\": {\n    \"test\": \"prettier . --check && bare test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bare-module-resolve.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bare-module-resolve/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bare-module-resolve#readme\",\n  \"dependencies\": {\n    \"bare-semver\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"bare-url\": \"^2.1.3\",\n    \"brittle\": \"^3.2.1\",\n    \"prettier\": \"^3.3.3\",\n    \"prettier-config-standard\": \"^7.0.0\"\n  },\n  \"peerDependencies\": {\n    \"bare-url\": \"*\"\n  },\n  \"peerDependenciesMeta\": {\n    \"bare-url\": {\n      \"optional\": true\n    }\n  }\n}\nmodule.exports = require.addon()\nconst binding = require('./binding')\nconst errors = require('./lib/errors')\nconst constants = require('./lib/constants')\n\nexports.constants = constants\n\nexports.EOL = binding.platform === 'win32' ? '\\r\\n' : '\\n'\n\nexports.platform = function platform() {\n  return binding.platform\n}\n\nexports.arch = function arch() {\n  return binding.arch\n}\n\nexports.type = binding.type\nexports.version = binding.version\nexports.release = binding.release\nexports.machine = binding.machine\nexports.execPath = binding.execPath\nexports.pid = binding.pid\nexports.ppid = binding.ppid\nexports.cwd = binding.cwd\nexports.chdir = binding.chdir\nexports.tmpdir = binding.tmpdir\nexports.homedir = binding.homedir\nexports.hostname = binding.hostname\nexports.userInfo = binding.userInfo\n\nexports.kill = function kill(pid, signal = constants.signals.SIGTERM) {\n  if (typeof signal === 'string') {\n    if (signal in constants.signals === false) {\n      throw errors.UNKNOWN_SIGNAL('Unknown signal: ' + signal)\n    }\n\n    signal = constants.signals[signal]\n  }\n\n  binding.kill(pid, signal)\n}\n\nexports.endianness = function endianness() {\n  return binding.isLittleEndian ? 'LE' : 'BE'\n}\n\nexports.availableParallelism = binding.availableParallelism\n\nexports.cpuUsage = function cpuUsage(previous) {\n  const current = binding.cpuUsage()\n\n  if (previous) {\n    return {\n      user: current.user - previous.user,\n      system: current.system - previous.system\n    }\n  }\n\n  return current\n}\n\nexports.threadCpuUsage = function threadCpuUsage(previous) {\n  const current = binding.threadCpuUsage()\n\n  if (previous) {\n    return {\n      user: current.user - previous.user,\n      system: current.system - previous.system\n    }\n  }\n\n  return current\n}\n\nexports.resourceUsage = binding.resourceUsage\nexports.memoryUsage = binding.memoryUsage\nexports.freemem = binding.freemem\nexports.totalmem = binding.totalmem\nexports.uptime = binding.uptime\nexports.loadavg = binding.loadavg\nexports.cpus = binding.cpus\n\nexports.getProcessTitle = binding.getProcessTitle\n\nexports.setProcessTitle = function setProcessTitle(title) {\n  if (typeof title !== 'string') title = title.toString()\n\n  if (title.length >= 256) {\n    throw errors.TITLE_OVERFLOW('Process title is too long')\n  }\n\n  binding.setProcessTitle(title)\n}\n\nexports.getEnvKeys = binding.getEnvKeys\nexports.getEnv = binding.getEnv\nexports.hasEnv = binding.hasEnv\nexports.setEnv = binding.setEnv\nexports.unsetEnv = binding.unsetEnv\nconst binding = require('../binding')\n\nmodule.exports = {\n  signals: binding.signals,\n  errnos: binding.errnos\n}\nmodule.exports = class OSError extends Error {\n  constructor(msg, code, fn = OSError) {\n    super(`${code}: ${msg}`)\n    this.code = code\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, fn)\n    }\n  }\n\n  get name() {\n    return 'OSError'\n  }\n\n  static UNKNOWN_SIGNAL(msg) {\n    return new OSError(msg, 'UNKNOWN_SIGNAL', OSError.UNKNOWN_SIGNAL)\n  }\n\n  static TITLE_OVERFLOW(msg) {\n    return new OSError(msg, 'TITLE_OVERFLOW', OSError.TITLE_OVERFLOW)\n  }\n}\n{\n  \"name\": \"bare-os\",\n  \"version\": \"3.6.1\",\n  \"description\": \"Operating system utilities for Javascript\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./index.d.ts\",\n      \"default\": \"./index.js\"\n    },\n    \"./package\": \"./package.json\",\n    \"./constants\": \"./lib/constants.js\",\n    \"./errors\": \"./lib/errors.js\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"index.d.ts\",\n    \"binding.c\",\n    \"binding.js\",\n    \"CMakeLists.txt\",\n    \"lib\",\n    \"prebuilds\"\n  ],\n  \"addon\": true,\n  \"scripts\": {\n    \"test\": \"prettier . --check && bare test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bare-os.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bare-os/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bare-os#readme\",\n  \"engines\": {\n    \"bare\": \">=1.14.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.1\",\n    \"cmake-bare\": \"^1.1.6\",\n    \"prettier\": \"^3.4.2\",\n    \"prettier-config-standard\": \"^7.0.0\"\n  }\n}\n/* global Bare */\n\n// This export SHOULD NOT be shortened in any way as having the full\n// `module.exports = require(...)` statement is crucial for synthesizing\n// ESM exports.\n\nif (Bare.platform === 'win32') {\n  module.exports = require('./lib/win32')\n} else {\n  module.exports = require('./lib/posix')\n}\nmodule.exports = {\n  CHAR_UPPERCASE_A: 0x41,\n  CHAR_LOWERCASE_A: 0x61,\n  CHAR_UPPERCASE_Z: 0x5a,\n  CHAR_LOWERCASE_Z: 0x7a,\n  CHAR_DOT: 0x2e,\n  CHAR_FORWARD_SLASH: 0x2f,\n  CHAR_BACKWARD_SLASH: 0x5c,\n  CHAR_COLON: 0x3a,\n  CHAR_QUESTION_MARK: 0x3f\n}\nconst os = require('bare-os')\n\nconst { normalizeString } = require('./shared')\nconst {\n  CHAR_DOT,\n  CHAR_FORWARD_SLASH\n} = require('./constants')\n\nfunction isPosixPathSeparator (code) {\n  return code === CHAR_FORWARD_SLASH\n}\n\nexports.win32 = require('./win32')\nexports.posix = exports\n\nexports.sep = '/'\nexports.delimiter = ':'\n\nexports.resolve = function resolve (...args) {\n  let resolvedPath = ''\n  let resolvedAbsolute = false\n\n  for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    const path = i >= 0 ? args[i] : os.cwd()\n\n    if (path.length === 0) {\n      continue\n    }\n\n    resolvedPath = `${path}/${resolvedPath}`\n    resolvedAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH\n  }\n\n  resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, '/', isPosixPathSeparator)\n\n  if (resolvedAbsolute) {\n    return `/${resolvedPath}`\n  }\n\n  return resolvedPath.length > 0 ? resolvedPath : '.'\n}\n\nexports.normalize = function normalize (path) {\n  if (path.length === 0) return '.'\n\n  const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH\n  const trailingSeparator = path.charCodeAt(path.length - 1) === CHAR_FORWARD_SLASH\n\n  path = normalizeString(path, !isAbsolute, '/', isPosixPathSeparator)\n\n  if (path.length === 0) {\n    if (isAbsolute) return '/'\n    return trailingSeparator ? './' : '.'\n  }\n\n  if (trailingSeparator) path += '/'\n\n  return isAbsolute ? `/${path}` : path\n}\n\nexports.isAbsolute = function isAbsolute (path) {\n  return path.length > 0 && path.charCodeAt(0) === CHAR_FORWARD_SLASH\n}\n\nexports.join = function join (...args) {\n  if (args.length === 0) return '.'\n  let joined\n  for (let i = 0; i < args.length; ++i) {\n    const arg = args[i]\n    if (arg.length > 0) {\n      if (joined === undefined) joined = arg\n      else joined += `/${arg}`\n    }\n  }\n  if (joined === undefined) return '.'\n  return exports.normalize(joined)\n}\n\nexports.relative = function relative (from, to) {\n  if (from === to) return ''\n\n  from = exports.resolve(from)\n  to = exports.resolve(to)\n\n  if (from === to) return ''\n\n  const fromStart = 1\n  const fromEnd = from.length\n  const fromLen = fromEnd - fromStart\n  const toStart = 1\n  const toLen = to.length - toStart\n\n  const length = (fromLen < toLen ? fromLen : toLen)\n  let lastCommonSep = -1\n  let i = 0\n  for (; i < length; i++) {\n    const fromCode = from.charCodeAt(fromStart + i)\n    if (fromCode !== to.charCodeAt(toStart + i)) {\n      break\n    } else if (fromCode === CHAR_FORWARD_SLASH) {\n      lastCommonSep = i\n    }\n  }\n  if (i === length) {\n    if (toLen > length) {\n      if (to.charCodeAt(toStart + i) === CHAR_FORWARD_SLASH) {\n        return to.substring(toStart + i + 1)\n      }\n      if (i === 0) {\n        return to.substring(toStart + i)\n      }\n    } else if (fromLen > length) {\n      if (from.charCodeAt(fromStart + i) === CHAR_FORWARD_SLASH) {\n        lastCommonSep = i\n      } else if (i === 0) {\n        lastCommonSep = 0\n      }\n    }\n  }\n\n  let out = ''\n  for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n    if (i === fromEnd || from.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n      out += out.length === 0 ? '..' : '/..'\n    }\n  }\n\n  return `${out}${to.substring(toStart + lastCommonSep)}`\n}\n\nexports.toNamespacedPath = function toNamespacedPath (path) {\n  return path\n}\n\nexports.dirname = function dirname (path) {\n  if (path.length === 0) return '.'\n  const hasRoot = path.charCodeAt(0) === CHAR_FORWARD_SLASH\n  let end = -1\n  let matchedSlash = true\n  for (let i = path.length - 1; i >= 1; --i) {\n    if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n      if (!matchedSlash) {\n        end = i\n        break\n      }\n    } else {\n      matchedSlash = false\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.'\n  if (hasRoot && end === 1) return '//'\n  return path.substring(0, end)\n}\n\nexports.basename = function basename (path, suffix) {\n  let start = 0\n  let end = -1\n  let matchedSlash = true\n\n  if (suffix !== undefined && suffix.length > 0 && suffix.length <= path.length) {\n    if (suffix === path) { return '' }\n    let extIdx = suffix.length - 1\n    let firstNonSlashEnd = -1\n    for (let i = path.length - 1; i >= 0; --i) {\n      const code = path.charCodeAt(i)\n      if (code === CHAR_FORWARD_SLASH) {\n        if (!matchedSlash) {\n          start = i + 1\n          break\n        }\n      } else {\n        if (firstNonSlashEnd === -1) {\n          matchedSlash = false\n          firstNonSlashEnd = i + 1\n        }\n        if (extIdx >= 0) {\n          if (code === suffix.charCodeAt(extIdx)) {\n            if (--extIdx === -1) {\n              end = i\n            }\n          } else {\n            extIdx = -1\n            end = firstNonSlashEnd\n          }\n        }\n      }\n    }\n\n    if (start === end) end = firstNonSlashEnd\n    else if (end === -1) end = path.length\n    return path.substring(start, end)\n  }\n\n  for (let i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n      if (!matchedSlash) {\n        start = i + 1\n        break\n      }\n    } else if (end === -1) {\n      matchedSlash = false\n      end = i + 1\n    }\n  }\n\n  if (end === -1) return ''\n  return path.substring(start, end)\n}\n\nexports.extname = function extname (path) {\n  let startDot = -1\n  let startPart = 0\n  let end = -1\n  let matchedSlash = true\n  let preDotState = 0\n  for (let i = path.length - 1; i >= 0; --i) {\n    const code = path.charCodeAt(i)\n    if (code === CHAR_FORWARD_SLASH) {\n      if (!matchedSlash) {\n        startPart = i + 1\n        break\n      }\n      continue\n    }\n    if (end === -1) {\n      matchedSlash = false\n      end = i + 1\n    }\n    if (code === CHAR_DOT) {\n      if (startDot === -1) startDot = i\n      else if (preDotState !== 1) preDotState = 1\n    } else if (startDot !== -1) {\n      preDotState = -1\n    }\n  }\n\n  if (startDot === -1 || end === -1 || preDotState === 0 || (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)) {\n    return ''\n  }\n  return path.substring(startDot, end)\n}\nconst {\n  CHAR_DOT,\n  CHAR_FORWARD_SLASH\n} = require('./constants')\n\nexports.normalizeString = function normalizeString (path, allowAboveRoot, separator, isPathSeparator) {\n  let res = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let code = 0\n  for (let i = 0; i <= path.length; ++i) {\n    if (i < path.length) {\n      code = path.charCodeAt(i)\n    } else if (isPathSeparator(code)) {\n      break\n    } else {\n      code = CHAR_FORWARD_SLASH\n    }\n\n    if (isPathSeparator(code)) {\n      if (lastSlash === i - 1 || dots === 1) ;\n      else if (dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== CHAR_DOT || res.charCodeAt(res.length - 2) !== CHAR_DOT) {\n          if (res.length > 2) {\n            const lastSlashIndex = res.lastIndexOf(separator)\n            if (lastSlashIndex === -1) {\n              res = ''\n              lastSegmentLength = 0\n            } else {\n              res = res.substring(0, lastSlashIndex)\n              lastSegmentLength =\n                res.length - 1 - res.lastIndexOf(separator)\n            }\n            lastSlash = i\n            dots = 0\n            continue\n          } else if (res.length !== 0) {\n            res = ''\n            lastSegmentLength = 0\n            lastSlash = i\n            dots = 0\n            continue\n          }\n        }\n        if (allowAboveRoot) {\n          res += res.length > 0 ? `${separator}..` : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (res.length > 0) {\n          res += `${separator}${path.substring(lastSlash + 1, i)}`\n        } else {\n          res = path.substring(lastSlash + 1, i)\n        }\n        lastSegmentLength = i - lastSlash - 1\n      }\n      lastSlash = i\n      dots = 0\n    } else if (code === CHAR_DOT && dots !== -1) {\n      ++dots\n    } else {\n      dots = -1\n    }\n  }\n  return res\n}\nconst os = require('bare-os')\n\nconst { normalizeString } = require('./shared')\nconst {\n  CHAR_UPPERCASE_A,\n  CHAR_LOWERCASE_A,\n  CHAR_UPPERCASE_Z,\n  CHAR_LOWERCASE_Z,\n  CHAR_DOT,\n  CHAR_FORWARD_SLASH,\n  CHAR_BACKWARD_SLASH,\n  CHAR_COLON,\n  CHAR_QUESTION_MARK\n} = require('./constants')\n\nfunction isWindowsPathSeparator (code) {\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH\n}\n\nfunction isWindowsDeviceRoot (code) {\n  return (code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z) ||\n         (code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z)\n}\n\nexports.posix = require('./posix')\nexports.win32 = exports\n\nexports.sep = '\\\\'\nexports.delimiter = ';'\n\nexports.resolve = function resolve (...args) {\n  let resolvedDevice = ''\n  let resolvedTail = ''\n  let resolvedAbsolute = false\n\n  for (let i = args.length - 1; i >= -1; i--) {\n    let path\n    if (i >= 0) {\n      path = args[i]\n\n      if (path.length === 0) continue\n    } else if (resolvedDevice.length === 0) {\n      path = os.cwd()\n    } else {\n      path = os.getEnv(`=${resolvedDevice}`) || os.cwd()\n\n      if (path === undefined || (path.substring(0, 2).toLowerCase() !== resolvedDevice.toLowerCase() && path.charCodeAt(2) === CHAR_BACKWARD_SLASH)) {\n        path = `${resolvedDevice}\\\\`\n      }\n    }\n\n    const len = path.length\n    let rootEnd = 0\n    let device = ''\n    let isAbsolute = false\n    const code = path.charCodeAt(0)\n\n    if (len === 1) {\n      if (isWindowsPathSeparator(code)) {\n        rootEnd = 1\n        isAbsolute = true\n      }\n    } else if (isWindowsPathSeparator(code)) {\n      isAbsolute = true\n\n      if (isWindowsPathSeparator(path.charCodeAt(1))) {\n        let j = 2\n        let last = j\n        while (j < len && !isWindowsPathSeparator(path.charCodeAt(j))) {\n          j++\n        }\n        if (j < len && j !== last) {\n          const firstPart = path.substring(last, j)\n          last = j\n          while (j < len && isWindowsPathSeparator(path.charCodeAt(j))) {\n            j++\n          }\n          if (j < len && j !== last) {\n            last = j\n            while (j < len && !isWindowsPathSeparator(path.charCodeAt(j))) {\n              j++\n            }\n            if (j === len || j !== last) {\n              device = `\\\\\\\\${firstPart}\\\\${path.substring(last, j)}`\n              rootEnd = j\n            }\n          }\n        }\n      } else {\n        rootEnd = 1\n      }\n    } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n      device = path.substring(0, 2)\n      rootEnd = 2\n      if (len > 2 && isWindowsPathSeparator(path.charCodeAt(2))) {\n        isAbsolute = true\n        rootEnd = 3\n      }\n    }\n\n    if (device.length > 0) {\n      if (resolvedDevice.length > 0) {\n        if (device.toLowerCase() !== resolvedDevice.toLowerCase()) { continue }\n      } else {\n        resolvedDevice = device\n      }\n    }\n\n    if (resolvedAbsolute) {\n      if (resolvedDevice.length > 0) { break }\n    } else {\n      resolvedTail = `${path.substring(rootEnd)}\\\\${resolvedTail}`\n      resolvedAbsolute = isAbsolute\n      if (isAbsolute && resolvedDevice.length > 0) {\n        break\n      }\n    }\n  }\n\n  resolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, '\\\\', isWindowsPathSeparator)\n\n  return resolvedAbsolute ? `${resolvedDevice}\\\\${resolvedTail}` : `${resolvedDevice}${resolvedTail}` || '.'\n}\n\nexports.normalize = function normalize (path) {\n  const len = path.length\n  if (len === 0) return '.'\n  let rootEnd = 0\n  let device\n  let isAbsolute = false\n  const code = path.charCodeAt(0)\n\n  if (len === 1) {\n    return code === CHAR_FORWARD_SLASH ? '\\\\' : path\n  }\n\n  if (isWindowsPathSeparator(code)) {\n    isAbsolute = true\n\n    if (isWindowsPathSeparator(path.charCodeAt(1))) {\n      let j = 2\n      let last = j\n      while (j < len && !isWindowsPathSeparator(path.charCodeAt(j))) {\n        j++\n      }\n      if (j < len && j !== last) {\n        const firstPart = path.substring(last, j)\n        last = j\n        while (j < len && isWindowsPathSeparator(path.charCodeAt(j))) {\n          j++\n        }\n        if (j < len && j !== last) {\n          last = j\n          while (j < len && !isWindowsPathSeparator(path.charCodeAt(j))) {\n            j++\n          }\n          if (j === len) {\n            return `\\\\\\\\${firstPart}\\\\${path.substring(last)}\\\\`\n          }\n          if (j !== last) {\n            device = `\\\\\\\\${firstPart}\\\\${path.substring(last, j)}`\n            rootEnd = j\n          }\n        }\n      }\n    } else {\n      rootEnd = 1\n    }\n  } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n    device = path.substring(0, 2)\n    rootEnd = 2\n    if (len > 2 && isWindowsPathSeparator(path.charCodeAt(2))) {\n      isAbsolute = true\n      rootEnd = 3\n    }\n  }\n\n  let tail = rootEnd < len ? normalizeString(path.substring(rootEnd), !isAbsolute, '\\\\', isWindowsPathSeparator) : ''\n  if (tail.length === 0 && !isAbsolute) {\n    tail = '.'\n  }\n  if (tail.length > 0 && isWindowsPathSeparator(path.charCodeAt(len - 1))) {\n    tail += '\\\\'\n  }\n  if (device === undefined) {\n    return isAbsolute ? `\\\\${tail}` : tail\n  }\n  return isAbsolute ? `${device}\\\\${tail}` : `${device}${tail}`\n}\n\nexports.isAbsolute = function isAbsolute (path) {\n  const len = path.length\n  if (len === 0) return false\n\n  const code = path.charCodeAt(0)\n\n  return isWindowsPathSeparator(code) || (len > 2 && isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON && isWindowsPathSeparator(path.charCodeAt(2)))\n}\n\nexports.join = function join (...args) {\n  if (args.length === 0) return '.'\n\n  let joined\n  let firstPart\n  for (let i = 0; i < args.length; ++i) {\n    const arg = args[i]\n    if (arg.length > 0) {\n      if (joined === undefined) joined = firstPart = arg\n      else joined += `\\\\${arg}`\n    }\n  }\n\n  if (joined === undefined) return '.'\n\n  let needsReplace = true\n  let slashCount = 0\n  if (isWindowsPathSeparator(firstPart.charCodeAt(0))) {\n    ++slashCount\n    const firstLen = firstPart.length\n    if (firstLen > 1 && isWindowsPathSeparator(firstPart.charCodeAt(1))) {\n      ++slashCount\n      if (firstLen > 2) {\n        if (isWindowsPathSeparator(firstPart.charCodeAt(2))) {\n          ++slashCount\n        } else {\n          needsReplace = false\n        }\n      }\n    }\n  }\n  if (needsReplace) {\n    while (slashCount < joined.length && isWindowsPathSeparator(joined.charCodeAt(slashCount))) {\n      slashCount++\n    }\n\n    if (slashCount >= 2) {\n      joined = `\\\\${joined.substring(slashCount)}`\n    }\n  }\n\n  return exports.normalize(joined)\n}\n\nexports.relative = function relative (from, to) {\n  if (from === to) return ''\n\n  const fromOrig = exports.resolve(from)\n  const toOrig = exports.resolve(to)\n\n  if (fromOrig === toOrig) return ''\n\n  from = fromOrig.toLowerCase()\n  to = toOrig.toLowerCase()\n\n  if (from === to) return ''\n\n  let fromStart = 0\n  while (fromStart < from.length && from.charCodeAt(fromStart) === CHAR_BACKWARD_SLASH) {\n    fromStart++\n  }\n  let fromEnd = from.length\n  while (fromEnd - 1 > fromStart && from.charCodeAt(fromEnd - 1) === CHAR_BACKWARD_SLASH) {\n    fromEnd--\n  }\n  const fromLen = fromEnd - fromStart\n\n  let toStart = 0\n  while (toStart < to.length && to.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {\n    toStart++\n  }\n  let toEnd = to.length\n  while (toEnd - 1 > toStart && to.charCodeAt(toEnd - 1) === CHAR_BACKWARD_SLASH) {\n    toEnd--\n  }\n  const toLen = toEnd - toStart\n\n  const length = fromLen < toLen ? fromLen : toLen\n  let lastCommonSep = -1\n  let i = 0\n  for (; i < length; i++) {\n    const fromCode = from.charCodeAt(fromStart + i)\n    if (fromCode !== to.charCodeAt(toStart + i)) {\n      break\n    } else if (fromCode === CHAR_BACKWARD_SLASH) {\n      lastCommonSep = i\n    }\n  }\n\n  if (i !== length) {\n    if (lastCommonSep === -1) return toOrig\n  } else {\n    if (toLen > length) {\n      if (to.charCodeAt(toStart + i) === CHAR_BACKWARD_SLASH) {\n        return toOrig.substring(toStart + i + 1)\n      }\n      if (i === 2) {\n        return toOrig.substring(toStart + i)\n      }\n    }\n    if (fromLen > length) {\n      if (from.charCodeAt(fromStart + i) === CHAR_BACKWARD_SLASH) {\n        lastCommonSep = i\n      } else if (i === 2) {\n        lastCommonSep = 3\n      }\n    }\n    if (lastCommonSep === -1) lastCommonSep = 0\n  }\n\n  let out = ''\n  for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n    if (i === fromEnd || from.charCodeAt(i) === CHAR_BACKWARD_SLASH) {\n      out += out.length === 0 ? '..' : '\\\\..'\n    }\n  }\n\n  toStart += lastCommonSep\n\n  if (out.length > 0) {\n    return `${out}${toOrig.substring(toStart, toEnd)}`\n  }\n  if (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {\n    ++toStart\n  }\n  return toOrig.substring(toStart, toEnd)\n}\n\nexports.toNamespacedPath = function toNamespacedPath (path) {\n  if (path.length === 0) return path\n\n  const resolvedPath = exports.resolve(path)\n\n  if (resolvedPath.length <= 2) return path\n\n  if (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH) {\n    if (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH) {\n      const code = resolvedPath.charCodeAt(2)\n      if (code !== CHAR_QUESTION_MARK && code !== CHAR_DOT) {\n        return `\\\\\\\\?\\\\UNC\\\\${resolvedPath.substring(2)}`\n      }\n    }\n  } else if (\n    isWindowsDeviceRoot(resolvedPath.charCodeAt(0)) &&\n      resolvedPath.charCodeAt(1) === CHAR_COLON &&\n      resolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH\n  ) {\n    return `\\\\\\\\?\\\\${resolvedPath}`\n  }\n\n  return path\n}\n\nexports.dirname = function dirname (path) {\n  const len = path.length\n  if (len === 0) return '.'\n  let rootEnd = -1\n  let offset = 0\n  const code = path.charCodeAt(0)\n\n  if (len === 1) {\n    return isWindowsPathSeparator(code) ? path : '.'\n  }\n\n  if (isWindowsPathSeparator(code)) {\n    rootEnd = offset = 1\n\n    if (isWindowsPathSeparator(path.charCodeAt(1))) {\n      let j = 2\n      let last = j\n      while (j < len && !isWindowsPathSeparator(path.charCodeAt(j))) {\n        j++\n      }\n      if (j < len && j !== last) {\n        last = j\n        while (j < len && isWindowsPathSeparator(path.charCodeAt(j))) {\n          j++\n        }\n        if (j < len && j !== last) {\n          last = j\n          while (j < len && !isWindowsPathSeparator(path.charCodeAt(j))) {\n            j++\n          }\n          if (j === len) {\n            return path\n          }\n          if (j !== last) {\n            rootEnd = offset = j + 1\n          }\n        }\n      }\n    }\n  } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n    rootEnd = len > 2 && isWindowsPathSeparator(path.charCodeAt(2)) ? 3 : 2\n    offset = rootEnd\n  }\n\n  let end = -1\n  let matchedSlash = true\n  for (let i = len - 1; i >= offset; --i) {\n    if (isWindowsPathSeparator(path.charCodeAt(i))) {\n      if (!matchedSlash) {\n        end = i\n        break\n      }\n    } else {\n      matchedSlash = false\n    }\n  }\n\n  if (end === -1) {\n    if (rootEnd === -1) return '.'\n\n    end = rootEnd\n  }\n  return path.substring(0, end)\n}\n\nexports.basename = function basename (path, suffix) {\n  let start = 0\n  let end = -1\n  let matchedSlash = true\n\n  if (path.length >= 2 && isWindowsDeviceRoot(path.charCodeAt(0)) && path.charCodeAt(1) === CHAR_COLON) {\n    start = 2\n  }\n\n  if (suffix !== undefined && suffix.length > 0 && suffix.length <= path.length) {\n    if (suffix === path) return ''\n    let extIdx = suffix.length - 1\n    let firstNonSlashEnd = -1\n    for (let i = path.length - 1; i >= start; --i) {\n      const code = path.charCodeAt(i)\n      if (isWindowsPathSeparator(code)) {\n        if (!matchedSlash) {\n          start = i + 1\n          break\n        }\n      } else {\n        if (firstNonSlashEnd === -1) {\n          matchedSlash = false\n          firstNonSlashEnd = i + 1\n        }\n        if (extIdx >= 0) {\n          if (code === suffix.charCodeAt(extIdx)) {\n            if (--extIdx === -1) {\n              end = i\n            }\n          } else {\n            extIdx = -1\n            end = firstNonSlashEnd\n          }\n        }\n      }\n    }\n\n    if (start === end) end = firstNonSlashEnd\n    else if (end === -1) end = path.length\n    return path.substring(start, end)\n  }\n  for (let i = path.length - 1; i >= start; --i) {\n    if (isWindowsPathSeparator(path.charCodeAt(i))) {\n      if (!matchedSlash) {\n        start = i + 1\n        break\n      }\n    } else if (end === -1) {\n      matchedSlash = false\n      end = i + 1\n    }\n  }\n\n  if (end === -1) return ''\n  return path.substring(start, end)\n}\n\nexports.extname = function extname (path) {\n  let start = 0\n  let startDot = -1\n  let startPart = 0\n  let end = -1\n  let matchedSlash = true\n  let preDotState = 0\n\n  if (path.length >= 2 && path.charCodeAt(1) === CHAR_COLON && isWindowsDeviceRoot(path.charCodeAt(0))) {\n    start = startPart = 2\n  }\n\n  for (let i = path.length - 1; i >= start; --i) {\n    const code = path.charCodeAt(i)\n    if (isWindowsPathSeparator(code)) {\n      if (!matchedSlash) {\n        startPart = i + 1\n        break\n      }\n      continue\n    }\n    if (end === -1) {\n      matchedSlash = false\n      end = i + 1\n    }\n    if (code === CHAR_DOT) {\n      if (startDot === -1) startDot = i\n      else if (preDotState !== 1) preDotState = 1\n    } else if (startDot !== -1) {\n      preDotState = -1\n    }\n  }\n\n  if (startDot === -1 || end === -1 || preDotState === 0 || (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)) {\n    return ''\n  }\n  return path.substring(startDot, end)\n}\n{\n  \"name\": \"bare-path\",\n  \"version\": \"3.0.0\",\n  \"description\": \"Path manipulation library for JavaScript\",\n  \"exports\": {\n    \".\": \"./index.js\",\n    \"./package\": \"./package.json\",\n    \"./posix\": \"./lib/posix.js\",\n    \"./win32\": \"./lib/win32.js\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"lib\",\n    \"NOTICE\"\n  ],\n  \"scripts\": {\n    \"test\": \"standard && bare test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bare-path.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bare-path/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bare-path#readme\",\n  \"dependencies\": {\n    \"bare-os\": \"^3.0.1\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.3.2\",\n    \"standard\": \"^17.0.0\"\n  }\n}\nconst safetyCatch = require('safety-catch')\nconst b4a = require('b4a')\nconst c = require('compact-encoding')\nconst m = require('./lib/messages')\nconst { type: t, stream: s } = require('./lib/constants')\nconst IncomingRequest = require('./lib/incoming-request')\nconst IncomingStream = require('./lib/incoming-stream')\nconst OutgoingRequest = require('./lib/outgoing-request')\nconst OutgoingStream = require('./lib/outgoing-stream')\n\nmodule.exports = class RPC {\n  constructor(stream, onrequest) {\n    this._stream = stream\n\n    this._id = 0\n\n    this._outgoingRequests = new Map()\n    this._outgoingResponses = new Map()\n    this._incomingRequests = new Map()\n    this._incomingResponses = new Map()\n    this._pendingRequests = new Set()\n    this._pendingResponses = new Set()\n\n    this._buffer = null\n\n    this._onrequest = onrequest.bind(this)\n    this._ondata = this._ondata.bind(this)\n\n    this._stream.on('data', this._ondata)\n  }\n\n  request(command) {\n    return new OutgoingRequest(this, ++this._id, command)\n  }\n\n  _sendMessage(message) {\n    this._stream.write(c.encode(m.message, message))\n  }\n\n  _sendRequest(request, data = null) {\n    this._outgoingRequests.set(request.id, request)\n\n    this._sendMessage({\n      type: t.REQUEST,\n      id: request.id,\n      command: request.command,\n      stream: 0,\n      data\n    })\n  }\n\n  _createRequestStream(request, isInitiator, opts) {\n    if (isInitiator) {\n      this._outgoingRequests.set(request.id, request)\n\n      request._requestStream = new OutgoingStream(\n        this,\n        request,\n        t.REQUEST,\n        opts\n      )\n    } else {\n      this._incomingRequests.set(request.id, request)\n\n      request._requestStream = new IncomingStream(\n        this,\n        request,\n        t.REQUEST,\n        opts\n      )\n\n      request._requestStream.on('close', () =>\n        this._incomingRequests.delete(request.id)\n      )\n    }\n  }\n\n  _sendResponse(request, data) {\n    this._sendMessage({\n      type: t.RESPONSE,\n      id: request.id,\n      stream: 0,\n      error: null,\n      data\n    })\n  }\n\n  _createResponseStream(request, isInitiator, opts) {\n    if (isInitiator) {\n      this._outgoingResponses.set(request.id, request)\n\n      request._responseStream = new OutgoingStream(\n        this,\n        request,\n        t.RESPONSE,\n        opts\n      )\n    } else {\n      this._incomingResponses.set(request.id, request)\n\n      request._responseStream = new IncomingStream(\n        this,\n        request,\n        t.RESPONSE,\n        opts\n      )\n\n      request._responseStream.on('close', () =>\n        this._incomingResponses.delete(request.id)\n      )\n    }\n  }\n\n  _sendError(request, err) {\n    this._sendMessage({\n      type: t.RESPONSE,\n      id: request.id,\n      stream: 0,\n      error: err,\n      data: null\n    })\n  }\n\n  _ondata(data) {\n    if (this._buffer === null) this._buffer = data\n    else this._buffer = b4a.concat([this._buffer, data])\n\n    while (this._buffer !== null) {\n      const state = { start: 0, end: this._buffer.length, buffer: this._buffer }\n\n      let message\n      try {\n        message = m.message.decode(state)\n      } catch (err) {\n        safetyCatch(err)\n\n        return this._stream.destroy(err)\n      }\n\n      if (message === null) return\n\n      switch (message.type) {\n        case t.REQUEST: {\n          const request = new IncomingRequest(\n            this,\n            message.id,\n            message.command,\n            message.data\n          )\n\n          try {\n            this._onrequest(request)\n          } catch (err) {\n            safetyCatch(err)\n\n            this._sendError(request, err)\n          }\n          break\n        }\n        case t.RESPONSE:\n          try {\n            this._onresponse(message)\n          } catch (err) {\n            safetyCatch(err)\n          }\n          break\n        case t.STREAM:\n          try {\n            this._onstream(message)\n          } catch (err) {\n            safetyCatch(err)\n          }\n      }\n\n      this._buffer =\n        state.start === state.end ? null : this._buffer.subarray(state.start)\n    }\n  }\n\n  _onresponse(message) {\n    if (message.id === 0) return\n\n    const request = this._outgoingRequests.get(message.id)\n    if (request === undefined) return\n\n    if (message.error) {\n      request._reject(message.error)\n    } else if (message.stream === 0) {\n      request._resolve(message.data)\n    }\n  }\n\n  _onstream(message) {\n    if (message.id === 0) return\n\n    if (message.stream & s.OPEN) this._onstreamopen(message)\n    else if (message.stream & s.CLOSE) this._onstreamclose(message)\n    else if (message.stream & s.PAUSE) this._onstreampause(message)\n    else if (message.stream & s.RESUME) this._onstreamresume(message)\n    else if (message.stream & s.DATA) this._onstreamdata(message)\n    else if (message.stream & s.END) this._onstreamend(message)\n    else if (message.stream & s.DESTROY) this._onstreamdestroy(message)\n  }\n\n  _onstreamopen(message) {\n    let stream\n\n    if (message.stream & s.REQUEST) {\n      const request = this._outgoingRequests.get(message.id)\n      if (request === undefined) {\n        this._pendingRequests.add(message.id)\n        return\n      }\n\n      stream = request._requestStream\n    } else if (message.stream & s.RESPONSE) {\n      const request = this._outgoingResponses.get(message.id)\n      if (request === undefined) {\n        this._pendingResponses.add(message.id)\n        return\n      }\n\n      stream = request._responseStream\n    } else {\n      return\n    }\n\n    stream._continueOpen()\n  }\n\n  _onstreamclose(message) {\n    let stream\n\n    if (message.stream & s.REQUEST) {\n      const request = this._incomingRequests.get(message.id)\n      if (request === undefined) return\n\n      stream = request._requestStream\n    } else if (message.stream & s.RESPONSE) {\n      const request = this._incomingResponses.get(message.id)\n      if (request === undefined) return\n\n      stream = request._responseStream\n    } else {\n      return\n    }\n\n    if (message.error) stream.destroy(message.error)\n    else stream.push(null)\n  }\n\n  _onstreampause(message) {\n    let stream\n\n    if (message.stream & s.REQUEST) {\n      const request = this._outgoingRequests.get(message.id)\n      if (request === undefined) return\n\n      stream = request._requestStream\n    } else if (message.stream & s.RESPONSE) {\n      const request = this._outgoingResponses.get(message.id)\n      if (request === undefined) return\n\n      stream = request._responseStream\n    } else {\n      return\n    }\n\n    stream.cork()\n  }\n\n  _onstreamresume(message) {\n    let stream\n\n    if (message.stream & s.REQUEST) {\n      const request = this._outgoingRequests.get(message.id)\n      if (request === undefined) return\n\n      stream = request._requestStream\n    } else if (message.stream & s.RESPONSE) {\n      const request = this._outgoingResponses.get(message.id)\n      if (request === undefined) return\n\n      stream = request._responseStream\n    } else {\n      return\n    }\n\n    stream.uncork()\n  }\n\n  _onstreamdata(message) {\n    let stream\n\n    if (message.stream & s.REQUEST) {\n      const request = this._incomingRequests.get(message.id)\n      if (request === undefined) return\n\n      stream = request._requestStream\n    } else if (message.stream & s.RESPONSE) {\n      const request = this._incomingResponses.get(message.id)\n      if (request === undefined) return\n\n      stream = request._responseStream\n    } else {\n      return\n    }\n\n    if (stream.push(message.data) === false) {\n      this._sendMessage({\n        type: t.STREAM,\n        id: stream._request.id,\n        stream: stream._mask | s.PAUSE,\n        error: null,\n        data: null\n      })\n    }\n  }\n\n  _onstreamend(message) {\n    let stream\n\n    if (message.stream & s.REQUEST) {\n      const request = this._incomingRequests.get(message.id)\n      if (request === undefined) return\n\n      stream = request._requestStream\n    } else if (message.stream & s.RESPONSE) {\n      const request = this._incomingResponses.get(message.id)\n      if (request === undefined) return\n\n      stream = request._responseStream\n    } else {\n      return\n    }\n\n    stream.push(null)\n  }\n\n  _onstreamdestroy(message) {\n    let stream\n\n    if (message.stream & s.REQUEST) {\n      const request = this._outgoingRequests.get(message.id)\n      if (request === undefined) return\n\n      stream = request._requestStream\n    } else if (message.stream & s.RESPONSE) {\n      const request = this._outgoingResponses.get(message.id)\n      if (request === undefined) return\n\n      stream = request._responseStream\n    } else {\n      return\n    }\n\n    stream.destroy(message.error)\n  }\n}\nmodule.exports = {\n  type: {\n    REQUEST: 1,\n    RESPONSE: 2,\n    STREAM: 3\n  },\n  stream: {\n    OPEN: 0x1,\n    CLOSE: 0x2,\n    PAUSE: 0x4,\n    RESUME: 0x8,\n    DATA: 0x10,\n    END: 0x20,\n    DESTROY: 0x40,\n    ERROR: 0x80,\n    REQUEST: 0x100,\n    RESPONSE: 0x200\n  }\n}\nmodule.exports = class RPCError extends Error {\n  constructor(msg, code, fn = RPCError) {\n    super(`${code}: ${msg}`)\n    this.code = code\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, fn)\n    }\n  }\n\n  get name() {\n    return 'RPCError'\n  }\n\n  static UNKNOWN_MESSAGE(msg) {\n    return new RPCError(msg, 'UNKNOWN_MESSAGE', RPCError.UNKNOWN_MESSAGE)\n  }\n\n  static ALREADY_SENT(msg) {\n    return new RPCError(msg, 'ALREADY_SENT', RPCError.ALREADY_SENT)\n  }\n}\nconst b4a = require('b4a')\nconst errors = require('./errors')\n\nmodule.exports = class RPCIncomingRequest {\n  constructor(rpc, id, command, data) {\n    this.rpc = rpc\n    this.id = id\n    this.command = command\n    this.data = data\n    this.sent = false\n\n    this._requestStream = null\n    this._responseStream = null\n  }\n\n  reply(data, encoding) {\n    if (this.sent) throw errors.ALREADY_SENT('Response has already been sent')\n    this.sent = true\n\n    this.rpc._sendResponse(\n      this,\n      typeof data === 'string' ? b4a.from(data, encoding) : data\n    )\n  }\n\n  createResponseStream(opts = {}) {\n    if (this._responseStream === null)\n      this.rpc._createResponseStream(this, true, opts)\n\n    return this._responseStream\n  }\n\n  createRequestStream(opts = {}) {\n    if (this._requestStream === null)\n      this.rpc._createRequestStream(this, false, opts)\n\n    return this._requestStream\n  }\n}\nconst { Readable } = require('bare-stream')\nconst { type: t, stream: s } = require('./constants')\n\nmodule.exports = class RPCIncomingStream extends Readable {\n  constructor(rpc, request, type, opts) {\n    super({ ...opts, eagerOpen: true })\n\n    this._rpc = rpc\n    this._request = request\n    this._type = type\n    this._mask = type === t.REQUEST ? s.REQUEST : s.RESPONSE\n\n    this._pendingOpen = null\n  }\n\n  _open(cb) {\n    this._rpc._sendMessage({\n      type: t.STREAM,\n      id: this._request.id,\n      stream: this._mask | s.OPEN,\n      error: null,\n      data: null\n    })\n\n    cb(null)\n  }\n\n  _read() {\n    this._rpc._sendMessage({\n      type: t.STREAM,\n      id: this._request.id,\n      stream: this._mask | s.RESUME,\n      error: null,\n      data: null\n    })\n  }\n\n  _destroy(err, cb) {\n    if (err) {\n      this._rpc._sendMessage({\n        type: t.STREAM,\n        id: this._request.id,\n        stream: this._mask | s.DESTROY | s.ERROR,\n        error: err,\n        data: null\n      })\n    } else {\n      this._rpc._sendMessage({\n        type: t.STREAM,\n        id: this._request.id,\n        stream: this._mask | s.DESTROY,\n        error: null,\n        data: null\n      })\n    }\n\n    cb(null)\n  }\n}\nconst c = require('compact-encoding')\nconst { type: t, stream: s } = require('./constants')\nconst errors = require('./errors')\n\nconst request = {\n  preencode(state, m) {\n    c.utf8.preencode(state, m.command)\n    c.uint.preencode(state, m.stream)\n    if (m.stream === 0) c.buffer.preencode(state, m.data)\n  },\n  encode(state, m) {\n    c.utf8.encode(state, m.command)\n    c.uint.encode(state, m.stream)\n    if (m.stream === 0) c.buffer.encode(state, m.data)\n  },\n  decode(state, id) {\n    const command = c.utf8.decode(state)\n    const stream = c.uint.decode(state)\n    const data = stream === 0 ? c.buffer.decode(state) : null\n\n    return { type: t.REQUEST, id, command, stream, data }\n  }\n}\n\nconst error = {\n  preencode(state, m) {\n    c.utf8.preencode(state, m.message)\n    c.utf8.preencode(state, m.code || '')\n    c.int.preencode(state, m.errno || 0)\n  },\n  encode(state, m) {\n    c.utf8.encode(state, m.message)\n    c.utf8.encode(state, m.code || '')\n    c.int.encode(state, m.errno || 0)\n  },\n  decode(state) {\n    const err = new Error(`${c.utf8.decode(state)}`)\n    err.code = c.utf8.decode(state)\n    err.errno = c.int.decode(state)\n    return err\n  }\n}\n\nconst response = {\n  preencode(state, m) {\n    c.bool.preencode(state, !!m.error)\n    c.uint.preencode(state, m.stream)\n\n    if (m.error) error.preencode(state, m.error)\n    else if (m.stream === 0) c.buffer.preencode(state, m.data)\n  },\n  encode(state, m) {\n    c.bool.encode(state, !!m.error)\n    c.uint.encode(state, m.stream)\n\n    if (m.error) error.encode(state, m)\n    else if (m.stream === 0) c.buffer.encode(state, m.data)\n  },\n  decode(state) {\n    const error = c.bool.decode(state)\n    const stream = c.uint.decode(state)\n\n    if (error) return { stream, error: error.decode(state), data: null }\n    if (stream === 0)\n      return { stream, error: null, data: c.buffer.decode(state) }\n\n    return { stream, error: null, data: null }\n  }\n}\n\nconst stream = {\n  preencode(state, m) {\n    c.uint.preencode(state, m.stream)\n\n    if (m.stream & s.ERROR) error.preencode(state, m.error)\n    else if (m.stream & s.DATA) c.buffer.preencode(state, m.data)\n  },\n  encode(state, m) {\n    c.uint.encode(state, m.stream)\n\n    if (m.stream & s.ERROR) error.encode(state, m.error)\n    else if (m.stream & s.DATA) c.buffer.encode(state, m.data)\n  },\n  decode(state) {\n    const stream = c.uint.decode(state)\n\n    if (stream & s.ERROR)\n      return { stream, error: error.decode(state), data: null }\n    if (stream & s.DATA)\n      return { stream, error: null, data: c.buffer.decode(state) }\n\n    return { stream, error: null, data: null }\n  }\n}\n\nexports.message = {\n  preencode(state, m) {\n    c.uint32.preencode(state, 0) // Frame\n    c.uint.preencode(state, m.type)\n    c.uint.preencode(state, m.id)\n\n    switch (m.type) {\n      case t.REQUEST:\n        request.preencode(state, m)\n        break\n      case t.RESPONSE:\n        response.preencode(state, m)\n        break\n      case t.STREAM:\n        stream.preencode(state, m)\n        break\n    }\n  },\n  encode(state, m) {\n    const frame = state.start\n\n    c.uint32.encode(state, 0) // Frame\n\n    const start = state.start\n\n    c.uint.encode(state, m.type)\n    c.uint.encode(state, m.id)\n\n    switch (m.type) {\n      case t.REQUEST:\n        request.encode(state, m)\n        break\n      case t.RESPONSE:\n        response.encode(state, m)\n        break\n      case t.STREAM:\n        stream.encode(state, m)\n        break\n    }\n\n    const end = state.start\n\n    state.start = frame\n\n    c.uint32.encode(state, end - start)\n\n    state.start = end\n  },\n  decode(state) {\n    if (state.end - state.start < 4) return null\n\n    const frame = c.uint32.decode(state)\n\n    if (state.end - state.start < frame) return null\n\n    const type = c.uint.decode(state)\n    const id = c.uint.decode(state)\n\n    switch (type) {\n      case t.REQUEST:\n        return { type, id, ...request.decode(state, id) }\n      case t.RESPONSE:\n        return { type, id, ...response.decode(state, id) }\n      case t.STREAM:\n        return { type, id, ...stream.decode(state, id) }\n      default:\n        throw errors.UNKNOWN_MESSAGE(`Unknown message '${type}'`)\n    }\n  }\n}\nconst b4a = require('b4a')\nconst errors = require('./errors')\n\nmodule.exports = class RPCOutgoingRequest {\n  constructor(rpc, id, command) {\n    this.rpc = rpc\n    this.id = id\n    this.command = command\n    this.sent = false\n\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve\n      this._reject = reject\n    })\n\n    this._requestStream = null\n    this._responseStream = null\n  }\n\n  send(data, encoding) {\n    if (this.sent) throw errors.ALREADY_SENT('Request has already been sent')\n    this.sent = true\n\n    this.rpc._sendRequest(\n      this,\n      typeof data === 'string' ? b4a.from(data, encoding) : data\n    )\n  }\n\n  reply(encoding) {\n    return encoding && encoding !== 'buffer'\n      ? this._promise.then((data) => b4a.toString(data, encoding))\n      : this._promise\n  }\n\n  createRequestStream(opts = {}) {\n    if (this._requestStream === null) {\n      this.rpc._createRequestStream(this, true, opts)\n    }\n\n    return this._requestStream\n  }\n\n  createResponseStream(opts = {}) {\n    if (this._requestStream === null) {\n      this.rpc._createResponseStream(this, false, opts)\n    }\n\n    return this._responseStream\n  }\n}\nconst { Writable } = require('bare-stream')\nconst { type: t, stream: s } = require('./constants')\n\nmodule.exports = class RPCOutgoingStream extends Writable {\n  constructor(rpc, request, type, opts) {\n    super({ ...opts, eagerOpen: true })\n\n    this._rpc = rpc\n    this._request = request\n    this._type = type\n    this._mask = type === t.REQUEST ? s.REQUEST : s.RESPONSE\n\n    this._pendingOpen = null\n  }\n\n  _open(cb) {\n    let pending\n\n    switch (this._type) {\n      case t.REQUEST:\n        pending = this._rpc._pendingRequests\n\n        this._rpc._sendMessage({\n          type: t.REQUEST,\n          id: this._request.id,\n          command: this._request.command,\n          stream: s.OPEN,\n          data: null\n        })\n        break\n\n      case t.RESPONSE:\n        pending = this._rpc._pendingResponses\n\n        this._rpc._sendMessage({\n          type: t.RESPONSE,\n          id: this._request.id,\n          error: false,\n          stream: s.OPEN,\n          data: null\n        })\n        break\n    }\n\n    if (pending.has(this._request.id)) {\n      pending.delete(this._request.id)\n\n      cb(null)\n    } else {\n      this._pendingOpen = cb\n    }\n  }\n\n  _continueOpen() {\n    if (this._pendingOpen === null) return\n    const cb = this._pendingOpen\n    this._pendingOpen = null\n    cb()\n  }\n\n  _write(data, encoding, cb) {\n    this._rpc._sendMessage({\n      type: t.STREAM,\n      id: this._request.id,\n      stream: this._mask | s.DATA,\n      error: null,\n      data\n    })\n\n    cb(null)\n  }\n\n  _final(cb) {\n    this._rpc._sendMessage({\n      type: t.STREAM,\n      id: this._request.id,\n      stream: this._mask | s.END,\n      error: null,\n      data: null\n    })\n\n    cb(null)\n  }\n\n  _destroy(err, cb) {\n    if (err) {\n      this._rpc._sendMessage({\n        type: t.STREAM,\n        id: this._request.id,\n        stream: this._mask | s.CLOSE | s.ERROR,\n        error: err,\n        data: null\n      })\n    } else {\n      this._rpc._sendMessage({\n        type: t.STREAM,\n        id: this._request.id,\n        stream: this._mask | s.CLOSE,\n        error: null,\n        data: null\n      })\n    }\n\n    cb(null)\n  }\n}\n{\n  \"name\": \"bare-rpc\",\n  \"version\": \"0.1.4\",\n  \"description\": \"librpc ABI compatible RPC for Bare\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./index.d.ts\",\n      \"default\": \"./index.js\"\n    },\n    \"./package\": \"./package.json\",\n    \"./errors\": {\n      \"types\": \"./lib/errors.d.ts\",\n      \"default\": \"./lib/errors.js\"\n    }\n  },\n  \"files\": [\n    \"index.js\",\n    \"index.d.ts\",\n    \"lib\"\n  ],\n  \"scripts\": {\n    \"test\": \"prettier . --check && bare test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bare-rpc.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bare-rpc/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bare-rpc#readme\",\n  \"dependencies\": {\n    \"b4a\": \"^1.6.6\",\n    \"bare-stream\": \"^2.1.3\",\n    \"compact-encoding\": \"^2.15.0\",\n    \"safety-catch\": \"^1.0.2\"\n  },\n  \"devDependencies\": {\n    \"bare-buffer\": \"^3.0.1\",\n    \"brittle\": \"^3.2.1\",\n    \"prettier\": \"^3.4.2\",\n    \"prettier-config-standard\": \"^7.0.0\"\n  },\n  \"peerDependencies\": {\n    \"bare-buffer\": \"*\"\n  },\n  \"peerDependenciesMeta\": {\n    \"bare-buffer\": {\n      \"optional\": true\n    }\n  }\n}\nexports.constants = require('./lib/constants')\nexports.errors = require('./lib/errors')\n\nconst Version = exports.Version = require('./lib/version')\nconst Range = exports.Range = require('./lib/range')\nexports.Comparator = require('./lib/comparator')\n\nexports.satisfies = function satisfies (version, range) {\n  if (typeof version === 'string') version = Version.parse(version)\n  if (typeof range === 'string') range = Range.parse(range)\n\n  return range.test(version)\n}\nconst constants = require('./constants')\n\nconst symbols = {\n  [constants.EQ]: '=',\n  [constants.LT]: '<',\n  [constants.LTE]: '<=',\n  [constants.GT]: '>',\n  [constants.GTE]: '>='\n}\n\nmodule.exports = class Comparator {\n  constructor (operator, version) {\n    this.operator = operator\n    this.version = version\n  }\n\n  test (version) {\n    const result = version.compare(this.version)\n\n    switch (this.operator) {\n      case constants.LT: return result < 0\n      case constants.LTE: return result <= 0\n      case constants.GT: return result > 0\n      case constants.GTE: return result >= 0\n      default: return result === 0\n    }\n  }\n\n  toString () {\n    return symbols[this.operator] + this.version\n  }\n}\nmodule.exports = {\n  EQ: 1,\n  LT: 2,\n  LTE: 3,\n  GT: 4,\n  GTE: 5\n}\nmodule.exports = class SemVerError extends Error {\n  constructor (msg, code, fn = SemVerError) {\n    super(`${code}: ${msg}`)\n    this.code = code\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, fn)\n    }\n  }\n\n  get name () {\n    return 'SemVerError'\n  }\n\n  static INVALID_VERSION (msg, fn = SemVerError.INVALID_VERSION) {\n    return new SemVerError(msg, 'INVALID_VERSION', fn)\n  }\n\n  static INVALID_RANGE (msg, fn = SemVerError.INVALID_RANGE) {\n    return new SemVerError(msg, 'INVALID_RANGE', fn)\n  }\n}\nconst constants = require('./constants')\nconst errors = require('./errors')\nconst Version = require('./version')\nconst Comparator = require('./comparator')\n\nconst Range = module.exports = exports = class Range {\n  constructor (comparators = []) {\n    this.comparators = comparators\n  }\n\n  test (version) {\n    for (const set of this.comparators) {\n      let matches = true\n\n      for (const comparator of set) {\n        if (comparator.test(version)) continue\n        matches = false\n        break\n      }\n\n      if (matches) return true\n    }\n\n    return false\n  }\n\n  toString () {\n    let result = ''\n    let first = true\n\n    for (const set of this.comparators) {\n      if (first) first = false\n      else result += ' || '\n\n      result += set.join(' ')\n    }\n\n    return result\n  }\n}\n\nexports.parse = function parse (input, state = { position: 0, partial: false }) {\n  let i = state.position\n  let c\n\n  const unexpected = (expected) => {\n    let msg\n\n    if (i >= input.length) {\n      msg = `Unexpected end of input in '${input}'`\n    } else {\n      msg = `Unexpected token '${input[i]}' in '${input}' at position ${i}`\n    }\n\n    if (expected) msg += `, ${expected}`\n\n    throw errors.INVALID_VERSION(msg, unexpected)\n  }\n\n  const comparators = []\n\n  while (i < input.length) {\n    const set = []\n\n    while (i < input.length) {\n      c = input[i]\n\n      let operator = constants.EQ\n\n      if (c === '<') {\n        operator = constants.LT\n        c = input[++i]\n\n        if (c === '=') {\n          operator = constants.LTE\n          c = input[++i]\n        }\n      } else if (c === '>') {\n        operator = constants.GT\n        c = input[++i]\n\n        if (c === '=') {\n          operator = constants.GTE\n          c = input[++i]\n        }\n      } else if (c === '=') {\n        c = input[++i]\n      }\n\n      const state = { position: i, partial: true }\n\n      set.push(new Comparator(operator, Version.parse(input, state)))\n\n      c = input[i = state.position]\n\n      while (c === ' ') c = input[++i]\n\n      if (c === '|' && input[i + 1] === '|') {\n        c = input[i += 2]\n\n        while (c === ' ') c = input[++i]\n\n        break\n      }\n\n      if (c && c !== '<' && c !== '>') unexpected('expected \\'||\\', \\'<\\', or \\'>\\'')\n    }\n\n    if (set.length) comparators.push(set)\n  }\n\n  if (i < input.length && state.partial === false) unexpected('expected end of input')\n\n  state.position = i\n\n  return new Range(comparators)\n}\nconst errors = require('./errors')\n\nconst Version = module.exports = exports = class Version {\n  constructor (major, minor, patch, opts = {}) {\n    const {\n      prerelease = [],\n      build = []\n    } = opts\n\n    this.major = major\n    this.minor = minor\n    this.patch = patch\n    this.prerelease = prerelease\n    this.build = build\n  }\n\n  compare (version) {\n    return exports.compare(this, version)\n  }\n\n  toString () {\n    let result = `${this.major}.${this.minor}.${this.patch}`\n\n    if (this.prerelease.length) {\n      result += '-' + this.prerelease.join('.')\n    }\n\n    if (this.build.length) {\n      result += '+' + this.build.join('.')\n    }\n\n    return result\n  }\n}\n\nexports.parse = function parse (input, state = { position: 0, partial: false }) {\n  let i = state.position\n  let c\n\n  const unexpected = (expected) => {\n    let msg\n\n    if (i >= input.length) {\n      msg = `Unexpected end of input in '${input}'`\n    } else {\n      msg = `Unexpected token '${input[i]}' in '${input}' at position ${i}`\n    }\n\n    if (expected) msg += `, ${expected}`\n\n    throw errors.INVALID_VERSION(msg, unexpected)\n  }\n\n  const components = []\n\n  while (components.length < 3) {\n    c = input[i]\n\n    if (components.length > 0) {\n      if (c === '.') c = input[++i]\n      else unexpected('expected \\'.\\'')\n    }\n\n    if (c === '0') {\n      components.push(0)\n\n      i++\n    } else if (c >= '1' && c <= '9') {\n      let j = 0\n      do c = input[i + ++j]\n      while (c >= '0' && c <= '9')\n\n      components.push(parseInt(input.substring(i, i + j)))\n\n      i += j\n    } else unexpected('expected /[0-9]/')\n  }\n\n  const prerelease = []\n\n  if (input[i] === '-') {\n    i++\n\n    while (true) {\n      c = input[i]\n\n      let tag = ''\n      let j = 0\n\n      while (c >= '0' && c <= '9') c = input[i + ++j]\n\n      let isNumeric = false\n\n      if (j) {\n        tag += input.substring(i, i + j)\n\n        c = input[i += j]\n\n        isNumeric = tag[0] !== '0' || tag.length === 1\n      }\n\n      j = 0\n\n      while ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c === '-') c = input[i + ++j]\n\n      if (j) {\n        tag += input.substring(i, i + j)\n\n        c = input[i += j]\n      } else if (!isNumeric) unexpected('expected /[a-zA-Z-]/')\n\n      prerelease.push(tag)\n\n      if (c === '.') c = input[++i]\n      else break\n    }\n  }\n\n  const build = []\n\n  if (input[i] === '+') {\n    i++\n\n    while (true) {\n      c = input[i]\n\n      let tag = ''\n      let j = 0\n\n      while ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c === '-') c = input[i + ++j]\n\n      if (j) {\n        tag += input.substring(i, i + j)\n\n        c = input[i += j]\n      } else unexpected('expected /[0-9a-zA-Z-]/')\n\n      build.push(tag)\n\n      if (c === '.') c = input[++i]\n      else break\n    }\n  }\n\n  if (i < input.length && state.partial === false) unexpected('expected end of input')\n\n  state.position = i\n\n  return new Version(...components, { prerelease, build })\n}\n\nconst integer = /^[0-9]+$/\n\nexports.compare = function compare (a, b) {\n  if (a.major > b.major) return 1\n  if (a.major < b.major) return -1\n\n  if (a.minor > b.minor) return 1\n  if (a.minor < b.minor) return -1\n\n  if (a.patch > b.patch) return 1\n  if (a.patch < b.patch) return -1\n\n  if (a.prerelease.length === 0) return b.prerelease.length === 0 ? 0 : 1\n  if (b.prerelease.length === 0) return -1\n\n  let i = 0\n  do {\n    let x = a.prerelease[i]\n    let y = b.prerelease[i]\n\n    if (x === undefined) return y === undefined ? 0 : -1\n    if (y === undefined) return 1\n\n    if (x === y) continue\n\n    const xInt = integer.test(x)\n    const yInt = integer.test(y)\n\n    if (xInt && yInt) {\n      x = +x\n      y = +y\n    } else {\n      if (xInt) return -1\n      if (yInt) return 1\n    }\n\n    return x > y ? 1 : -1\n  } while (++i)\n}\n{\n  \"name\": \"bare-semver\",\n  \"version\": \"1.0.1\",\n  \"description\": \"Minimal semantic versioning library for Bare\",\n  \"exports\": {\n    \".\": \"./index.js\",\n    \"./package\": \"./package.json\",\n    \"./constants\": \"./lib/constants.js\",\n    \"./errors\": \"./lib/errors.js\",\n    \"./version\": \"./lib/version.js\",\n    \"./range\": \"./lib/range.js\",\n    \"./comparator\": \"./lib/comparator.js\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"lib\"\n  ],\n  \"scripts\": {\n    \"test\": \"standard && bare test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bare-semver.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bare-semver/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bare-semver#readme\",\n  \"devDependencies\": {\n    \"brittle\": \"^3.2.1\",\n    \"standard\": \"^17.0.0\"\n  }\n}\nconst stream = require('streamx')\n\nconst defaultEncoding = 'utf8'\n\nmodule.exports = exports = stream.Stream\n\nexports.pipeline = stream.pipeline\n\nexports.isStream = stream.isStream\nexports.isEnded = stream.isEnded\nexports.isFinished = stream.isFinished\nexports.isDisturbed = stream.isDisturbed\n\nexports.getStreamError = stream.getStreamError\n\nexports.Stream = exports\n\nexports.Readable = class Readable extends stream.Readable {\n  constructor(opts = {}) {\n    super({\n      ...opts,\n      byteLength: null,\n      byteLengthReadable: null,\n      map: null,\n      mapReadable: null\n    })\n\n    if (this._construct) this._open = this._construct\n\n    if (this._read !== stream.Readable.prototype._read) {\n      this._read = read.bind(this, this._read)\n    }\n\n    if (this._destroy !== stream.Stream.prototype._destroy) {\n      this._destroy = destroy.bind(this, this._destroy)\n    }\n  }\n\n  push(chunk, encoding) {\n    if (typeof chunk === 'string') {\n      chunk = Buffer.from(chunk, encoding || defaultEncoding)\n    }\n\n    return super.push(chunk)\n  }\n\n  unshift(chunk, encoding) {\n    if (typeof chunk === 'string') {\n      chunk = Buffer.from(chunk, encoding || defaultEncoding)\n    }\n\n    super.unshift(chunk)\n  }\n}\n\nexports.Writable = class Writable extends stream.Writable {\n  constructor(opts = {}) {\n    super({\n      ...opts,\n      byteLength: null,\n      byteLengthWritable,\n      map: null,\n      mapWritable: null\n    })\n\n    if (this._construct) this._open = this._construct\n\n    if (this._write !== stream.Writable.prototype._write) {\n      this._write = write.bind(this, this._write)\n    }\n\n    if (this._destroy !== stream.Stream.prototype._destroy) {\n      this._destroy = destroy.bind(this, this._destroy)\n    }\n  }\n\n  write(chunk, encoding, cb) {\n    if (typeof encoding === 'function') {\n      cb = encoding\n      encoding = null\n    }\n\n    if (typeof chunk === 'string') {\n      encoding = encoding || defaultEncoding\n      chunk = Buffer.from(chunk, encoding)\n    } else {\n      encoding = 'buffer'\n    }\n\n    const result = super.write({ chunk, encoding })\n\n    if (cb) stream.Writable.drained(this).then(() => cb(null), cb)\n\n    return result\n  }\n\n  end(chunk, encoding, cb) {\n    if (typeof chunk === 'function') {\n      cb = chunk\n      chunk = null\n    } else if (typeof encoding === 'function') {\n      cb = encoding\n      encoding = null\n    }\n\n    if (typeof chunk === 'string') {\n      encoding = encoding || defaultEncoding\n      chunk = Buffer.from(chunk, encoding || defaultEncoding)\n    } else {\n      encoding = 'buffer'\n    }\n\n    const result =\n      chunk !== undefined && chunk !== null\n        ? super.end({ chunk, encoding })\n        : super.end()\n\n    if (cb) this.once('end', () => cb(null))\n\n    return result\n  }\n}\n\nexports.Duplex = class Duplex extends stream.Duplex {\n  constructor(opts = {}) {\n    super({\n      ...opts,\n      byteLength: null,\n      byteLengthReadable: null,\n      byteLengthWritable,\n      map: null,\n      mapReadable: null,\n      mapWritable: null\n    })\n\n    if (this._construct) this._open = this._construct\n\n    if (this._read !== stream.Readable.prototype._read) {\n      this._read = read.bind(this, this._read)\n    }\n\n    if (this._write !== stream.Duplex.prototype._write) {\n      this._write = write.bind(this, this._write)\n    }\n\n    if (this._destroy !== stream.Stream.prototype._destroy) {\n      this._destroy = destroy.bind(this, this._destroy)\n    }\n  }\n\n  push(chunk, encoding) {\n    if (typeof chunk === 'string') {\n      chunk = Buffer.from(chunk, encoding || defaultEncoding)\n    }\n\n    return super.push(chunk)\n  }\n\n  unshift(chunk, encoding) {\n    if (typeof chunk === 'string') {\n      chunk = Buffer.from(chunk, encoding || defaultEncoding)\n    }\n\n    super.unshift(chunk)\n  }\n\n  write(chunk, encoding, cb) {\n    if (typeof encoding === 'function') {\n      cb = encoding\n      encoding = null\n    }\n\n    if (typeof chunk === 'string') {\n      encoding = encoding || defaultEncoding\n      chunk = Buffer.from(chunk, encoding)\n    } else {\n      encoding = 'buffer'\n    }\n\n    const result = super.write({ chunk, encoding })\n\n    if (cb) stream.Writable.drained(this).then(() => cb(null), cb)\n\n    return result\n  }\n\n  end(chunk, encoding, cb) {\n    if (typeof chunk === 'function') {\n      cb = chunk\n      chunk = null\n    } else if (typeof encoding === 'function') {\n      cb = encoding\n      encoding = null\n    }\n\n    if (typeof chunk === 'string') {\n      encoding = encoding || defaultEncoding\n      chunk = Buffer.from(chunk, encoding)\n    } else {\n      encoding = 'buffer'\n    }\n\n    const result =\n      chunk !== undefined && chunk !== null\n        ? super.end({ chunk, encoding })\n        : super.end()\n\n    if (cb) this.once('end', () => cb(null))\n\n    return result\n  }\n}\n\nexports.Transform = class Transform extends stream.Transform {\n  constructor(opts = {}) {\n    super({\n      ...opts,\n      byteLength: null,\n      byteLengthReadable: null,\n      byteLengthWritable,\n      map: null,\n      mapReadable: null,\n      mapWritable: null\n    })\n\n    if (this._transform !== stream.Transform.prototype._transform) {\n      this._transform = transform.bind(this, this._transform)\n    } else {\n      this._transform = passthrough\n    }\n  }\n\n  push(chunk, encoding) {\n    if (typeof chunk === 'string') {\n      chunk = Buffer.from(chunk, encoding || defaultEncoding)\n    }\n\n    return super.push(chunk)\n  }\n\n  unshift(chunk, encoding) {\n    if (typeof chunk === 'string') {\n      chunk = Buffer.from(chunk, encoding || defaultEncoding)\n    }\n\n    super.unshift(chunk)\n  }\n\n  write(chunk, encoding, cb) {\n    if (typeof encoding === 'function') {\n      cb = encoding\n      encoding = null\n    }\n\n    if (typeof chunk === 'string') {\n      encoding = encoding || defaultEncoding\n      chunk = Buffer.from(chunk, encoding)\n    } else {\n      encoding = 'buffer'\n    }\n\n    const result = super.write({ chunk, encoding })\n\n    if (cb) stream.Writable.drained(this).then(() => cb(null), cb)\n\n    return result\n  }\n\n  end(chunk, encoding, cb) {\n    if (typeof chunk === 'function') {\n      cb = chunk\n      chunk = null\n    } else if (typeof encoding === 'function') {\n      cb = encoding\n      encoding = null\n    }\n\n    if (typeof chunk === 'string') {\n      encoding = encoding || defaultEncoding\n      chunk = Buffer.from(chunk, encoding)\n    } else {\n      encoding = 'buffer'\n    }\n\n    const result =\n      chunk !== undefined && chunk !== null\n        ? super.end({ chunk, encoding })\n        : super.end()\n\n    if (cb) this.once('end', () => cb(null))\n\n    return result\n  }\n}\n\nexports.PassThrough = class PassThrough extends exports.Transform {}\n\nexports.finished = function finished(stream, opts, cb) {\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  }\n\n  if (!opts) opts = {}\n\n  const { cleanup = false } = opts\n\n  const done = () => {\n    cb(exports.getStreamError(stream, { all: true }))\n\n    if (cleanup) detach()\n  }\n\n  const detach = () => {\n    stream.off('close', done)\n    stream.off('error', noop)\n  }\n\n  if (stream.destroyed) {\n    done()\n  } else {\n    stream.on('close', done)\n    stream.on('error', noop)\n  }\n\n  return detach\n}\n\nfunction read(read, cb) {\n  read.call(this, 65536)\n\n  cb(null)\n}\n\nfunction write(write, data, cb) {\n  write.call(this, data.chunk, data.encoding, cb)\n}\n\nfunction transform(transform, data, cb) {\n  transform.call(this, data.chunk, data.encoding, cb)\n}\n\nfunction destroy(destroy, cb) {\n  destroy.call(this, exports.getStreamError(this), cb)\n}\n\nfunction passthrough(data, cb) {\n  cb(null, data.chunk)\n}\n\nfunction byteLengthWritable(data) {\n  return data.chunk.byteLength\n}\n\nfunction noop() {}\n{\n  \"name\": \"bare-stream\",\n  \"version\": \"2.6.5\",\n  \"description\": \"Streaming data for JavaScript\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./index.d.ts\",\n      \"default\": \"./index.js\"\n    },\n    \"./package\": \"./package.json\",\n    \"./promises\": \"./promises.js\",\n    \"./web\": \"./web.js\",\n    \"./global\": \"./global.js\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"index.d.ts\",\n    \"promises.js\",\n    \"web.js\",\n    \"global.js\"\n  ],\n  \"scripts\": {\n    \"test\": \"prettier . --check && bare test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bare-stream.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bare-stream/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bare-stream#readme\",\n  \"dependencies\": {\n    \"streamx\": \"^2.21.0\"\n  },\n  \"devDependencies\": {\n    \"bare-buffer\": \"^3.0.0\",\n    \"bare-events\": \"^2.5.4\",\n    \"brittle\": \"^3.5.2\",\n    \"prettier\": \"^3.3.3\",\n    \"prettier-config-standard\": \"^7.0.0\"\n  },\n  \"peerDependencies\": {\n    \"bare-buffer\": \"*\",\n    \"bare-events\": \"*\"\n  },\n  \"peerDependenciesMeta\": {\n    \"bare-buffer\": {\n      \"optional\": true\n    },\n    \"bare-events\": {\n      \"optional\": true\n    }\n  }\n}\nmodule.exports = require.addon()\nconst path = require('bare-path')\nconst binding = require('./binding')\nconst errors = require('./lib/errors')\n\nconst isWindows = Bare.platform === 'win32'\n\nmodule.exports = exports = class URL {\n  static {\n    binding.tag(this)\n  }\n\n  constructor(input, base, opts = {}) {\n    if (arguments.length === 0) throw errors.INVALID_URL()\n\n    input = `${input}`\n\n    if (base !== undefined) base = `${base}`\n\n    this._components = new Uint32Array(8)\n\n    this._parse(input, base, opts.throw !== false)\n  }\n\n  // https://url.spec.whatwg.org/#dom-url-href\n\n  get href() {\n    return this._href\n  }\n\n  set href(value) {\n    this._update(value)\n  }\n\n  // https://url.spec.whatwg.org/#dom-url-protocol\n\n  get protocol() {\n    return this._slice(0, this._components[0]) + ':'\n  }\n\n  set protocol(value) {\n    this._update(\n      this._replace(value.replace(/:+$/, ''), 0, this._components[0])\n    )\n  }\n\n  // https://url.spec.whatwg.org/#dom-url-username\n\n  get username() {\n    return this._slice(this._components[0] + 3 /* :// */, this._components[1])\n  }\n\n  set username(value) {\n    if (cannotHaveCredentialsOrPort(this)) {\n      return\n    }\n\n    if (this.username === '') value += '@'\n\n    this._update(\n      this._replace(\n        value,\n        this._components[0] + 3 /* :// */,\n        this._components[1]\n      )\n    )\n  }\n\n  // https://url.spec.whatwg.org/#dom-url-password\n\n  get password() {\n    return this._href.slice(\n      this._components[1] + 1 /* : */,\n      this._components[2] - 1 /* @ */\n    )\n  }\n\n  set password(value) {\n    if (cannotHaveCredentialsOrPort(this)) {\n      return\n    }\n\n    let start = this._components[1] + 1 /* : */\n    let end = this._components[2] - 1 /* @ */\n\n    if (this.password === '') {\n      value = ':' + value\n      start--\n    }\n\n    if (this.username === '') {\n      value += '@'\n      end++\n    }\n\n    this._update(this._replace(value, start, end))\n  }\n\n  // https://url.spec.whatwg.org/#dom-url-host\n\n  get host() {\n    return this._slice(this._components[2], this._components[5])\n  }\n\n  set host(value) {\n    if (hasOpaquePath(this)) {\n      return\n    }\n\n    this._update(\n      this._replace(\n        value,\n        this._components[2],\n        this._components[value.includes(':') ? 5 : 3]\n      )\n    )\n  }\n\n  // https://url.spec.whatwg.org/#dom-url-hostname\n\n  get hostname() {\n    return this._slice(this._components[2], this._components[3])\n  }\n\n  set hostname(value) {\n    if (hasOpaquePath(this)) {\n      return\n    }\n\n    this._update(this._replace(value, this._components[2], this._components[3]))\n  }\n\n  // https://url.spec.whatwg.org/#dom-url-port\n\n  get port() {\n    return this._slice(this._components[3] + 1 /* : */, this._components[5])\n  }\n\n  set port(value) {\n    if (cannotHaveCredentialsOrPort(this)) {\n      return\n    }\n\n    let start = this._components[3] + 1 /* : */\n\n    if (this.port === '') {\n      value = ':' + value\n      start--\n    }\n\n    this._update(this._replace(value, start, this._components[5]))\n  }\n\n  // https://url.spec.whatwg.org/#dom-url-pathname\n\n  get pathname() {\n    return this._slice(this._components[5], this._components[6] - 1 /* ? */)\n  }\n\n  set pathname(value) {\n    if (hasOpaquePath(this)) {\n      return\n    }\n\n    if (value[0] !== '/' && value[0] !== '\\\\') {\n      value = '/' + value\n    }\n\n    this._update(\n      this._replace(value, this._components[5], this._components[6] - 1 /* ? */)\n    )\n  }\n\n  // https://url.spec.whatwg.org/#dom-url-search\n\n  get search() {\n    return this._slice(\n      this._components[6] - 1 /* ? */,\n      this._components[7] - 1 /* # */\n    )\n  }\n\n  set search(value) {\n    if (value && value[0] !== '?') value = '?' + value\n\n    this._update(\n      this._replace(\n        value,\n        this._components[6] - 1 /* ? */,\n        this._components[7] - 1 /* # */\n      )\n    )\n  }\n\n  // https://url.spec.whatwg.org/#dom-url-hash\n\n  get hash() {\n    return this._slice(this._components[7] - 1 /* # */)\n  }\n\n  set hash(value) {\n    if (value && value[0] !== '#') value = '#' + value\n\n    this._update(this._replace(value, this._components[7] - 1 /* # */))\n  }\n\n  toString() {\n    return this._href\n  }\n\n  toJSON() {\n    return this._href\n  }\n\n  [Symbol.for('bare.inspect')]() {\n    return {\n      __proto__: { constructor: URL },\n\n      href: this.href,\n      protocol: this.protocol,\n      username: this.username,\n      password: this.password,\n      host: this.host,\n      hostname: this.hostname,\n      port: this.port,\n      pathname: this.pathname,\n      search: this.search,\n      hash: this.hash\n    }\n  }\n\n  _slice(start, end = this._href.length) {\n    return this._href.slice(start, end)\n  }\n\n  _replace(replacement, start, end = this._href.length) {\n    return this._slice(0, start) + replacement + this._slice(end)\n  }\n\n  _parse(href, base, shouldThrow) {\n    try {\n      this._href = binding.parse(\n        String(href),\n        base ? String(base) : null,\n        this._components,\n        shouldThrow\n      )\n    } catch (err) {\n      if (err instanceof TypeError) throw err\n\n      throw errors.INVALID_URL()\n    }\n  }\n\n  _update(href) {\n    try {\n      this._parse(href, null, true)\n    } catch (err) {\n      if (err instanceof TypeError) throw err\n    }\n  }\n}\n\n// https://url.spec.whatwg.org/#url-opaque-path\nfunction hasOpaquePath(url) {\n  return url.pathname[0] !== '/'\n}\n\n// https://url.spec.whatwg.org/#cannot-have-a-username-password-port\nfunction cannotHaveCredentialsOrPort(url) {\n  return url.hostname === '' || url.protocol === 'file:'\n}\n\nconst URL = exports\n\nexports.URL = URL // For Node.js compatibility\n\nexports.errors = errors\n\nexports.isURL = function isURL(value) {\n  if (typeof value !== 'object' || value === null) return false\n\n  let constructor = value.constructor\n\n  while (typeof constructor === 'function') {\n    if (binding.isTagged(constructor)) return true\n\n    constructor = Reflect.getPrototypeOf(constructor)\n  }\n\n  return false\n}\n\nexports.parse = function parse(input, base) {\n  const url = new URL(input, base, { throw: false })\n  return url.href ? url : null\n}\n\nexports.canParse = function canParse(input, base) {\n  return binding.canParse(String(input), base ? String(base) : null)\n}\n\nexports.fileURLToPath = function fileURLToPath(url) {\n  if (typeof url === 'string') {\n    url = new URL(url)\n  }\n\n  if (url.protocol !== 'file:') {\n    throw errors.INVALID_URL_SCHEME('The URL must use the file: protocol')\n  }\n\n  if (isWindows) {\n    if (/%2f|%5c/i.test(url.pathname)) {\n      throw errors.INVALID_FILE_URL_PATH(\n        'The file: URL path must not include encoded \\\\ or / characters'\n      )\n    }\n  } else {\n    if (url.hostname) {\n      throw errors.INVALID_FILE_URL_HOST(\n        \"The file: URL host must be 'localhost' or empty\"\n      )\n    }\n\n    if (/%2f/i.test(url.pathname)) {\n      throw errors.INVALID_FILE_URL_PATH(\n        'The file: URL path must not include encoded / characters'\n      )\n    }\n  }\n\n  const pathname = path.normalize(decodeURIComponent(url.pathname))\n\n  if (isWindows) {\n    if (url.hostname) return '\\\\\\\\' + url.hostname + pathname\n\n    const letter = pathname.charCodeAt(1) | 0x20\n\n    if (\n      letter < 0x61 /* a */ ||\n      letter > 0x7a /* z */ ||\n      pathname.charCodeAt(2) !== 0x3a /* : */\n    ) {\n      throw errors.INVALID_FILE_URL_PATH('The file: URL path must be absolute')\n    }\n\n    return pathname.slice(1)\n  }\n\n  return pathname\n}\n\nexports.pathToFileURL = function pathToFileURL(pathname) {\n  let resolved = path.resolve(pathname)\n\n  if (pathname[pathname.length - 1] === '/') {\n    resolved += '/'\n  } else if (isWindows && pathname[pathname.length - 1] === '\\\\') {\n    resolved += '\\\\'\n  }\n\n  resolved = resolved\n    .replaceAll('%', '%25') // Must be first\n    .replaceAll('#', '%23')\n    .replaceAll('?', '%3f')\n    .replaceAll('\\n', '%0a')\n    .replaceAll('\\r', '%0d')\n    .replaceAll('\\t', '%09')\n\n  if (!isWindows) {\n    resolved = resolved.replaceAll('\\\\', '%5c')\n  }\n\n  return new URL('file:' + resolved)\n}\nmodule.exports = class URLError extends Error {\n  constructor(msg, code, fn = URLError) {\n    super(`${code}: ${msg}`)\n    this.code = code\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, fn)\n    }\n  }\n\n  get name() {\n    return 'URLError'\n  }\n\n  static INVALID_URL(msg = 'Invalid URL') {\n    return new URLError(msg, 'INVALID_URL', URLError.INVALID_URL)\n  }\n\n  static INVALID_URL_SCHEME(msg = 'Invalid URL') {\n    return new URLError(msg, 'INVALID_URL_SCHEME', URLError.INVALID_URL_SCHEME)\n  }\n\n  static INVALID_FILE_URL_HOST(msg = 'Invalid file: URL host') {\n    return new URLError(\n      msg,\n      'INVALID_FILE_URL_HOST',\n      URLError.INVALID_FILE_URL_HOST\n    )\n  }\n\n  static INVALID_FILE_URL_PATH(msg = 'Invalid file: URL path') {\n    return new URLError(\n      msg,\n      'INVALID_FILE_URL_PATH',\n      URLError.INVALID_FILE_URL_PATH\n    )\n  }\n}\n{\n  \"name\": \"bare-url\",\n  \"version\": \"2.1.5\",\n  \"description\": \"WHATWG URL implementation for JavaScript\",\n  \"exports\": {\n    \"./package\": \"./package.json\",\n    \".\": {\n      \"types\": \"./index.d.ts\",\n      \"default\": \"./index.js\"\n    },\n    \"./global\": {\n      \"types\": \"./global.d.ts\",\n      \"default\": \"./global.js\"\n    }\n  },\n  \"files\": [\n    \"index.js\",\n    \"index.d.ts\",\n    \"global.js\",\n    \"global.d.ts\",\n    \"binding.c\",\n    \"binding.js\",\n    \"CMakeLists.txt\",\n    \"lib\",\n    \"prebuilds\"\n  ],\n  \"addon\": true,\n  \"scripts\": {\n    \"test\": \"prettier . --check && bare test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bare-url.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bare-url/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bare-url\",\n  \"dependencies\": {\n    \"bare-path\": \"^3.0.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.3.2\",\n    \"cmake-bare\": \"^1.1.6\",\n    \"cmake-fetch\": \"^1.0.0\",\n    \"prettier\": \"^3.3.3\",\n    \"prettier-config-standard\": \"^7.0.0\"\n  }\n}\nconst FACTOR = new Uint16Array(8)\n\nfunction factor4096 (i, n) {\n  while (n > 0) {\n    const f = i & 4095\n    FACTOR[--n] = f\n    i = (i - f) / 4096\n  }\n  return FACTOR\n}\n\nmodule.exports = class BigSparseArray {\n  constructor () {\n    this.tiny = new TinyArray()\n    this.maxLength = 4096\n    this.factor = 1\n  }\n\n  set (index, val) {\n    if (val !== undefined) {\n      while (index >= this.maxLength) {\n        this.maxLength *= 4096\n        this.factor++\n        if (!this.tiny.isEmptyish()) {\n          const t = new TinyArray()\n          t.set(0, this.tiny)\n          this.tiny = t\n        }\n      }\n    }\n\n    const f = factor4096(index, this.factor)\n    const last = this.factor - 1\n\n    let tiny = this.tiny\n    for (let i = 0; i < last; i++) {\n      const next = tiny.get(f[i])\n      if (next === undefined) {\n        if (val === undefined) return\n        tiny = tiny.set(f[i], new TinyArray())\n      } else {\n        tiny = next\n      }\n    }\n\n    return tiny.set(f[last], val)\n  }\n\n  get (index) {\n    if (index >= this.maxLength) return\n\n    const f = factor4096(index, this.factor)\n    const last = this.factor - 1\n\n    let tiny = this.tiny\n    for (let i = 0; i < last; i++) {\n      tiny = tiny.get(f[i])\n      if (tiny === undefined) return\n    }\n\n    return tiny.get(f[last])\n  }\n}\n\nclass TinyArray {\n  constructor () {\n    this.s = 0\n    this.b = new Array(1)\n    this.f = new Uint16Array(1)\n  }\n\n  isEmptyish () {\n    return this.b.length === 1 && this.b[0] === undefined\n  }\n\n  get (i) {\n    if (this.s === 12) return this.b[i]\n    const f = i >>> this.s\n    const r = i & (this.b.length - 1)\n    return this.f[r] === f ? this.b[r] : undefined\n  }\n\n  set (i, v) {\n    while (this.s !== 12) {\n      const f = i >>> this.s\n      const r = i & (this.b.length - 1)\n      const o = this.b[r]\n\n      if (o === undefined || f === this.f[r]) {\n        this.b[r] = v\n        this.f[r] = f\n        return v\n      }\n\n      this.grow()\n    }\n\n    this.b[i] = v\n    return v\n  }\n\n  grow () {\n    const os = this.s\n    const ob = this.b\n    const of = this.f\n\n    this.s += 4\n    this.b = new Array(this.b.length << 4)\n    this.f = this.s === 12 ? null : new Uint8Array(this.b.length)\n\n    const m = this.b.length - 1\n\n    for (let or = 0; or < ob.length; or++) {\n      if (ob[or] === undefined) continue\n\n      const i = of[or] << os | or\n      const f = i >>> this.s\n      const r = i & m\n\n      this.b[r] = ob[or]\n      if (this.s !== 12) this.f[r] = f\n    }\n  }\n}\n{\n  \"name\": \"big-sparse-array\",\n  \"version\": \"1.0.3\",\n  \"description\": \"A sparse array optimised for low memory whilst still being fast\",\n  \"main\": \"index.js\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.1\",\n    \"standard\": \"^16.0.3\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/big-sparse-array.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/big-sparse-array/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/big-sparse-array\"\n}\n{\n  \"name\": \"bip39\",\n  \"version\": \"3.1.0\",\n  \"description\": \"Bitcoin BIP39: Mnemonic code for generating deterministic keys\",\n  \"main\": \"src/index.js\",\n  \"types\": \"./types/index.d.ts\",\n  \"scripts\": {\n    \"build\": \"npm run clean && tsc -p tsconfig.json\",\n    \"clean\": \"rm -rf src\",\n    \"coverage\": \"nyc --branches 85 --functions 100 --check-coverage npm run unit\",\n    \"format\": \"npm run prettier -- --write\",\n    \"format:ci\": \"npm run prettier -- --check\",\n    \"gitdiff:ci\": \"npm run build && git diff --exit-code\",\n    \"lint\": \"tslint -p tsconfig.json -c tslint.json\",\n    \"prettier\": \"prettier 'ts_src/**/*.ts' --ignore-path ./.prettierignore\",\n    \"test\": \"npm run build && npm run format:ci && npm run lint && npm run unit\",\n    \"unit\": \"tape test/*.js\",\n    \"update\": \"node -e \\\"require('./util/wordlists').update()\\\"\"\n  },\n  \"author\": \"Wei Lu\",\n  \"contributors\": [\n    {\n      \"name\": \"Daniel Cousens\",\n      \"email\": \"email@dcousens.com\",\n      \"url\": \"http://dcousens.com\"\n    }\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/bitcoinjs/bip39.git\"\n  },\n  \"license\": \"ISC\",\n  \"files\": [\n    \"src\",\n    \"types\"\n  ],\n  \"dependencies\": {\n    \"@noble/hashes\": \"^1.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"11.11.6\",\n    \"node-fetch\": \"2.6.9\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"1.16.4\",\n    \"proxyquire\": \"^1.7.10\",\n    \"tape\": \"^4.13.2\",\n    \"tslint\": \"^6.1.0\",\n    \"typescript\": \"3.3.4000\"\n  }\n}\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// browserify by default only pulls in files that are hard coded in requires\n// In order of last to first in this file, the default wordlist will be chosen\n// based on what is present. (Bundles may remove wordlists they don't need)\nconst wordlists = {};\nexports.wordlists = wordlists;\nlet _default;\nexports._default = _default;\ntry {\n    exports._default = _default = require('./wordlists/czech.json');\n    wordlists.czech = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/chinese_simplified.json');\n    wordlists.chinese_simplified = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/chinese_traditional.json');\n    wordlists.chinese_traditional = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/korean.json');\n    wordlists.korean = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/french.json');\n    wordlists.french = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/italian.json');\n    wordlists.italian = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/spanish.json');\n    wordlists.spanish = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/japanese.json');\n    wordlists.japanese = _default;\n    wordlists.JA = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/portuguese.json');\n    wordlists.portuguese = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/english.json');\n    wordlists.english = _default;\n    wordlists.EN = _default;\n}\ncatch (err) { }\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst sha512_1 = require(\"@noble/hashes/sha512\");\nconst pbkdf2_1 = require(\"@noble/hashes/pbkdf2\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst _wordlists_1 = require(\"./_wordlists\");\nlet DEFAULT_WORDLIST = _wordlists_1._default;\nconst INVALID_MNEMONIC = 'Invalid mnemonic';\nconst INVALID_ENTROPY = 'Invalid entropy';\nconst INVALID_CHECKSUM = 'Invalid mnemonic checksum';\nconst WORDLIST_REQUIRED = 'A wordlist is required but a default could not be found.\\n' +\n    'Please pass a 2048 word array explicitly.';\nfunction normalize(str) {\n    return (str || '').normalize('NFKD');\n}\nfunction lpad(str, padString, length) {\n    while (str.length < length) {\n        str = padString + str;\n    }\n    return str;\n}\nfunction binaryToByte(bin) {\n    return parseInt(bin, 2);\n}\nfunction bytesToBinary(bytes) {\n    return bytes.map((x) => lpad(x.toString(2), '0', 8)).join('');\n}\nfunction deriveChecksumBits(entropyBuffer) {\n    const ENT = entropyBuffer.length * 8;\n    const CS = ENT / 32;\n    const hash = sha256_1.sha256(Uint8Array.from(entropyBuffer));\n    return bytesToBinary(Array.from(hash)).slice(0, CS);\n}\nfunction salt(password) {\n    return 'mnemonic' + (password || '');\n}\nfunction mnemonicToSeedSync(mnemonic, password) {\n    const mnemonicBuffer = Uint8Array.from(Buffer.from(normalize(mnemonic), 'utf8'));\n    const saltBuffer = Uint8Array.from(Buffer.from(salt(normalize(password)), 'utf8'));\n    const res = pbkdf2_1.pbkdf2(sha512_1.sha512, mnemonicBuffer, saltBuffer, {\n        c: 2048,\n        dkLen: 64,\n    });\n    return Buffer.from(res);\n}\nexports.mnemonicToSeedSync = mnemonicToSeedSync;\nfunction mnemonicToSeed(mnemonic, password) {\n    const mnemonicBuffer = Uint8Array.from(Buffer.from(normalize(mnemonic), 'utf8'));\n    const saltBuffer = Uint8Array.from(Buffer.from(salt(normalize(password)), 'utf8'));\n    return pbkdf2_1.pbkdf2Async(sha512_1.sha512, mnemonicBuffer, saltBuffer, {\n        c: 2048,\n        dkLen: 64,\n    }).then((res) => Buffer.from(res));\n}\nexports.mnemonicToSeed = mnemonicToSeed;\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n    wordlist = wordlist || DEFAULT_WORDLIST;\n    if (!wordlist) {\n        throw new Error(WORDLIST_REQUIRED);\n    }\n    const words = normalize(mnemonic).split(' ');\n    if (words.length % 3 !== 0) {\n        throw new Error(INVALID_MNEMONIC);\n    }\n    // convert word indices to 11 bit binary strings\n    const bits = words\n        .map((word) => {\n        const index = wordlist.indexOf(word);\n        if (index === -1) {\n            throw new Error(INVALID_MNEMONIC);\n        }\n        return lpad(index.toString(2), '0', 11);\n    })\n        .join('');\n    // split the binary string into ENT/CS\n    const dividerIndex = Math.floor(bits.length / 33) * 32;\n    const entropyBits = bits.slice(0, dividerIndex);\n    const checksumBits = bits.slice(dividerIndex);\n    // calculate the checksum and compare\n    const entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte);\n    if (entropyBytes.length < 16) {\n        throw new Error(INVALID_ENTROPY);\n    }\n    if (entropyBytes.length > 32) {\n        throw new Error(INVALID_ENTROPY);\n    }\n    if (entropyBytes.length % 4 !== 0) {\n        throw new Error(INVALID_ENTROPY);\n    }\n    const entropy = Buffer.from(entropyBytes);\n    const newChecksum = deriveChecksumBits(entropy);\n    if (newChecksum !== checksumBits) {\n        throw new Error(INVALID_CHECKSUM);\n    }\n    return entropy.toString('hex');\n}\nexports.mnemonicToEntropy = mnemonicToEntropy;\nfunction entropyToMnemonic(entropy, wordlist) {\n    if (!Buffer.isBuffer(entropy)) {\n        entropy = Buffer.from(entropy, 'hex');\n    }\n    wordlist = wordlist || DEFAULT_WORDLIST;\n    if (!wordlist) {\n        throw new Error(WORDLIST_REQUIRED);\n    }\n    // 128 <= ENT <= 256\n    if (entropy.length < 16) {\n        throw new TypeError(INVALID_ENTROPY);\n    }\n    if (entropy.length > 32) {\n        throw new TypeError(INVALID_ENTROPY);\n    }\n    if (entropy.length % 4 !== 0) {\n        throw new TypeError(INVALID_ENTROPY);\n    }\n    const entropyBits = bytesToBinary(Array.from(entropy));\n    const checksumBits = deriveChecksumBits(entropy);\n    const bits = entropyBits + checksumBits;\n    const chunks = bits.match(/(.{1,11})/g);\n    const words = chunks.map((binary) => {\n        const index = binaryToByte(binary);\n        return wordlist[index];\n    });\n    return wordlist[0] === '\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093' // Japanese wordlist\n        ? words.join('\\u3000')\n        : words.join(' ');\n}\nexports.entropyToMnemonic = entropyToMnemonic;\nfunction generateMnemonic(strength, rng, wordlist) {\n    strength = strength || 128;\n    if (strength % 32 !== 0) {\n        throw new TypeError(INVALID_ENTROPY);\n    }\n    rng = rng || ((size) => Buffer.from(utils_1.randomBytes(size)));\n    return entropyToMnemonic(rng(strength / 8), wordlist);\n}\nexports.generateMnemonic = generateMnemonic;\nfunction validateMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nexports.validateMnemonic = validateMnemonic;\nfunction setDefaultWordlist(language) {\n    const result = _wordlists_1.wordlists[language];\n    if (result) {\n        DEFAULT_WORDLIST = result;\n    }\n    else {\n        throw new Error('Could not find wordlist for language \"' + language + '\"');\n    }\n}\nexports.setDefaultWordlist = setDefaultWordlist;\nfunction getDefaultWordlist() {\n    if (!DEFAULT_WORDLIST) {\n        throw new Error('No Default Wordlist set');\n    }\n    return Object.keys(_wordlists_1.wordlists).filter((lang) => {\n        if (lang === 'JA' || lang === 'EN') {\n            return false;\n        }\n        return _wordlists_1.wordlists[lang].every((word, index) => word === DEFAULT_WORDLIST[index]);\n    })[0];\n}\nexports.getDefaultWordlist = getDefaultWordlist;\nvar _wordlists_2 = require(\"./_wordlists\");\nexports.wordlists = _wordlists_2.wordlists;\n[\n    \"的\",\n    \"一\",\n    \"是\",\n    \"在\",\n    \"不\",\n    \"了\",\n    \"有\",\n    \"和\",\n    \"人\",\n    \"这\",\n    \"中\",\n    \"大\",\n    \"为\",\n    \"上\",\n    \"个\",\n    \"国\",\n    \"我\",\n    \"以\",\n    \"要\",\n    \"他\",\n    \"时\",\n    \"来\",\n    \"用\",\n    \"们\",\n    \"生\",\n    \"到\",\n    \"作\",\n    \"地\",\n    \"于\",\n    \"出\",\n    \"就\",\n    \"分\",\n    \"对\",\n    \"成\",\n    \"会\",\n    \"可\",\n    \"主\",\n    \"发\",\n    \"年\",\n    \"动\",\n    \"同\",\n    \"工\",\n    \"也\",\n    \"能\",\n    \"下\",\n    \"过\",\n    \"子\",\n    \"说\",\n    \"产\",\n    \"种\",\n    \"面\",\n    \"而\",\n    \"方\",\n    \"后\",\n    \"多\",\n    \"定\",\n    \"行\",\n    \"学\",\n    \"法\",\n    \"所\",\n    \"民\",\n    \"得\",\n    \"经\",\n    \"十\",\n    \"三\",\n    \"之\",\n    \"进\",\n    \"着\",\n    \"等\",\n    \"部\",\n    \"度\",\n    \"家\",\n    \"电\",\n    \"力\",\n    \"里\",\n    \"如\",\n    \"水\",\n    \"化\",\n    \"高\",\n    \"自\",\n    \"二\",\n    \"理\",\n    \"起\",\n    \"小\",\n    \"物\",\n    \"现\",\n    \"实\",\n    \"加\",\n    \"量\",\n    \"都\",\n    \"两\",\n    \"体\",\n    \"制\",\n    \"机\",\n    \"当\",\n    \"使\",\n    \"点\",\n    \"从\",\n    \"业\",\n    \"本\",\n    \"去\",\n    \"把\",\n    \"性\",\n    \"好\",\n    \"应\",\n    \"开\",\n    \"它\",\n    \"合\",\n    \"还\",\n    \"因\",\n    \"由\",\n    \"其\",\n    \"些\",\n    \"然\",\n    \"前\",\n    \"外\",\n    \"天\",\n    \"政\",\n    \"四\",\n    \"日\",\n    \"那\",\n    \"社\",\n    \"义\",\n    \"事\",\n    \"平\",\n    \"形\",\n    \"相\",\n    \"全\",\n    \"表\",\n    \"间\",\n    \"样\",\n    \"与\",\n    \"关\",\n    \"各\",\n    \"重\",\n    \"新\",\n    \"线\",\n    \"内\",\n    \"数\",\n    \"正\",\n    \"心\",\n    \"反\",\n    \"你\",\n    \"明\",\n    \"看\",\n    \"原\",\n    \"又\",\n    \"么\",\n    \"利\",\n    \"比\",\n    \"或\",\n    \"但\",\n    \"质\",\n    \"气\",\n    \"第\",\n    \"向\",\n    \"道\",\n    \"命\",\n    \"此\",\n    \"变\",\n    \"条\",\n    \"只\",\n    \"没\",\n    \"结\",\n    \"解\",\n    \"问\",\n    \"意\",\n    \"建\",\n    \"月\",\n    \"公\",\n    \"无\",\n    \"系\",\n    \"军\",\n    \"很\",\n    \"情\",\n    \"者\",\n    \"最\",\n    \"立\",\n    \"代\",\n    \"想\",\n    \"已\",\n    \"通\",\n    \"并\",\n    \"提\",\n    \"直\",\n    \"题\",\n    \"党\",\n    \"程\",\n    \"展\",\n    \"五\",\n    \"果\",\n    \"料\",\n    \"象\",\n    \"员\",\n    \"革\",\n    \"位\",\n    \"入\",\n    \"常\",\n    \"文\",\n    \"总\",\n    \"次\",\n    \"品\",\n    \"式\",\n    \"活\",\n    \"设\",\n    \"及\",\n    \"管\",\n    \"特\",\n    \"件\",\n    \"长\",\n    \"求\",\n    \"老\",\n    \"头\",\n    \"基\",\n    \"资\",\n    \"边\",\n    \"流\",\n    \"路\",\n    \"级\",\n    \"少\",\n    \"图\",\n    \"山\",\n    \"统\",\n    \"接\",\n    \"知\",\n    \"较\",\n    \"将\",\n    \"组\",\n    \"见\",\n    \"计\",\n    \"别\",\n    \"她\",\n    \"手\",\n    \"角\",\n    \"期\",\n    \"根\",\n    \"论\",\n    \"运\",\n    \"农\",\n    \"指\",\n    \"几\",\n    \"九\",\n    \"区\",\n    \"强\",\n    \"放\",\n    \"决\",\n    \"西\",\n    \"被\",\n    \"干\",\n    \"做\",\n    \"必\",\n    \"战\",\n    \"先\",\n    \"回\",\n    \"则\",\n    \"任\",\n    \"取\",\n    \"据\",\n    \"处\",\n    \"队\",\n    \"南\",\n    \"给\",\n    \"色\",\n    \"光\",\n    \"门\",\n    \"即\",\n    \"保\",\n    \"治\",\n    \"北\",\n    \"造\",\n    \"百\",\n    \"规\",\n    \"热\",\n    \"领\",\n    \"七\",\n    \"海\",\n    \"口\",\n    \"东\",\n    \"导\",\n    \"器\",\n    \"压\",\n    \"志\",\n    \"世\",\n    \"金\",\n    \"增\",\n    \"争\",\n    \"济\",\n    \"阶\",\n    \"油\",\n    \"思\",\n    \"术\",\n    \"极\",\n    \"交\",\n    \"受\",\n    \"联\",\n    \"什\",\n    \"认\",\n    \"六\",\n    \"共\",\n    \"权\",\n    \"收\",\n    \"证\",\n    \"改\",\n    \"清\",\n    \"美\",\n    \"再\",\n    \"采\",\n    \"转\",\n    \"更\",\n    \"单\",\n    \"风\",\n    \"切\",\n    \"打\",\n    \"白\",\n    \"教\",\n    \"速\",\n    \"花\",\n    \"带\",\n    \"安\",\n    \"场\",\n    \"身\",\n    \"车\",\n    \"例\",\n    \"真\",\n    \"务\",\n    \"具\",\n    \"万\",\n    \"每\",\n    \"目\",\n    \"至\",\n    \"达\",\n    \"走\",\n    \"积\",\n    \"示\",\n    \"议\",\n    \"声\",\n    \"报\",\n    \"斗\",\n    \"完\",\n    \"类\",\n    \"八\",\n    \"离\",\n    \"华\",\n    \"名\",\n    \"确\",\n    \"才\",\n    \"科\",\n    \"张\",\n    \"信\",\n    \"马\",\n    \"节\",\n    \"话\",\n    \"米\",\n    \"整\",\n    \"空\",\n    \"元\",\n    \"况\",\n    \"今\",\n    \"集\",\n    \"温\",\n    \"传\",\n    \"土\",\n    \"许\",\n    \"步\",\n    \"群\",\n    \"广\",\n    \"石\",\n    \"记\",\n    \"需\",\n    \"段\",\n    \"研\",\n    \"界\",\n    \"拉\",\n    \"林\",\n    \"律\",\n    \"叫\",\n    \"且\",\n    \"究\",\n    \"观\",\n    \"越\",\n    \"织\",\n    \"装\",\n    \"影\",\n    \"算\",\n    \"低\",\n    \"持\",\n    \"音\",\n    \"众\",\n    \"书\",\n    \"布\",\n    \"复\",\n    \"容\",\n    \"儿\",\n    \"须\",\n    \"际\",\n    \"商\",\n    \"非\",\n    \"验\",\n    \"连\",\n    \"断\",\n    \"深\",\n    \"难\",\n    \"近\",\n    \"矿\",\n    \"千\",\n    \"周\",\n    \"委\",\n    \"素\",\n    \"技\",\n    \"备\",\n    \"半\",\n    \"办\",\n    \"青\",\n    \"省\",\n    \"列\",\n    \"习\",\n    \"响\",\n    \"约\",\n    \"支\",\n    \"般\",\n    \"史\",\n    \"感\",\n    \"劳\",\n    \"便\",\n    \"团\",\n    \"往\",\n    \"酸\",\n    \"历\",\n    \"市\",\n    \"克\",\n    \"何\",\n    \"除\",\n    \"消\",\n    \"构\",\n    \"府\",\n    \"称\",\n    \"太\",\n    \"准\",\n    \"精\",\n    \"值\",\n    \"号\",\n    \"率\",\n    \"族\",\n    \"维\",\n    \"划\",\n    \"选\",\n    \"标\",\n    \"写\",\n    \"存\",\n    \"候\",\n    \"毛\",\n    \"亲\",\n    \"快\",\n    \"效\",\n    \"斯\",\n    \"院\",\n    \"查\",\n    \"江\",\n    \"型\",\n    \"眼\",\n    \"王\",\n    \"按\",\n    \"格\",\n    \"养\",\n    \"易\",\n    \"置\",\n    \"派\",\n    \"层\",\n    \"片\",\n    \"始\",\n    \"却\",\n    \"专\",\n    \"状\",\n    \"育\",\n    \"厂\",\n    \"京\",\n    \"识\",\n    \"适\",\n    \"属\",\n    \"圆\",\n    \"包\",\n    \"火\",\n    \"住\",\n    \"调\",\n    \"满\",\n    \"县\",\n    \"局\",\n    \"照\",\n    \"参\",\n    \"红\",\n    \"细\",\n    \"引\",\n    \"听\",\n    \"该\",\n    \"铁\",\n    \"价\",\n    \"严\",\n    \"首\",\n    \"底\",\n    \"液\",\n    \"官\",\n    \"德\",\n    \"随\",\n    \"病\",\n    \"苏\",\n    \"失\",\n    \"尔\",\n    \"死\",\n    \"讲\",\n    \"配\",\n    \"女\",\n    \"黄\",\n    \"推\",\n    \"显\",\n    \"谈\",\n    \"罪\",\n    \"神\",\n    \"艺\",\n    \"呢\",\n    \"席\",\n    \"含\",\n    \"企\",\n    \"望\",\n    \"密\",\n    \"批\",\n    \"营\",\n    \"项\",\n    \"防\",\n    \"举\",\n    \"球\",\n    \"英\",\n    \"氧\",\n    \"势\",\n    \"告\",\n    \"李\",\n    \"台\",\n    \"落\",\n    \"木\",\n    \"帮\",\n    \"轮\",\n    \"破\",\n    \"亚\",\n    \"师\",\n    \"围\",\n    \"注\",\n    \"远\",\n    \"字\",\n    \"材\",\n    \"排\",\n    \"供\",\n    \"河\",\n    \"态\",\n    \"封\",\n    \"另\",\n    \"施\",\n    \"减\",\n    \"树\",\n    \"溶\",\n    \"怎\",\n    \"止\",\n    \"案\",\n    \"言\",\n    \"士\",\n    \"均\",\n    \"武\",\n    \"固\",\n    \"叶\",\n    \"鱼\",\n    \"波\",\n    \"视\",\n    \"仅\",\n    \"费\",\n    \"紧\",\n    \"爱\",\n    \"左\",\n    \"章\",\n    \"早\",\n    \"朝\",\n    \"害\",\n    \"续\",\n    \"轻\",\n    \"服\",\n    \"试\",\n    \"食\",\n    \"充\",\n    \"兵\",\n    \"源\",\n    \"判\",\n    \"护\",\n    \"司\",\n    \"足\",\n    \"某\",\n    \"练\",\n    \"差\",\n    \"致\",\n    \"板\",\n    \"田\",\n    \"降\",\n    \"黑\",\n    \"犯\",\n    \"负\",\n    \"击\",\n    \"范\",\n    \"继\",\n    \"兴\",\n    \"似\",\n    \"余\",\n    \"坚\",\n    \"曲\",\n    \"输\",\n    \"修\",\n    \"故\",\n    \"城\",\n    \"夫\",\n    \"够\",\n    \"送\",\n    \"笔\",\n    \"船\",\n    \"占\",\n    \"右\",\n    \"财\",\n    \"吃\",\n    \"富\",\n    \"春\",\n    \"职\",\n    \"觉\",\n    \"汉\",\n    \"画\",\n    \"功\",\n    \"巴\",\n    \"跟\",\n    \"虽\",\n    \"杂\",\n    \"飞\",\n    \"检\",\n    \"吸\",\n    \"助\",\n    \"升\",\n    \"阳\",\n    \"互\",\n    \"初\",\n    \"创\",\n    \"抗\",\n    \"考\",\n    \"投\",\n    \"坏\",\n    \"策\",\n    \"古\",\n    \"径\",\n    \"换\",\n    \"未\",\n    \"跑\",\n    \"留\",\n    \"钢\",\n    \"曾\",\n    \"端\",\n    \"责\",\n    \"站\",\n    \"简\",\n    \"述\",\n    \"钱\",\n    \"副\",\n    \"尽\",\n    \"帝\",\n    \"射\",\n    \"草\",\n    \"冲\",\n    \"承\",\n    \"独\",\n    \"令\",\n    \"限\",\n    \"阿\",\n    \"宣\",\n    \"环\",\n    \"双\",\n    \"请\",\n    \"超\",\n    \"微\",\n    \"让\",\n    \"控\",\n    \"州\",\n    \"良\",\n    \"轴\",\n    \"找\",\n    \"否\",\n    \"纪\",\n    \"益\",\n    \"依\",\n    \"优\",\n    \"顶\",\n    \"础\",\n    \"载\",\n    \"倒\",\n    \"房\",\n    \"突\",\n    \"坐\",\n    \"粉\",\n    \"敌\",\n    \"略\",\n    \"客\",\n    \"袁\",\n    \"冷\",\n    \"胜\",\n    \"绝\",\n    \"析\",\n    \"块\",\n    \"剂\",\n    \"测\",\n    \"丝\",\n    \"协\",\n    \"诉\",\n    \"念\",\n    \"陈\",\n    \"仍\",\n    \"罗\",\n    \"盐\",\n    \"友\",\n    \"洋\",\n    \"错\",\n    \"苦\",\n    \"夜\",\n    \"刑\",\n    \"移\",\n    \"频\",\n    \"逐\",\n    \"靠\",\n    \"混\",\n    \"母\",\n    \"短\",\n    \"皮\",\n    \"终\",\n    \"聚\",\n    \"汽\",\n    \"村\",\n    \"云\",\n    \"哪\",\n    \"既\",\n    \"距\",\n    \"卫\",\n    \"停\",\n    \"烈\",\n    \"央\",\n    \"察\",\n    \"烧\",\n    \"迅\",\n    \"境\",\n    \"若\",\n    \"印\",\n    \"洲\",\n    \"刻\",\n    \"括\",\n    \"激\",\n    \"孔\",\n    \"搞\",\n    \"甚\",\n    \"室\",\n    \"待\",\n    \"核\",\n    \"校\",\n    \"散\",\n    \"侵\",\n    \"吧\",\n    \"甲\",\n    \"游\",\n    \"久\",\n    \"菜\",\n    \"味\",\n    \"旧\",\n    \"模\",\n    \"湖\",\n    \"货\",\n    \"损\",\n    \"预\",\n    \"阻\",\n    \"毫\",\n    \"普\",\n    \"稳\",\n    \"乙\",\n    \"妈\",\n    \"植\",\n    \"息\",\n    \"扩\",\n    \"银\",\n    \"语\",\n    \"挥\",\n    \"酒\",\n    \"守\",\n    \"拿\",\n    \"序\",\n    \"纸\",\n    \"医\",\n    \"缺\",\n    \"雨\",\n    \"吗\",\n    \"针\",\n    \"刘\",\n    \"啊\",\n    \"急\",\n    \"唱\",\n    \"误\",\n    \"训\",\n    \"愿\",\n    \"审\",\n    \"附\",\n    \"获\",\n    \"茶\",\n    \"鲜\",\n    \"粮\",\n    \"斤\",\n    \"孩\",\n    \"脱\",\n    \"硫\",\n    \"肥\",\n    \"善\",\n    \"龙\",\n    \"演\",\n    \"父\",\n    \"渐\",\n    \"血\",\n    \"欢\",\n    \"械\",\n    \"掌\",\n    \"歌\",\n    \"沙\",\n    \"刚\",\n    \"攻\",\n    \"谓\",\n    \"盾\",\n    \"讨\",\n    \"晚\",\n    \"粒\",\n    \"乱\",\n    \"燃\",\n    \"矛\",\n    \"乎\",\n    \"杀\",\n    \"药\",\n    \"宁\",\n    \"鲁\",\n    \"贵\",\n    \"钟\",\n    \"煤\",\n    \"读\",\n    \"班\",\n    \"伯\",\n    \"香\",\n    \"介\",\n    \"迫\",\n    \"句\",\n    \"丰\",\n    \"培\",\n    \"握\",\n    \"兰\",\n    \"担\",\n    \"弦\",\n    \"蛋\",\n    \"沉\",\n    \"假\",\n    \"穿\",\n    \"执\",\n    \"答\",\n    \"乐\",\n    \"谁\",\n    \"顺\",\n    \"烟\",\n    \"缩\",\n    \"征\",\n    \"脸\",\n    \"喜\",\n    \"松\",\n    \"脚\",\n    \"困\",\n    \"异\",\n    \"免\",\n    \"背\",\n    \"星\",\n    \"福\",\n    \"买\",\n    \"染\",\n    \"井\",\n    \"概\",\n    \"慢\",\n    \"怕\",\n    \"磁\",\n    \"倍\",\n    \"祖\",\n    \"皇\",\n    \"促\",\n    \"静\",\n    \"补\",\n    \"评\",\n    \"翻\",\n    \"肉\",\n    \"践\",\n    \"尼\",\n    \"衣\",\n    \"宽\",\n    \"扬\",\n    \"棉\",\n    \"希\",\n    \"伤\",\n    \"操\",\n    \"垂\",\n    \"秋\",\n    \"宜\",\n    \"氢\",\n    \"套\",\n    \"督\",\n    \"振\",\n    \"架\",\n    \"亮\",\n    \"末\",\n    \"宪\",\n    \"庆\",\n    \"编\",\n    \"牛\",\n    \"触\",\n    \"映\",\n    \"雷\",\n    \"销\",\n    \"诗\",\n    \"座\",\n    \"居\",\n    \"抓\",\n    \"裂\",\n    \"胞\",\n    \"呼\",\n    \"娘\",\n    \"景\",\n    \"威\",\n    \"绿\",\n    \"晶\",\n    \"厚\",\n    \"盟\",\n    \"衡\",\n    \"鸡\",\n    \"孙\",\n    \"延\",\n    \"危\",\n    \"胶\",\n    \"屋\",\n    \"乡\",\n    \"临\",\n    \"陆\",\n    \"顾\",\n    \"掉\",\n    \"呀\",\n    \"灯\",\n    \"岁\",\n    \"措\",\n    \"束\",\n    \"耐\",\n    \"剧\",\n    \"玉\",\n    \"赵\",\n    \"跳\",\n    \"哥\",\n    \"季\",\n    \"课\",\n    \"凯\",\n    \"胡\",\n    \"额\",\n    \"款\",\n    \"绍\",\n    \"卷\",\n    \"齐\",\n    \"伟\",\n    \"蒸\",\n    \"殖\",\n    \"永\",\n    \"宗\",\n    \"苗\",\n    \"川\",\n    \"炉\",\n    \"岩\",\n    \"弱\",\n    \"零\",\n    \"杨\",\n    \"奏\",\n    \"沿\",\n    \"露\",\n    \"杆\",\n    \"探\",\n    \"滑\",\n    \"镇\",\n    \"饭\",\n    \"浓\",\n    \"航\",\n    \"怀\",\n    \"赶\",\n    \"库\",\n    \"夺\",\n    \"伊\",\n    \"灵\",\n    \"税\",\n    \"途\",\n    \"灭\",\n    \"赛\",\n    \"归\",\n    \"召\",\n    \"鼓\",\n    \"播\",\n    \"盘\",\n    \"裁\",\n    \"险\",\n    \"康\",\n    \"唯\",\n    \"录\",\n    \"菌\",\n    \"纯\",\n    \"借\",\n    \"糖\",\n    \"盖\",\n    \"横\",\n    \"符\",\n    \"私\",\n    \"努\",\n    \"堂\",\n    \"域\",\n    \"枪\",\n    \"润\",\n    \"幅\",\n    \"哈\",\n    \"竟\",\n    \"熟\",\n    \"虫\",\n    \"泽\",\n    \"脑\",\n    \"壤\",\n    \"碳\",\n    \"欧\",\n    \"遍\",\n    \"侧\",\n    \"寨\",\n    \"敢\",\n    \"彻\",\n    \"虑\",\n    \"斜\",\n    \"薄\",\n    \"庭\",\n    \"纳\",\n    \"弹\",\n    \"饲\",\n    \"伸\",\n    \"折\",\n    \"麦\",\n    \"湿\",\n    \"暗\",\n    \"荷\",\n    \"瓦\",\n    \"塞\",\n    \"床\",\n    \"筑\",\n    \"恶\",\n    \"户\",\n    \"访\",\n    \"塔\",\n    \"奇\",\n    \"透\",\n    \"梁\",\n    \"刀\",\n    \"旋\",\n    \"迹\",\n    \"卡\",\n    \"氯\",\n    \"遇\",\n    \"份\",\n    \"毒\",\n    \"泥\",\n    \"退\",\n    \"洗\",\n    \"摆\",\n    \"灰\",\n    \"彩\",\n    \"卖\",\n    \"耗\",\n    \"夏\",\n    \"择\",\n    \"忙\",\n    \"铜\",\n    \"献\",\n    \"硬\",\n    \"予\",\n    \"繁\",\n    \"圈\",\n    \"雪\",\n    \"函\",\n    \"亦\",\n    \"抽\",\n    \"篇\",\n    \"阵\",\n    \"阴\",\n    \"丁\",\n    \"尺\",\n    \"追\",\n    \"堆\",\n    \"雄\",\n    \"迎\",\n    \"泛\",\n    \"爸\",\n    \"楼\",\n    \"避\",\n    \"谋\",\n    \"吨\",\n    \"野\",\n    \"猪\",\n    \"旗\",\n    \"累\",\n    \"偏\",\n    \"典\",\n    \"馆\",\n    \"索\",\n    \"秦\",\n    \"脂\",\n    \"潮\",\n    \"爷\",\n    \"豆\",\n    \"忽\",\n    \"托\",\n    \"惊\",\n    \"塑\",\n    \"遗\",\n    \"愈\",\n    \"朱\",\n    \"替\",\n    \"纤\",\n    \"粗\",\n    \"倾\",\n    \"尚\",\n    \"痛\",\n    \"楚\",\n    \"谢\",\n    \"奋\",\n    \"购\",\n    \"磨\",\n    \"君\",\n    \"池\",\n    \"旁\",\n    \"碎\",\n    \"骨\",\n    \"监\",\n    \"捕\",\n    \"弟\",\n    \"暴\",\n    \"割\",\n    \"贯\",\n    \"殊\",\n    \"释\",\n    \"词\",\n    \"亡\",\n    \"壁\",\n    \"顿\",\n    \"宝\",\n    \"午\",\n    \"尘\",\n    \"闻\",\n    \"揭\",\n    \"炮\",\n    \"残\",\n    \"冬\",\n    \"桥\",\n    \"妇\",\n    \"警\",\n    \"综\",\n    \"招\",\n    \"吴\",\n    \"付\",\n    \"浮\",\n    \"遭\",\n    \"徐\",\n    \"您\",\n    \"摇\",\n    \"谷\",\n    \"赞\",\n    \"箱\",\n    \"隔\",\n    \"订\",\n    \"男\",\n    \"吹\",\n    \"园\",\n    \"纷\",\n    \"唐\",\n    \"败\",\n    \"宋\",\n    \"玻\",\n    \"巨\",\n    \"耕\",\n    \"坦\",\n    \"荣\",\n    \"闭\",\n    \"湾\",\n    \"键\",\n    \"凡\",\n    \"驻\",\n    \"锅\",\n    \"救\",\n    \"恩\",\n    \"剥\",\n    \"凝\",\n    \"碱\",\n    \"齿\",\n    \"截\",\n    \"炼\",\n    \"麻\",\n    \"纺\",\n    \"禁\",\n    \"废\",\n    \"盛\",\n    \"版\",\n    \"缓\",\n    \"净\",\n    \"睛\",\n    \"昌\",\n    \"婚\",\n    \"涉\",\n    \"筒\",\n    \"嘴\",\n    \"插\",\n    \"岸\",\n    \"朗\",\n    \"庄\",\n    \"街\",\n    \"藏\",\n    \"姑\",\n    \"贸\",\n    \"腐\",\n    \"奴\",\n    \"啦\",\n    \"惯\",\n    \"乘\",\n    \"伙\",\n    \"恢\",\n    \"匀\",\n    \"纱\",\n    \"扎\",\n    \"辩\",\n    \"耳\",\n    \"彪\",\n    \"臣\",\n    \"亿\",\n    \"璃\",\n    \"抵\",\n    \"脉\",\n    \"秀\",\n    \"萨\",\n    \"俄\",\n    \"网\",\n    \"舞\",\n    \"店\",\n    \"喷\",\n    \"纵\",\n    \"寸\",\n    \"汗\",\n    \"挂\",\n    \"洪\",\n    \"贺\",\n    \"闪\",\n    \"柬\",\n    \"爆\",\n    \"烯\",\n    \"津\",\n    \"稻\",\n    \"墙\",\n    \"软\",\n    \"勇\",\n    \"像\",\n    \"滚\",\n    \"厘\",\n    \"蒙\",\n    \"芳\",\n    \"肯\",\n    \"坡\",\n    \"柱\",\n    \"荡\",\n    \"腿\",\n    \"仪\",\n    \"旅\",\n    \"尾\",\n    \"轧\",\n    \"冰\",\n    \"贡\",\n    \"登\",\n    \"黎\",\n    \"削\",\n    \"钻\",\n    \"勒\",\n    \"逃\",\n    \"障\",\n    \"氨\",\n    \"郭\",\n    \"峰\",\n    \"币\",\n    \"港\",\n    \"伏\",\n    \"轨\",\n    \"亩\",\n    \"毕\",\n    \"擦\",\n    \"莫\",\n    \"刺\",\n    \"浪\",\n    \"秘\",\n    \"援\",\n    \"株\",\n    \"健\",\n    \"售\",\n    \"股\",\n    \"岛\",\n    \"甘\",\n    \"泡\",\n    \"睡\",\n    \"童\",\n    \"铸\",\n    \"汤\",\n    \"阀\",\n    \"休\",\n    \"汇\",\n    \"舍\",\n    \"牧\",\n    \"绕\",\n    \"炸\",\n    \"哲\",\n    \"磷\",\n    \"绩\",\n    \"朋\",\n    \"淡\",\n    \"尖\",\n    \"启\",\n    \"陷\",\n    \"柴\",\n    \"呈\",\n    \"徒\",\n    \"颜\",\n    \"泪\",\n    \"稍\",\n    \"忘\",\n    \"泵\",\n    \"蓝\",\n    \"拖\",\n    \"洞\",\n    \"授\",\n    \"镜\",\n    \"辛\",\n    \"壮\",\n    \"锋\",\n    \"贫\",\n    \"虚\",\n    \"弯\",\n    \"摩\",\n    \"泰\",\n    \"幼\",\n    \"廷\",\n    \"尊\",\n    \"窗\",\n    \"纲\",\n    \"弄\",\n    \"隶\",\n    \"疑\",\n    \"氏\",\n    \"宫\",\n    \"姐\",\n    \"震\",\n    \"瑞\",\n    \"怪\",\n    \"尤\",\n    \"琴\",\n    \"循\",\n    \"描\",\n    \"膜\",\n    \"违\",\n    \"夹\",\n    \"腰\",\n    \"缘\",\n    \"珠\",\n    \"穷\",\n    \"森\",\n    \"枝\",\n    \"竹\",\n    \"沟\",\n    \"催\",\n    \"绳\",\n    \"忆\",\n    \"邦\",\n    \"剩\",\n    \"幸\",\n    \"浆\",\n    \"栏\",\n    \"拥\",\n    \"牙\",\n    \"贮\",\n    \"礼\",\n    \"滤\",\n    \"钠\",\n    \"纹\",\n    \"罢\",\n    \"拍\",\n    \"咱\",\n    \"喊\",\n    \"袖\",\n    \"埃\",\n    \"勤\",\n    \"罚\",\n    \"焦\",\n    \"潜\",\n    \"伍\",\n    \"墨\",\n    \"欲\",\n    \"缝\",\n    \"姓\",\n    \"刊\",\n    \"饱\",\n    \"仿\",\n    \"奖\",\n    \"铝\",\n    \"鬼\",\n    \"丽\",\n    \"跨\",\n    \"默\",\n    \"挖\",\n    \"链\",\n    \"扫\",\n    \"喝\",\n    \"袋\",\n    \"炭\",\n    \"污\",\n    \"幕\",\n    \"诸\",\n    \"弧\",\n    \"励\",\n    \"梅\",\n    \"奶\",\n    \"洁\",\n    \"灾\",\n    \"舟\",\n    \"鉴\",\n    \"苯\",\n    \"讼\",\n    \"抱\",\n    \"毁\",\n    \"懂\",\n    \"寒\",\n    \"智\",\n    \"埔\",\n    \"寄\",\n    \"届\",\n    \"跃\",\n    \"渡\",\n    \"挑\",\n    \"丹\",\n    \"艰\",\n    \"贝\",\n    \"碰\",\n    \"拔\",\n    \"爹\",\n    \"戴\",\n    \"码\",\n    \"梦\",\n    \"芽\",\n    \"熔\",\n    \"赤\",\n    \"渔\",\n    \"哭\",\n    \"敬\",\n    \"颗\",\n    \"奔\",\n    \"铅\",\n    \"仲\",\n    \"虎\",\n    \"稀\",\n    \"妹\",\n    \"乏\",\n    \"珍\",\n    \"申\",\n    \"桌\",\n    \"遵\",\n    \"允\",\n    \"隆\",\n    \"螺\",\n    \"仓\",\n    \"魏\",\n    \"锐\",\n    \"晓\",\n    \"氮\",\n    \"兼\",\n    \"隐\",\n    \"碍\",\n    \"赫\",\n    \"拨\",\n    \"忠\",\n    \"肃\",\n    \"缸\",\n    \"牵\",\n    \"抢\",\n    \"博\",\n    \"巧\",\n    \"壳\",\n    \"兄\",\n    \"杜\",\n    \"讯\",\n    \"诚\",\n    \"碧\",\n    \"祥\",\n    \"柯\",\n    \"页\",\n    \"巡\",\n    \"矩\",\n    \"悲\",\n    \"灌\",\n    \"龄\",\n    \"伦\",\n    \"票\",\n    \"寻\",\n    \"桂\",\n    \"铺\",\n    \"圣\",\n    \"恐\",\n    \"恰\",\n    \"郑\",\n    \"趣\",\n    \"抬\",\n    \"荒\",\n    \"腾\",\n    \"贴\",\n    \"柔\",\n    \"滴\",\n    \"猛\",\n    \"阔\",\n    \"辆\",\n    \"妻\",\n    \"填\",\n    \"撤\",\n    \"储\",\n    \"签\",\n    \"闹\",\n    \"扰\",\n    \"紫\",\n    \"砂\",\n    \"递\",\n    \"戏\",\n    \"吊\",\n    \"陶\",\n    \"伐\",\n    \"喂\",\n    \"疗\",\n    \"瓶\",\n    \"婆\",\n    \"抚\",\n    \"臂\",\n    \"摸\",\n    \"忍\",\n    \"虾\",\n    \"蜡\",\n    \"邻\",\n    \"胸\",\n    \"巩\",\n    \"挤\",\n    \"偶\",\n    \"弃\",\n    \"槽\",\n    \"劲\",\n    \"乳\",\n    \"邓\",\n    \"吉\",\n    \"仁\",\n    \"烂\",\n    \"砖\",\n    \"租\",\n    \"乌\",\n    \"舰\",\n    \"伴\",\n    \"瓜\",\n    \"浅\",\n    \"丙\",\n    \"暂\",\n    \"燥\",\n    \"橡\",\n    \"柳\",\n    \"迷\",\n    \"暖\",\n    \"牌\",\n    \"秧\",\n    \"胆\",\n    \"详\",\n    \"簧\",\n    \"踏\",\n    \"瓷\",\n    \"谱\",\n    \"呆\",\n    \"宾\",\n    \"糊\",\n    \"洛\",\n    \"辉\",\n    \"愤\",\n    \"竞\",\n    \"隙\",\n    \"怒\",\n    \"粘\",\n    \"乃\",\n    \"绪\",\n    \"肩\",\n    \"籍\",\n    \"敏\",\n    \"涂\",\n    \"熙\",\n    \"皆\",\n    \"侦\",\n    \"悬\",\n    \"掘\",\n    \"享\",\n    \"纠\",\n    \"醒\",\n    \"狂\",\n    \"锁\",\n    \"淀\",\n    \"恨\",\n    \"牲\",\n    \"霸\",\n    \"爬\",\n    \"赏\",\n    \"逆\",\n    \"玩\",\n    \"陵\",\n    \"祝\",\n    \"秒\",\n    \"浙\",\n    \"貌\",\n    \"役\",\n    \"彼\",\n    \"悉\",\n    \"鸭\",\n    \"趋\",\n    \"凤\",\n    \"晨\",\n    \"畜\",\n    \"辈\",\n    \"秩\",\n    \"卵\",\n    \"署\",\n    \"梯\",\n    \"炎\",\n    \"滩\",\n    \"棋\",\n    \"驱\",\n    \"筛\",\n    \"峡\",\n    \"冒\",\n    \"啥\",\n    \"寿\",\n    \"译\",\n    \"浸\",\n    \"泉\",\n    \"帽\",\n    \"迟\",\n    \"硅\",\n    \"疆\",\n    \"贷\",\n    \"漏\",\n    \"稿\",\n    \"冠\",\n    \"嫩\",\n    \"胁\",\n    \"芯\",\n    \"牢\",\n    \"叛\",\n    \"蚀\",\n    \"奥\",\n    \"鸣\",\n    \"岭\",\n    \"羊\",\n    \"凭\",\n    \"串\",\n    \"塘\",\n    \"绘\",\n    \"酵\",\n    \"融\",\n    \"盆\",\n    \"锡\",\n    \"庙\",\n    \"筹\",\n    \"冻\",\n    \"辅\",\n    \"摄\",\n    \"袭\",\n    \"筋\",\n    \"拒\",\n    \"僚\",\n    \"旱\",\n    \"钾\",\n    \"鸟\",\n    \"漆\",\n    \"沈\",\n    \"眉\",\n    \"疏\",\n    \"添\",\n    \"棒\",\n    \"穗\",\n    \"硝\",\n    \"韩\",\n    \"逼\",\n    \"扭\",\n    \"侨\",\n    \"凉\",\n    \"挺\",\n    \"碗\",\n    \"栽\",\n    \"炒\",\n    \"杯\",\n    \"患\",\n    \"馏\",\n    \"劝\",\n    \"豪\",\n    \"辽\",\n    \"勃\",\n    \"鸿\",\n    \"旦\",\n    \"吏\",\n    \"拜\",\n    \"狗\",\n    \"埋\",\n    \"辊\",\n    \"掩\",\n    \"饮\",\n    \"搬\",\n    \"骂\",\n    \"辞\",\n    \"勾\",\n    \"扣\",\n    \"估\",\n    \"蒋\",\n    \"绒\",\n    \"雾\",\n    \"丈\",\n    \"朵\",\n    \"姆\",\n    \"拟\",\n    \"宇\",\n    \"辑\",\n    \"陕\",\n    \"雕\",\n    \"偿\",\n    \"蓄\",\n    \"崇\",\n    \"剪\",\n    \"倡\",\n    \"厅\",\n    \"咬\",\n    \"驶\",\n    \"薯\",\n    \"刷\",\n    \"斥\",\n    \"番\",\n    \"赋\",\n    \"奉\",\n    \"佛\",\n    \"浇\",\n    \"漫\",\n    \"曼\",\n    \"扇\",\n    \"钙\",\n    \"桃\",\n    \"扶\",\n    \"仔\",\n    \"返\",\n    \"俗\",\n    \"亏\",\n    \"腔\",\n    \"鞋\",\n    \"棱\",\n    \"覆\",\n    \"框\",\n    \"悄\",\n    \"叔\",\n    \"撞\",\n    \"骗\",\n    \"勘\",\n    \"旺\",\n    \"沸\",\n    \"孤\",\n    \"吐\",\n    \"孟\",\n    \"渠\",\n    \"屈\",\n    \"疾\",\n    \"妙\",\n    \"惜\",\n    \"仰\",\n    \"狠\",\n    \"胀\",\n    \"谐\",\n    \"抛\",\n    \"霉\",\n    \"桑\",\n    \"岗\",\n    \"嘛\",\n    \"衰\",\n    \"盗\",\n    \"渗\",\n    \"脏\",\n    \"赖\",\n    \"涌\",\n    \"甜\",\n    \"曹\",\n    \"阅\",\n    \"肌\",\n    \"哩\",\n    \"厉\",\n    \"烃\",\n    \"纬\",\n    \"毅\",\n    \"昨\",\n    \"伪\",\n    \"症\",\n    \"煮\",\n    \"叹\",\n    \"钉\",\n    \"搭\",\n    \"茎\",\n    \"笼\",\n    \"酷\",\n    \"偷\",\n    \"弓\",\n    \"锥\",\n    \"恒\",\n    \"杰\",\n    \"坑\",\n    \"鼻\",\n    \"翼\",\n    \"纶\",\n    \"叙\",\n    \"狱\",\n    \"逮\",\n    \"罐\",\n    \"络\",\n    \"棚\",\n    \"抑\",\n    \"膨\",\n    \"蔬\",\n    \"寺\",\n    \"骤\",\n    \"穆\",\n    \"冶\",\n    \"枯\",\n    \"册\",\n    \"尸\",\n    \"凸\",\n    \"绅\",\n    \"坯\",\n    \"牺\",\n    \"焰\",\n    \"轰\",\n    \"欣\",\n    \"晋\",\n    \"瘦\",\n    \"御\",\n    \"锭\",\n    \"锦\",\n    \"丧\",\n    \"旬\",\n    \"锻\",\n    \"垄\",\n    \"搜\",\n    \"扑\",\n    \"邀\",\n    \"亭\",\n    \"酯\",\n    \"迈\",\n    \"舒\",\n    \"脆\",\n    \"酶\",\n    \"闲\",\n    \"忧\",\n    \"酚\",\n    \"顽\",\n    \"羽\",\n    \"涨\",\n    \"卸\",\n    \"仗\",\n    \"陪\",\n    \"辟\",\n    \"惩\",\n    \"杭\",\n    \"姚\",\n    \"肚\",\n    \"捉\",\n    \"飘\",\n    \"漂\",\n    \"昆\",\n    \"欺\",\n    \"吾\",\n    \"郎\",\n    \"烷\",\n    \"汁\",\n    \"呵\",\n    \"饰\",\n    \"萧\",\n    \"雅\",\n    \"邮\",\n    \"迁\",\n    \"燕\",\n    \"撒\",\n    \"姻\",\n    \"赴\",\n    \"宴\",\n    \"烦\",\n    \"债\",\n    \"帐\",\n    \"斑\",\n    \"铃\",\n    \"旨\",\n    \"醇\",\n    \"董\",\n    \"饼\",\n    \"雏\",\n    \"姿\",\n    \"拌\",\n    \"傅\",\n    \"腹\",\n    \"妥\",\n    \"揉\",\n    \"贤\",\n    \"拆\",\n    \"歪\",\n    \"葡\",\n    \"胺\",\n    \"丢\",\n    \"浩\",\n    \"徽\",\n    \"昂\",\n    \"垫\",\n    \"挡\",\n    \"览\",\n    \"贪\",\n    \"慰\",\n    \"缴\",\n    \"汪\",\n    \"慌\",\n    \"冯\",\n    \"诺\",\n    \"姜\",\n    \"谊\",\n    \"凶\",\n    \"劣\",\n    \"诬\",\n    \"耀\",\n    \"昏\",\n    \"躺\",\n    \"盈\",\n    \"骑\",\n    \"乔\",\n    \"溪\",\n    \"丛\",\n    \"卢\",\n    \"抹\",\n    \"闷\",\n    \"咨\",\n    \"刮\",\n    \"驾\",\n    \"缆\",\n    \"悟\",\n    \"摘\",\n    \"铒\",\n    \"掷\",\n    \"颇\",\n    \"幻\",\n    \"柄\",\n    \"惠\",\n    \"惨\",\n    \"佳\",\n    \"仇\",\n    \"腊\",\n    \"窝\",\n    \"涤\",\n    \"剑\",\n    \"瞧\",\n    \"堡\",\n    \"泼\",\n    \"葱\",\n    \"罩\",\n    \"霍\",\n    \"捞\",\n    \"胎\",\n    \"苍\",\n    \"滨\",\n    \"俩\",\n    \"捅\",\n    \"湘\",\n    \"砍\",\n    \"霞\",\n    \"邵\",\n    \"萄\",\n    \"疯\",\n    \"淮\",\n    \"遂\",\n    \"熊\",\n    \"粪\",\n    \"烘\",\n    \"宿\",\n    \"档\",\n    \"戈\",\n    \"驳\",\n    \"嫂\",\n    \"裕\",\n    \"徙\",\n    \"箭\",\n    \"捐\",\n    \"肠\",\n    \"撑\",\n    \"晒\",\n    \"辨\",\n    \"殿\",\n    \"莲\",\n    \"摊\",\n    \"搅\",\n    \"酱\",\n    \"屏\",\n    \"疫\",\n    \"哀\",\n    \"蔡\",\n    \"堵\",\n    \"沫\",\n    \"皱\",\n    \"畅\",\n    \"叠\",\n    \"阁\",\n    \"莱\",\n    \"敲\",\n    \"辖\",\n    \"钩\",\n    \"痕\",\n    \"坝\",\n    \"巷\",\n    \"饿\",\n    \"祸\",\n    \"丘\",\n    \"玄\",\n    \"溜\",\n    \"曰\",\n    \"逻\",\n    \"彭\",\n    \"尝\",\n    \"卿\",\n    \"妨\",\n    \"艇\",\n    \"吞\",\n    \"韦\",\n    \"怨\",\n    \"矮\",\n    \"歇\"\n]\n[\n    \"的\",\n    \"一\",\n    \"是\",\n    \"在\",\n    \"不\",\n    \"了\",\n    \"有\",\n    \"和\",\n    \"人\",\n    \"這\",\n    \"中\",\n    \"大\",\n    \"為\",\n    \"上\",\n    \"個\",\n    \"國\",\n    \"我\",\n    \"以\",\n    \"要\",\n    \"他\",\n    \"時\",\n    \"來\",\n    \"用\",\n    \"們\",\n    \"生\",\n    \"到\",\n    \"作\",\n    \"地\",\n    \"於\",\n    \"出\",\n    \"就\",\n    \"分\",\n    \"對\",\n    \"成\",\n    \"會\",\n    \"可\",\n    \"主\",\n    \"發\",\n    \"年\",\n    \"動\",\n    \"同\",\n    \"工\",\n    \"也\",\n    \"能\",\n    \"下\",\n    \"過\",\n    \"子\",\n    \"說\",\n    \"產\",\n    \"種\",\n    \"面\",\n    \"而\",\n    \"方\",\n    \"後\",\n    \"多\",\n    \"定\",\n    \"行\",\n    \"學\",\n    \"法\",\n    \"所\",\n    \"民\",\n    \"得\",\n    \"經\",\n    \"十\",\n    \"三\",\n    \"之\",\n    \"進\",\n    \"著\",\n    \"等\",\n    \"部\",\n    \"度\",\n    \"家\",\n    \"電\",\n    \"力\",\n    \"裡\",\n    \"如\",\n    \"水\",\n    \"化\",\n    \"高\",\n    \"自\",\n    \"二\",\n    \"理\",\n    \"起\",\n    \"小\",\n    \"物\",\n    \"現\",\n    \"實\",\n    \"加\",\n    \"量\",\n    \"都\",\n    \"兩\",\n    \"體\",\n    \"制\",\n    \"機\",\n    \"當\",\n    \"使\",\n    \"點\",\n    \"從\",\n    \"業\",\n    \"本\",\n    \"去\",\n    \"把\",\n    \"性\",\n    \"好\",\n    \"應\",\n    \"開\",\n    \"它\",\n    \"合\",\n    \"還\",\n    \"因\",\n    \"由\",\n    \"其\",\n    \"些\",\n    \"然\",\n    \"前\",\n    \"外\",\n    \"天\",\n    \"政\",\n    \"四\",\n    \"日\",\n    \"那\",\n    \"社\",\n    \"義\",\n    \"事\",\n    \"平\",\n    \"形\",\n    \"相\",\n    \"全\",\n    \"表\",\n    \"間\",\n    \"樣\",\n    \"與\",\n    \"關\",\n    \"各\",\n    \"重\",\n    \"新\",\n    \"線\",\n    \"內\",\n    \"數\",\n    \"正\",\n    \"心\",\n    \"反\",\n    \"你\",\n    \"明\",\n    \"看\",\n    \"原\",\n    \"又\",\n    \"麼\",\n    \"利\",\n    \"比\",\n    \"或\",\n    \"但\",\n    \"質\",\n    \"氣\",\n    \"第\",\n    \"向\",\n    \"道\",\n    \"命\",\n    \"此\",\n    \"變\",\n    \"條\",\n    \"只\",\n    \"沒\",\n    \"結\",\n    \"解\",\n    \"問\",\n    \"意\",\n    \"建\",\n    \"月\",\n    \"公\",\n    \"無\",\n    \"系\",\n    \"軍\",\n    \"很\",\n    \"情\",\n    \"者\",\n    \"最\",\n    \"立\",\n    \"代\",\n    \"想\",\n    \"已\",\n    \"通\",\n    \"並\",\n    \"提\",\n    \"直\",\n    \"題\",\n    \"黨\",\n    \"程\",\n    \"展\",\n    \"五\",\n    \"果\",\n    \"料\",\n    \"象\",\n    \"員\",\n    \"革\",\n    \"位\",\n    \"入\",\n    \"常\",\n    \"文\",\n    \"總\",\n    \"次\",\n    \"品\",\n    \"式\",\n    \"活\",\n    \"設\",\n    \"及\",\n    \"管\",\n    \"特\",\n    \"件\",\n    \"長\",\n    \"求\",\n    \"老\",\n    \"頭\",\n    \"基\",\n    \"資\",\n    \"邊\",\n    \"流\",\n    \"路\",\n    \"級\",\n    \"少\",\n    \"圖\",\n    \"山\",\n    \"統\",\n    \"接\",\n    \"知\",\n    \"較\",\n    \"將\",\n    \"組\",\n    \"見\",\n    \"計\",\n    \"別\",\n    \"她\",\n    \"手\",\n    \"角\",\n    \"期\",\n    \"根\",\n    \"論\",\n    \"運\",\n    \"農\",\n    \"指\",\n    \"幾\",\n    \"九\",\n    \"區\",\n    \"強\",\n    \"放\",\n    \"決\",\n    \"西\",\n    \"被\",\n    \"幹\",\n    \"做\",\n    \"必\",\n    \"戰\",\n    \"先\",\n    \"回\",\n    \"則\",\n    \"任\",\n    \"取\",\n    \"據\",\n    \"處\",\n    \"隊\",\n    \"南\",\n    \"給\",\n    \"色\",\n    \"光\",\n    \"門\",\n    \"即\",\n    \"保\",\n    \"治\",\n    \"北\",\n    \"造\",\n    \"百\",\n    \"規\",\n    \"熱\",\n    \"領\",\n    \"七\",\n    \"海\",\n    \"口\",\n    \"東\",\n    \"導\",\n    \"器\",\n    \"壓\",\n    \"志\",\n    \"世\",\n    \"金\",\n    \"增\",\n    \"爭\",\n    \"濟\",\n    \"階\",\n    \"油\",\n    \"思\",\n    \"術\",\n    \"極\",\n    \"交\",\n    \"受\",\n    \"聯\",\n    \"什\",\n    \"認\",\n    \"六\",\n    \"共\",\n    \"權\",\n    \"收\",\n    \"證\",\n    \"改\",\n    \"清\",\n    \"美\",\n    \"再\",\n    \"採\",\n    \"轉\",\n    \"更\",\n    \"單\",\n    \"風\",\n    \"切\",\n    \"打\",\n    \"白\",\n    \"教\",\n    \"速\",\n    \"花\",\n    \"帶\",\n    \"安\",\n    \"場\",\n    \"身\",\n    \"車\",\n    \"例\",\n    \"真\",\n    \"務\",\n    \"具\",\n    \"萬\",\n    \"每\",\n    \"目\",\n    \"至\",\n    \"達\",\n    \"走\",\n    \"積\",\n    \"示\",\n    \"議\",\n    \"聲\",\n    \"報\",\n    \"鬥\",\n    \"完\",\n    \"類\",\n    \"八\",\n    \"離\",\n    \"華\",\n    \"名\",\n    \"確\",\n    \"才\",\n    \"科\",\n    \"張\",\n    \"信\",\n    \"馬\",\n    \"節\",\n    \"話\",\n    \"米\",\n    \"整\",\n    \"空\",\n    \"元\",\n    \"況\",\n    \"今\",\n    \"集\",\n    \"溫\",\n    \"傳\",\n    \"土\",\n    \"許\",\n    \"步\",\n    \"群\",\n    \"廣\",\n    \"石\",\n    \"記\",\n    \"需\",\n    \"段\",\n    \"研\",\n    \"界\",\n    \"拉\",\n    \"林\",\n    \"律\",\n    \"叫\",\n    \"且\",\n    \"究\",\n    \"觀\",\n    \"越\",\n    \"織\",\n    \"裝\",\n    \"影\",\n    \"算\",\n    \"低\",\n    \"持\",\n    \"音\",\n    \"眾\",\n    \"書\",\n    \"布\",\n    \"复\",\n    \"容\",\n    \"兒\",\n    \"須\",\n    \"際\",\n    \"商\",\n    \"非\",\n    \"驗\",\n    \"連\",\n    \"斷\",\n    \"深\",\n    \"難\",\n    \"近\",\n    \"礦\",\n    \"千\",\n    \"週\",\n    \"委\",\n    \"素\",\n    \"技\",\n    \"備\",\n    \"半\",\n    \"辦\",\n    \"青\",\n    \"省\",\n    \"列\",\n    \"習\",\n    \"響\",\n    \"約\",\n    \"支\",\n    \"般\",\n    \"史\",\n    \"感\",\n    \"勞\",\n    \"便\",\n    \"團\",\n    \"往\",\n    \"酸\",\n    \"歷\",\n    \"市\",\n    \"克\",\n    \"何\",\n    \"除\",\n    \"消\",\n    \"構\",\n    \"府\",\n    \"稱\",\n    \"太\",\n    \"準\",\n    \"精\",\n    \"值\",\n    \"號\",\n    \"率\",\n    \"族\",\n    \"維\",\n    \"劃\",\n    \"選\",\n    \"標\",\n    \"寫\",\n    \"存\",\n    \"候\",\n    \"毛\",\n    \"親\",\n    \"快\",\n    \"效\",\n    \"斯\",\n    \"院\",\n    \"查\",\n    \"江\",\n    \"型\",\n    \"眼\",\n    \"王\",\n    \"按\",\n    \"格\",\n    \"養\",\n    \"易\",\n    \"置\",\n    \"派\",\n    \"層\",\n    \"片\",\n    \"始\",\n    \"卻\",\n    \"專\",\n    \"狀\",\n    \"育\",\n    \"廠\",\n    \"京\",\n    \"識\",\n    \"適\",\n    \"屬\",\n    \"圓\",\n    \"包\",\n    \"火\",\n    \"住\",\n    \"調\",\n    \"滿\",\n    \"縣\",\n    \"局\",\n    \"照\",\n    \"參\",\n    \"紅\",\n    \"細\",\n    \"引\",\n    \"聽\",\n    \"該\",\n    \"鐵\",\n    \"價\",\n    \"嚴\",\n    \"首\",\n    \"底\",\n    \"液\",\n    \"官\",\n    \"德\",\n    \"隨\",\n    \"病\",\n    \"蘇\",\n    \"失\",\n    \"爾\",\n    \"死\",\n    \"講\",\n    \"配\",\n    \"女\",\n    \"黃\",\n    \"推\",\n    \"顯\",\n    \"談\",\n    \"罪\",\n    \"神\",\n    \"藝\",\n    \"呢\",\n    \"席\",\n    \"含\",\n    \"企\",\n    \"望\",\n    \"密\",\n    \"批\",\n    \"營\",\n    \"項\",\n    \"防\",\n    \"舉\",\n    \"球\",\n    \"英\",\n    \"氧\",\n    \"勢\",\n    \"告\",\n    \"李\",\n    \"台\",\n    \"落\",\n    \"木\",\n    \"幫\",\n    \"輪\",\n    \"破\",\n    \"亞\",\n    \"師\",\n    \"圍\",\n    \"注\",\n    \"遠\",\n    \"字\",\n    \"材\",\n    \"排\",\n    \"供\",\n    \"河\",\n    \"態\",\n    \"封\",\n    \"另\",\n    \"施\",\n    \"減\",\n    \"樹\",\n    \"溶\",\n    \"怎\",\n    \"止\",\n    \"案\",\n    \"言\",\n    \"士\",\n    \"均\",\n    \"武\",\n    \"固\",\n    \"葉\",\n    \"魚\",\n    \"波\",\n    \"視\",\n    \"僅\",\n    \"費\",\n    \"緊\",\n    \"愛\",\n    \"左\",\n    \"章\",\n    \"早\",\n    \"朝\",\n    \"害\",\n    \"續\",\n    \"輕\",\n    \"服\",\n    \"試\",\n    \"食\",\n    \"充\",\n    \"兵\",\n    \"源\",\n    \"判\",\n    \"護\",\n    \"司\",\n    \"足\",\n    \"某\",\n    \"練\",\n    \"差\",\n    \"致\",\n    \"板\",\n    \"田\",\n    \"降\",\n    \"黑\",\n    \"犯\",\n    \"負\",\n    \"擊\",\n    \"范\",\n    \"繼\",\n    \"興\",\n    \"似\",\n    \"餘\",\n    \"堅\",\n    \"曲\",\n    \"輸\",\n    \"修\",\n    \"故\",\n    \"城\",\n    \"夫\",\n    \"夠\",\n    \"送\",\n    \"筆\",\n    \"船\",\n    \"佔\",\n    \"右\",\n    \"財\",\n    \"吃\",\n    \"富\",\n    \"春\",\n    \"職\",\n    \"覺\",\n    \"漢\",\n    \"畫\",\n    \"功\",\n    \"巴\",\n    \"跟\",\n    \"雖\",\n    \"雜\",\n    \"飛\",\n    \"檢\",\n    \"吸\",\n    \"助\",\n    \"昇\",\n    \"陽\",\n    \"互\",\n    \"初\",\n    \"創\",\n    \"抗\",\n    \"考\",\n    \"投\",\n    \"壞\",\n    \"策\",\n    \"古\",\n    \"徑\",\n    \"換\",\n    \"未\",\n    \"跑\",\n    \"留\",\n    \"鋼\",\n    \"曾\",\n    \"端\",\n    \"責\",\n    \"站\",\n    \"簡\",\n    \"述\",\n    \"錢\",\n    \"副\",\n    \"盡\",\n    \"帝\",\n    \"射\",\n    \"草\",\n    \"衝\",\n    \"承\",\n    \"獨\",\n    \"令\",\n    \"限\",\n    \"阿\",\n    \"宣\",\n    \"環\",\n    \"雙\",\n    \"請\",\n    \"超\",\n    \"微\",\n    \"讓\",\n    \"控\",\n    \"州\",\n    \"良\",\n    \"軸\",\n    \"找\",\n    \"否\",\n    \"紀\",\n    \"益\",\n    \"依\",\n    \"優\",\n    \"頂\",\n    \"礎\",\n    \"載\",\n    \"倒\",\n    \"房\",\n    \"突\",\n    \"坐\",\n    \"粉\",\n    \"敵\",\n    \"略\",\n    \"客\",\n    \"袁\",\n    \"冷\",\n    \"勝\",\n    \"絕\",\n    \"析\",\n    \"塊\",\n    \"劑\",\n    \"測\",\n    \"絲\",\n    \"協\",\n    \"訴\",\n    \"念\",\n    \"陳\",\n    \"仍\",\n    \"羅\",\n    \"鹽\",\n    \"友\",\n    \"洋\",\n    \"錯\",\n    \"苦\",\n    \"夜\",\n    \"刑\",\n    \"移\",\n    \"頻\",\n    \"逐\",\n    \"靠\",\n    \"混\",\n    \"母\",\n    \"短\",\n    \"皮\",\n    \"終\",\n    \"聚\",\n    \"汽\",\n    \"村\",\n    \"雲\",\n    \"哪\",\n    \"既\",\n    \"距\",\n    \"衛\",\n    \"停\",\n    \"烈\",\n    \"央\",\n    \"察\",\n    \"燒\",\n    \"迅\",\n    \"境\",\n    \"若\",\n    \"印\",\n    \"洲\",\n    \"刻\",\n    \"括\",\n    \"激\",\n    \"孔\",\n    \"搞\",\n    \"甚\",\n    \"室\",\n    \"待\",\n    \"核\",\n    \"校\",\n    \"散\",\n    \"侵\",\n    \"吧\",\n    \"甲\",\n    \"遊\",\n    \"久\",\n    \"菜\",\n    \"味\",\n    \"舊\",\n    \"模\",\n    \"湖\",\n    \"貨\",\n    \"損\",\n    \"預\",\n    \"阻\",\n    \"毫\",\n    \"普\",\n    \"穩\",\n    \"乙\",\n    \"媽\",\n    \"植\",\n    \"息\",\n    \"擴\",\n    \"銀\",\n    \"語\",\n    \"揮\",\n    \"酒\",\n    \"守\",\n    \"拿\",\n    \"序\",\n    \"紙\",\n    \"醫\",\n    \"缺\",\n    \"雨\",\n    \"嗎\",\n    \"針\",\n    \"劉\",\n    \"啊\",\n    \"急\",\n    \"唱\",\n    \"誤\",\n    \"訓\",\n    \"願\",\n    \"審\",\n    \"附\",\n    \"獲\",\n    \"茶\",\n    \"鮮\",\n    \"糧\",\n    \"斤\",\n    \"孩\",\n    \"脫\",\n    \"硫\",\n    \"肥\",\n    \"善\",\n    \"龍\",\n    \"演\",\n    \"父\",\n    \"漸\",\n    \"血\",\n    \"歡\",\n    \"械\",\n    \"掌\",\n    \"歌\",\n    \"沙\",\n    \"剛\",\n    \"攻\",\n    \"謂\",\n    \"盾\",\n    \"討\",\n    \"晚\",\n    \"粒\",\n    \"亂\",\n    \"燃\",\n    \"矛\",\n    \"乎\",\n    \"殺\",\n    \"藥\",\n    \"寧\",\n    \"魯\",\n    \"貴\",\n    \"鐘\",\n    \"煤\",\n    \"讀\",\n    \"班\",\n    \"伯\",\n    \"香\",\n    \"介\",\n    \"迫\",\n    \"句\",\n    \"豐\",\n    \"培\",\n    \"握\",\n    \"蘭\",\n    \"擔\",\n    \"弦\",\n    \"蛋\",\n    \"沉\",\n    \"假\",\n    \"穿\",\n    \"執\",\n    \"答\",\n    \"樂\",\n    \"誰\",\n    \"順\",\n    \"煙\",\n    \"縮\",\n    \"徵\",\n    \"臉\",\n    \"喜\",\n    \"松\",\n    \"腳\",\n    \"困\",\n    \"異\",\n    \"免\",\n    \"背\",\n    \"星\",\n    \"福\",\n    \"買\",\n    \"染\",\n    \"井\",\n    \"概\",\n    \"慢\",\n    \"怕\",\n    \"磁\",\n    \"倍\",\n    \"祖\",\n    \"皇\",\n    \"促\",\n    \"靜\",\n    \"補\",\n    \"評\",\n    \"翻\",\n    \"肉\",\n    \"踐\",\n    \"尼\",\n    \"衣\",\n    \"寬\",\n    \"揚\",\n    \"棉\",\n    \"希\",\n    \"傷\",\n    \"操\",\n    \"垂\",\n    \"秋\",\n    \"宜\",\n    \"氫\",\n    \"套\",\n    \"督\",\n    \"振\",\n    \"架\",\n    \"亮\",\n    \"末\",\n    \"憲\",\n    \"慶\",\n    \"編\",\n    \"牛\",\n    \"觸\",\n    \"映\",\n    \"雷\",\n    \"銷\",\n    \"詩\",\n    \"座\",\n    \"居\",\n    \"抓\",\n    \"裂\",\n    \"胞\",\n    \"呼\",\n    \"娘\",\n    \"景\",\n    \"威\",\n    \"綠\",\n    \"晶\",\n    \"厚\",\n    \"盟\",\n    \"衡\",\n    \"雞\",\n    \"孫\",\n    \"延\",\n    \"危\",\n    \"膠\",\n    \"屋\",\n    \"鄉\",\n    \"臨\",\n    \"陸\",\n    \"顧\",\n    \"掉\",\n    \"呀\",\n    \"燈\",\n    \"歲\",\n    \"措\",\n    \"束\",\n    \"耐\",\n    \"劇\",\n    \"玉\",\n    \"趙\",\n    \"跳\",\n    \"哥\",\n    \"季\",\n    \"課\",\n    \"凱\",\n    \"胡\",\n    \"額\",\n    \"款\",\n    \"紹\",\n    \"卷\",\n    \"齊\",\n    \"偉\",\n    \"蒸\",\n    \"殖\",\n    \"永\",\n    \"宗\",\n    \"苗\",\n    \"川\",\n    \"爐\",\n    \"岩\",\n    \"弱\",\n    \"零\",\n    \"楊\",\n    \"奏\",\n    \"沿\",\n    \"露\",\n    \"桿\",\n    \"探\",\n    \"滑\",\n    \"鎮\",\n    \"飯\",\n    \"濃\",\n    \"航\",\n    \"懷\",\n    \"趕\",\n    \"庫\",\n    \"奪\",\n    \"伊\",\n    \"靈\",\n    \"稅\",\n    \"途\",\n    \"滅\",\n    \"賽\",\n    \"歸\",\n    \"召\",\n    \"鼓\",\n    \"播\",\n    \"盤\",\n    \"裁\",\n    \"險\",\n    \"康\",\n    \"唯\",\n    \"錄\",\n    \"菌\",\n    \"純\",\n    \"借\",\n    \"糖\",\n    \"蓋\",\n    \"橫\",\n    \"符\",\n    \"私\",\n    \"努\",\n    \"堂\",\n    \"域\",\n    \"槍\",\n    \"潤\",\n    \"幅\",\n    \"哈\",\n    \"竟\",\n    \"熟\",\n    \"蟲\",\n    \"澤\",\n    \"腦\",\n    \"壤\",\n    \"碳\",\n    \"歐\",\n    \"遍\",\n    \"側\",\n    \"寨\",\n    \"敢\",\n    \"徹\",\n    \"慮\",\n    \"斜\",\n    \"薄\",\n    \"庭\",\n    \"納\",\n    \"彈\",\n    \"飼\",\n    \"伸\",\n    \"折\",\n    \"麥\",\n    \"濕\",\n    \"暗\",\n    \"荷\",\n    \"瓦\",\n    \"塞\",\n    \"床\",\n    \"築\",\n    \"惡\",\n    \"戶\",\n    \"訪\",\n    \"塔\",\n    \"奇\",\n    \"透\",\n    \"梁\",\n    \"刀\",\n    \"旋\",\n    \"跡\",\n    \"卡\",\n    \"氯\",\n    \"遇\",\n    \"份\",\n    \"毒\",\n    \"泥\",\n    \"退\",\n    \"洗\",\n    \"擺\",\n    \"灰\",\n    \"彩\",\n    \"賣\",\n    \"耗\",\n    \"夏\",\n    \"擇\",\n    \"忙\",\n    \"銅\",\n    \"獻\",\n    \"硬\",\n    \"予\",\n    \"繁\",\n    \"圈\",\n    \"雪\",\n    \"函\",\n    \"亦\",\n    \"抽\",\n    \"篇\",\n    \"陣\",\n    \"陰\",\n    \"丁\",\n    \"尺\",\n    \"追\",\n    \"堆\",\n    \"雄\",\n    \"迎\",\n    \"泛\",\n    \"爸\",\n    \"樓\",\n    \"避\",\n    \"謀\",\n    \"噸\",\n    \"野\",\n    \"豬\",\n    \"旗\",\n    \"累\",\n    \"偏\",\n    \"典\",\n    \"館\",\n    \"索\",\n    \"秦\",\n    \"脂\",\n    \"潮\",\n    \"爺\",\n    \"豆\",\n    \"忽\",\n    \"托\",\n    \"驚\",\n    \"塑\",\n    \"遺\",\n    \"愈\",\n    \"朱\",\n    \"替\",\n    \"纖\",\n    \"粗\",\n    \"傾\",\n    \"尚\",\n    \"痛\",\n    \"楚\",\n    \"謝\",\n    \"奮\",\n    \"購\",\n    \"磨\",\n    \"君\",\n    \"池\",\n    \"旁\",\n    \"碎\",\n    \"骨\",\n    \"監\",\n    \"捕\",\n    \"弟\",\n    \"暴\",\n    \"割\",\n    \"貫\",\n    \"殊\",\n    \"釋\",\n    \"詞\",\n    \"亡\",\n    \"壁\",\n    \"頓\",\n    \"寶\",\n    \"午\",\n    \"塵\",\n    \"聞\",\n    \"揭\",\n    \"炮\",\n    \"殘\",\n    \"冬\",\n    \"橋\",\n    \"婦\",\n    \"警\",\n    \"綜\",\n    \"招\",\n    \"吳\",\n    \"付\",\n    \"浮\",\n    \"遭\",\n    \"徐\",\n    \"您\",\n    \"搖\",\n    \"谷\",\n    \"贊\",\n    \"箱\",\n    \"隔\",\n    \"訂\",\n    \"男\",\n    \"吹\",\n    \"園\",\n    \"紛\",\n    \"唐\",\n    \"敗\",\n    \"宋\",\n    \"玻\",\n    \"巨\",\n    \"耕\",\n    \"坦\",\n    \"榮\",\n    \"閉\",\n    \"灣\",\n    \"鍵\",\n    \"凡\",\n    \"駐\",\n    \"鍋\",\n    \"救\",\n    \"恩\",\n    \"剝\",\n    \"凝\",\n    \"鹼\",\n    \"齒\",\n    \"截\",\n    \"煉\",\n    \"麻\",\n    \"紡\",\n    \"禁\",\n    \"廢\",\n    \"盛\",\n    \"版\",\n    \"緩\",\n    \"淨\",\n    \"睛\",\n    \"昌\",\n    \"婚\",\n    \"涉\",\n    \"筒\",\n    \"嘴\",\n    \"插\",\n    \"岸\",\n    \"朗\",\n    \"莊\",\n    \"街\",\n    \"藏\",\n    \"姑\",\n    \"貿\",\n    \"腐\",\n    \"奴\",\n    \"啦\",\n    \"慣\",\n    \"乘\",\n    \"夥\",\n    \"恢\",\n    \"勻\",\n    \"紗\",\n    \"扎\",\n    \"辯\",\n    \"耳\",\n    \"彪\",\n    \"臣\",\n    \"億\",\n    \"璃\",\n    \"抵\",\n    \"脈\",\n    \"秀\",\n    \"薩\",\n    \"俄\",\n    \"網\",\n    \"舞\",\n    \"店\",\n    \"噴\",\n    \"縱\",\n    \"寸\",\n    \"汗\",\n    \"掛\",\n    \"洪\",\n    \"賀\",\n    \"閃\",\n    \"柬\",\n    \"爆\",\n    \"烯\",\n    \"津\",\n    \"稻\",\n    \"牆\",\n    \"軟\",\n    \"勇\",\n    \"像\",\n    \"滾\",\n    \"厘\",\n    \"蒙\",\n    \"芳\",\n    \"肯\",\n    \"坡\",\n    \"柱\",\n    \"盪\",\n    \"腿\",\n    \"儀\",\n    \"旅\",\n    \"尾\",\n    \"軋\",\n    \"冰\",\n    \"貢\",\n    \"登\",\n    \"黎\",\n    \"削\",\n    \"鑽\",\n    \"勒\",\n    \"逃\",\n    \"障\",\n    \"氨\",\n    \"郭\",\n    \"峰\",\n    \"幣\",\n    \"港\",\n    \"伏\",\n    \"軌\",\n    \"畝\",\n    \"畢\",\n    \"擦\",\n    \"莫\",\n    \"刺\",\n    \"浪\",\n    \"秘\",\n    \"援\",\n    \"株\",\n    \"健\",\n    \"售\",\n    \"股\",\n    \"島\",\n    \"甘\",\n    \"泡\",\n    \"睡\",\n    \"童\",\n    \"鑄\",\n    \"湯\",\n    \"閥\",\n    \"休\",\n    \"匯\",\n    \"舍\",\n    \"牧\",\n    \"繞\",\n    \"炸\",\n    \"哲\",\n    \"磷\",\n    \"績\",\n    \"朋\",\n    \"淡\",\n    \"尖\",\n    \"啟\",\n    \"陷\",\n    \"柴\",\n    \"呈\",\n    \"徒\",\n    \"顏\",\n    \"淚\",\n    \"稍\",\n    \"忘\",\n    \"泵\",\n    \"藍\",\n    \"拖\",\n    \"洞\",\n    \"授\",\n    \"鏡\",\n    \"辛\",\n    \"壯\",\n    \"鋒\",\n    \"貧\",\n    \"虛\",\n    \"彎\",\n    \"摩\",\n    \"泰\",\n    \"幼\",\n    \"廷\",\n    \"尊\",\n    \"窗\",\n    \"綱\",\n    \"弄\",\n    \"隸\",\n    \"疑\",\n    \"氏\",\n    \"宮\",\n    \"姐\",\n    \"震\",\n    \"瑞\",\n    \"怪\",\n    \"尤\",\n    \"琴\",\n    \"循\",\n    \"描\",\n    \"膜\",\n    \"違\",\n    \"夾\",\n    \"腰\",\n    \"緣\",\n    \"珠\",\n    \"窮\",\n    \"森\",\n    \"枝\",\n    \"竹\",\n    \"溝\",\n    \"催\",\n    \"繩\",\n    \"憶\",\n    \"邦\",\n    \"剩\",\n    \"幸\",\n    \"漿\",\n    \"欄\",\n    \"擁\",\n    \"牙\",\n    \"貯\",\n    \"禮\",\n    \"濾\",\n    \"鈉\",\n    \"紋\",\n    \"罷\",\n    \"拍\",\n    \"咱\",\n    \"喊\",\n    \"袖\",\n    \"埃\",\n    \"勤\",\n    \"罰\",\n    \"焦\",\n    \"潛\",\n    \"伍\",\n    \"墨\",\n    \"欲\",\n    \"縫\",\n    \"姓\",\n    \"刊\",\n    \"飽\",\n    \"仿\",\n    \"獎\",\n    \"鋁\",\n    \"鬼\",\n    \"麗\",\n    \"跨\",\n    \"默\",\n    \"挖\",\n    \"鏈\",\n    \"掃\",\n    \"喝\",\n    \"袋\",\n    \"炭\",\n    \"污\",\n    \"幕\",\n    \"諸\",\n    \"弧\",\n    \"勵\",\n    \"梅\",\n    \"奶\",\n    \"潔\",\n    \"災\",\n    \"舟\",\n    \"鑑\",\n    \"苯\",\n    \"訟\",\n    \"抱\",\n    \"毀\",\n    \"懂\",\n    \"寒\",\n    \"智\",\n    \"埔\",\n    \"寄\",\n    \"屆\",\n    \"躍\",\n    \"渡\",\n    \"挑\",\n    \"丹\",\n    \"艱\",\n    \"貝\",\n    \"碰\",\n    \"拔\",\n    \"爹\",\n    \"戴\",\n    \"碼\",\n    \"夢\",\n    \"芽\",\n    \"熔\",\n    \"赤\",\n    \"漁\",\n    \"哭\",\n    \"敬\",\n    \"顆\",\n    \"奔\",\n    \"鉛\",\n    \"仲\",\n    \"虎\",\n    \"稀\",\n    \"妹\",\n    \"乏\",\n    \"珍\",\n    \"申\",\n    \"桌\",\n    \"遵\",\n    \"允\",\n    \"隆\",\n    \"螺\",\n    \"倉\",\n    \"魏\",\n    \"銳\",\n    \"曉\",\n    \"氮\",\n    \"兼\",\n    \"隱\",\n    \"礙\",\n    \"赫\",\n    \"撥\",\n    \"忠\",\n    \"肅\",\n    \"缸\",\n    \"牽\",\n    \"搶\",\n    \"博\",\n    \"巧\",\n    \"殼\",\n    \"兄\",\n    \"杜\",\n    \"訊\",\n    \"誠\",\n    \"碧\",\n    \"祥\",\n    \"柯\",\n    \"頁\",\n    \"巡\",\n    \"矩\",\n    \"悲\",\n    \"灌\",\n    \"齡\",\n    \"倫\",\n    \"票\",\n    \"尋\",\n    \"桂\",\n    \"鋪\",\n    \"聖\",\n    \"恐\",\n    \"恰\",\n    \"鄭\",\n    \"趣\",\n    \"抬\",\n    \"荒\",\n    \"騰\",\n    \"貼\",\n    \"柔\",\n    \"滴\",\n    \"猛\",\n    \"闊\",\n    \"輛\",\n    \"妻\",\n    \"填\",\n    \"撤\",\n    \"儲\",\n    \"簽\",\n    \"鬧\",\n    \"擾\",\n    \"紫\",\n    \"砂\",\n    \"遞\",\n    \"戲\",\n    \"吊\",\n    \"陶\",\n    \"伐\",\n    \"餵\",\n    \"療\",\n    \"瓶\",\n    \"婆\",\n    \"撫\",\n    \"臂\",\n    \"摸\",\n    \"忍\",\n    \"蝦\",\n    \"蠟\",\n    \"鄰\",\n    \"胸\",\n    \"鞏\",\n    \"擠\",\n    \"偶\",\n    \"棄\",\n    \"槽\",\n    \"勁\",\n    \"乳\",\n    \"鄧\",\n    \"吉\",\n    \"仁\",\n    \"爛\",\n    \"磚\",\n    \"租\",\n    \"烏\",\n    \"艦\",\n    \"伴\",\n    \"瓜\",\n    \"淺\",\n    \"丙\",\n    \"暫\",\n    \"燥\",\n    \"橡\",\n    \"柳\",\n    \"迷\",\n    \"暖\",\n    \"牌\",\n    \"秧\",\n    \"膽\",\n    \"詳\",\n    \"簧\",\n    \"踏\",\n    \"瓷\",\n    \"譜\",\n    \"呆\",\n    \"賓\",\n    \"糊\",\n    \"洛\",\n    \"輝\",\n    \"憤\",\n    \"競\",\n    \"隙\",\n    \"怒\",\n    \"粘\",\n    \"乃\",\n    \"緒\",\n    \"肩\",\n    \"籍\",\n    \"敏\",\n    \"塗\",\n    \"熙\",\n    \"皆\",\n    \"偵\",\n    \"懸\",\n    \"掘\",\n    \"享\",\n    \"糾\",\n    \"醒\",\n    \"狂\",\n    \"鎖\",\n    \"淀\",\n    \"恨\",\n    \"牲\",\n    \"霸\",\n    \"爬\",\n    \"賞\",\n    \"逆\",\n    \"玩\",\n    \"陵\",\n    \"祝\",\n    \"秒\",\n    \"浙\",\n    \"貌\",\n    \"役\",\n    \"彼\",\n    \"悉\",\n    \"鴨\",\n    \"趨\",\n    \"鳳\",\n    \"晨\",\n    \"畜\",\n    \"輩\",\n    \"秩\",\n    \"卵\",\n    \"署\",\n    \"梯\",\n    \"炎\",\n    \"灘\",\n    \"棋\",\n    \"驅\",\n    \"篩\",\n    \"峽\",\n    \"冒\",\n    \"啥\",\n    \"壽\",\n    \"譯\",\n    \"浸\",\n    \"泉\",\n    \"帽\",\n    \"遲\",\n    \"矽\",\n    \"疆\",\n    \"貸\",\n    \"漏\",\n    \"稿\",\n    \"冠\",\n    \"嫩\",\n    \"脅\",\n    \"芯\",\n    \"牢\",\n    \"叛\",\n    \"蝕\",\n    \"奧\",\n    \"鳴\",\n    \"嶺\",\n    \"羊\",\n    \"憑\",\n    \"串\",\n    \"塘\",\n    \"繪\",\n    \"酵\",\n    \"融\",\n    \"盆\",\n    \"錫\",\n    \"廟\",\n    \"籌\",\n    \"凍\",\n    \"輔\",\n    \"攝\",\n    \"襲\",\n    \"筋\",\n    \"拒\",\n    \"僚\",\n    \"旱\",\n    \"鉀\",\n    \"鳥\",\n    \"漆\",\n    \"沈\",\n    \"眉\",\n    \"疏\",\n    \"添\",\n    \"棒\",\n    \"穗\",\n    \"硝\",\n    \"韓\",\n    \"逼\",\n    \"扭\",\n    \"僑\",\n    \"涼\",\n    \"挺\",\n    \"碗\",\n    \"栽\",\n    \"炒\",\n    \"杯\",\n    \"患\",\n    \"餾\",\n    \"勸\",\n    \"豪\",\n    \"遼\",\n    \"勃\",\n    \"鴻\",\n    \"旦\",\n    \"吏\",\n    \"拜\",\n    \"狗\",\n    \"埋\",\n    \"輥\",\n    \"掩\",\n    \"飲\",\n    \"搬\",\n    \"罵\",\n    \"辭\",\n    \"勾\",\n    \"扣\",\n    \"估\",\n    \"蔣\",\n    \"絨\",\n    \"霧\",\n    \"丈\",\n    \"朵\",\n    \"姆\",\n    \"擬\",\n    \"宇\",\n    \"輯\",\n    \"陝\",\n    \"雕\",\n    \"償\",\n    \"蓄\",\n    \"崇\",\n    \"剪\",\n    \"倡\",\n    \"廳\",\n    \"咬\",\n    \"駛\",\n    \"薯\",\n    \"刷\",\n    \"斥\",\n    \"番\",\n    \"賦\",\n    \"奉\",\n    \"佛\",\n    \"澆\",\n    \"漫\",\n    \"曼\",\n    \"扇\",\n    \"鈣\",\n    \"桃\",\n    \"扶\",\n    \"仔\",\n    \"返\",\n    \"俗\",\n    \"虧\",\n    \"腔\",\n    \"鞋\",\n    \"棱\",\n    \"覆\",\n    \"框\",\n    \"悄\",\n    \"叔\",\n    \"撞\",\n    \"騙\",\n    \"勘\",\n    \"旺\",\n    \"沸\",\n    \"孤\",\n    \"吐\",\n    \"孟\",\n    \"渠\",\n    \"屈\",\n    \"疾\",\n    \"妙\",\n    \"惜\",\n    \"仰\",\n    \"狠\",\n    \"脹\",\n    \"諧\",\n    \"拋\",\n    \"黴\",\n    \"桑\",\n    \"崗\",\n    \"嘛\",\n    \"衰\",\n    \"盜\",\n    \"滲\",\n    \"臟\",\n    \"賴\",\n    \"湧\",\n    \"甜\",\n    \"曹\",\n    \"閱\",\n    \"肌\",\n    \"哩\",\n    \"厲\",\n    \"烴\",\n    \"緯\",\n    \"毅\",\n    \"昨\",\n    \"偽\",\n    \"症\",\n    \"煮\",\n    \"嘆\",\n    \"釘\",\n    \"搭\",\n    \"莖\",\n    \"籠\",\n    \"酷\",\n    \"偷\",\n    \"弓\",\n    \"錐\",\n    \"恆\",\n    \"傑\",\n    \"坑\",\n    \"鼻\",\n    \"翼\",\n    \"綸\",\n    \"敘\",\n    \"獄\",\n    \"逮\",\n    \"罐\",\n    \"絡\",\n    \"棚\",\n    \"抑\",\n    \"膨\",\n    \"蔬\",\n    \"寺\",\n    \"驟\",\n    \"穆\",\n    \"冶\",\n    \"枯\",\n    \"冊\",\n    \"屍\",\n    \"凸\",\n    \"紳\",\n    \"坯\",\n    \"犧\",\n    \"焰\",\n    \"轟\",\n    \"欣\",\n    \"晉\",\n    \"瘦\",\n    \"禦\",\n    \"錠\",\n    \"錦\",\n    \"喪\",\n    \"旬\",\n    \"鍛\",\n    \"壟\",\n    \"搜\",\n    \"撲\",\n    \"邀\",\n    \"亭\",\n    \"酯\",\n    \"邁\",\n    \"舒\",\n    \"脆\",\n    \"酶\",\n    \"閒\",\n    \"憂\",\n    \"酚\",\n    \"頑\",\n    \"羽\",\n    \"漲\",\n    \"卸\",\n    \"仗\",\n    \"陪\",\n    \"闢\",\n    \"懲\",\n    \"杭\",\n    \"姚\",\n    \"肚\",\n    \"捉\",\n    \"飄\",\n    \"漂\",\n    \"昆\",\n    \"欺\",\n    \"吾\",\n    \"郎\",\n    \"烷\",\n    \"汁\",\n    \"呵\",\n    \"飾\",\n    \"蕭\",\n    \"雅\",\n    \"郵\",\n    \"遷\",\n    \"燕\",\n    \"撒\",\n    \"姻\",\n    \"赴\",\n    \"宴\",\n    \"煩\",\n    \"債\",\n    \"帳\",\n    \"斑\",\n    \"鈴\",\n    \"旨\",\n    \"醇\",\n    \"董\",\n    \"餅\",\n    \"雛\",\n    \"姿\",\n    \"拌\",\n    \"傅\",\n    \"腹\",\n    \"妥\",\n    \"揉\",\n    \"賢\",\n    \"拆\",\n    \"歪\",\n    \"葡\",\n    \"胺\",\n    \"丟\",\n    \"浩\",\n    \"徽\",\n    \"昂\",\n    \"墊\",\n    \"擋\",\n    \"覽\",\n    \"貪\",\n    \"慰\",\n    \"繳\",\n    \"汪\",\n    \"慌\",\n    \"馮\",\n    \"諾\",\n    \"姜\",\n    \"誼\",\n    \"兇\",\n    \"劣\",\n    \"誣\",\n    \"耀\",\n    \"昏\",\n    \"躺\",\n    \"盈\",\n    \"騎\",\n    \"喬\",\n    \"溪\",\n    \"叢\",\n    \"盧\",\n    \"抹\",\n    \"悶\",\n    \"諮\",\n    \"刮\",\n    \"駕\",\n    \"纜\",\n    \"悟\",\n    \"摘\",\n    \"鉺\",\n    \"擲\",\n    \"頗\",\n    \"幻\",\n    \"柄\",\n    \"惠\",\n    \"慘\",\n    \"佳\",\n    \"仇\",\n    \"臘\",\n    \"窩\",\n    \"滌\",\n    \"劍\",\n    \"瞧\",\n    \"堡\",\n    \"潑\",\n    \"蔥\",\n    \"罩\",\n    \"霍\",\n    \"撈\",\n    \"胎\",\n    \"蒼\",\n    \"濱\",\n    \"倆\",\n    \"捅\",\n    \"湘\",\n    \"砍\",\n    \"霞\",\n    \"邵\",\n    \"萄\",\n    \"瘋\",\n    \"淮\",\n    \"遂\",\n    \"熊\",\n    \"糞\",\n    \"烘\",\n    \"宿\",\n    \"檔\",\n    \"戈\",\n    \"駁\",\n    \"嫂\",\n    \"裕\",\n    \"徙\",\n    \"箭\",\n    \"捐\",\n    \"腸\",\n    \"撐\",\n    \"曬\",\n    \"辨\",\n    \"殿\",\n    \"蓮\",\n    \"攤\",\n    \"攪\",\n    \"醬\",\n    \"屏\",\n    \"疫\",\n    \"哀\",\n    \"蔡\",\n    \"堵\",\n    \"沫\",\n    \"皺\",\n    \"暢\",\n    \"疊\",\n    \"閣\",\n    \"萊\",\n    \"敲\",\n    \"轄\",\n    \"鉤\",\n    \"痕\",\n    \"壩\",\n    \"巷\",\n    \"餓\",\n    \"禍\",\n    \"丘\",\n    \"玄\",\n    \"溜\",\n    \"曰\",\n    \"邏\",\n    \"彭\",\n    \"嘗\",\n    \"卿\",\n    \"妨\",\n    \"艇\",\n    \"吞\",\n    \"韋\",\n    \"怨\",\n    \"矮\",\n    \"歇\"\n]\n[\n    \"abdikace\",\n    \"abeceda\",\n    \"adresa\",\n    \"agrese\",\n    \"akce\",\n    \"aktovka\",\n    \"alej\",\n    \"alkohol\",\n    \"amputace\",\n    \"ananas\",\n    \"andulka\",\n    \"anekdota\",\n    \"anketa\",\n    \"antika\",\n    \"anulovat\",\n    \"archa\",\n    \"arogance\",\n    \"asfalt\",\n    \"asistent\",\n    \"aspirace\",\n    \"astma\",\n    \"astronom\",\n    \"atlas\",\n    \"atletika\",\n    \"atol\",\n    \"autobus\",\n    \"azyl\",\n    \"babka\",\n    \"bachor\",\n    \"bacil\",\n    \"baculka\",\n    \"badatel\",\n    \"bageta\",\n    \"bagr\",\n    \"bahno\",\n    \"bakterie\",\n    \"balada\",\n    \"baletka\",\n    \"balkon\",\n    \"balonek\",\n    \"balvan\",\n    \"balza\",\n    \"bambus\",\n    \"bankomat\",\n    \"barbar\",\n    \"baret\",\n    \"barman\",\n    \"baroko\",\n    \"barva\",\n    \"baterka\",\n    \"batoh\",\n    \"bavlna\",\n    \"bazalka\",\n    \"bazilika\",\n    \"bazuka\",\n    \"bedna\",\n    \"beran\",\n    \"beseda\",\n    \"bestie\",\n    \"beton\",\n    \"bezinka\",\n    \"bezmoc\",\n    \"beztak\",\n    \"bicykl\",\n    \"bidlo\",\n    \"biftek\",\n    \"bikiny\",\n    \"bilance\",\n    \"biograf\",\n    \"biolog\",\n    \"bitva\",\n    \"bizon\",\n    \"blahobyt\",\n    \"blatouch\",\n    \"blecha\",\n    \"bledule\",\n    \"blesk\",\n    \"blikat\",\n    \"blizna\",\n    \"blokovat\",\n    \"bloudit\",\n    \"blud\",\n    \"bobek\",\n    \"bobr\",\n    \"bodlina\",\n    \"bodnout\",\n    \"bohatost\",\n    \"bojkot\",\n    \"bojovat\",\n    \"bokorys\",\n    \"bolest\",\n    \"borec\",\n    \"borovice\",\n    \"bota\",\n    \"boubel\",\n    \"bouchat\",\n    \"bouda\",\n    \"boule\",\n    \"bourat\",\n    \"boxer\",\n    \"bradavka\",\n    \"brambora\",\n    \"branka\",\n    \"bratr\",\n    \"brepta\",\n    \"briketa\",\n    \"brko\",\n    \"brloh\",\n    \"bronz\",\n    \"broskev\",\n    \"brunetka\",\n    \"brusinka\",\n    \"brzda\",\n    \"brzy\",\n    \"bublina\",\n    \"bubnovat\",\n    \"buchta\",\n    \"buditel\",\n    \"budka\",\n    \"budova\",\n    \"bufet\",\n    \"bujarost\",\n    \"bukvice\",\n    \"buldok\",\n    \"bulva\",\n    \"bunda\",\n    \"bunkr\",\n    \"burza\",\n    \"butik\",\n    \"buvol\",\n    \"buzola\",\n    \"bydlet\",\n    \"bylina\",\n    \"bytovka\",\n    \"bzukot\",\n    \"capart\",\n    \"carevna\",\n    \"cedr\",\n    \"cedule\",\n    \"cejch\",\n    \"cejn\",\n    \"cela\",\n    \"celer\",\n    \"celkem\",\n    \"celnice\",\n    \"cenina\",\n    \"cennost\",\n    \"cenovka\",\n    \"centrum\",\n    \"cenzor\",\n    \"cestopis\",\n    \"cetka\",\n    \"chalupa\",\n    \"chapadlo\",\n    \"charita\",\n    \"chata\",\n    \"chechtat\",\n    \"chemie\",\n    \"chichot\",\n    \"chirurg\",\n    \"chlad\",\n    \"chleba\",\n    \"chlubit\",\n    \"chmel\",\n    \"chmura\",\n    \"chobot\",\n    \"chochol\",\n    \"chodba\",\n    \"cholera\",\n    \"chomout\",\n    \"chopit\",\n    \"choroba\",\n    \"chov\",\n    \"chrapot\",\n    \"chrlit\",\n    \"chrt\",\n    \"chrup\",\n    \"chtivost\",\n    \"chudina\",\n    \"chutnat\",\n    \"chvat\",\n    \"chvilka\",\n    \"chvost\",\n    \"chyba\",\n    \"chystat\",\n    \"chytit\",\n    \"cibule\",\n    \"cigareta\",\n    \"cihelna\",\n    \"cihla\",\n    \"cinkot\",\n    \"cirkus\",\n    \"cisterna\",\n    \"citace\",\n    \"citrus\",\n    \"cizinec\",\n    \"cizost\",\n    \"clona\",\n    \"cokoliv\",\n    \"couvat\",\n    \"ctitel\",\n    \"ctnost\",\n    \"cudnost\",\n    \"cuketa\",\n    \"cukr\",\n    \"cupot\",\n    \"cvaknout\",\n    \"cval\",\n    \"cvik\",\n    \"cvrkot\",\n    \"cyklista\",\n    \"daleko\",\n    \"dareba\",\n    \"datel\",\n    \"datum\",\n    \"dcera\",\n    \"debata\",\n    \"dechovka\",\n    \"decibel\",\n    \"deficit\",\n    \"deflace\",\n    \"dekl\",\n    \"dekret\",\n    \"demokrat\",\n    \"deprese\",\n    \"derby\",\n    \"deska\",\n    \"detektiv\",\n    \"dikobraz\",\n    \"diktovat\",\n    \"dioda\",\n    \"diplom\",\n    \"disk\",\n    \"displej\",\n    \"divadlo\",\n    \"divoch\",\n    \"dlaha\",\n    \"dlouho\",\n    \"dluhopis\",\n    \"dnes\",\n    \"dobro\",\n    \"dobytek\",\n    \"docent\",\n    \"dochutit\",\n    \"dodnes\",\n    \"dohled\",\n    \"dohoda\",\n    \"dohra\",\n    \"dojem\",\n    \"dojnice\",\n    \"doklad\",\n    \"dokola\",\n    \"doktor\",\n    \"dokument\",\n    \"dolar\",\n    \"doleva\",\n    \"dolina\",\n    \"doma\",\n    \"dominant\",\n    \"domluvit\",\n    \"domov\",\n    \"donutit\",\n    \"dopad\",\n    \"dopis\",\n    \"doplnit\",\n    \"doposud\",\n    \"doprovod\",\n    \"dopustit\",\n    \"dorazit\",\n    \"dorost\",\n    \"dort\",\n    \"dosah\",\n    \"doslov\",\n    \"dostatek\",\n    \"dosud\",\n    \"dosyta\",\n    \"dotaz\",\n    \"dotek\",\n    \"dotknout\",\n    \"doufat\",\n    \"doutnat\",\n    \"dovozce\",\n    \"dozadu\",\n    \"doznat\",\n    \"dozorce\",\n    \"drahota\",\n    \"drak\",\n    \"dramatik\",\n    \"dravec\",\n    \"draze\",\n    \"drdol\",\n    \"drobnost\",\n    \"drogerie\",\n    \"drozd\",\n    \"drsnost\",\n    \"drtit\",\n    \"drzost\",\n    \"duben\",\n    \"duchovno\",\n    \"dudek\",\n    \"duha\",\n    \"duhovka\",\n    \"dusit\",\n    \"dusno\",\n    \"dutost\",\n    \"dvojice\",\n    \"dvorec\",\n    \"dynamit\",\n    \"ekolog\",\n    \"ekonomie\",\n    \"elektron\",\n    \"elipsa\",\n    \"email\",\n    \"emise\",\n    \"emoce\",\n    \"empatie\",\n    \"epizoda\",\n    \"epocha\",\n    \"epopej\",\n    \"epos\",\n    \"esej\",\n    \"esence\",\n    \"eskorta\",\n    \"eskymo\",\n    \"etiketa\",\n    \"euforie\",\n    \"evoluce\",\n    \"exekuce\",\n    \"exkurze\",\n    \"expedice\",\n    \"exploze\",\n    \"export\",\n    \"extrakt\",\n    \"facka\",\n    \"fajfka\",\n    \"fakulta\",\n    \"fanatik\",\n    \"fantazie\",\n    \"farmacie\",\n    \"favorit\",\n    \"fazole\",\n    \"federace\",\n    \"fejeton\",\n    \"fenka\",\n    \"fialka\",\n    \"figurant\",\n    \"filozof\",\n    \"filtr\",\n    \"finance\",\n    \"finta\",\n    \"fixace\",\n    \"fjord\",\n    \"flanel\",\n    \"flirt\",\n    \"flotila\",\n    \"fond\",\n    \"fosfor\",\n    \"fotbal\",\n    \"fotka\",\n    \"foton\",\n    \"frakce\",\n    \"freska\",\n    \"fronta\",\n    \"fukar\",\n    \"funkce\",\n    \"fyzika\",\n    \"galeje\",\n    \"garant\",\n    \"genetika\",\n    \"geolog\",\n    \"gilotina\",\n    \"glazura\",\n    \"glejt\",\n    \"golem\",\n    \"golfista\",\n    \"gotika\",\n    \"graf\",\n    \"gramofon\",\n    \"granule\",\n    \"grep\",\n    \"gril\",\n    \"grog\",\n    \"groteska\",\n    \"guma\",\n    \"hadice\",\n    \"hadr\",\n    \"hala\",\n    \"halenka\",\n    \"hanba\",\n    \"hanopis\",\n    \"harfa\",\n    \"harpuna\",\n    \"havran\",\n    \"hebkost\",\n    \"hejkal\",\n    \"hejno\",\n    \"hejtman\",\n    \"hektar\",\n    \"helma\",\n    \"hematom\",\n    \"herec\",\n    \"herna\",\n    \"heslo\",\n    \"hezky\",\n    \"historik\",\n    \"hladovka\",\n    \"hlasivky\",\n    \"hlava\",\n    \"hledat\",\n    \"hlen\",\n    \"hlodavec\",\n    \"hloh\",\n    \"hloupost\",\n    \"hltat\",\n    \"hlubina\",\n    \"hluchota\",\n    \"hmat\",\n    \"hmota\",\n    \"hmyz\",\n    \"hnis\",\n    \"hnojivo\",\n    \"hnout\",\n    \"hoblina\",\n    \"hoboj\",\n    \"hoch\",\n    \"hodiny\",\n    \"hodlat\",\n    \"hodnota\",\n    \"hodovat\",\n    \"hojnost\",\n    \"hokej\",\n    \"holinka\",\n    \"holka\",\n    \"holub\",\n    \"homole\",\n    \"honitba\",\n    \"honorace\",\n    \"horal\",\n    \"horda\",\n    \"horizont\",\n    \"horko\",\n    \"horlivec\",\n    \"hormon\",\n    \"hornina\",\n    \"horoskop\",\n    \"horstvo\",\n    \"hospoda\",\n    \"hostina\",\n    \"hotovost\",\n    \"houba\",\n    \"houf\",\n    \"houpat\",\n    \"houska\",\n    \"hovor\",\n    \"hradba\",\n    \"hranice\",\n    \"hravost\",\n    \"hrazda\",\n    \"hrbolek\",\n    \"hrdina\",\n    \"hrdlo\",\n    \"hrdost\",\n    \"hrnek\",\n    \"hrobka\",\n    \"hromada\",\n    \"hrot\",\n    \"hrouda\",\n    \"hrozen\",\n    \"hrstka\",\n    \"hrubost\",\n    \"hryzat\",\n    \"hubenost\",\n    \"hubnout\",\n    \"hudba\",\n    \"hukot\",\n    \"humr\",\n    \"husita\",\n    \"hustota\",\n    \"hvozd\",\n    \"hybnost\",\n    \"hydrant\",\n    \"hygiena\",\n    \"hymna\",\n    \"hysterik\",\n    \"idylka\",\n    \"ihned\",\n    \"ikona\",\n    \"iluze\",\n    \"imunita\",\n    \"infekce\",\n    \"inflace\",\n    \"inkaso\",\n    \"inovace\",\n    \"inspekce\",\n    \"internet\",\n    \"invalida\",\n    \"investor\",\n    \"inzerce\",\n    \"ironie\",\n    \"jablko\",\n    \"jachta\",\n    \"jahoda\",\n    \"jakmile\",\n    \"jakost\",\n    \"jalovec\",\n    \"jantar\",\n    \"jarmark\",\n    \"jaro\",\n    \"jasan\",\n    \"jasno\",\n    \"jatka\",\n    \"javor\",\n    \"jazyk\",\n    \"jedinec\",\n    \"jedle\",\n    \"jednatel\",\n    \"jehlan\",\n    \"jekot\",\n    \"jelen\",\n    \"jelito\",\n    \"jemnost\",\n    \"jenom\",\n    \"jepice\",\n    \"jeseter\",\n    \"jevit\",\n    \"jezdec\",\n    \"jezero\",\n    \"jinak\",\n    \"jindy\",\n    \"jinoch\",\n    \"jiskra\",\n    \"jistota\",\n    \"jitrnice\",\n    \"jizva\",\n    \"jmenovat\",\n    \"jogurt\",\n    \"jurta\",\n    \"kabaret\",\n    \"kabel\",\n    \"kabinet\",\n    \"kachna\",\n    \"kadet\",\n    \"kadidlo\",\n    \"kahan\",\n    \"kajak\",\n    \"kajuta\",\n    \"kakao\",\n    \"kaktus\",\n    \"kalamita\",\n    \"kalhoty\",\n    \"kalibr\",\n    \"kalnost\",\n    \"kamera\",\n    \"kamkoliv\",\n    \"kamna\",\n    \"kanibal\",\n    \"kanoe\",\n    \"kantor\",\n    \"kapalina\",\n    \"kapela\",\n    \"kapitola\",\n    \"kapka\",\n    \"kaple\",\n    \"kapota\",\n    \"kapr\",\n    \"kapusta\",\n    \"kapybara\",\n    \"karamel\",\n    \"karotka\",\n    \"karton\",\n    \"kasa\",\n    \"katalog\",\n    \"katedra\",\n    \"kauce\",\n    \"kauza\",\n    \"kavalec\",\n    \"kazajka\",\n    \"kazeta\",\n    \"kazivost\",\n    \"kdekoliv\",\n    \"kdesi\",\n    \"kedluben\",\n    \"kemp\",\n    \"keramika\",\n    \"kino\",\n    \"klacek\",\n    \"kladivo\",\n    \"klam\",\n    \"klapot\",\n    \"klasika\",\n    \"klaun\",\n    \"klec\",\n    \"klenba\",\n    \"klepat\",\n    \"klesnout\",\n    \"klid\",\n    \"klima\",\n    \"klisna\",\n    \"klobouk\",\n    \"klokan\",\n    \"klopa\",\n    \"kloub\",\n    \"klubovna\",\n    \"klusat\",\n    \"kluzkost\",\n    \"kmen\",\n    \"kmitat\",\n    \"kmotr\",\n    \"kniha\",\n    \"knot\",\n    \"koalice\",\n    \"koberec\",\n    \"kobka\",\n    \"kobliha\",\n    \"kobyla\",\n    \"kocour\",\n    \"kohout\",\n    \"kojenec\",\n    \"kokos\",\n    \"koktejl\",\n    \"kolaps\",\n    \"koleda\",\n    \"kolize\",\n    \"kolo\",\n    \"komando\",\n    \"kometa\",\n    \"komik\",\n    \"komnata\",\n    \"komora\",\n    \"kompas\",\n    \"komunita\",\n    \"konat\",\n    \"koncept\",\n    \"kondice\",\n    \"konec\",\n    \"konfese\",\n    \"kongres\",\n    \"konina\",\n    \"konkurs\",\n    \"kontakt\",\n    \"konzerva\",\n    \"kopanec\",\n    \"kopie\",\n    \"kopnout\",\n    \"koprovka\",\n    \"korbel\",\n    \"korektor\",\n    \"kormidlo\",\n    \"koroptev\",\n    \"korpus\",\n    \"koruna\",\n    \"koryto\",\n    \"korzet\",\n    \"kosatec\",\n    \"kostka\",\n    \"kotel\",\n    \"kotleta\",\n    \"kotoul\",\n    \"koukat\",\n    \"koupelna\",\n    \"kousek\",\n    \"kouzlo\",\n    \"kovboj\",\n    \"koza\",\n    \"kozoroh\",\n    \"krabice\",\n    \"krach\",\n    \"krajina\",\n    \"kralovat\",\n    \"krasopis\",\n    \"kravata\",\n    \"kredit\",\n    \"krejcar\",\n    \"kresba\",\n    \"kreveta\",\n    \"kriket\",\n    \"kritik\",\n    \"krize\",\n    \"krkavec\",\n    \"krmelec\",\n    \"krmivo\",\n    \"krocan\",\n    \"krok\",\n    \"kronika\",\n    \"kropit\",\n    \"kroupa\",\n    \"krovka\",\n    \"krtek\",\n    \"kruhadlo\",\n    \"krupice\",\n    \"krutost\",\n    \"krvinka\",\n    \"krychle\",\n    \"krypta\",\n    \"krystal\",\n    \"kryt\",\n    \"kudlanka\",\n    \"kufr\",\n    \"kujnost\",\n    \"kukla\",\n    \"kulajda\",\n    \"kulich\",\n    \"kulka\",\n    \"kulomet\",\n    \"kultura\",\n    \"kuna\",\n    \"kupodivu\",\n    \"kurt\",\n    \"kurzor\",\n    \"kutil\",\n    \"kvalita\",\n    \"kvasinka\",\n    \"kvestor\",\n    \"kynolog\",\n    \"kyselina\",\n    \"kytara\",\n    \"kytice\",\n    \"kytka\",\n    \"kytovec\",\n    \"kyvadlo\",\n    \"labrador\",\n    \"lachtan\",\n    \"ladnost\",\n    \"laik\",\n    \"lakomec\",\n    \"lamela\",\n    \"lampa\",\n    \"lanovka\",\n    \"lasice\",\n    \"laso\",\n    \"lastura\",\n    \"latinka\",\n    \"lavina\",\n    \"lebka\",\n    \"leckdy\",\n    \"leden\",\n    \"lednice\",\n    \"ledovka\",\n    \"ledvina\",\n    \"legenda\",\n    \"legie\",\n    \"legrace\",\n    \"lehce\",\n    \"lehkost\",\n    \"lehnout\",\n    \"lektvar\",\n    \"lenochod\",\n    \"lentilka\",\n    \"lepenka\",\n    \"lepidlo\",\n    \"letadlo\",\n    \"letec\",\n    \"letmo\",\n    \"letokruh\",\n    \"levhart\",\n    \"levitace\",\n    \"levobok\",\n    \"libra\",\n    \"lichotka\",\n    \"lidojed\",\n    \"lidskost\",\n    \"lihovina\",\n    \"lijavec\",\n    \"lilek\",\n    \"limetka\",\n    \"linie\",\n    \"linka\",\n    \"linoleum\",\n    \"listopad\",\n    \"litina\",\n    \"litovat\",\n    \"lobista\",\n    \"lodivod\",\n    \"logika\",\n    \"logoped\",\n    \"lokalita\",\n    \"loket\",\n    \"lomcovat\",\n    \"lopata\",\n    \"lopuch\",\n    \"lord\",\n    \"losos\",\n    \"lotr\",\n    \"loudal\",\n    \"louh\",\n    \"louka\",\n    \"louskat\",\n    \"lovec\",\n    \"lstivost\",\n    \"lucerna\",\n    \"lucifer\",\n    \"lump\",\n    \"lusk\",\n    \"lustrace\",\n    \"lvice\",\n    \"lyra\",\n    \"lyrika\",\n    \"lysina\",\n    \"madam\",\n    \"madlo\",\n    \"magistr\",\n    \"mahagon\",\n    \"majetek\",\n    \"majitel\",\n    \"majorita\",\n    \"makak\",\n    \"makovice\",\n    \"makrela\",\n    \"malba\",\n    \"malina\",\n    \"malovat\",\n    \"malvice\",\n    \"maminka\",\n    \"mandle\",\n    \"manko\",\n    \"marnost\",\n    \"masakr\",\n    \"maskot\",\n    \"masopust\",\n    \"matice\",\n    \"matrika\",\n    \"maturita\",\n    \"mazanec\",\n    \"mazivo\",\n    \"mazlit\",\n    \"mazurka\",\n    \"mdloba\",\n    \"mechanik\",\n    \"meditace\",\n    \"medovina\",\n    \"melasa\",\n    \"meloun\",\n    \"mentolka\",\n    \"metla\",\n    \"metoda\",\n    \"metr\",\n    \"mezera\",\n    \"migrace\",\n    \"mihnout\",\n    \"mihule\",\n    \"mikina\",\n    \"mikrofon\",\n    \"milenec\",\n    \"milimetr\",\n    \"milost\",\n    \"mimika\",\n    \"mincovna\",\n    \"minibar\",\n    \"minomet\",\n    \"minulost\",\n    \"miska\",\n    \"mistr\",\n    \"mixovat\",\n    \"mladost\",\n    \"mlha\",\n    \"mlhovina\",\n    \"mlok\",\n    \"mlsat\",\n    \"mluvit\",\n    \"mnich\",\n    \"mnohem\",\n    \"mobil\",\n    \"mocnost\",\n    \"modelka\",\n    \"modlitba\",\n    \"mohyla\",\n    \"mokro\",\n    \"molekula\",\n    \"momentka\",\n    \"monarcha\",\n    \"monokl\",\n    \"monstrum\",\n    \"montovat\",\n    \"monzun\",\n    \"mosaz\",\n    \"moskyt\",\n    \"most\",\n    \"motivace\",\n    \"motorka\",\n    \"motyka\",\n    \"moucha\",\n    \"moudrost\",\n    \"mozaika\",\n    \"mozek\",\n    \"mozol\",\n    \"mramor\",\n    \"mravenec\",\n    \"mrkev\",\n    \"mrtvola\",\n    \"mrzet\",\n    \"mrzutost\",\n    \"mstitel\",\n    \"mudrc\",\n    \"muflon\",\n    \"mulat\",\n    \"mumie\",\n    \"munice\",\n    \"muset\",\n    \"mutace\",\n    \"muzeum\",\n    \"muzikant\",\n    \"myslivec\",\n    \"mzda\",\n    \"nabourat\",\n    \"nachytat\",\n    \"nadace\",\n    \"nadbytek\",\n    \"nadhoz\",\n    \"nadobro\",\n    \"nadpis\",\n    \"nahlas\",\n    \"nahnat\",\n    \"nahodile\",\n    \"nahradit\",\n    \"naivita\",\n    \"najednou\",\n    \"najisto\",\n    \"najmout\",\n    \"naklonit\",\n    \"nakonec\",\n    \"nakrmit\",\n    \"nalevo\",\n    \"namazat\",\n    \"namluvit\",\n    \"nanometr\",\n    \"naoko\",\n    \"naopak\",\n    \"naostro\",\n    \"napadat\",\n    \"napevno\",\n    \"naplnit\",\n    \"napnout\",\n    \"naposled\",\n    \"naprosto\",\n    \"narodit\",\n    \"naruby\",\n    \"narychlo\",\n    \"nasadit\",\n    \"nasekat\",\n    \"naslepo\",\n    \"nastat\",\n    \"natolik\",\n    \"navenek\",\n    \"navrch\",\n    \"navzdory\",\n    \"nazvat\",\n    \"nebe\",\n    \"nechat\",\n    \"necky\",\n    \"nedaleko\",\n    \"nedbat\",\n    \"neduh\",\n    \"negace\",\n    \"nehet\",\n    \"nehoda\",\n    \"nejen\",\n    \"nejprve\",\n    \"neklid\",\n    \"nelibost\",\n    \"nemilost\",\n    \"nemoc\",\n    \"neochota\",\n    \"neonka\",\n    \"nepokoj\",\n    \"nerost\",\n    \"nerv\",\n    \"nesmysl\",\n    \"nesoulad\",\n    \"netvor\",\n    \"neuron\",\n    \"nevina\",\n    \"nezvykle\",\n    \"nicota\",\n    \"nijak\",\n    \"nikam\",\n    \"nikdy\",\n    \"nikl\",\n    \"nikterak\",\n    \"nitro\",\n    \"nocleh\",\n    \"nohavice\",\n    \"nominace\",\n    \"nora\",\n    \"norek\",\n    \"nositel\",\n    \"nosnost\",\n    \"nouze\",\n    \"noviny\",\n    \"novota\",\n    \"nozdra\",\n    \"nuda\",\n    \"nudle\",\n    \"nuget\",\n    \"nutit\",\n    \"nutnost\",\n    \"nutrie\",\n    \"nymfa\",\n    \"obal\",\n    \"obarvit\",\n    \"obava\",\n    \"obdiv\",\n    \"obec\",\n    \"obehnat\",\n    \"obejmout\",\n    \"obezita\",\n    \"obhajoba\",\n    \"obilnice\",\n    \"objasnit\",\n    \"objekt\",\n    \"obklopit\",\n    \"oblast\",\n    \"oblek\",\n    \"obliba\",\n    \"obloha\",\n    \"obluda\",\n    \"obnos\",\n    \"obohatit\",\n    \"obojek\",\n    \"obout\",\n    \"obrazec\",\n    \"obrna\",\n    \"obruba\",\n    \"obrys\",\n    \"obsah\",\n    \"obsluha\",\n    \"obstarat\",\n    \"obuv\",\n    \"obvaz\",\n    \"obvinit\",\n    \"obvod\",\n    \"obvykle\",\n    \"obyvatel\",\n    \"obzor\",\n    \"ocas\",\n    \"ocel\",\n    \"ocenit\",\n    \"ochladit\",\n    \"ochota\",\n    \"ochrana\",\n    \"ocitnout\",\n    \"odboj\",\n    \"odbyt\",\n    \"odchod\",\n    \"odcizit\",\n    \"odebrat\",\n    \"odeslat\",\n    \"odevzdat\",\n    \"odezva\",\n    \"odhadce\",\n    \"odhodit\",\n    \"odjet\",\n    \"odjinud\",\n    \"odkaz\",\n    \"odkoupit\",\n    \"odliv\",\n    \"odluka\",\n    \"odmlka\",\n    \"odolnost\",\n    \"odpad\",\n    \"odpis\",\n    \"odplout\",\n    \"odpor\",\n    \"odpustit\",\n    \"odpykat\",\n    \"odrazka\",\n    \"odsoudit\",\n    \"odstup\",\n    \"odsun\",\n    \"odtok\",\n    \"odtud\",\n    \"odvaha\",\n    \"odveta\",\n    \"odvolat\",\n    \"odvracet\",\n    \"odznak\",\n    \"ofina\",\n    \"ofsajd\",\n    \"ohlas\",\n    \"ohnisko\",\n    \"ohrada\",\n    \"ohrozit\",\n    \"ohryzek\",\n    \"okap\",\n    \"okenice\",\n    \"oklika\",\n    \"okno\",\n    \"okouzlit\",\n    \"okovy\",\n    \"okrasa\",\n    \"okres\",\n    \"okrsek\",\n    \"okruh\",\n    \"okupant\",\n    \"okurka\",\n    \"okusit\",\n    \"olejnina\",\n    \"olizovat\",\n    \"omak\",\n    \"omeleta\",\n    \"omezit\",\n    \"omladina\",\n    \"omlouvat\",\n    \"omluva\",\n    \"omyl\",\n    \"onehdy\",\n    \"opakovat\",\n    \"opasek\",\n    \"operace\",\n    \"opice\",\n    \"opilost\",\n    \"opisovat\",\n    \"opora\",\n    \"opozice\",\n    \"opravdu\",\n    \"oproti\",\n    \"orbital\",\n    \"orchestr\",\n    \"orgie\",\n    \"orlice\",\n    \"orloj\",\n    \"ortel\",\n    \"osada\",\n    \"oschnout\",\n    \"osika\",\n    \"osivo\",\n    \"oslava\",\n    \"oslepit\",\n    \"oslnit\",\n    \"oslovit\",\n    \"osnova\",\n    \"osoba\",\n    \"osolit\",\n    \"ospalec\",\n    \"osten\",\n    \"ostraha\",\n    \"ostuda\",\n    \"ostych\",\n    \"osvojit\",\n    \"oteplit\",\n    \"otisk\",\n    \"otop\",\n    \"otrhat\",\n    \"otrlost\",\n    \"otrok\",\n    \"otruby\",\n    \"otvor\",\n    \"ovanout\",\n    \"ovar\",\n    \"oves\",\n    \"ovlivnit\",\n    \"ovoce\",\n    \"oxid\",\n    \"ozdoba\",\n    \"pachatel\",\n    \"pacient\",\n    \"padouch\",\n    \"pahorek\",\n    \"pakt\",\n    \"palanda\",\n    \"palec\",\n    \"palivo\",\n    \"paluba\",\n    \"pamflet\",\n    \"pamlsek\",\n    \"panenka\",\n    \"panika\",\n    \"panna\",\n    \"panovat\",\n    \"panstvo\",\n    \"pantofle\",\n    \"paprika\",\n    \"parketa\",\n    \"parodie\",\n    \"parta\",\n    \"paruka\",\n    \"paryba\",\n    \"paseka\",\n    \"pasivita\",\n    \"pastelka\",\n    \"patent\",\n    \"patrona\",\n    \"pavouk\",\n    \"pazneht\",\n    \"pazourek\",\n    \"pecka\",\n    \"pedagog\",\n    \"pejsek\",\n    \"peklo\",\n    \"peloton\",\n    \"penalta\",\n    \"pendrek\",\n    \"penze\",\n    \"periskop\",\n    \"pero\",\n    \"pestrost\",\n    \"petarda\",\n    \"petice\",\n    \"petrolej\",\n    \"pevnina\",\n    \"pexeso\",\n    \"pianista\",\n    \"piha\",\n    \"pijavice\",\n    \"pikle\",\n    \"piknik\",\n    \"pilina\",\n    \"pilnost\",\n    \"pilulka\",\n    \"pinzeta\",\n    \"pipeta\",\n    \"pisatel\",\n    \"pistole\",\n    \"pitevna\",\n    \"pivnice\",\n    \"pivovar\",\n    \"placenta\",\n    \"plakat\",\n    \"plamen\",\n    \"planeta\",\n    \"plastika\",\n    \"platit\",\n    \"plavidlo\",\n    \"plaz\",\n    \"plech\",\n    \"plemeno\",\n    \"plenta\",\n    \"ples\",\n    \"pletivo\",\n    \"plevel\",\n    \"plivat\",\n    \"plnit\",\n    \"plno\",\n    \"plocha\",\n    \"plodina\",\n    \"plomba\",\n    \"plout\",\n    \"pluk\",\n    \"plyn\",\n    \"pobavit\",\n    \"pobyt\",\n    \"pochod\",\n    \"pocit\",\n    \"poctivec\",\n    \"podat\",\n    \"podcenit\",\n    \"podepsat\",\n    \"podhled\",\n    \"podivit\",\n    \"podklad\",\n    \"podmanit\",\n    \"podnik\",\n    \"podoba\",\n    \"podpora\",\n    \"podraz\",\n    \"podstata\",\n    \"podvod\",\n    \"podzim\",\n    \"poezie\",\n    \"pohanka\",\n    \"pohnutka\",\n    \"pohovor\",\n    \"pohroma\",\n    \"pohyb\",\n    \"pointa\",\n    \"pojistka\",\n    \"pojmout\",\n    \"pokazit\",\n    \"pokles\",\n    \"pokoj\",\n    \"pokrok\",\n    \"pokuta\",\n    \"pokyn\",\n    \"poledne\",\n    \"polibek\",\n    \"polknout\",\n    \"poloha\",\n    \"polynom\",\n    \"pomalu\",\n    \"pominout\",\n    \"pomlka\",\n    \"pomoc\",\n    \"pomsta\",\n    \"pomyslet\",\n    \"ponechat\",\n    \"ponorka\",\n    \"ponurost\",\n    \"popadat\",\n    \"popel\",\n    \"popisek\",\n    \"poplach\",\n    \"poprosit\",\n    \"popsat\",\n    \"popud\",\n    \"poradce\",\n    \"porce\",\n    \"porod\",\n    \"porucha\",\n    \"poryv\",\n    \"posadit\",\n    \"posed\",\n    \"posila\",\n    \"poskok\",\n    \"poslanec\",\n    \"posoudit\",\n    \"pospolu\",\n    \"postava\",\n    \"posudek\",\n    \"posyp\",\n    \"potah\",\n    \"potkan\",\n    \"potlesk\",\n    \"potomek\",\n    \"potrava\",\n    \"potupa\",\n    \"potvora\",\n    \"poukaz\",\n    \"pouto\",\n    \"pouzdro\",\n    \"povaha\",\n    \"povidla\",\n    \"povlak\",\n    \"povoz\",\n    \"povrch\",\n    \"povstat\",\n    \"povyk\",\n    \"povzdech\",\n    \"pozdrav\",\n    \"pozemek\",\n    \"poznatek\",\n    \"pozor\",\n    \"pozvat\",\n    \"pracovat\",\n    \"prahory\",\n    \"praktika\",\n    \"prales\",\n    \"praotec\",\n    \"praporek\",\n    \"prase\",\n    \"pravda\",\n    \"princip\",\n    \"prkno\",\n    \"probudit\",\n    \"procento\",\n    \"prodej\",\n    \"profese\",\n    \"prohra\",\n    \"projekt\",\n    \"prolomit\",\n    \"promile\",\n    \"pronikat\",\n    \"propad\",\n    \"prorok\",\n    \"prosba\",\n    \"proton\",\n    \"proutek\",\n    \"provaz\",\n    \"prskavka\",\n    \"prsten\",\n    \"prudkost\",\n    \"prut\",\n    \"prvek\",\n    \"prvohory\",\n    \"psanec\",\n    \"psovod\",\n    \"pstruh\",\n    \"ptactvo\",\n    \"puberta\",\n    \"puch\",\n    \"pudl\",\n    \"pukavec\",\n    \"puklina\",\n    \"pukrle\",\n    \"pult\",\n    \"pumpa\",\n    \"punc\",\n    \"pupen\",\n    \"pusa\",\n    \"pusinka\",\n    \"pustina\",\n    \"putovat\",\n    \"putyka\",\n    \"pyramida\",\n    \"pysk\",\n    \"pytel\",\n    \"racek\",\n    \"rachot\",\n    \"radiace\",\n    \"radnice\",\n    \"radon\",\n    \"raft\",\n    \"ragby\",\n    \"raketa\",\n    \"rakovina\",\n    \"rameno\",\n    \"rampouch\",\n    \"rande\",\n    \"rarach\",\n    \"rarita\",\n    \"rasovna\",\n    \"rastr\",\n    \"ratolest\",\n    \"razance\",\n    \"razidlo\",\n    \"reagovat\",\n    \"reakce\",\n    \"recept\",\n    \"redaktor\",\n    \"referent\",\n    \"reflex\",\n    \"rejnok\",\n    \"reklama\",\n    \"rekord\",\n    \"rekrut\",\n    \"rektor\",\n    \"reputace\",\n    \"revize\",\n    \"revma\",\n    \"revolver\",\n    \"rezerva\",\n    \"riskovat\",\n    \"riziko\",\n    \"robotika\",\n    \"rodokmen\",\n    \"rohovka\",\n    \"rokle\",\n    \"rokoko\",\n    \"romaneto\",\n    \"ropovod\",\n    \"ropucha\",\n    \"rorejs\",\n    \"rosol\",\n    \"rostlina\",\n    \"rotmistr\",\n    \"rotoped\",\n    \"rotunda\",\n    \"roubenka\",\n    \"roucho\",\n    \"roup\",\n    \"roura\",\n    \"rovina\",\n    \"rovnice\",\n    \"rozbor\",\n    \"rozchod\",\n    \"rozdat\",\n    \"rozeznat\",\n    \"rozhodce\",\n    \"rozinka\",\n    \"rozjezd\",\n    \"rozkaz\",\n    \"rozloha\",\n    \"rozmar\",\n    \"rozpad\",\n    \"rozruch\",\n    \"rozsah\",\n    \"roztok\",\n    \"rozum\",\n    \"rozvod\",\n    \"rubrika\",\n    \"ruchadlo\",\n    \"rukavice\",\n    \"rukopis\",\n    \"ryba\",\n    \"rybolov\",\n    \"rychlost\",\n    \"rydlo\",\n    \"rypadlo\",\n    \"rytina\",\n    \"ryzost\",\n    \"sadista\",\n    \"sahat\",\n    \"sako\",\n    \"samec\",\n    \"samizdat\",\n    \"samota\",\n    \"sanitka\",\n    \"sardinka\",\n    \"sasanka\",\n    \"satelit\",\n    \"sazba\",\n    \"sazenice\",\n    \"sbor\",\n    \"schovat\",\n    \"sebranka\",\n    \"secese\",\n    \"sedadlo\",\n    \"sediment\",\n    \"sedlo\",\n    \"sehnat\",\n    \"sejmout\",\n    \"sekera\",\n    \"sekta\",\n    \"sekunda\",\n    \"sekvoje\",\n    \"semeno\",\n    \"seno\",\n    \"servis\",\n    \"sesadit\",\n    \"seshora\",\n    \"seskok\",\n    \"seslat\",\n    \"sestra\",\n    \"sesuv\",\n    \"sesypat\",\n    \"setba\",\n    \"setina\",\n    \"setkat\",\n    \"setnout\",\n    \"setrvat\",\n    \"sever\",\n    \"seznam\",\n    \"shoda\",\n    \"shrnout\",\n    \"sifon\",\n    \"silnice\",\n    \"sirka\",\n    \"sirotek\",\n    \"sirup\",\n    \"situace\",\n    \"skafandr\",\n    \"skalisko\",\n    \"skanzen\",\n    \"skaut\",\n    \"skeptik\",\n    \"skica\",\n    \"skladba\",\n    \"sklenice\",\n    \"sklo\",\n    \"skluz\",\n    \"skoba\",\n    \"skokan\",\n    \"skoro\",\n    \"skripta\",\n    \"skrz\",\n    \"skupina\",\n    \"skvost\",\n    \"skvrna\",\n    \"slabika\",\n    \"sladidlo\",\n    \"slanina\",\n    \"slast\",\n    \"slavnost\",\n    \"sledovat\",\n    \"slepec\",\n    \"sleva\",\n    \"slezina\",\n    \"slib\",\n    \"slina\",\n    \"sliznice\",\n    \"slon\",\n    \"sloupek\",\n    \"slovo\",\n    \"sluch\",\n    \"sluha\",\n    \"slunce\",\n    \"slupka\",\n    \"slza\",\n    \"smaragd\",\n    \"smetana\",\n    \"smilstvo\",\n    \"smlouva\",\n    \"smog\",\n    \"smrad\",\n    \"smrk\",\n    \"smrtka\",\n    \"smutek\",\n    \"smysl\",\n    \"snad\",\n    \"snaha\",\n    \"snob\",\n    \"sobota\",\n    \"socha\",\n    \"sodovka\",\n    \"sokol\",\n    \"sopka\",\n    \"sotva\",\n    \"souboj\",\n    \"soucit\",\n    \"soudce\",\n    \"souhlas\",\n    \"soulad\",\n    \"soumrak\",\n    \"souprava\",\n    \"soused\",\n    \"soutok\",\n    \"souviset\",\n    \"spalovna\",\n    \"spasitel\",\n    \"spis\",\n    \"splav\",\n    \"spodek\",\n    \"spojenec\",\n    \"spolu\",\n    \"sponzor\",\n    \"spornost\",\n    \"spousta\",\n    \"sprcha\",\n    \"spustit\",\n    \"sranda\",\n    \"sraz\",\n    \"srdce\",\n    \"srna\",\n    \"srnec\",\n    \"srovnat\",\n    \"srpen\",\n    \"srst\",\n    \"srub\",\n    \"stanice\",\n    \"starosta\",\n    \"statika\",\n    \"stavba\",\n    \"stehno\",\n    \"stezka\",\n    \"stodola\",\n    \"stolek\",\n    \"stopa\",\n    \"storno\",\n    \"stoupat\",\n    \"strach\",\n    \"stres\",\n    \"strhnout\",\n    \"strom\",\n    \"struna\",\n    \"studna\",\n    \"stupnice\",\n    \"stvol\",\n    \"styk\",\n    \"subjekt\",\n    \"subtropy\",\n    \"suchar\",\n    \"sudost\",\n    \"sukno\",\n    \"sundat\",\n    \"sunout\",\n    \"surikata\",\n    \"surovina\",\n    \"svah\",\n    \"svalstvo\",\n    \"svetr\",\n    \"svatba\",\n    \"svazek\",\n    \"svisle\",\n    \"svitek\",\n    \"svoboda\",\n    \"svodidlo\",\n    \"svorka\",\n    \"svrab\",\n    \"sykavka\",\n    \"sykot\",\n    \"synek\",\n    \"synovec\",\n    \"sypat\",\n    \"sypkost\",\n    \"syrovost\",\n    \"sysel\",\n    \"sytost\",\n    \"tabletka\",\n    \"tabule\",\n    \"tahoun\",\n    \"tajemno\",\n    \"tajfun\",\n    \"tajga\",\n    \"tajit\",\n    \"tajnost\",\n    \"taktika\",\n    \"tamhle\",\n    \"tampon\",\n    \"tancovat\",\n    \"tanec\",\n    \"tanker\",\n    \"tapeta\",\n    \"tavenina\",\n    \"tazatel\",\n    \"technika\",\n    \"tehdy\",\n    \"tekutina\",\n    \"telefon\",\n    \"temnota\",\n    \"tendence\",\n    \"tenista\",\n    \"tenor\",\n    \"teplota\",\n    \"tepna\",\n    \"teprve\",\n    \"terapie\",\n    \"termoska\",\n    \"textil\",\n    \"ticho\",\n    \"tiskopis\",\n    \"titulek\",\n    \"tkadlec\",\n    \"tkanina\",\n    \"tlapka\",\n    \"tleskat\",\n    \"tlukot\",\n    \"tlupa\",\n    \"tmel\",\n    \"toaleta\",\n    \"topinka\",\n    \"topol\",\n    \"torzo\",\n    \"touha\",\n    \"toulec\",\n    \"tradice\",\n    \"traktor\",\n    \"tramp\",\n    \"trasa\",\n    \"traverza\",\n    \"trefit\",\n    \"trest\",\n    \"trezor\",\n    \"trhavina\",\n    \"trhlina\",\n    \"trochu\",\n    \"trojice\",\n    \"troska\",\n    \"trouba\",\n    \"trpce\",\n    \"trpitel\",\n    \"trpkost\",\n    \"trubec\",\n    \"truchlit\",\n    \"truhlice\",\n    \"trus\",\n    \"trvat\",\n    \"tudy\",\n    \"tuhnout\",\n    \"tuhost\",\n    \"tundra\",\n    \"turista\",\n    \"turnaj\",\n    \"tuzemsko\",\n    \"tvaroh\",\n    \"tvorba\",\n    \"tvrdost\",\n    \"tvrz\",\n    \"tygr\",\n    \"tykev\",\n    \"ubohost\",\n    \"uboze\",\n    \"ubrat\",\n    \"ubrousek\",\n    \"ubrus\",\n    \"ubytovna\",\n    \"ucho\",\n    \"uctivost\",\n    \"udivit\",\n    \"uhradit\",\n    \"ujednat\",\n    \"ujistit\",\n    \"ujmout\",\n    \"ukazatel\",\n    \"uklidnit\",\n    \"uklonit\",\n    \"ukotvit\",\n    \"ukrojit\",\n    \"ulice\",\n    \"ulita\",\n    \"ulovit\",\n    \"umyvadlo\",\n    \"unavit\",\n    \"uniforma\",\n    \"uniknout\",\n    \"upadnout\",\n    \"uplatnit\",\n    \"uplynout\",\n    \"upoutat\",\n    \"upravit\",\n    \"uran\",\n    \"urazit\",\n    \"usednout\",\n    \"usilovat\",\n    \"usmrtit\",\n    \"usnadnit\",\n    \"usnout\",\n    \"usoudit\",\n    \"ustlat\",\n    \"ustrnout\",\n    \"utahovat\",\n    \"utkat\",\n    \"utlumit\",\n    \"utonout\",\n    \"utopenec\",\n    \"utrousit\",\n    \"uvalit\",\n    \"uvolnit\",\n    \"uvozovka\",\n    \"uzdravit\",\n    \"uzel\",\n    \"uzenina\",\n    \"uzlina\",\n    \"uznat\",\n    \"vagon\",\n    \"valcha\",\n    \"valoun\",\n    \"vana\",\n    \"vandal\",\n    \"vanilka\",\n    \"varan\",\n    \"varhany\",\n    \"varovat\",\n    \"vcelku\",\n    \"vchod\",\n    \"vdova\",\n    \"vedro\",\n    \"vegetace\",\n    \"vejce\",\n    \"velbloud\",\n    \"veletrh\",\n    \"velitel\",\n    \"velmoc\",\n    \"velryba\",\n    \"venkov\",\n    \"veranda\",\n    \"verze\",\n    \"veselka\",\n    \"veskrze\",\n    \"vesnice\",\n    \"vespodu\",\n    \"vesta\",\n    \"veterina\",\n    \"veverka\",\n    \"vibrace\",\n    \"vichr\",\n    \"videohra\",\n    \"vidina\",\n    \"vidle\",\n    \"vila\",\n    \"vinice\",\n    \"viset\",\n    \"vitalita\",\n    \"vize\",\n    \"vizitka\",\n    \"vjezd\",\n    \"vklad\",\n    \"vkus\",\n    \"vlajka\",\n    \"vlak\",\n    \"vlasec\",\n    \"vlevo\",\n    \"vlhkost\",\n    \"vliv\",\n    \"vlnovka\",\n    \"vloupat\",\n    \"vnucovat\",\n    \"vnuk\",\n    \"voda\",\n    \"vodivost\",\n    \"vodoznak\",\n    \"vodstvo\",\n    \"vojensky\",\n    \"vojna\",\n    \"vojsko\",\n    \"volant\",\n    \"volba\",\n    \"volit\",\n    \"volno\",\n    \"voskovka\",\n    \"vozidlo\",\n    \"vozovna\",\n    \"vpravo\",\n    \"vrabec\",\n    \"vracet\",\n    \"vrah\",\n    \"vrata\",\n    \"vrba\",\n    \"vrcholek\",\n    \"vrhat\",\n    \"vrstva\",\n    \"vrtule\",\n    \"vsadit\",\n    \"vstoupit\",\n    \"vstup\",\n    \"vtip\",\n    \"vybavit\",\n    \"vybrat\",\n    \"vychovat\",\n    \"vydat\",\n    \"vydra\",\n    \"vyfotit\",\n    \"vyhledat\",\n    \"vyhnout\",\n    \"vyhodit\",\n    \"vyhradit\",\n    \"vyhubit\",\n    \"vyjasnit\",\n    \"vyjet\",\n    \"vyjmout\",\n    \"vyklopit\",\n    \"vykonat\",\n    \"vylekat\",\n    \"vymazat\",\n    \"vymezit\",\n    \"vymizet\",\n    \"vymyslet\",\n    \"vynechat\",\n    \"vynikat\",\n    \"vynutit\",\n    \"vypadat\",\n    \"vyplatit\",\n    \"vypravit\",\n    \"vypustit\",\n    \"vyrazit\",\n    \"vyrovnat\",\n    \"vyrvat\",\n    \"vyslovit\",\n    \"vysoko\",\n    \"vystavit\",\n    \"vysunout\",\n    \"vysypat\",\n    \"vytasit\",\n    \"vytesat\",\n    \"vytratit\",\n    \"vyvinout\",\n    \"vyvolat\",\n    \"vyvrhel\",\n    \"vyzdobit\",\n    \"vyznat\",\n    \"vzadu\",\n    \"vzbudit\",\n    \"vzchopit\",\n    \"vzdor\",\n    \"vzduch\",\n    \"vzdychat\",\n    \"vzestup\",\n    \"vzhledem\",\n    \"vzkaz\",\n    \"vzlykat\",\n    \"vznik\",\n    \"vzorek\",\n    \"vzpoura\",\n    \"vztah\",\n    \"vztek\",\n    \"xylofon\",\n    \"zabrat\",\n    \"zabydlet\",\n    \"zachovat\",\n    \"zadarmo\",\n    \"zadusit\",\n    \"zafoukat\",\n    \"zahltit\",\n    \"zahodit\",\n    \"zahrada\",\n    \"zahynout\",\n    \"zajatec\",\n    \"zajet\",\n    \"zajistit\",\n    \"zaklepat\",\n    \"zakoupit\",\n    \"zalepit\",\n    \"zamezit\",\n    \"zamotat\",\n    \"zamyslet\",\n    \"zanechat\",\n    \"zanikat\",\n    \"zaplatit\",\n    \"zapojit\",\n    \"zapsat\",\n    \"zarazit\",\n    \"zastavit\",\n    \"zasunout\",\n    \"zatajit\",\n    \"zatemnit\",\n    \"zatknout\",\n    \"zaujmout\",\n    \"zavalit\",\n    \"zavelet\",\n    \"zavinit\",\n    \"zavolat\",\n    \"zavrtat\",\n    \"zazvonit\",\n    \"zbavit\",\n    \"zbrusu\",\n    \"zbudovat\",\n    \"zbytek\",\n    \"zdaleka\",\n    \"zdarma\",\n    \"zdatnost\",\n    \"zdivo\",\n    \"zdobit\",\n    \"zdroj\",\n    \"zdvih\",\n    \"zdymadlo\",\n    \"zelenina\",\n    \"zeman\",\n    \"zemina\",\n    \"zeptat\",\n    \"zezadu\",\n    \"zezdola\",\n    \"zhatit\",\n    \"zhltnout\",\n    \"zhluboka\",\n    \"zhotovit\",\n    \"zhruba\",\n    \"zima\",\n    \"zimnice\",\n    \"zjemnit\",\n    \"zklamat\",\n    \"zkoumat\",\n    \"zkratka\",\n    \"zkumavka\",\n    \"zlato\",\n    \"zlehka\",\n    \"zloba\",\n    \"zlom\",\n    \"zlost\",\n    \"zlozvyk\",\n    \"zmapovat\",\n    \"zmar\",\n    \"zmatek\",\n    \"zmije\",\n    \"zmizet\",\n    \"zmocnit\",\n    \"zmodrat\",\n    \"zmrzlina\",\n    \"zmutovat\",\n    \"znak\",\n    \"znalost\",\n    \"znamenat\",\n    \"znovu\",\n    \"zobrazit\",\n    \"zotavit\",\n    \"zoubek\",\n    \"zoufale\",\n    \"zplodit\",\n    \"zpomalit\",\n    \"zprava\",\n    \"zprostit\",\n    \"zprudka\",\n    \"zprvu\",\n    \"zrada\",\n    \"zranit\",\n    \"zrcadlo\",\n    \"zrnitost\",\n    \"zrno\",\n    \"zrovna\",\n    \"zrychlit\",\n    \"zrzavost\",\n    \"zticha\",\n    \"ztratit\",\n    \"zubovina\",\n    \"zubr\",\n    \"zvednout\",\n    \"zvenku\",\n    \"zvesela\",\n    \"zvon\",\n    \"zvrat\",\n    \"zvukovod\",\n    \"zvyk\"\n]\n[\n    \"abandon\",\n    \"ability\",\n    \"able\",\n    \"about\",\n    \"above\",\n    \"absent\",\n    \"absorb\",\n    \"abstract\",\n    \"absurd\",\n    \"abuse\",\n    \"access\",\n    \"accident\",\n    \"account\",\n    \"accuse\",\n    \"achieve\",\n    \"acid\",\n    \"acoustic\",\n    \"acquire\",\n    \"across\",\n    \"act\",\n    \"action\",\n    \"actor\",\n    \"actress\",\n    \"actual\",\n    \"adapt\",\n    \"add\",\n    \"addict\",\n    \"address\",\n    \"adjust\",\n    \"admit\",\n    \"adult\",\n    \"advance\",\n    \"advice\",\n    \"aerobic\",\n    \"affair\",\n    \"afford\",\n    \"afraid\",\n    \"again\",\n    \"age\",\n    \"agent\",\n    \"agree\",\n    \"ahead\",\n    \"aim\",\n    \"air\",\n    \"airport\",\n    \"aisle\",\n    \"alarm\",\n    \"album\",\n    \"alcohol\",\n    \"alert\",\n    \"alien\",\n    \"all\",\n    \"alley\",\n    \"allow\",\n    \"almost\",\n    \"alone\",\n    \"alpha\",\n    \"already\",\n    \"also\",\n    \"alter\",\n    \"always\",\n    \"amateur\",\n    \"amazing\",\n    \"among\",\n    \"amount\",\n    \"amused\",\n    \"analyst\",\n    \"anchor\",\n    \"ancient\",\n    \"anger\",\n    \"angle\",\n    \"angry\",\n    \"animal\",\n    \"ankle\",\n    \"announce\",\n    \"annual\",\n    \"another\",\n    \"answer\",\n    \"antenna\",\n    \"antique\",\n    \"anxiety\",\n    \"any\",\n    \"apart\",\n    \"apology\",\n    \"appear\",\n    \"apple\",\n    \"approve\",\n    \"april\",\n    \"arch\",\n    \"arctic\",\n    \"area\",\n    \"arena\",\n    \"argue\",\n    \"arm\",\n    \"armed\",\n    \"armor\",\n    \"army\",\n    \"around\",\n    \"arrange\",\n    \"arrest\",\n    \"arrive\",\n    \"arrow\",\n    \"art\",\n    \"artefact\",\n    \"artist\",\n    \"artwork\",\n    \"ask\",\n    \"aspect\",\n    \"assault\",\n    \"asset\",\n    \"assist\",\n    \"assume\",\n    \"asthma\",\n    \"athlete\",\n    \"atom\",\n    \"attack\",\n    \"attend\",\n    \"attitude\",\n    \"attract\",\n    \"auction\",\n    \"audit\",\n    \"august\",\n    \"aunt\",\n    \"author\",\n    \"auto\",\n    \"autumn\",\n    \"average\",\n    \"avocado\",\n    \"avoid\",\n    \"awake\",\n    \"aware\",\n    \"away\",\n    \"awesome\",\n    \"awful\",\n    \"awkward\",\n    \"axis\",\n    \"baby\",\n    \"bachelor\",\n    \"bacon\",\n    \"badge\",\n    \"bag\",\n    \"balance\",\n    \"balcony\",\n    \"ball\",\n    \"bamboo\",\n    \"banana\",\n    \"banner\",\n    \"bar\",\n    \"barely\",\n    \"bargain\",\n    \"barrel\",\n    \"base\",\n    \"basic\",\n    \"basket\",\n    \"battle\",\n    \"beach\",\n    \"bean\",\n    \"beauty\",\n    \"because\",\n    \"become\",\n    \"beef\",\n    \"before\",\n    \"begin\",\n    \"behave\",\n    \"behind\",\n    \"believe\",\n    \"below\",\n    \"belt\",\n    \"bench\",\n    \"benefit\",\n    \"best\",\n    \"betray\",\n    \"better\",\n    \"between\",\n    \"beyond\",\n    \"bicycle\",\n    \"bid\",\n    \"bike\",\n    \"bind\",\n    \"biology\",\n    \"bird\",\n    \"birth\",\n    \"bitter\",\n    \"black\",\n    \"blade\",\n    \"blame\",\n    \"blanket\",\n    \"blast\",\n    \"bleak\",\n    \"bless\",\n    \"blind\",\n    \"blood\",\n    \"blossom\",\n    \"blouse\",\n    \"blue\",\n    \"blur\",\n    \"blush\",\n    \"board\",\n    \"boat\",\n    \"body\",\n    \"boil\",\n    \"bomb\",\n    \"bone\",\n    \"bonus\",\n    \"book\",\n    \"boost\",\n    \"border\",\n    \"boring\",\n    \"borrow\",\n    \"boss\",\n    \"bottom\",\n    \"bounce\",\n    \"box\",\n    \"boy\",\n    \"bracket\",\n    \"brain\",\n    \"brand\",\n    \"brass\",\n    \"brave\",\n    \"bread\",\n    \"breeze\",\n    \"brick\",\n    \"bridge\",\n    \"brief\",\n    \"bright\",\n    \"bring\",\n    \"brisk\",\n    \"broccoli\",\n    \"broken\",\n    \"bronze\",\n    \"broom\",\n    \"brother\",\n    \"brown\",\n    \"brush\",\n    \"bubble\",\n    \"buddy\",\n    \"budget\",\n    \"buffalo\",\n    \"build\",\n    \"bulb\",\n    \"bulk\",\n    \"bullet\",\n    \"bundle\",\n    \"bunker\",\n    \"burden\",\n    \"burger\",\n    \"burst\",\n    \"bus\",\n    \"business\",\n    \"busy\",\n    \"butter\",\n    \"buyer\",\n    \"buzz\",\n    \"cabbage\",\n    \"cabin\",\n    \"cable\",\n    \"cactus\",\n    \"cage\",\n    \"cake\",\n    \"call\",\n    \"calm\",\n    \"camera\",\n    \"camp\",\n    \"can\",\n    \"canal\",\n    \"cancel\",\n    \"candy\",\n    \"cannon\",\n    \"canoe\",\n    \"canvas\",\n    \"canyon\",\n    \"capable\",\n    \"capital\",\n    \"captain\",\n    \"car\",\n    \"carbon\",\n    \"card\",\n    \"cargo\",\n    \"carpet\",\n    \"carry\",\n    \"cart\",\n    \"case\",\n    \"cash\",\n    \"casino\",\n    \"castle\",\n    \"casual\",\n    \"cat\",\n    \"catalog\",\n    \"catch\",\n    \"category\",\n    \"cattle\",\n    \"caught\",\n    \"cause\",\n    \"caution\",\n    \"cave\",\n    \"ceiling\",\n    \"celery\",\n    \"cement\",\n    \"census\",\n    \"century\",\n    \"cereal\",\n    \"certain\",\n    \"chair\",\n    \"chalk\",\n    \"champion\",\n    \"change\",\n    \"chaos\",\n    \"chapter\",\n    \"charge\",\n    \"chase\",\n    \"chat\",\n    \"cheap\",\n    \"check\",\n    \"cheese\",\n    \"chef\",\n    \"cherry\",\n    \"chest\",\n    \"chicken\",\n    \"chief\",\n    \"child\",\n    \"chimney\",\n    \"choice\",\n    \"choose\",\n    \"chronic\",\n    \"chuckle\",\n    \"chunk\",\n    \"churn\",\n    \"cigar\",\n    \"cinnamon\",\n    \"circle\",\n    \"citizen\",\n    \"city\",\n    \"civil\",\n    \"claim\",\n    \"clap\",\n    \"clarify\",\n    \"claw\",\n    \"clay\",\n    \"clean\",\n    \"clerk\",\n    \"clever\",\n    \"click\",\n    \"client\",\n    \"cliff\",\n    \"climb\",\n    \"clinic\",\n    \"clip\",\n    \"clock\",\n    \"clog\",\n    \"close\",\n    \"cloth\",\n    \"cloud\",\n    \"clown\",\n    \"club\",\n    \"clump\",\n    \"cluster\",\n    \"clutch\",\n    \"coach\",\n    \"coast\",\n    \"coconut\",\n    \"code\",\n    \"coffee\",\n    \"coil\",\n    \"coin\",\n    \"collect\",\n    \"color\",\n    \"column\",\n    \"combine\",\n    \"come\",\n    \"comfort\",\n    \"comic\",\n    \"common\",\n    \"company\",\n    \"concert\",\n    \"conduct\",\n    \"confirm\",\n    \"congress\",\n    \"connect\",\n    \"consider\",\n    \"control\",\n    \"convince\",\n    \"cook\",\n    \"cool\",\n    \"copper\",\n    \"copy\",\n    \"coral\",\n    \"core\",\n    \"corn\",\n    \"correct\",\n    \"cost\",\n    \"cotton\",\n    \"couch\",\n    \"country\",\n    \"couple\",\n    \"course\",\n    \"cousin\",\n    \"cover\",\n    \"coyote\",\n    \"crack\",\n    \"cradle\",\n    \"craft\",\n    \"cram\",\n    \"crane\",\n    \"crash\",\n    \"crater\",\n    \"crawl\",\n    \"crazy\",\n    \"cream\",\n    \"credit\",\n    \"creek\",\n    \"crew\",\n    \"cricket\",\n    \"crime\",\n    \"crisp\",\n    \"critic\",\n    \"crop\",\n    \"cross\",\n    \"crouch\",\n    \"crowd\",\n    \"crucial\",\n    \"cruel\",\n    \"cruise\",\n    \"crumble\",\n    \"crunch\",\n    \"crush\",\n    \"cry\",\n    \"crystal\",\n    \"cube\",\n    \"culture\",\n    \"cup\",\n    \"cupboard\",\n    \"curious\",\n    \"current\",\n    \"curtain\",\n    \"curve\",\n    \"cushion\",\n    \"custom\",\n    \"cute\",\n    \"cycle\",\n    \"dad\",\n    \"damage\",\n    \"damp\",\n    \"dance\",\n    \"danger\",\n    \"daring\",\n    \"dash\",\n    \"daughter\",\n    \"dawn\",\n    \"day\",\n    \"deal\",\n    \"debate\",\n    \"debris\",\n    \"decade\",\n    \"december\",\n    \"decide\",\n    \"decline\",\n    \"decorate\",\n    \"decrease\",\n    \"deer\",\n    \"defense\",\n    \"define\",\n    \"defy\",\n    \"degree\",\n    \"delay\",\n    \"deliver\",\n    \"demand\",\n    \"demise\",\n    \"denial\",\n    \"dentist\",\n    \"deny\",\n    \"depart\",\n    \"depend\",\n    \"deposit\",\n    \"depth\",\n    \"deputy\",\n    \"derive\",\n    \"describe\",\n    \"desert\",\n    \"design\",\n    \"desk\",\n    \"despair\",\n    \"destroy\",\n    \"detail\",\n    \"detect\",\n    \"develop\",\n    \"device\",\n    \"devote\",\n    \"diagram\",\n    \"dial\",\n    \"diamond\",\n    \"diary\",\n    \"dice\",\n    \"diesel\",\n    \"diet\",\n    \"differ\",\n    \"digital\",\n    \"dignity\",\n    \"dilemma\",\n    \"dinner\",\n    \"dinosaur\",\n    \"direct\",\n    \"dirt\",\n    \"disagree\",\n    \"discover\",\n    \"disease\",\n    \"dish\",\n    \"dismiss\",\n    \"disorder\",\n    \"display\",\n    \"distance\",\n    \"divert\",\n    \"divide\",\n    \"divorce\",\n    \"dizzy\",\n    \"doctor\",\n    \"document\",\n    \"dog\",\n    \"doll\",\n    \"dolphin\",\n    \"domain\",\n    \"donate\",\n    \"donkey\",\n    \"donor\",\n    \"door\",\n    \"dose\",\n    \"double\",\n    \"dove\",\n    \"draft\",\n    \"dragon\",\n    \"drama\",\n    \"drastic\",\n    \"draw\",\n    \"dream\",\n    \"dress\",\n    \"drift\",\n    \"drill\",\n    \"drink\",\n    \"drip\",\n    \"drive\",\n    \"drop\",\n    \"drum\",\n    \"dry\",\n    \"duck\",\n    \"dumb\",\n    \"dune\",\n    \"during\",\n    \"dust\",\n    \"dutch\",\n    \"duty\",\n    \"dwarf\",\n    \"dynamic\",\n    \"eager\",\n    \"eagle\",\n    \"early\",\n    \"earn\",\n    \"earth\",\n    \"easily\",\n    \"east\",\n    \"easy\",\n    \"echo\",\n    \"ecology\",\n    \"economy\",\n    \"edge\",\n    \"edit\",\n    \"educate\",\n    \"effort\",\n    \"egg\",\n    \"eight\",\n    \"either\",\n    \"elbow\",\n    \"elder\",\n    \"electric\",\n    \"elegant\",\n    \"element\",\n    \"elephant\",\n    \"elevator\",\n    \"elite\",\n    \"else\",\n    \"embark\",\n    \"embody\",\n    \"embrace\",\n    \"emerge\",\n    \"emotion\",\n    \"employ\",\n    \"empower\",\n    \"empty\",\n    \"enable\",\n    \"enact\",\n    \"end\",\n    \"endless\",\n    \"endorse\",\n    \"enemy\",\n    \"energy\",\n    \"enforce\",\n    \"engage\",\n    \"engine\",\n    \"enhance\",\n    \"enjoy\",\n    \"enlist\",\n    \"enough\",\n    \"enrich\",\n    \"enroll\",\n    \"ensure\",\n    \"enter\",\n    \"entire\",\n    \"entry\",\n    \"envelope\",\n    \"episode\",\n    \"equal\",\n    \"equip\",\n    \"era\",\n    \"erase\",\n    \"erode\",\n    \"erosion\",\n    \"error\",\n    \"erupt\",\n    \"escape\",\n    \"essay\",\n    \"essence\",\n    \"estate\",\n    \"eternal\",\n    \"ethics\",\n    \"evidence\",\n    \"evil\",\n    \"evoke\",\n    \"evolve\",\n    \"exact\",\n    \"example\",\n    \"excess\",\n    \"exchange\",\n    \"excite\",\n    \"exclude\",\n    \"excuse\",\n    \"execute\",\n    \"exercise\",\n    \"exhaust\",\n    \"exhibit\",\n    \"exile\",\n    \"exist\",\n    \"exit\",\n    \"exotic\",\n    \"expand\",\n    \"expect\",\n    \"expire\",\n    \"explain\",\n    \"expose\",\n    \"express\",\n    \"extend\",\n    \"extra\",\n    \"eye\",\n    \"eyebrow\",\n    \"fabric\",\n    \"face\",\n    \"faculty\",\n    \"fade\",\n    \"faint\",\n    \"faith\",\n    \"fall\",\n    \"false\",\n    \"fame\",\n    \"family\",\n    \"famous\",\n    \"fan\",\n    \"fancy\",\n    \"fantasy\",\n    \"farm\",\n    \"fashion\",\n    \"fat\",\n    \"fatal\",\n    \"father\",\n    \"fatigue\",\n    \"fault\",\n    \"favorite\",\n    \"feature\",\n    \"february\",\n    \"federal\",\n    \"fee\",\n    \"feed\",\n    \"feel\",\n    \"female\",\n    \"fence\",\n    \"festival\",\n    \"fetch\",\n    \"fever\",\n    \"few\",\n    \"fiber\",\n    \"fiction\",\n    \"field\",\n    \"figure\",\n    \"file\",\n    \"film\",\n    \"filter\",\n    \"final\",\n    \"find\",\n    \"fine\",\n    \"finger\",\n    \"finish\",\n    \"fire\",\n    \"firm\",\n    \"first\",\n    \"fiscal\",\n    \"fish\",\n    \"fit\",\n    \"fitness\",\n    \"fix\",\n    \"flag\",\n    \"flame\",\n    \"flash\",\n    \"flat\",\n    \"flavor\",\n    \"flee\",\n    \"flight\",\n    \"flip\",\n    \"float\",\n    \"flock\",\n    \"floor\",\n    \"flower\",\n    \"fluid\",\n    \"flush\",\n    \"fly\",\n    \"foam\",\n    \"focus\",\n    \"fog\",\n    \"foil\",\n    \"fold\",\n    \"follow\",\n    \"food\",\n    \"foot\",\n    \"force\",\n    \"forest\",\n    \"forget\",\n    \"fork\",\n    \"fortune\",\n    \"forum\",\n    \"forward\",\n    \"fossil\",\n    \"foster\",\n    \"found\",\n    \"fox\",\n    \"fragile\",\n    \"frame\",\n    \"frequent\",\n    \"fresh\",\n    \"friend\",\n    \"fringe\",\n    \"frog\",\n    \"front\",\n    \"frost\",\n    \"frown\",\n    \"frozen\",\n    \"fruit\",\n    \"fuel\",\n    \"fun\",\n    \"funny\",\n    \"furnace\",\n    \"fury\",\n    \"future\",\n    \"gadget\",\n    \"gain\",\n    \"galaxy\",\n    \"gallery\",\n    \"game\",\n    \"gap\",\n    \"garage\",\n    \"garbage\",\n    \"garden\",\n    \"garlic\",\n    \"garment\",\n    \"gas\",\n    \"gasp\",\n    \"gate\",\n    \"gather\",\n    \"gauge\",\n    \"gaze\",\n    \"general\",\n    \"genius\",\n    \"genre\",\n    \"gentle\",\n    \"genuine\",\n    \"gesture\",\n    \"ghost\",\n    \"giant\",\n    \"gift\",\n    \"giggle\",\n    \"ginger\",\n    \"giraffe\",\n    \"girl\",\n    \"give\",\n    \"glad\",\n    \"glance\",\n    \"glare\",\n    \"glass\",\n    \"glide\",\n    \"glimpse\",\n    \"globe\",\n    \"gloom\",\n    \"glory\",\n    \"glove\",\n    \"glow\",\n    \"glue\",\n    \"goat\",\n    \"goddess\",\n    \"gold\",\n    \"good\",\n    \"goose\",\n    \"gorilla\",\n    \"gospel\",\n    \"gossip\",\n    \"govern\",\n    \"gown\",\n    \"grab\",\n    \"grace\",\n    \"grain\",\n    \"grant\",\n    \"grape\",\n    \"grass\",\n    \"gravity\",\n    \"great\",\n    \"green\",\n    \"grid\",\n    \"grief\",\n    \"grit\",\n    \"grocery\",\n    \"group\",\n    \"grow\",\n    \"grunt\",\n    \"guard\",\n    \"guess\",\n    \"guide\",\n    \"guilt\",\n    \"guitar\",\n    \"gun\",\n    \"gym\",\n    \"habit\",\n    \"hair\",\n    \"half\",\n    \"hammer\",\n    \"hamster\",\n    \"hand\",\n    \"happy\",\n    \"harbor\",\n    \"hard\",\n    \"harsh\",\n    \"harvest\",\n    \"hat\",\n    \"have\",\n    \"hawk\",\n    \"hazard\",\n    \"head\",\n    \"health\",\n    \"heart\",\n    \"heavy\",\n    \"hedgehog\",\n    \"height\",\n    \"hello\",\n    \"helmet\",\n    \"help\",\n    \"hen\",\n    \"hero\",\n    \"hidden\",\n    \"high\",\n    \"hill\",\n    \"hint\",\n    \"hip\",\n    \"hire\",\n    \"history\",\n    \"hobby\",\n    \"hockey\",\n    \"hold\",\n    \"hole\",\n    \"holiday\",\n    \"hollow\",\n    \"home\",\n    \"honey\",\n    \"hood\",\n    \"hope\",\n    \"horn\",\n    \"horror\",\n    \"horse\",\n    \"hospital\",\n    \"host\",\n    \"hotel\",\n    \"hour\",\n    \"hover\",\n    \"hub\",\n    \"huge\",\n    \"human\",\n    \"humble\",\n    \"humor\",\n    \"hundred\",\n    \"hungry\",\n    \"hunt\",\n    \"hurdle\",\n    \"hurry\",\n    \"hurt\",\n    \"husband\",\n    \"hybrid\",\n    \"ice\",\n    \"icon\",\n    \"idea\",\n    \"identify\",\n    \"idle\",\n    \"ignore\",\n    \"ill\",\n    \"illegal\",\n    \"illness\",\n    \"image\",\n    \"imitate\",\n    \"immense\",\n    \"immune\",\n    \"impact\",\n    \"impose\",\n    \"improve\",\n    \"impulse\",\n    \"inch\",\n    \"include\",\n    \"income\",\n    \"increase\",\n    \"index\",\n    \"indicate\",\n    \"indoor\",\n    \"industry\",\n    \"infant\",\n    \"inflict\",\n    \"inform\",\n    \"inhale\",\n    \"inherit\",\n    \"initial\",\n    \"inject\",\n    \"injury\",\n    \"inmate\",\n    \"inner\",\n    \"innocent\",\n    \"input\",\n    \"inquiry\",\n    \"insane\",\n    \"insect\",\n    \"inside\",\n    \"inspire\",\n    \"install\",\n    \"intact\",\n    \"interest\",\n    \"into\",\n    \"invest\",\n    \"invite\",\n    \"involve\",\n    \"iron\",\n    \"island\",\n    \"isolate\",\n    \"issue\",\n    \"item\",\n    \"ivory\",\n    \"jacket\",\n    \"jaguar\",\n    \"jar\",\n    \"jazz\",\n    \"jealous\",\n    \"jeans\",\n    \"jelly\",\n    \"jewel\",\n    \"job\",\n    \"join\",\n    \"joke\",\n    \"journey\",\n    \"joy\",\n    \"judge\",\n    \"juice\",\n    \"jump\",\n    \"jungle\",\n    \"junior\",\n    \"junk\",\n    \"just\",\n    \"kangaroo\",\n    \"keen\",\n    \"keep\",\n    \"ketchup\",\n    \"key\",\n    \"kick\",\n    \"kid\",\n    \"kidney\",\n    \"kind\",\n    \"kingdom\",\n    \"kiss\",\n    \"kit\",\n    \"kitchen\",\n    \"kite\",\n    \"kitten\",\n    \"kiwi\",\n    \"knee\",\n    \"knife\",\n    \"knock\",\n    \"know\",\n    \"lab\",\n    \"label\",\n    \"labor\",\n    \"ladder\",\n    \"lady\",\n    \"lake\",\n    \"lamp\",\n    \"language\",\n    \"laptop\",\n    \"large\",\n    \"later\",\n    \"latin\",\n    \"laugh\",\n    \"laundry\",\n    \"lava\",\n    \"law\",\n    \"lawn\",\n    \"lawsuit\",\n    \"layer\",\n    \"lazy\",\n    \"leader\",\n    \"leaf\",\n    \"learn\",\n    \"leave\",\n    \"lecture\",\n    \"left\",\n    \"leg\",\n    \"legal\",\n    \"legend\",\n    \"leisure\",\n    \"lemon\",\n    \"lend\",\n    \"length\",\n    \"lens\",\n    \"leopard\",\n    \"lesson\",\n    \"letter\",\n    \"level\",\n    \"liar\",\n    \"liberty\",\n    \"library\",\n    \"license\",\n    \"life\",\n    \"lift\",\n    \"light\",\n    \"like\",\n    \"limb\",\n    \"limit\",\n    \"link\",\n    \"lion\",\n    \"liquid\",\n    \"list\",\n    \"little\",\n    \"live\",\n    \"lizard\",\n    \"load\",\n    \"loan\",\n    \"lobster\",\n    \"local\",\n    \"lock\",\n    \"logic\",\n    \"lonely\",\n    \"long\",\n    \"loop\",\n    \"lottery\",\n    \"loud\",\n    \"lounge\",\n    \"love\",\n    \"loyal\",\n    \"lucky\",\n    \"luggage\",\n    \"lumber\",\n    \"lunar\",\n    \"lunch\",\n    \"luxury\",\n    \"lyrics\",\n    \"machine\",\n    \"mad\",\n    \"magic\",\n    \"magnet\",\n    \"maid\",\n    \"mail\",\n    \"main\",\n    \"major\",\n    \"make\",\n    \"mammal\",\n    \"man\",\n    \"manage\",\n    \"mandate\",\n    \"mango\",\n    \"mansion\",\n    \"manual\",\n    \"maple\",\n    \"marble\",\n    \"march\",\n    \"margin\",\n    \"marine\",\n    \"market\",\n    \"marriage\",\n    \"mask\",\n    \"mass\",\n    \"master\",\n    \"match\",\n    \"material\",\n    \"math\",\n    \"matrix\",\n    \"matter\",\n    \"maximum\",\n    \"maze\",\n    \"meadow\",\n    \"mean\",\n    \"measure\",\n    \"meat\",\n    \"mechanic\",\n    \"medal\",\n    \"media\",\n    \"melody\",\n    \"melt\",\n    \"member\",\n    \"memory\",\n    \"mention\",\n    \"menu\",\n    \"mercy\",\n    \"merge\",\n    \"merit\",\n    \"merry\",\n    \"mesh\",\n    \"message\",\n    \"metal\",\n    \"method\",\n    \"middle\",\n    \"midnight\",\n    \"milk\",\n    \"million\",\n    \"mimic\",\n    \"mind\",\n    \"minimum\",\n    \"minor\",\n    \"minute\",\n    \"miracle\",\n    \"mirror\",\n    \"misery\",\n    \"miss\",\n    \"mistake\",\n    \"mix\",\n    \"mixed\",\n    \"mixture\",\n    \"mobile\",\n    \"model\",\n    \"modify\",\n    \"mom\",\n    \"moment\",\n    \"monitor\",\n    \"monkey\",\n    \"monster\",\n    \"month\",\n    \"moon\",\n    \"moral\",\n    \"more\",\n    \"morning\",\n    \"mosquito\",\n    \"mother\",\n    \"motion\",\n    \"motor\",\n    \"mountain\",\n    \"mouse\",\n    \"move\",\n    \"movie\",\n    \"much\",\n    \"muffin\",\n    \"mule\",\n    \"multiply\",\n    \"muscle\",\n    \"museum\",\n    \"mushroom\",\n    \"music\",\n    \"must\",\n    \"mutual\",\n    \"myself\",\n    \"mystery\",\n    \"myth\",\n    \"naive\",\n    \"name\",\n    \"napkin\",\n    \"narrow\",\n    \"nasty\",\n    \"nation\",\n    \"nature\",\n    \"near\",\n    \"neck\",\n    \"need\",\n    \"negative\",\n    \"neglect\",\n    \"neither\",\n    \"nephew\",\n    \"nerve\",\n    \"nest\",\n    \"net\",\n    \"network\",\n    \"neutral\",\n    \"never\",\n    \"news\",\n    \"next\",\n    \"nice\",\n    \"night\",\n    \"noble\",\n    \"noise\",\n    \"nominee\",\n    \"noodle\",\n    \"normal\",\n    \"north\",\n    \"nose\",\n    \"notable\",\n    \"note\",\n    \"nothing\",\n    \"notice\",\n    \"novel\",\n    \"now\",\n    \"nuclear\",\n    \"number\",\n    \"nurse\",\n    \"nut\",\n    \"oak\",\n    \"obey\",\n    \"object\",\n    \"oblige\",\n    \"obscure\",\n    \"observe\",\n    \"obtain\",\n    \"obvious\",\n    \"occur\",\n    \"ocean\",\n    \"october\",\n    \"odor\",\n    \"off\",\n    \"offer\",\n    \"office\",\n    \"often\",\n    \"oil\",\n    \"okay\",\n    \"old\",\n    \"olive\",\n    \"olympic\",\n    \"omit\",\n    \"once\",\n    \"one\",\n    \"onion\",\n    \"online\",\n    \"only\",\n    \"open\",\n    \"opera\",\n    \"opinion\",\n    \"oppose\",\n    \"option\",\n    \"orange\",\n    \"orbit\",\n    \"orchard\",\n    \"order\",\n    \"ordinary\",\n    \"organ\",\n    \"orient\",\n    \"original\",\n    \"orphan\",\n    \"ostrich\",\n    \"other\",\n    \"outdoor\",\n    \"outer\",\n    \"output\",\n    \"outside\",\n    \"oval\",\n    \"oven\",\n    \"over\",\n    \"own\",\n    \"owner\",\n    \"oxygen\",\n    \"oyster\",\n    \"ozone\",\n    \"pact\",\n    \"paddle\",\n    \"page\",\n    \"pair\",\n    \"palace\",\n    \"palm\",\n    \"panda\",\n    \"panel\",\n    \"panic\",\n    \"panther\",\n    \"paper\",\n    \"parade\",\n    \"parent\",\n    \"park\",\n    \"parrot\",\n    \"party\",\n    \"pass\",\n    \"patch\",\n    \"path\",\n    \"patient\",\n    \"patrol\",\n    \"pattern\",\n    \"pause\",\n    \"pave\",\n    \"payment\",\n    \"peace\",\n    \"peanut\",\n    \"pear\",\n    \"peasant\",\n    \"pelican\",\n    \"pen\",\n    \"penalty\",\n    \"pencil\",\n    \"people\",\n    \"pepper\",\n    \"perfect\",\n    \"permit\",\n    \"person\",\n    \"pet\",\n    \"phone\",\n    \"photo\",\n    \"phrase\",\n    \"physical\",\n    \"piano\",\n    \"picnic\",\n    \"picture\",\n    \"piece\",\n    \"pig\",\n    \"pigeon\",\n    \"pill\",\n    \"pilot\",\n    \"pink\",\n    \"pioneer\",\n    \"pipe\",\n    \"pistol\",\n    \"pitch\",\n    \"pizza\",\n    \"place\",\n    \"planet\",\n    \"plastic\",\n    \"plate\",\n    \"play\",\n    \"please\",\n    \"pledge\",\n    \"pluck\",\n    \"plug\",\n    \"plunge\",\n    \"poem\",\n    \"poet\",\n    \"point\",\n    \"polar\",\n    \"pole\",\n    \"police\",\n    \"pond\",\n    \"pony\",\n    \"pool\",\n    \"popular\",\n    \"portion\",\n    \"position\",\n    \"possible\",\n    \"post\",\n    \"potato\",\n    \"pottery\",\n    \"poverty\",\n    \"powder\",\n    \"power\",\n    \"practice\",\n    \"praise\",\n    \"predict\",\n    \"prefer\",\n    \"prepare\",\n    \"present\",\n    \"pretty\",\n    \"prevent\",\n    \"price\",\n    \"pride\",\n    \"primary\",\n    \"print\",\n    \"priority\",\n    \"prison\",\n    \"private\",\n    \"prize\",\n    \"problem\",\n    \"process\",\n    \"produce\",\n    \"profit\",\n    \"program\",\n    \"project\",\n    \"promote\",\n    \"proof\",\n    \"property\",\n    \"prosper\",\n    \"protect\",\n    \"proud\",\n    \"provide\",\n    \"public\",\n    \"pudding\",\n    \"pull\",\n    \"pulp\",\n    \"pulse\",\n    \"pumpkin\",\n    \"punch\",\n    \"pupil\",\n    \"puppy\",\n    \"purchase\",\n    \"purity\",\n    \"purpose\",\n    \"purse\",\n    \"push\",\n    \"put\",\n    \"puzzle\",\n    \"pyramid\",\n    \"quality\",\n    \"quantum\",\n    \"quarter\",\n    \"question\",\n    \"quick\",\n    \"quit\",\n    \"quiz\",\n    \"quote\",\n    \"rabbit\",\n    \"raccoon\",\n    \"race\",\n    \"rack\",\n    \"radar\",\n    \"radio\",\n    \"rail\",\n    \"rain\",\n    \"raise\",\n    \"rally\",\n    \"ramp\",\n    \"ranch\",\n    \"random\",\n    \"range\",\n    \"rapid\",\n    \"rare\",\n    \"rate\",\n    \"rather\",\n    \"raven\",\n    \"raw\",\n    \"razor\",\n    \"ready\",\n    \"real\",\n    \"reason\",\n    \"rebel\",\n    \"rebuild\",\n    \"recall\",\n    \"receive\",\n    \"recipe\",\n    \"record\",\n    \"recycle\",\n    \"reduce\",\n    \"reflect\",\n    \"reform\",\n    \"refuse\",\n    \"region\",\n    \"regret\",\n    \"regular\",\n    \"reject\",\n    \"relax\",\n    \"release\",\n    \"relief\",\n    \"rely\",\n    \"remain\",\n    \"remember\",\n    \"remind\",\n    \"remove\",\n    \"render\",\n    \"renew\",\n    \"rent\",\n    \"reopen\",\n    \"repair\",\n    \"repeat\",\n    \"replace\",\n    \"report\",\n    \"require\",\n    \"rescue\",\n    \"resemble\",\n    \"resist\",\n    \"resource\",\n    \"response\",\n    \"result\",\n    \"retire\",\n    \"retreat\",\n    \"return\",\n    \"reunion\",\n    \"reveal\",\n    \"review\",\n    \"reward\",\n    \"rhythm\",\n    \"rib\",\n    \"ribbon\",\n    \"rice\",\n    \"rich\",\n    \"ride\",\n    \"ridge\",\n    \"rifle\",\n    \"right\",\n    \"rigid\",\n    \"ring\",\n    \"riot\",\n    \"ripple\",\n    \"risk\",\n    \"ritual\",\n    \"rival\",\n    \"river\",\n    \"road\",\n    \"roast\",\n    \"robot\",\n    \"robust\",\n    \"rocket\",\n    \"romance\",\n    \"roof\",\n    \"rookie\",\n    \"room\",\n    \"rose\",\n    \"rotate\",\n    \"rough\",\n    \"round\",\n    \"route\",\n    \"royal\",\n    \"rubber\",\n    \"rude\",\n    \"rug\",\n    \"rule\",\n    \"run\",\n    \"runway\",\n    \"rural\",\n    \"sad\",\n    \"saddle\",\n    \"sadness\",\n    \"safe\",\n    \"sail\",\n    \"salad\",\n    \"salmon\",\n    \"salon\",\n    \"salt\",\n    \"salute\",\n    \"same\",\n    \"sample\",\n    \"sand\",\n    \"satisfy\",\n    \"satoshi\",\n    \"sauce\",\n    \"sausage\",\n    \"save\",\n    \"say\",\n    \"scale\",\n    \"scan\",\n    \"scare\",\n    \"scatter\",\n    \"scene\",\n    \"scheme\",\n    \"school\",\n    \"science\",\n    \"scissors\",\n    \"scorpion\",\n    \"scout\",\n    \"scrap\",\n    \"screen\",\n    \"script\",\n    \"scrub\",\n    \"sea\",\n    \"search\",\n    \"season\",\n    \"seat\",\n    \"second\",\n    \"secret\",\n    \"section\",\n    \"security\",\n    \"seed\",\n    \"seek\",\n    \"segment\",\n    \"select\",\n    \"sell\",\n    \"seminar\",\n    \"senior\",\n    \"sense\",\n    \"sentence\",\n    \"series\",\n    \"service\",\n    \"session\",\n    \"settle\",\n    \"setup\",\n    \"seven\",\n    \"shadow\",\n    \"shaft\",\n    \"shallow\",\n    \"share\",\n    \"shed\",\n    \"shell\",\n    \"sheriff\",\n    \"shield\",\n    \"shift\",\n    \"shine\",\n    \"ship\",\n    \"shiver\",\n    \"shock\",\n    \"shoe\",\n    \"shoot\",\n    \"shop\",\n    \"short\",\n    \"shoulder\",\n    \"shove\",\n    \"shrimp\",\n    \"shrug\",\n    \"shuffle\",\n    \"shy\",\n    \"sibling\",\n    \"sick\",\n    \"side\",\n    \"siege\",\n    \"sight\",\n    \"sign\",\n    \"silent\",\n    \"silk\",\n    \"silly\",\n    \"silver\",\n    \"similar\",\n    \"simple\",\n    \"since\",\n    \"sing\",\n    \"siren\",\n    \"sister\",\n    \"situate\",\n    \"six\",\n    \"size\",\n    \"skate\",\n    \"sketch\",\n    \"ski\",\n    \"skill\",\n    \"skin\",\n    \"skirt\",\n    \"skull\",\n    \"slab\",\n    \"slam\",\n    \"sleep\",\n    \"slender\",\n    \"slice\",\n    \"slide\",\n    \"slight\",\n    \"slim\",\n    \"slogan\",\n    \"slot\",\n    \"slow\",\n    \"slush\",\n    \"small\",\n    \"smart\",\n    \"smile\",\n    \"smoke\",\n    \"smooth\",\n    \"snack\",\n    \"snake\",\n    \"snap\",\n    \"sniff\",\n    \"snow\",\n    \"soap\",\n    \"soccer\",\n    \"social\",\n    \"sock\",\n    \"soda\",\n    \"soft\",\n    \"solar\",\n    \"soldier\",\n    \"solid\",\n    \"solution\",\n    \"solve\",\n    \"someone\",\n    \"song\",\n    \"soon\",\n    \"sorry\",\n    \"sort\",\n    \"soul\",\n    \"sound\",\n    \"soup\",\n    \"source\",\n    \"south\",\n    \"space\",\n    \"spare\",\n    \"spatial\",\n    \"spawn\",\n    \"speak\",\n    \"special\",\n    \"speed\",\n    \"spell\",\n    \"spend\",\n    \"sphere\",\n    \"spice\",\n    \"spider\",\n    \"spike\",\n    \"spin\",\n    \"spirit\",\n    \"split\",\n    \"spoil\",\n    \"sponsor\",\n    \"spoon\",\n    \"sport\",\n    \"spot\",\n    \"spray\",\n    \"spread\",\n    \"spring\",\n    \"spy\",\n    \"square\",\n    \"squeeze\",\n    \"squirrel\",\n    \"stable\",\n    \"stadium\",\n    \"staff\",\n    \"stage\",\n    \"stairs\",\n    \"stamp\",\n    \"stand\",\n    \"start\",\n    \"state\",\n    \"stay\",\n    \"steak\",\n    \"steel\",\n    \"stem\",\n    \"step\",\n    \"stereo\",\n    \"stick\",\n    \"still\",\n    \"sting\",\n    \"stock\",\n    \"stomach\",\n    \"stone\",\n    \"stool\",\n    \"story\",\n    \"stove\",\n    \"strategy\",\n    \"street\",\n    \"strike\",\n    \"strong\",\n    \"struggle\",\n    \"student\",\n    \"stuff\",\n    \"stumble\",\n    \"style\",\n    \"subject\",\n    \"submit\",\n    \"subway\",\n    \"success\",\n    \"such\",\n    \"sudden\",\n    \"suffer\",\n    \"sugar\",\n    \"suggest\",\n    \"suit\",\n    \"summer\",\n    \"sun\",\n    \"sunny\",\n    \"sunset\",\n    \"super\",\n    \"supply\",\n    \"supreme\",\n    \"sure\",\n    \"surface\",\n    \"surge\",\n    \"surprise\",\n    \"surround\",\n    \"survey\",\n    \"suspect\",\n    \"sustain\",\n    \"swallow\",\n    \"swamp\",\n    \"swap\",\n    \"swarm\",\n    \"swear\",\n    \"sweet\",\n    \"swift\",\n    \"swim\",\n    \"swing\",\n    \"switch\",\n    \"sword\",\n    \"symbol\",\n    \"symptom\",\n    \"syrup\",\n    \"system\",\n    \"table\",\n    \"tackle\",\n    \"tag\",\n    \"tail\",\n    \"talent\",\n    \"talk\",\n    \"tank\",\n    \"tape\",\n    \"target\",\n    \"task\",\n    \"taste\",\n    \"tattoo\",\n    \"taxi\",\n    \"teach\",\n    \"team\",\n    \"tell\",\n    \"ten\",\n    \"tenant\",\n    \"tennis\",\n    \"tent\",\n    \"term\",\n    \"test\",\n    \"text\",\n    \"thank\",\n    \"that\",\n    \"theme\",\n    \"then\",\n    \"theory\",\n    \"there\",\n    \"they\",\n    \"thing\",\n    \"this\",\n    \"thought\",\n    \"three\",\n    \"thrive\",\n    \"throw\",\n    \"thumb\",\n    \"thunder\",\n    \"ticket\",\n    \"tide\",\n    \"tiger\",\n    \"tilt\",\n    \"timber\",\n    \"time\",\n    \"tiny\",\n    \"tip\",\n    \"tired\",\n    \"tissue\",\n    \"title\",\n    \"toast\",\n    \"tobacco\",\n    \"today\",\n    \"toddler\",\n    \"toe\",\n    \"together\",\n    \"toilet\",\n    \"token\",\n    \"tomato\",\n    \"tomorrow\",\n    \"tone\",\n    \"tongue\",\n    \"tonight\",\n    \"tool\",\n    \"tooth\",\n    \"top\",\n    \"topic\",\n    \"topple\",\n    \"torch\",\n    \"tornado\",\n    \"tortoise\",\n    \"toss\",\n    \"total\",\n    \"tourist\",\n    \"toward\",\n    \"tower\",\n    \"town\",\n    \"toy\",\n    \"track\",\n    \"trade\",\n    \"traffic\",\n    \"tragic\",\n    \"train\",\n    \"transfer\",\n    \"trap\",\n    \"trash\",\n    \"travel\",\n    \"tray\",\n    \"treat\",\n    \"tree\",\n    \"trend\",\n    \"trial\",\n    \"tribe\",\n    \"trick\",\n    \"trigger\",\n    \"trim\",\n    \"trip\",\n    \"trophy\",\n    \"trouble\",\n    \"truck\",\n    \"true\",\n    \"truly\",\n    \"trumpet\",\n    \"trust\",\n    \"truth\",\n    \"try\",\n    \"tube\",\n    \"tuition\",\n    \"tumble\",\n    \"tuna\",\n    \"tunnel\",\n    \"turkey\",\n    \"turn\",\n    \"turtle\",\n    \"twelve\",\n    \"twenty\",\n    \"twice\",\n    \"twin\",\n    \"twist\",\n    \"two\",\n    \"type\",\n    \"typical\",\n    \"ugly\",\n    \"umbrella\",\n    \"unable\",\n    \"unaware\",\n    \"uncle\",\n    \"uncover\",\n    \"under\",\n    \"undo\",\n    \"unfair\",\n    \"unfold\",\n    \"unhappy\",\n    \"uniform\",\n    \"unique\",\n    \"unit\",\n    \"universe\",\n    \"unknown\",\n    \"unlock\",\n    \"until\",\n    \"unusual\",\n    \"unveil\",\n    \"update\",\n    \"upgrade\",\n    \"uphold\",\n    \"upon\",\n    \"upper\",\n    \"upset\",\n    \"urban\",\n    \"urge\",\n    \"usage\",\n    \"use\",\n    \"used\",\n    \"useful\",\n    \"useless\",\n    \"usual\",\n    \"utility\",\n    \"vacant\",\n    \"vacuum\",\n    \"vague\",\n    \"valid\",\n    \"valley\",\n    \"valve\",\n    \"van\",\n    \"vanish\",\n    \"vapor\",\n    \"various\",\n    \"vast\",\n    \"vault\",\n    \"vehicle\",\n    \"velvet\",\n    \"vendor\",\n    \"venture\",\n    \"venue\",\n    \"verb\",\n    \"verify\",\n    \"version\",\n    \"very\",\n    \"vessel\",\n    \"veteran\",\n    \"viable\",\n    \"vibrant\",\n    \"vicious\",\n    \"victory\",\n    \"video\",\n    \"view\",\n    \"village\",\n    \"vintage\",\n    \"violin\",\n    \"virtual\",\n    \"virus\",\n    \"visa\",\n    \"visit\",\n    \"visual\",\n    \"vital\",\n    \"vivid\",\n    \"vocal\",\n    \"voice\",\n    \"void\",\n    \"volcano\",\n    \"volume\",\n    \"vote\",\n    \"voyage\",\n    \"wage\",\n    \"wagon\",\n    \"wait\",\n    \"walk\",\n    \"wall\",\n    \"walnut\",\n    \"want\",\n    \"warfare\",\n    \"warm\",\n    \"warrior\",\n    \"wash\",\n    \"wasp\",\n    \"waste\",\n    \"water\",\n    \"wave\",\n    \"way\",\n    \"wealth\",\n    \"weapon\",\n    \"wear\",\n    \"weasel\",\n    \"weather\",\n    \"web\",\n    \"wedding\",\n    \"weekend\",\n    \"weird\",\n    \"welcome\",\n    \"west\",\n    \"wet\",\n    \"whale\",\n    \"what\",\n    \"wheat\",\n    \"wheel\",\n    \"when\",\n    \"where\",\n    \"whip\",\n    \"whisper\",\n    \"wide\",\n    \"width\",\n    \"wife\",\n    \"wild\",\n    \"will\",\n    \"win\",\n    \"window\",\n    \"wine\",\n    \"wing\",\n    \"wink\",\n    \"winner\",\n    \"winter\",\n    \"wire\",\n    \"wisdom\",\n    \"wise\",\n    \"wish\",\n    \"witness\",\n    \"wolf\",\n    \"woman\",\n    \"wonder\",\n    \"wood\",\n    \"wool\",\n    \"word\",\n    \"work\",\n    \"world\",\n    \"worry\",\n    \"worth\",\n    \"wrap\",\n    \"wreck\",\n    \"wrestle\",\n    \"wrist\",\n    \"write\",\n    \"wrong\",\n    \"yard\",\n    \"year\",\n    \"yellow\",\n    \"you\",\n    \"young\",\n    \"youth\",\n    \"zebra\",\n    \"zero\",\n    \"zone\",\n    \"zoo\"\n]\n[\n    \"abaisser\",\n    \"abandon\",\n    \"abdiquer\",\n    \"abeille\",\n    \"abolir\",\n    \"aborder\",\n    \"aboutir\",\n    \"aboyer\",\n    \"abrasif\",\n    \"abreuver\",\n    \"abriter\",\n    \"abroger\",\n    \"abrupt\",\n    \"absence\",\n    \"absolu\",\n    \"absurde\",\n    \"abusif\",\n    \"abyssal\",\n    \"académie\",\n    \"acajou\",\n    \"acarien\",\n    \"accabler\",\n    \"accepter\",\n    \"acclamer\",\n    \"accolade\",\n    \"accroche\",\n    \"accuser\",\n    \"acerbe\",\n    \"achat\",\n    \"acheter\",\n    \"aciduler\",\n    \"acier\",\n    \"acompte\",\n    \"acquérir\",\n    \"acronyme\",\n    \"acteur\",\n    \"actif\",\n    \"actuel\",\n    \"adepte\",\n    \"adéquat\",\n    \"adhésif\",\n    \"adjectif\",\n    \"adjuger\",\n    \"admettre\",\n    \"admirer\",\n    \"adopter\",\n    \"adorer\",\n    \"adoucir\",\n    \"adresse\",\n    \"adroit\",\n    \"adulte\",\n    \"adverbe\",\n    \"aérer\",\n    \"aéronef\",\n    \"affaire\",\n    \"affecter\",\n    \"affiche\",\n    \"affreux\",\n    \"affubler\",\n    \"agacer\",\n    \"agencer\",\n    \"agile\",\n    \"agiter\",\n    \"agrafer\",\n    \"agréable\",\n    \"agrume\",\n    \"aider\",\n    \"aiguille\",\n    \"ailier\",\n    \"aimable\",\n    \"aisance\",\n    \"ajouter\",\n    \"ajuster\",\n    \"alarmer\",\n    \"alchimie\",\n    \"alerte\",\n    \"algèbre\",\n    \"algue\",\n    \"aliéner\",\n    \"aliment\",\n    \"alléger\",\n    \"alliage\",\n    \"allouer\",\n    \"allumer\",\n    \"alourdir\",\n    \"alpaga\",\n    \"altesse\",\n    \"alvéole\",\n    \"amateur\",\n    \"ambigu\",\n    \"ambre\",\n    \"aménager\",\n    \"amertume\",\n    \"amidon\",\n    \"amiral\",\n    \"amorcer\",\n    \"amour\",\n    \"amovible\",\n    \"amphibie\",\n    \"ampleur\",\n    \"amusant\",\n    \"analyse\",\n    \"anaphore\",\n    \"anarchie\",\n    \"anatomie\",\n    \"ancien\",\n    \"anéantir\",\n    \"angle\",\n    \"angoisse\",\n    \"anguleux\",\n    \"animal\",\n    \"annexer\",\n    \"annonce\",\n    \"annuel\",\n    \"anodin\",\n    \"anomalie\",\n    \"anonyme\",\n    \"anormal\",\n    \"antenne\",\n    \"antidote\",\n    \"anxieux\",\n    \"apaiser\",\n    \"apéritif\",\n    \"aplanir\",\n    \"apologie\",\n    \"appareil\",\n    \"appeler\",\n    \"apporter\",\n    \"appuyer\",\n    \"aquarium\",\n    \"aqueduc\",\n    \"arbitre\",\n    \"arbuste\",\n    \"ardeur\",\n    \"ardoise\",\n    \"argent\",\n    \"arlequin\",\n    \"armature\",\n    \"armement\",\n    \"armoire\",\n    \"armure\",\n    \"arpenter\",\n    \"arracher\",\n    \"arriver\",\n    \"arroser\",\n    \"arsenic\",\n    \"artériel\",\n    \"article\",\n    \"aspect\",\n    \"asphalte\",\n    \"aspirer\",\n    \"assaut\",\n    \"asservir\",\n    \"assiette\",\n    \"associer\",\n    \"assurer\",\n    \"asticot\",\n    \"astre\",\n    \"astuce\",\n    \"atelier\",\n    \"atome\",\n    \"atrium\",\n    \"atroce\",\n    \"attaque\",\n    \"attentif\",\n    \"attirer\",\n    \"attraper\",\n    \"aubaine\",\n    \"auberge\",\n    \"audace\",\n    \"audible\",\n    \"augurer\",\n    \"aurore\",\n    \"automne\",\n    \"autruche\",\n    \"avaler\",\n    \"avancer\",\n    \"avarice\",\n    \"avenir\",\n    \"averse\",\n    \"aveugle\",\n    \"aviateur\",\n    \"avide\",\n    \"avion\",\n    \"aviser\",\n    \"avoine\",\n    \"avouer\",\n    \"avril\",\n    \"axial\",\n    \"axiome\",\n    \"badge\",\n    \"bafouer\",\n    \"bagage\",\n    \"baguette\",\n    \"baignade\",\n    \"balancer\",\n    \"balcon\",\n    \"baleine\",\n    \"balisage\",\n    \"bambin\",\n    \"bancaire\",\n    \"bandage\",\n    \"banlieue\",\n    \"bannière\",\n    \"banquier\",\n    \"barbier\",\n    \"baril\",\n    \"baron\",\n    \"barque\",\n    \"barrage\",\n    \"bassin\",\n    \"bastion\",\n    \"bataille\",\n    \"bateau\",\n    \"batterie\",\n    \"baudrier\",\n    \"bavarder\",\n    \"belette\",\n    \"bélier\",\n    \"belote\",\n    \"bénéfice\",\n    \"berceau\",\n    \"berger\",\n    \"berline\",\n    \"bermuda\",\n    \"besace\",\n    \"besogne\",\n    \"bétail\",\n    \"beurre\",\n    \"biberon\",\n    \"bicycle\",\n    \"bidule\",\n    \"bijou\",\n    \"bilan\",\n    \"bilingue\",\n    \"billard\",\n    \"binaire\",\n    \"biologie\",\n    \"biopsie\",\n    \"biotype\",\n    \"biscuit\",\n    \"bison\",\n    \"bistouri\",\n    \"bitume\",\n    \"bizarre\",\n    \"blafard\",\n    \"blague\",\n    \"blanchir\",\n    \"blessant\",\n    \"blinder\",\n    \"blond\",\n    \"bloquer\",\n    \"blouson\",\n    \"bobard\",\n    \"bobine\",\n    \"boire\",\n    \"boiser\",\n    \"bolide\",\n    \"bonbon\",\n    \"bondir\",\n    \"bonheur\",\n    \"bonifier\",\n    \"bonus\",\n    \"bordure\",\n    \"borne\",\n    \"botte\",\n    \"boucle\",\n    \"boueux\",\n    \"bougie\",\n    \"boulon\",\n    \"bouquin\",\n    \"bourse\",\n    \"boussole\",\n    \"boutique\",\n    \"boxeur\",\n    \"branche\",\n    \"brasier\",\n    \"brave\",\n    \"brebis\",\n    \"brèche\",\n    \"breuvage\",\n    \"bricoler\",\n    \"brigade\",\n    \"brillant\",\n    \"brioche\",\n    \"brique\",\n    \"brochure\",\n    \"broder\",\n    \"bronzer\",\n    \"brousse\",\n    \"broyeur\",\n    \"brume\",\n    \"brusque\",\n    \"brutal\",\n    \"bruyant\",\n    \"buffle\",\n    \"buisson\",\n    \"bulletin\",\n    \"bureau\",\n    \"burin\",\n    \"bustier\",\n    \"butiner\",\n    \"butoir\",\n    \"buvable\",\n    \"buvette\",\n    \"cabanon\",\n    \"cabine\",\n    \"cachette\",\n    \"cadeau\",\n    \"cadre\",\n    \"caféine\",\n    \"caillou\",\n    \"caisson\",\n    \"calculer\",\n    \"calepin\",\n    \"calibre\",\n    \"calmer\",\n    \"calomnie\",\n    \"calvaire\",\n    \"camarade\",\n    \"caméra\",\n    \"camion\",\n    \"campagne\",\n    \"canal\",\n    \"caneton\",\n    \"canon\",\n    \"cantine\",\n    \"canular\",\n    \"capable\",\n    \"caporal\",\n    \"caprice\",\n    \"capsule\",\n    \"capter\",\n    \"capuche\",\n    \"carabine\",\n    \"carbone\",\n    \"caresser\",\n    \"caribou\",\n    \"carnage\",\n    \"carotte\",\n    \"carreau\",\n    \"carton\",\n    \"cascade\",\n    \"casier\",\n    \"casque\",\n    \"cassure\",\n    \"causer\",\n    \"caution\",\n    \"cavalier\",\n    \"caverne\",\n    \"caviar\",\n    \"cédille\",\n    \"ceinture\",\n    \"céleste\",\n    \"cellule\",\n    \"cendrier\",\n    \"censurer\",\n    \"central\",\n    \"cercle\",\n    \"cérébral\",\n    \"cerise\",\n    \"cerner\",\n    \"cerveau\",\n    \"cesser\",\n    \"chagrin\",\n    \"chaise\",\n    \"chaleur\",\n    \"chambre\",\n    \"chance\",\n    \"chapitre\",\n    \"charbon\",\n    \"chasseur\",\n    \"chaton\",\n    \"chausson\",\n    \"chavirer\",\n    \"chemise\",\n    \"chenille\",\n    \"chéquier\",\n    \"chercher\",\n    \"cheval\",\n    \"chien\",\n    \"chiffre\",\n    \"chignon\",\n    \"chimère\",\n    \"chiot\",\n    \"chlorure\",\n    \"chocolat\",\n    \"choisir\",\n    \"chose\",\n    \"chouette\",\n    \"chrome\",\n    \"chute\",\n    \"cigare\",\n    \"cigogne\",\n    \"cimenter\",\n    \"cinéma\",\n    \"cintrer\",\n    \"circuler\",\n    \"cirer\",\n    \"cirque\",\n    \"citerne\",\n    \"citoyen\",\n    \"citron\",\n    \"civil\",\n    \"clairon\",\n    \"clameur\",\n    \"claquer\",\n    \"classe\",\n    \"clavier\",\n    \"client\",\n    \"cligner\",\n    \"climat\",\n    \"clivage\",\n    \"cloche\",\n    \"clonage\",\n    \"cloporte\",\n    \"cobalt\",\n    \"cobra\",\n    \"cocasse\",\n    \"cocotier\",\n    \"coder\",\n    \"codifier\",\n    \"coffre\",\n    \"cogner\",\n    \"cohésion\",\n    \"coiffer\",\n    \"coincer\",\n    \"colère\",\n    \"colibri\",\n    \"colline\",\n    \"colmater\",\n    \"colonel\",\n    \"combat\",\n    \"comédie\",\n    \"commande\",\n    \"compact\",\n    \"concert\",\n    \"conduire\",\n    \"confier\",\n    \"congeler\",\n    \"connoter\",\n    \"consonne\",\n    \"contact\",\n    \"convexe\",\n    \"copain\",\n    \"copie\",\n    \"corail\",\n    \"corbeau\",\n    \"cordage\",\n    \"corniche\",\n    \"corpus\",\n    \"correct\",\n    \"cortège\",\n    \"cosmique\",\n    \"costume\",\n    \"coton\",\n    \"coude\",\n    \"coupure\",\n    \"courage\",\n    \"couteau\",\n    \"couvrir\",\n    \"coyote\",\n    \"crabe\",\n    \"crainte\",\n    \"cravate\",\n    \"crayon\",\n    \"créature\",\n    \"créditer\",\n    \"crémeux\",\n    \"creuser\",\n    \"crevette\",\n    \"cribler\",\n    \"crier\",\n    \"cristal\",\n    \"critère\",\n    \"croire\",\n    \"croquer\",\n    \"crotale\",\n    \"crucial\",\n    \"cruel\",\n    \"crypter\",\n    \"cubique\",\n    \"cueillir\",\n    \"cuillère\",\n    \"cuisine\",\n    \"cuivre\",\n    \"culminer\",\n    \"cultiver\",\n    \"cumuler\",\n    \"cupide\",\n    \"curatif\",\n    \"curseur\",\n    \"cyanure\",\n    \"cycle\",\n    \"cylindre\",\n    \"cynique\",\n    \"daigner\",\n    \"damier\",\n    \"danger\",\n    \"danseur\",\n    \"dauphin\",\n    \"débattre\",\n    \"débiter\",\n    \"déborder\",\n    \"débrider\",\n    \"débutant\",\n    \"décaler\",\n    \"décembre\",\n    \"déchirer\",\n    \"décider\",\n    \"déclarer\",\n    \"décorer\",\n    \"décrire\",\n    \"décupler\",\n    \"dédale\",\n    \"déductif\",\n    \"déesse\",\n    \"défensif\",\n    \"défiler\",\n    \"défrayer\",\n    \"dégager\",\n    \"dégivrer\",\n    \"déglutir\",\n    \"dégrafer\",\n    \"déjeuner\",\n    \"délice\",\n    \"déloger\",\n    \"demander\",\n    \"demeurer\",\n    \"démolir\",\n    \"dénicher\",\n    \"dénouer\",\n    \"dentelle\",\n    \"dénuder\",\n    \"départ\",\n    \"dépenser\",\n    \"déphaser\",\n    \"déplacer\",\n    \"déposer\",\n    \"déranger\",\n    \"dérober\",\n    \"désastre\",\n    \"descente\",\n    \"désert\",\n    \"désigner\",\n    \"désobéir\",\n    \"dessiner\",\n    \"destrier\",\n    \"détacher\",\n    \"détester\",\n    \"détourer\",\n    \"détresse\",\n    \"devancer\",\n    \"devenir\",\n    \"deviner\",\n    \"devoir\",\n    \"diable\",\n    \"dialogue\",\n    \"diamant\",\n    \"dicter\",\n    \"différer\",\n    \"digérer\",\n    \"digital\",\n    \"digne\",\n    \"diluer\",\n    \"dimanche\",\n    \"diminuer\",\n    \"dioxyde\",\n    \"directif\",\n    \"diriger\",\n    \"discuter\",\n    \"disposer\",\n    \"dissiper\",\n    \"distance\",\n    \"divertir\",\n    \"diviser\",\n    \"docile\",\n    \"docteur\",\n    \"dogme\",\n    \"doigt\",\n    \"domaine\",\n    \"domicile\",\n    \"dompter\",\n    \"donateur\",\n    \"donjon\",\n    \"donner\",\n    \"dopamine\",\n    \"dortoir\",\n    \"dorure\",\n    \"dosage\",\n    \"doseur\",\n    \"dossier\",\n    \"dotation\",\n    \"douanier\",\n    \"double\",\n    \"douceur\",\n    \"douter\",\n    \"doyen\",\n    \"dragon\",\n    \"draper\",\n    \"dresser\",\n    \"dribbler\",\n    \"droiture\",\n    \"duperie\",\n    \"duplexe\",\n    \"durable\",\n    \"durcir\",\n    \"dynastie\",\n    \"éblouir\",\n    \"écarter\",\n    \"écharpe\",\n    \"échelle\",\n    \"éclairer\",\n    \"éclipse\",\n    \"éclore\",\n    \"écluse\",\n    \"école\",\n    \"économie\",\n    \"écorce\",\n    \"écouter\",\n    \"écraser\",\n    \"écrémer\",\n    \"écrivain\",\n    \"écrou\",\n    \"écume\",\n    \"écureuil\",\n    \"édifier\",\n    \"éduquer\",\n    \"effacer\",\n    \"effectif\",\n    \"effigie\",\n    \"effort\",\n    \"effrayer\",\n    \"effusion\",\n    \"égaliser\",\n    \"égarer\",\n    \"éjecter\",\n    \"élaborer\",\n    \"élargir\",\n    \"électron\",\n    \"élégant\",\n    \"éléphant\",\n    \"élève\",\n    \"éligible\",\n    \"élitisme\",\n    \"éloge\",\n    \"élucider\",\n    \"éluder\",\n    \"emballer\",\n    \"embellir\",\n    \"embryon\",\n    \"émeraude\",\n    \"émission\",\n    \"emmener\",\n    \"émotion\",\n    \"émouvoir\",\n    \"empereur\",\n    \"employer\",\n    \"emporter\",\n    \"emprise\",\n    \"émulsion\",\n    \"encadrer\",\n    \"enchère\",\n    \"enclave\",\n    \"encoche\",\n    \"endiguer\",\n    \"endosser\",\n    \"endroit\",\n    \"enduire\",\n    \"énergie\",\n    \"enfance\",\n    \"enfermer\",\n    \"enfouir\",\n    \"engager\",\n    \"engin\",\n    \"englober\",\n    \"énigme\",\n    \"enjamber\",\n    \"enjeu\",\n    \"enlever\",\n    \"ennemi\",\n    \"ennuyeux\",\n    \"enrichir\",\n    \"enrobage\",\n    \"enseigne\",\n    \"entasser\",\n    \"entendre\",\n    \"entier\",\n    \"entourer\",\n    \"entraver\",\n    \"énumérer\",\n    \"envahir\",\n    \"enviable\",\n    \"envoyer\",\n    \"enzyme\",\n    \"éolien\",\n    \"épaissir\",\n    \"épargne\",\n    \"épatant\",\n    \"épaule\",\n    \"épicerie\",\n    \"épidémie\",\n    \"épier\",\n    \"épilogue\",\n    \"épine\",\n    \"épisode\",\n    \"épitaphe\",\n    \"époque\",\n    \"épreuve\",\n    \"éprouver\",\n    \"épuisant\",\n    \"équerre\",\n    \"équipe\",\n    \"ériger\",\n    \"érosion\",\n    \"erreur\",\n    \"éruption\",\n    \"escalier\",\n    \"espadon\",\n    \"espèce\",\n    \"espiègle\",\n    \"espoir\",\n    \"esprit\",\n    \"esquiver\",\n    \"essayer\",\n    \"essence\",\n    \"essieu\",\n    \"essorer\",\n    \"estime\",\n    \"estomac\",\n    \"estrade\",\n    \"étagère\",\n    \"étaler\",\n    \"étanche\",\n    \"étatique\",\n    \"éteindre\",\n    \"étendoir\",\n    \"éternel\",\n    \"éthanol\",\n    \"éthique\",\n    \"ethnie\",\n    \"étirer\",\n    \"étoffer\",\n    \"étoile\",\n    \"étonnant\",\n    \"étourdir\",\n    \"étrange\",\n    \"étroit\",\n    \"étude\",\n    \"euphorie\",\n    \"évaluer\",\n    \"évasion\",\n    \"éventail\",\n    \"évidence\",\n    \"éviter\",\n    \"évolutif\",\n    \"évoquer\",\n    \"exact\",\n    \"exagérer\",\n    \"exaucer\",\n    \"exceller\",\n    \"excitant\",\n    \"exclusif\",\n    \"excuse\",\n    \"exécuter\",\n    \"exemple\",\n    \"exercer\",\n    \"exhaler\",\n    \"exhorter\",\n    \"exigence\",\n    \"exiler\",\n    \"exister\",\n    \"exotique\",\n    \"expédier\",\n    \"explorer\",\n    \"exposer\",\n    \"exprimer\",\n    \"exquis\",\n    \"extensif\",\n    \"extraire\",\n    \"exulter\",\n    \"fable\",\n    \"fabuleux\",\n    \"facette\",\n    \"facile\",\n    \"facture\",\n    \"faiblir\",\n    \"falaise\",\n    \"fameux\",\n    \"famille\",\n    \"farceur\",\n    \"farfelu\",\n    \"farine\",\n    \"farouche\",\n    \"fasciner\",\n    \"fatal\",\n    \"fatigue\",\n    \"faucon\",\n    \"fautif\",\n    \"faveur\",\n    \"favori\",\n    \"fébrile\",\n    \"féconder\",\n    \"fédérer\",\n    \"félin\",\n    \"femme\",\n    \"fémur\",\n    \"fendoir\",\n    \"féodal\",\n    \"fermer\",\n    \"féroce\",\n    \"ferveur\",\n    \"festival\",\n    \"feuille\",\n    \"feutre\",\n    \"février\",\n    \"fiasco\",\n    \"ficeler\",\n    \"fictif\",\n    \"fidèle\",\n    \"figure\",\n    \"filature\",\n    \"filetage\",\n    \"filière\",\n    \"filleul\",\n    \"filmer\",\n    \"filou\",\n    \"filtrer\",\n    \"financer\",\n    \"finir\",\n    \"fiole\",\n    \"firme\",\n    \"fissure\",\n    \"fixer\",\n    \"flairer\",\n    \"flamme\",\n    \"flasque\",\n    \"flatteur\",\n    \"fléau\",\n    \"flèche\",\n    \"fleur\",\n    \"flexion\",\n    \"flocon\",\n    \"flore\",\n    \"fluctuer\",\n    \"fluide\",\n    \"fluvial\",\n    \"folie\",\n    \"fonderie\",\n    \"fongible\",\n    \"fontaine\",\n    \"forcer\",\n    \"forgeron\",\n    \"formuler\",\n    \"fortune\",\n    \"fossile\",\n    \"foudre\",\n    \"fougère\",\n    \"fouiller\",\n    \"foulure\",\n    \"fourmi\",\n    \"fragile\",\n    \"fraise\",\n    \"franchir\",\n    \"frapper\",\n    \"frayeur\",\n    \"frégate\",\n    \"freiner\",\n    \"frelon\",\n    \"frémir\",\n    \"frénésie\",\n    \"frère\",\n    \"friable\",\n    \"friction\",\n    \"frisson\",\n    \"frivole\",\n    \"froid\",\n    \"fromage\",\n    \"frontal\",\n    \"frotter\",\n    \"fruit\",\n    \"fugitif\",\n    \"fuite\",\n    \"fureur\",\n    \"furieux\",\n    \"furtif\",\n    \"fusion\",\n    \"futur\",\n    \"gagner\",\n    \"galaxie\",\n    \"galerie\",\n    \"gambader\",\n    \"garantir\",\n    \"gardien\",\n    \"garnir\",\n    \"garrigue\",\n    \"gazelle\",\n    \"gazon\",\n    \"géant\",\n    \"gélatine\",\n    \"gélule\",\n    \"gendarme\",\n    \"général\",\n    \"génie\",\n    \"genou\",\n    \"gentil\",\n    \"géologie\",\n    \"géomètre\",\n    \"géranium\",\n    \"germe\",\n    \"gestuel\",\n    \"geyser\",\n    \"gibier\",\n    \"gicler\",\n    \"girafe\",\n    \"givre\",\n    \"glace\",\n    \"glaive\",\n    \"glisser\",\n    \"globe\",\n    \"gloire\",\n    \"glorieux\",\n    \"golfeur\",\n    \"gomme\",\n    \"gonfler\",\n    \"gorge\",\n    \"gorille\",\n    \"goudron\",\n    \"gouffre\",\n    \"goulot\",\n    \"goupille\",\n    \"gourmand\",\n    \"goutte\",\n    \"graduel\",\n    \"graffiti\",\n    \"graine\",\n    \"grand\",\n    \"grappin\",\n    \"gratuit\",\n    \"gravir\",\n    \"grenat\",\n    \"griffure\",\n    \"griller\",\n    \"grimper\",\n    \"grogner\",\n    \"gronder\",\n    \"grotte\",\n    \"groupe\",\n    \"gruger\",\n    \"grutier\",\n    \"gruyère\",\n    \"guépard\",\n    \"guerrier\",\n    \"guide\",\n    \"guimauve\",\n    \"guitare\",\n    \"gustatif\",\n    \"gymnaste\",\n    \"gyrostat\",\n    \"habitude\",\n    \"hachoir\",\n    \"halte\",\n    \"hameau\",\n    \"hangar\",\n    \"hanneton\",\n    \"haricot\",\n    \"harmonie\",\n    \"harpon\",\n    \"hasard\",\n    \"hélium\",\n    \"hématome\",\n    \"herbe\",\n    \"hérisson\",\n    \"hermine\",\n    \"héron\",\n    \"hésiter\",\n    \"heureux\",\n    \"hiberner\",\n    \"hibou\",\n    \"hilarant\",\n    \"histoire\",\n    \"hiver\",\n    \"homard\",\n    \"hommage\",\n    \"homogène\",\n    \"honneur\",\n    \"honorer\",\n    \"honteux\",\n    \"horde\",\n    \"horizon\",\n    \"horloge\",\n    \"hormone\",\n    \"horrible\",\n    \"houleux\",\n    \"housse\",\n    \"hublot\",\n    \"huileux\",\n    \"humain\",\n    \"humble\",\n    \"humide\",\n    \"humour\",\n    \"hurler\",\n    \"hydromel\",\n    \"hygiène\",\n    \"hymne\",\n    \"hypnose\",\n    \"idylle\",\n    \"ignorer\",\n    \"iguane\",\n    \"illicite\",\n    \"illusion\",\n    \"image\",\n    \"imbiber\",\n    \"imiter\",\n    \"immense\",\n    \"immobile\",\n    \"immuable\",\n    \"impact\",\n    \"impérial\",\n    \"implorer\",\n    \"imposer\",\n    \"imprimer\",\n    \"imputer\",\n    \"incarner\",\n    \"incendie\",\n    \"incident\",\n    \"incliner\",\n    \"incolore\",\n    \"indexer\",\n    \"indice\",\n    \"inductif\",\n    \"inédit\",\n    \"ineptie\",\n    \"inexact\",\n    \"infini\",\n    \"infliger\",\n    \"informer\",\n    \"infusion\",\n    \"ingérer\",\n    \"inhaler\",\n    \"inhiber\",\n    \"injecter\",\n    \"injure\",\n    \"innocent\",\n    \"inoculer\",\n    \"inonder\",\n    \"inscrire\",\n    \"insecte\",\n    \"insigne\",\n    \"insolite\",\n    \"inspirer\",\n    \"instinct\",\n    \"insulter\",\n    \"intact\",\n    \"intense\",\n    \"intime\",\n    \"intrigue\",\n    \"intuitif\",\n    \"inutile\",\n    \"invasion\",\n    \"inventer\",\n    \"inviter\",\n    \"invoquer\",\n    \"ironique\",\n    \"irradier\",\n    \"irréel\",\n    \"irriter\",\n    \"isoler\",\n    \"ivoire\",\n    \"ivresse\",\n    \"jaguar\",\n    \"jaillir\",\n    \"jambe\",\n    \"janvier\",\n    \"jardin\",\n    \"jauger\",\n    \"jaune\",\n    \"javelot\",\n    \"jetable\",\n    \"jeton\",\n    \"jeudi\",\n    \"jeunesse\",\n    \"joindre\",\n    \"joncher\",\n    \"jongler\",\n    \"joueur\",\n    \"jouissif\",\n    \"journal\",\n    \"jovial\",\n    \"joyau\",\n    \"joyeux\",\n    \"jubiler\",\n    \"jugement\",\n    \"junior\",\n    \"jupon\",\n    \"juriste\",\n    \"justice\",\n    \"juteux\",\n    \"juvénile\",\n    \"kayak\",\n    \"kimono\",\n    \"kiosque\",\n    \"label\",\n    \"labial\",\n    \"labourer\",\n    \"lacérer\",\n    \"lactose\",\n    \"lagune\",\n    \"laine\",\n    \"laisser\",\n    \"laitier\",\n    \"lambeau\",\n    \"lamelle\",\n    \"lampe\",\n    \"lanceur\",\n    \"langage\",\n    \"lanterne\",\n    \"lapin\",\n    \"largeur\",\n    \"larme\",\n    \"laurier\",\n    \"lavabo\",\n    \"lavoir\",\n    \"lecture\",\n    \"légal\",\n    \"léger\",\n    \"légume\",\n    \"lessive\",\n    \"lettre\",\n    \"levier\",\n    \"lexique\",\n    \"lézard\",\n    \"liasse\",\n    \"libérer\",\n    \"libre\",\n    \"licence\",\n    \"licorne\",\n    \"liège\",\n    \"lièvre\",\n    \"ligature\",\n    \"ligoter\",\n    \"ligue\",\n    \"limer\",\n    \"limite\",\n    \"limonade\",\n    \"limpide\",\n    \"linéaire\",\n    \"lingot\",\n    \"lionceau\",\n    \"liquide\",\n    \"lisière\",\n    \"lister\",\n    \"lithium\",\n    \"litige\",\n    \"littoral\",\n    \"livreur\",\n    \"logique\",\n    \"lointain\",\n    \"loisir\",\n    \"lombric\",\n    \"loterie\",\n    \"louer\",\n    \"lourd\",\n    \"loutre\",\n    \"louve\",\n    \"loyal\",\n    \"lubie\",\n    \"lucide\",\n    \"lucratif\",\n    \"lueur\",\n    \"lugubre\",\n    \"luisant\",\n    \"lumière\",\n    \"lunaire\",\n    \"lundi\",\n    \"luron\",\n    \"lutter\",\n    \"luxueux\",\n    \"machine\",\n    \"magasin\",\n    \"magenta\",\n    \"magique\",\n    \"maigre\",\n    \"maillon\",\n    \"maintien\",\n    \"mairie\",\n    \"maison\",\n    \"majorer\",\n    \"malaxer\",\n    \"maléfice\",\n    \"malheur\",\n    \"malice\",\n    \"mallette\",\n    \"mammouth\",\n    \"mandater\",\n    \"maniable\",\n    \"manquant\",\n    \"manteau\",\n    \"manuel\",\n    \"marathon\",\n    \"marbre\",\n    \"marchand\",\n    \"mardi\",\n    \"maritime\",\n    \"marqueur\",\n    \"marron\",\n    \"marteler\",\n    \"mascotte\",\n    \"massif\",\n    \"matériel\",\n    \"matière\",\n    \"matraque\",\n    \"maudire\",\n    \"maussade\",\n    \"mauve\",\n    \"maximal\",\n    \"méchant\",\n    \"méconnu\",\n    \"médaille\",\n    \"médecin\",\n    \"méditer\",\n    \"méduse\",\n    \"meilleur\",\n    \"mélange\",\n    \"mélodie\",\n    \"membre\",\n    \"mémoire\",\n    \"menacer\",\n    \"mener\",\n    \"menhir\",\n    \"mensonge\",\n    \"mentor\",\n    \"mercredi\",\n    \"mérite\",\n    \"merle\",\n    \"messager\",\n    \"mesure\",\n    \"métal\",\n    \"météore\",\n    \"méthode\",\n    \"métier\",\n    \"meuble\",\n    \"miauler\",\n    \"microbe\",\n    \"miette\",\n    \"mignon\",\n    \"migrer\",\n    \"milieu\",\n    \"million\",\n    \"mimique\",\n    \"mince\",\n    \"minéral\",\n    \"minimal\",\n    \"minorer\",\n    \"minute\",\n    \"miracle\",\n    \"miroiter\",\n    \"missile\",\n    \"mixte\",\n    \"mobile\",\n    \"moderne\",\n    \"moelleux\",\n    \"mondial\",\n    \"moniteur\",\n    \"monnaie\",\n    \"monotone\",\n    \"monstre\",\n    \"montagne\",\n    \"monument\",\n    \"moqueur\",\n    \"morceau\",\n    \"morsure\",\n    \"mortier\",\n    \"moteur\",\n    \"motif\",\n    \"mouche\",\n    \"moufle\",\n    \"moulin\",\n    \"mousson\",\n    \"mouton\",\n    \"mouvant\",\n    \"multiple\",\n    \"munition\",\n    \"muraille\",\n    \"murène\",\n    \"murmure\",\n    \"muscle\",\n    \"muséum\",\n    \"musicien\",\n    \"mutation\",\n    \"muter\",\n    \"mutuel\",\n    \"myriade\",\n    \"myrtille\",\n    \"mystère\",\n    \"mythique\",\n    \"nageur\",\n    \"nappe\",\n    \"narquois\",\n    \"narrer\",\n    \"natation\",\n    \"nation\",\n    \"nature\",\n    \"naufrage\",\n    \"nautique\",\n    \"navire\",\n    \"nébuleux\",\n    \"nectar\",\n    \"néfaste\",\n    \"négation\",\n    \"négliger\",\n    \"négocier\",\n    \"neige\",\n    \"nerveux\",\n    \"nettoyer\",\n    \"neurone\",\n    \"neutron\",\n    \"neveu\",\n    \"niche\",\n    \"nickel\",\n    \"nitrate\",\n    \"niveau\",\n    \"noble\",\n    \"nocif\",\n    \"nocturne\",\n    \"noirceur\",\n    \"noisette\",\n    \"nomade\",\n    \"nombreux\",\n    \"nommer\",\n    \"normatif\",\n    \"notable\",\n    \"notifier\",\n    \"notoire\",\n    \"nourrir\",\n    \"nouveau\",\n    \"novateur\",\n    \"novembre\",\n    \"novice\",\n    \"nuage\",\n    \"nuancer\",\n    \"nuire\",\n    \"nuisible\",\n    \"numéro\",\n    \"nuptial\",\n    \"nuque\",\n    \"nutritif\",\n    \"obéir\",\n    \"objectif\",\n    \"obliger\",\n    \"obscur\",\n    \"observer\",\n    \"obstacle\",\n    \"obtenir\",\n    \"obturer\",\n    \"occasion\",\n    \"occuper\",\n    \"océan\",\n    \"octobre\",\n    \"octroyer\",\n    \"octupler\",\n    \"oculaire\",\n    \"odeur\",\n    \"odorant\",\n    \"offenser\",\n    \"officier\",\n    \"offrir\",\n    \"ogive\",\n    \"oiseau\",\n    \"oisillon\",\n    \"olfactif\",\n    \"olivier\",\n    \"ombrage\",\n    \"omettre\",\n    \"onctueux\",\n    \"onduler\",\n    \"onéreux\",\n    \"onirique\",\n    \"opale\",\n    \"opaque\",\n    \"opérer\",\n    \"opinion\",\n    \"opportun\",\n    \"opprimer\",\n    \"opter\",\n    \"optique\",\n    \"orageux\",\n    \"orange\",\n    \"orbite\",\n    \"ordonner\",\n    \"oreille\",\n    \"organe\",\n    \"orgueil\",\n    \"orifice\",\n    \"ornement\",\n    \"orque\",\n    \"ortie\",\n    \"osciller\",\n    \"osmose\",\n    \"ossature\",\n    \"otarie\",\n    \"ouragan\",\n    \"ourson\",\n    \"outil\",\n    \"outrager\",\n    \"ouvrage\",\n    \"ovation\",\n    \"oxyde\",\n    \"oxygène\",\n    \"ozone\",\n    \"paisible\",\n    \"palace\",\n    \"palmarès\",\n    \"palourde\",\n    \"palper\",\n    \"panache\",\n    \"panda\",\n    \"pangolin\",\n    \"paniquer\",\n    \"panneau\",\n    \"panorama\",\n    \"pantalon\",\n    \"papaye\",\n    \"papier\",\n    \"papoter\",\n    \"papyrus\",\n    \"paradoxe\",\n    \"parcelle\",\n    \"paresse\",\n    \"parfumer\",\n    \"parler\",\n    \"parole\",\n    \"parrain\",\n    \"parsemer\",\n    \"partager\",\n    \"parure\",\n    \"parvenir\",\n    \"passion\",\n    \"pastèque\",\n    \"paternel\",\n    \"patience\",\n    \"patron\",\n    \"pavillon\",\n    \"pavoiser\",\n    \"payer\",\n    \"paysage\",\n    \"peigne\",\n    \"peintre\",\n    \"pelage\",\n    \"pélican\",\n    \"pelle\",\n    \"pelouse\",\n    \"peluche\",\n    \"pendule\",\n    \"pénétrer\",\n    \"pénible\",\n    \"pensif\",\n    \"pénurie\",\n    \"pépite\",\n    \"péplum\",\n    \"perdrix\",\n    \"perforer\",\n    \"période\",\n    \"permuter\",\n    \"perplexe\",\n    \"persil\",\n    \"perte\",\n    \"peser\",\n    \"pétale\",\n    \"petit\",\n    \"pétrir\",\n    \"peuple\",\n    \"pharaon\",\n    \"phobie\",\n    \"phoque\",\n    \"photon\",\n    \"phrase\",\n    \"physique\",\n    \"piano\",\n    \"pictural\",\n    \"pièce\",\n    \"pierre\",\n    \"pieuvre\",\n    \"pilote\",\n    \"pinceau\",\n    \"pipette\",\n    \"piquer\",\n    \"pirogue\",\n    \"piscine\",\n    \"piston\",\n    \"pivoter\",\n    \"pixel\",\n    \"pizza\",\n    \"placard\",\n    \"plafond\",\n    \"plaisir\",\n    \"planer\",\n    \"plaque\",\n    \"plastron\",\n    \"plateau\",\n    \"pleurer\",\n    \"plexus\",\n    \"pliage\",\n    \"plomb\",\n    \"plonger\",\n    \"pluie\",\n    \"plumage\",\n    \"pochette\",\n    \"poésie\",\n    \"poète\",\n    \"pointe\",\n    \"poirier\",\n    \"poisson\",\n    \"poivre\",\n    \"polaire\",\n    \"policier\",\n    \"pollen\",\n    \"polygone\",\n    \"pommade\",\n    \"pompier\",\n    \"ponctuel\",\n    \"pondérer\",\n    \"poney\",\n    \"portique\",\n    \"position\",\n    \"posséder\",\n    \"posture\",\n    \"potager\",\n    \"poteau\",\n    \"potion\",\n    \"pouce\",\n    \"poulain\",\n    \"poumon\",\n    \"pourpre\",\n    \"poussin\",\n    \"pouvoir\",\n    \"prairie\",\n    \"pratique\",\n    \"précieux\",\n    \"prédire\",\n    \"préfixe\",\n    \"prélude\",\n    \"prénom\",\n    \"présence\",\n    \"prétexte\",\n    \"prévoir\",\n    \"primitif\",\n    \"prince\",\n    \"prison\",\n    \"priver\",\n    \"problème\",\n    \"procéder\",\n    \"prodige\",\n    \"profond\",\n    \"progrès\",\n    \"proie\",\n    \"projeter\",\n    \"prologue\",\n    \"promener\",\n    \"propre\",\n    \"prospère\",\n    \"protéger\",\n    \"prouesse\",\n    \"proverbe\",\n    \"prudence\",\n    \"pruneau\",\n    \"psychose\",\n    \"public\",\n    \"puceron\",\n    \"puiser\",\n    \"pulpe\",\n    \"pulsar\",\n    \"punaise\",\n    \"punitif\",\n    \"pupitre\",\n    \"purifier\",\n    \"puzzle\",\n    \"pyramide\",\n    \"quasar\",\n    \"querelle\",\n    \"question\",\n    \"quiétude\",\n    \"quitter\",\n    \"quotient\",\n    \"racine\",\n    \"raconter\",\n    \"radieux\",\n    \"ragondin\",\n    \"raideur\",\n    \"raisin\",\n    \"ralentir\",\n    \"rallonge\",\n    \"ramasser\",\n    \"rapide\",\n    \"rasage\",\n    \"ratisser\",\n    \"ravager\",\n    \"ravin\",\n    \"rayonner\",\n    \"réactif\",\n    \"réagir\",\n    \"réaliser\",\n    \"réanimer\",\n    \"recevoir\",\n    \"réciter\",\n    \"réclamer\",\n    \"récolter\",\n    \"recruter\",\n    \"reculer\",\n    \"recycler\",\n    \"rédiger\",\n    \"redouter\",\n    \"refaire\",\n    \"réflexe\",\n    \"réformer\",\n    \"refrain\",\n    \"refuge\",\n    \"régalien\",\n    \"région\",\n    \"réglage\",\n    \"régulier\",\n    \"réitérer\",\n    \"rejeter\",\n    \"rejouer\",\n    \"relatif\",\n    \"relever\",\n    \"relief\",\n    \"remarque\",\n    \"remède\",\n    \"remise\",\n    \"remonter\",\n    \"remplir\",\n    \"remuer\",\n    \"renard\",\n    \"renfort\",\n    \"renifler\",\n    \"renoncer\",\n    \"rentrer\",\n    \"renvoi\",\n    \"replier\",\n    \"reporter\",\n    \"reprise\",\n    \"reptile\",\n    \"requin\",\n    \"réserve\",\n    \"résineux\",\n    \"résoudre\",\n    \"respect\",\n    \"rester\",\n    \"résultat\",\n    \"rétablir\",\n    \"retenir\",\n    \"réticule\",\n    \"retomber\",\n    \"retracer\",\n    \"réunion\",\n    \"réussir\",\n    \"revanche\",\n    \"revivre\",\n    \"révolte\",\n    \"révulsif\",\n    \"richesse\",\n    \"rideau\",\n    \"rieur\",\n    \"rigide\",\n    \"rigoler\",\n    \"rincer\",\n    \"riposter\",\n    \"risible\",\n    \"risque\",\n    \"rituel\",\n    \"rival\",\n    \"rivière\",\n    \"rocheux\",\n    \"romance\",\n    \"rompre\",\n    \"ronce\",\n    \"rondin\",\n    \"roseau\",\n    \"rosier\",\n    \"rotatif\",\n    \"rotor\",\n    \"rotule\",\n    \"rouge\",\n    \"rouille\",\n    \"rouleau\",\n    \"routine\",\n    \"royaume\",\n    \"ruban\",\n    \"rubis\",\n    \"ruche\",\n    \"ruelle\",\n    \"rugueux\",\n    \"ruiner\",\n    \"ruisseau\",\n    \"ruser\",\n    \"rustique\",\n    \"rythme\",\n    \"sabler\",\n    \"saboter\",\n    \"sabre\",\n    \"sacoche\",\n    \"safari\",\n    \"sagesse\",\n    \"saisir\",\n    \"salade\",\n    \"salive\",\n    \"salon\",\n    \"saluer\",\n    \"samedi\",\n    \"sanction\",\n    \"sanglier\",\n    \"sarcasme\",\n    \"sardine\",\n    \"saturer\",\n    \"saugrenu\",\n    \"saumon\",\n    \"sauter\",\n    \"sauvage\",\n    \"savant\",\n    \"savonner\",\n    \"scalpel\",\n    \"scandale\",\n    \"scélérat\",\n    \"scénario\",\n    \"sceptre\",\n    \"schéma\",\n    \"science\",\n    \"scinder\",\n    \"score\",\n    \"scrutin\",\n    \"sculpter\",\n    \"séance\",\n    \"sécable\",\n    \"sécher\",\n    \"secouer\",\n    \"sécréter\",\n    \"sédatif\",\n    \"séduire\",\n    \"seigneur\",\n    \"séjour\",\n    \"sélectif\",\n    \"semaine\",\n    \"sembler\",\n    \"semence\",\n    \"séminal\",\n    \"sénateur\",\n    \"sensible\",\n    \"sentence\",\n    \"séparer\",\n    \"séquence\",\n    \"serein\",\n    \"sergent\",\n    \"sérieux\",\n    \"serrure\",\n    \"sérum\",\n    \"service\",\n    \"sésame\",\n    \"sévir\",\n    \"sevrage\",\n    \"sextuple\",\n    \"sidéral\",\n    \"siècle\",\n    \"siéger\",\n    \"siffler\",\n    \"sigle\",\n    \"signal\",\n    \"silence\",\n    \"silicium\",\n    \"simple\",\n    \"sincère\",\n    \"sinistre\",\n    \"siphon\",\n    \"sirop\",\n    \"sismique\",\n    \"situer\",\n    \"skier\",\n    \"social\",\n    \"socle\",\n    \"sodium\",\n    \"soigneux\",\n    \"soldat\",\n    \"soleil\",\n    \"solitude\",\n    \"soluble\",\n    \"sombre\",\n    \"sommeil\",\n    \"somnoler\",\n    \"sonde\",\n    \"songeur\",\n    \"sonnette\",\n    \"sonore\",\n    \"sorcier\",\n    \"sortir\",\n    \"sosie\",\n    \"sottise\",\n    \"soucieux\",\n    \"soudure\",\n    \"souffle\",\n    \"soulever\",\n    \"soupape\",\n    \"source\",\n    \"soutirer\",\n    \"souvenir\",\n    \"spacieux\",\n    \"spatial\",\n    \"spécial\",\n    \"sphère\",\n    \"spiral\",\n    \"stable\",\n    \"station\",\n    \"sternum\",\n    \"stimulus\",\n    \"stipuler\",\n    \"strict\",\n    \"studieux\",\n    \"stupeur\",\n    \"styliste\",\n    \"sublime\",\n    \"substrat\",\n    \"subtil\",\n    \"subvenir\",\n    \"succès\",\n    \"sucre\",\n    \"suffixe\",\n    \"suggérer\",\n    \"suiveur\",\n    \"sulfate\",\n    \"superbe\",\n    \"supplier\",\n    \"surface\",\n    \"suricate\",\n    \"surmener\",\n    \"surprise\",\n    \"sursaut\",\n    \"survie\",\n    \"suspect\",\n    \"syllabe\",\n    \"symbole\",\n    \"symétrie\",\n    \"synapse\",\n    \"syntaxe\",\n    \"système\",\n    \"tabac\",\n    \"tablier\",\n    \"tactile\",\n    \"tailler\",\n    \"talent\",\n    \"talisman\",\n    \"talonner\",\n    \"tambour\",\n    \"tamiser\",\n    \"tangible\",\n    \"tapis\",\n    \"taquiner\",\n    \"tarder\",\n    \"tarif\",\n    \"tartine\",\n    \"tasse\",\n    \"tatami\",\n    \"tatouage\",\n    \"taupe\",\n    \"taureau\",\n    \"taxer\",\n    \"témoin\",\n    \"temporel\",\n    \"tenaille\",\n    \"tendre\",\n    \"teneur\",\n    \"tenir\",\n    \"tension\",\n    \"terminer\",\n    \"terne\",\n    \"terrible\",\n    \"tétine\",\n    \"texte\",\n    \"thème\",\n    \"théorie\",\n    \"thérapie\",\n    \"thorax\",\n    \"tibia\",\n    \"tiède\",\n    \"timide\",\n    \"tirelire\",\n    \"tiroir\",\n    \"tissu\",\n    \"titane\",\n    \"titre\",\n    \"tituber\",\n    \"toboggan\",\n    \"tolérant\",\n    \"tomate\",\n    \"tonique\",\n    \"tonneau\",\n    \"toponyme\",\n    \"torche\",\n    \"tordre\",\n    \"tornade\",\n    \"torpille\",\n    \"torrent\",\n    \"torse\",\n    \"tortue\",\n    \"totem\",\n    \"toucher\",\n    \"tournage\",\n    \"tousser\",\n    \"toxine\",\n    \"traction\",\n    \"trafic\",\n    \"tragique\",\n    \"trahir\",\n    \"train\",\n    \"trancher\",\n    \"travail\",\n    \"trèfle\",\n    \"tremper\",\n    \"trésor\",\n    \"treuil\",\n    \"triage\",\n    \"tribunal\",\n    \"tricoter\",\n    \"trilogie\",\n    \"triomphe\",\n    \"tripler\",\n    \"triturer\",\n    \"trivial\",\n    \"trombone\",\n    \"tronc\",\n    \"tropical\",\n    \"troupeau\",\n    \"tuile\",\n    \"tulipe\",\n    \"tumulte\",\n    \"tunnel\",\n    \"turbine\",\n    \"tuteur\",\n    \"tutoyer\",\n    \"tuyau\",\n    \"tympan\",\n    \"typhon\",\n    \"typique\",\n    \"tyran\",\n    \"ubuesque\",\n    \"ultime\",\n    \"ultrason\",\n    \"unanime\",\n    \"unifier\",\n    \"union\",\n    \"unique\",\n    \"unitaire\",\n    \"univers\",\n    \"uranium\",\n    \"urbain\",\n    \"urticant\",\n    \"usage\",\n    \"usine\",\n    \"usuel\",\n    \"usure\",\n    \"utile\",\n    \"utopie\",\n    \"vacarme\",\n    \"vaccin\",\n    \"vagabond\",\n    \"vague\",\n    \"vaillant\",\n    \"vaincre\",\n    \"vaisseau\",\n    \"valable\",\n    \"valise\",\n    \"vallon\",\n    \"valve\",\n    \"vampire\",\n    \"vanille\",\n    \"vapeur\",\n    \"varier\",\n    \"vaseux\",\n    \"vassal\",\n    \"vaste\",\n    \"vecteur\",\n    \"vedette\",\n    \"végétal\",\n    \"véhicule\",\n    \"veinard\",\n    \"véloce\",\n    \"vendredi\",\n    \"vénérer\",\n    \"venger\",\n    \"venimeux\",\n    \"ventouse\",\n    \"verdure\",\n    \"vérin\",\n    \"vernir\",\n    \"verrou\",\n    \"verser\",\n    \"vertu\",\n    \"veston\",\n    \"vétéran\",\n    \"vétuste\",\n    \"vexant\",\n    \"vexer\",\n    \"viaduc\",\n    \"viande\",\n    \"victoire\",\n    \"vidange\",\n    \"vidéo\",\n    \"vignette\",\n    \"vigueur\",\n    \"vilain\",\n    \"village\",\n    \"vinaigre\",\n    \"violon\",\n    \"vipère\",\n    \"virement\",\n    \"virtuose\",\n    \"virus\",\n    \"visage\",\n    \"viseur\",\n    \"vision\",\n    \"visqueux\",\n    \"visuel\",\n    \"vital\",\n    \"vitesse\",\n    \"viticole\",\n    \"vitrine\",\n    \"vivace\",\n    \"vivipare\",\n    \"vocation\",\n    \"voguer\",\n    \"voile\",\n    \"voisin\",\n    \"voiture\",\n    \"volaille\",\n    \"volcan\",\n    \"voltiger\",\n    \"volume\",\n    \"vorace\",\n    \"vortex\",\n    \"voter\",\n    \"vouloir\",\n    \"voyage\",\n    \"voyelle\",\n    \"wagon\",\n    \"xénon\",\n    \"yacht\",\n    \"zèbre\",\n    \"zénith\",\n    \"zeste\",\n    \"zoologie\"\n]\n[\n    \"abaco\",\n    \"abbaglio\",\n    \"abbinato\",\n    \"abete\",\n    \"abisso\",\n    \"abolire\",\n    \"abrasivo\",\n    \"abrogato\",\n    \"accadere\",\n    \"accenno\",\n    \"accusato\",\n    \"acetone\",\n    \"achille\",\n    \"acido\",\n    \"acqua\",\n    \"acre\",\n    \"acrilico\",\n    \"acrobata\",\n    \"acuto\",\n    \"adagio\",\n    \"addebito\",\n    \"addome\",\n    \"adeguato\",\n    \"aderire\",\n    \"adipe\",\n    \"adottare\",\n    \"adulare\",\n    \"affabile\",\n    \"affetto\",\n    \"affisso\",\n    \"affranto\",\n    \"aforisma\",\n    \"afoso\",\n    \"africano\",\n    \"agave\",\n    \"agente\",\n    \"agevole\",\n    \"aggancio\",\n    \"agire\",\n    \"agitare\",\n    \"agonismo\",\n    \"agricolo\",\n    \"agrumeto\",\n    \"aguzzo\",\n    \"alabarda\",\n    \"alato\",\n    \"albatro\",\n    \"alberato\",\n    \"albo\",\n    \"albume\",\n    \"alce\",\n    \"alcolico\",\n    \"alettone\",\n    \"alfa\",\n    \"algebra\",\n    \"aliante\",\n    \"alibi\",\n    \"alimento\",\n    \"allagato\",\n    \"allegro\",\n    \"allievo\",\n    \"allodola\",\n    \"allusivo\",\n    \"almeno\",\n    \"alogeno\",\n    \"alpaca\",\n    \"alpestre\",\n    \"altalena\",\n    \"alterno\",\n    \"alticcio\",\n    \"altrove\",\n    \"alunno\",\n    \"alveolo\",\n    \"alzare\",\n    \"amalgama\",\n    \"amanita\",\n    \"amarena\",\n    \"ambito\",\n    \"ambrato\",\n    \"ameba\",\n    \"america\",\n    \"ametista\",\n    \"amico\",\n    \"ammasso\",\n    \"ammenda\",\n    \"ammirare\",\n    \"ammonito\",\n    \"amore\",\n    \"ampio\",\n    \"ampliare\",\n    \"amuleto\",\n    \"anacardo\",\n    \"anagrafe\",\n    \"analista\",\n    \"anarchia\",\n    \"anatra\",\n    \"anca\",\n    \"ancella\",\n    \"ancora\",\n    \"andare\",\n    \"andrea\",\n    \"anello\",\n    \"angelo\",\n    \"angolare\",\n    \"angusto\",\n    \"anima\",\n    \"annegare\",\n    \"annidato\",\n    \"anno\",\n    \"annuncio\",\n    \"anonimo\",\n    \"anticipo\",\n    \"anzi\",\n    \"apatico\",\n    \"apertura\",\n    \"apode\",\n    \"apparire\",\n    \"appetito\",\n    \"appoggio\",\n    \"approdo\",\n    \"appunto\",\n    \"aprile\",\n    \"arabica\",\n    \"arachide\",\n    \"aragosta\",\n    \"araldica\",\n    \"arancio\",\n    \"aratura\",\n    \"arazzo\",\n    \"arbitro\",\n    \"archivio\",\n    \"ardito\",\n    \"arenile\",\n    \"argento\",\n    \"argine\",\n    \"arguto\",\n    \"aria\",\n    \"armonia\",\n    \"arnese\",\n    \"arredato\",\n    \"arringa\",\n    \"arrosto\",\n    \"arsenico\",\n    \"arso\",\n    \"artefice\",\n    \"arzillo\",\n    \"asciutto\",\n    \"ascolto\",\n    \"asepsi\",\n    \"asettico\",\n    \"asfalto\",\n    \"asino\",\n    \"asola\",\n    \"aspirato\",\n    \"aspro\",\n    \"assaggio\",\n    \"asse\",\n    \"assoluto\",\n    \"assurdo\",\n    \"asta\",\n    \"astenuto\",\n    \"astice\",\n    \"astratto\",\n    \"atavico\",\n    \"ateismo\",\n    \"atomico\",\n    \"atono\",\n    \"attesa\",\n    \"attivare\",\n    \"attorno\",\n    \"attrito\",\n    \"attuale\",\n    \"ausilio\",\n    \"austria\",\n    \"autista\",\n    \"autonomo\",\n    \"autunno\",\n    \"avanzato\",\n    \"avere\",\n    \"avvenire\",\n    \"avviso\",\n    \"avvolgere\",\n    \"azione\",\n    \"azoto\",\n    \"azzimo\",\n    \"azzurro\",\n    \"babele\",\n    \"baccano\",\n    \"bacino\",\n    \"baco\",\n    \"badessa\",\n    \"badilata\",\n    \"bagnato\",\n    \"baita\",\n    \"balcone\",\n    \"baldo\",\n    \"balena\",\n    \"ballata\",\n    \"balzano\",\n    \"bambino\",\n    \"bandire\",\n    \"baraonda\",\n    \"barbaro\",\n    \"barca\",\n    \"baritono\",\n    \"barlume\",\n    \"barocco\",\n    \"basilico\",\n    \"basso\",\n    \"batosta\",\n    \"battuto\",\n    \"baule\",\n    \"bava\",\n    \"bavosa\",\n    \"becco\",\n    \"beffa\",\n    \"belgio\",\n    \"belva\",\n    \"benda\",\n    \"benevole\",\n    \"benigno\",\n    \"benzina\",\n    \"bere\",\n    \"berlina\",\n    \"beta\",\n    \"bibita\",\n    \"bici\",\n    \"bidone\",\n    \"bifido\",\n    \"biga\",\n    \"bilancia\",\n    \"bimbo\",\n    \"binocolo\",\n    \"biologo\",\n    \"bipede\",\n    \"bipolare\",\n    \"birbante\",\n    \"birra\",\n    \"biscotto\",\n    \"bisesto\",\n    \"bisnonno\",\n    \"bisonte\",\n    \"bisturi\",\n    \"bizzarro\",\n    \"blando\",\n    \"blatta\",\n    \"bollito\",\n    \"bonifico\",\n    \"bordo\",\n    \"bosco\",\n    \"botanico\",\n    \"bottino\",\n    \"bozzolo\",\n    \"braccio\",\n    \"bradipo\",\n    \"brama\",\n    \"branca\",\n    \"bravura\",\n    \"bretella\",\n    \"brevetto\",\n    \"brezza\",\n    \"briglia\",\n    \"brillante\",\n    \"brindare\",\n    \"broccolo\",\n    \"brodo\",\n    \"bronzina\",\n    \"brullo\",\n    \"bruno\",\n    \"bubbone\",\n    \"buca\",\n    \"budino\",\n    \"buffone\",\n    \"buio\",\n    \"bulbo\",\n    \"buono\",\n    \"burlone\",\n    \"burrasca\",\n    \"bussola\",\n    \"busta\",\n    \"cadetto\",\n    \"caduco\",\n    \"calamaro\",\n    \"calcolo\",\n    \"calesse\",\n    \"calibro\",\n    \"calmo\",\n    \"caloria\",\n    \"cambusa\",\n    \"camerata\",\n    \"camicia\",\n    \"cammino\",\n    \"camola\",\n    \"campale\",\n    \"canapa\",\n    \"candela\",\n    \"cane\",\n    \"canino\",\n    \"canotto\",\n    \"cantina\",\n    \"capace\",\n    \"capello\",\n    \"capitolo\",\n    \"capogiro\",\n    \"cappero\",\n    \"capra\",\n    \"capsula\",\n    \"carapace\",\n    \"carcassa\",\n    \"cardo\",\n    \"carisma\",\n    \"carovana\",\n    \"carretto\",\n    \"cartolina\",\n    \"casaccio\",\n    \"cascata\",\n    \"caserma\",\n    \"caso\",\n    \"cassone\",\n    \"castello\",\n    \"casuale\",\n    \"catasta\",\n    \"catena\",\n    \"catrame\",\n    \"cauto\",\n    \"cavillo\",\n    \"cedibile\",\n    \"cedrata\",\n    \"cefalo\",\n    \"celebre\",\n    \"cellulare\",\n    \"cena\",\n    \"cenone\",\n    \"centesimo\",\n    \"ceramica\",\n    \"cercare\",\n    \"certo\",\n    \"cerume\",\n    \"cervello\",\n    \"cesoia\",\n    \"cespo\",\n    \"ceto\",\n    \"chela\",\n    \"chiaro\",\n    \"chicca\",\n    \"chiedere\",\n    \"chimera\",\n    \"china\",\n    \"chirurgo\",\n    \"chitarra\",\n    \"ciao\",\n    \"ciclismo\",\n    \"cifrare\",\n    \"cigno\",\n    \"cilindro\",\n    \"ciottolo\",\n    \"circa\",\n    \"cirrosi\",\n    \"citrico\",\n    \"cittadino\",\n    \"ciuffo\",\n    \"civetta\",\n    \"civile\",\n    \"classico\",\n    \"clinica\",\n    \"cloro\",\n    \"cocco\",\n    \"codardo\",\n    \"codice\",\n    \"coerente\",\n    \"cognome\",\n    \"collare\",\n    \"colmato\",\n    \"colore\",\n    \"colposo\",\n    \"coltivato\",\n    \"colza\",\n    \"coma\",\n    \"cometa\",\n    \"commando\",\n    \"comodo\",\n    \"computer\",\n    \"comune\",\n    \"conciso\",\n    \"condurre\",\n    \"conferma\",\n    \"congelare\",\n    \"coniuge\",\n    \"connesso\",\n    \"conoscere\",\n    \"consumo\",\n    \"continuo\",\n    \"convegno\",\n    \"coperto\",\n    \"copione\",\n    \"coppia\",\n    \"copricapo\",\n    \"corazza\",\n    \"cordata\",\n    \"coricato\",\n    \"cornice\",\n    \"corolla\",\n    \"corpo\",\n    \"corredo\",\n    \"corsia\",\n    \"cortese\",\n    \"cosmico\",\n    \"costante\",\n    \"cottura\",\n    \"covato\",\n    \"cratere\",\n    \"cravatta\",\n    \"creato\",\n    \"credere\",\n    \"cremoso\",\n    \"crescita\",\n    \"creta\",\n    \"criceto\",\n    \"crinale\",\n    \"crisi\",\n    \"critico\",\n    \"croce\",\n    \"cronaca\",\n    \"crostata\",\n    \"cruciale\",\n    \"crusca\",\n    \"cucire\",\n    \"cuculo\",\n    \"cugino\",\n    \"cullato\",\n    \"cupola\",\n    \"curatore\",\n    \"cursore\",\n    \"curvo\",\n    \"cuscino\",\n    \"custode\",\n    \"dado\",\n    \"daino\",\n    \"dalmata\",\n    \"damerino\",\n    \"daniela\",\n    \"dannoso\",\n    \"danzare\",\n    \"datato\",\n    \"davanti\",\n    \"davvero\",\n    \"debutto\",\n    \"decennio\",\n    \"deciso\",\n    \"declino\",\n    \"decollo\",\n    \"decreto\",\n    \"dedicato\",\n    \"definito\",\n    \"deforme\",\n    \"degno\",\n    \"delegare\",\n    \"delfino\",\n    \"delirio\",\n    \"delta\",\n    \"demenza\",\n    \"denotato\",\n    \"dentro\",\n    \"deposito\",\n    \"derapata\",\n    \"derivare\",\n    \"deroga\",\n    \"descritto\",\n    \"deserto\",\n    \"desiderio\",\n    \"desumere\",\n    \"detersivo\",\n    \"devoto\",\n    \"diametro\",\n    \"dicembre\",\n    \"diedro\",\n    \"difeso\",\n    \"diffuso\",\n    \"digerire\",\n    \"digitale\",\n    \"diluvio\",\n    \"dinamico\",\n    \"dinnanzi\",\n    \"dipinto\",\n    \"diploma\",\n    \"dipolo\",\n    \"diradare\",\n    \"dire\",\n    \"dirotto\",\n    \"dirupo\",\n    \"disagio\",\n    \"discreto\",\n    \"disfare\",\n    \"disgelo\",\n    \"disposto\",\n    \"distanza\",\n    \"disumano\",\n    \"dito\",\n    \"divano\",\n    \"divelto\",\n    \"dividere\",\n    \"divorato\",\n    \"doblone\",\n    \"docente\",\n    \"doganale\",\n    \"dogma\",\n    \"dolce\",\n    \"domato\",\n    \"domenica\",\n    \"dominare\",\n    \"dondolo\",\n    \"dono\",\n    \"dormire\",\n    \"dote\",\n    \"dottore\",\n    \"dovuto\",\n    \"dozzina\",\n    \"drago\",\n    \"druido\",\n    \"dubbio\",\n    \"dubitare\",\n    \"ducale\",\n    \"duna\",\n    \"duomo\",\n    \"duplice\",\n    \"duraturo\",\n    \"ebano\",\n    \"eccesso\",\n    \"ecco\",\n    \"eclissi\",\n    \"economia\",\n    \"edera\",\n    \"edicola\",\n    \"edile\",\n    \"editoria\",\n    \"educare\",\n    \"egemonia\",\n    \"egli\",\n    \"egoismo\",\n    \"egregio\",\n    \"elaborato\",\n    \"elargire\",\n    \"elegante\",\n    \"elencato\",\n    \"eletto\",\n    \"elevare\",\n    \"elfico\",\n    \"elica\",\n    \"elmo\",\n    \"elsa\",\n    \"eluso\",\n    \"emanato\",\n    \"emblema\",\n    \"emesso\",\n    \"emiro\",\n    \"emotivo\",\n    \"emozione\",\n    \"empirico\",\n    \"emulo\",\n    \"endemico\",\n    \"enduro\",\n    \"energia\",\n    \"enfasi\",\n    \"enoteca\",\n    \"entrare\",\n    \"enzima\",\n    \"epatite\",\n    \"epilogo\",\n    \"episodio\",\n    \"epocale\",\n    \"eppure\",\n    \"equatore\",\n    \"erario\",\n    \"erba\",\n    \"erboso\",\n    \"erede\",\n    \"eremita\",\n    \"erigere\",\n    \"ermetico\",\n    \"eroe\",\n    \"erosivo\",\n    \"errante\",\n    \"esagono\",\n    \"esame\",\n    \"esanime\",\n    \"esaudire\",\n    \"esca\",\n    \"esempio\",\n    \"esercito\",\n    \"esibito\",\n    \"esigente\",\n    \"esistere\",\n    \"esito\",\n    \"esofago\",\n    \"esortato\",\n    \"esoso\",\n    \"espanso\",\n    \"espresso\",\n    \"essenza\",\n    \"esso\",\n    \"esteso\",\n    \"estimare\",\n    \"estonia\",\n    \"estroso\",\n    \"esultare\",\n    \"etilico\",\n    \"etnico\",\n    \"etrusco\",\n    \"etto\",\n    \"euclideo\",\n    \"europa\",\n    \"evaso\",\n    \"evidenza\",\n    \"evitato\",\n    \"evoluto\",\n    \"evviva\",\n    \"fabbrica\",\n    \"faccenda\",\n    \"fachiro\",\n    \"falco\",\n    \"famiglia\",\n    \"fanale\",\n    \"fanfara\",\n    \"fango\",\n    \"fantasma\",\n    \"fare\",\n    \"farfalla\",\n    \"farinoso\",\n    \"farmaco\",\n    \"fascia\",\n    \"fastoso\",\n    \"fasullo\",\n    \"faticare\",\n    \"fato\",\n    \"favoloso\",\n    \"febbre\",\n    \"fecola\",\n    \"fede\",\n    \"fegato\",\n    \"felpa\",\n    \"feltro\",\n    \"femmina\",\n    \"fendere\",\n    \"fenomeno\",\n    \"fermento\",\n    \"ferro\",\n    \"fertile\",\n    \"fessura\",\n    \"festivo\",\n    \"fetta\",\n    \"feudo\",\n    \"fiaba\",\n    \"fiducia\",\n    \"fifa\",\n    \"figurato\",\n    \"filo\",\n    \"finanza\",\n    \"finestra\",\n    \"finire\",\n    \"fiore\",\n    \"fiscale\",\n    \"fisico\",\n    \"fiume\",\n    \"flacone\",\n    \"flamenco\",\n    \"flebo\",\n    \"flemma\",\n    \"florido\",\n    \"fluente\",\n    \"fluoro\",\n    \"fobico\",\n    \"focaccia\",\n    \"focoso\",\n    \"foderato\",\n    \"foglio\",\n    \"folata\",\n    \"folclore\",\n    \"folgore\",\n    \"fondente\",\n    \"fonetico\",\n    \"fonia\",\n    \"fontana\",\n    \"forbito\",\n    \"forchetta\",\n    \"foresta\",\n    \"formica\",\n    \"fornaio\",\n    \"foro\",\n    \"fortezza\",\n    \"forzare\",\n    \"fosfato\",\n    \"fosso\",\n    \"fracasso\",\n    \"frana\",\n    \"frassino\",\n    \"fratello\",\n    \"freccetta\",\n    \"frenata\",\n    \"fresco\",\n    \"frigo\",\n    \"frollino\",\n    \"fronde\",\n    \"frugale\",\n    \"frutta\",\n    \"fucilata\",\n    \"fucsia\",\n    \"fuggente\",\n    \"fulmine\",\n    \"fulvo\",\n    \"fumante\",\n    \"fumetto\",\n    \"fumoso\",\n    \"fune\",\n    \"funzione\",\n    \"fuoco\",\n    \"furbo\",\n    \"furgone\",\n    \"furore\",\n    \"fuso\",\n    \"futile\",\n    \"gabbiano\",\n    \"gaffe\",\n    \"galateo\",\n    \"gallina\",\n    \"galoppo\",\n    \"gambero\",\n    \"gamma\",\n    \"garanzia\",\n    \"garbo\",\n    \"garofano\",\n    \"garzone\",\n    \"gasdotto\",\n    \"gasolio\",\n    \"gastrico\",\n    \"gatto\",\n    \"gaudio\",\n    \"gazebo\",\n    \"gazzella\",\n    \"geco\",\n    \"gelatina\",\n    \"gelso\",\n    \"gemello\",\n    \"gemmato\",\n    \"gene\",\n    \"genitore\",\n    \"gennaio\",\n    \"genotipo\",\n    \"gergo\",\n    \"ghepardo\",\n    \"ghiaccio\",\n    \"ghisa\",\n    \"giallo\",\n    \"gilda\",\n    \"ginepro\",\n    \"giocare\",\n    \"gioiello\",\n    \"giorno\",\n    \"giove\",\n    \"girato\",\n    \"girone\",\n    \"gittata\",\n    \"giudizio\",\n    \"giurato\",\n    \"giusto\",\n    \"globulo\",\n    \"glutine\",\n    \"gnomo\",\n    \"gobba\",\n    \"golf\",\n    \"gomito\",\n    \"gommone\",\n    \"gonfio\",\n    \"gonna\",\n    \"governo\",\n    \"gracile\",\n    \"grado\",\n    \"grafico\",\n    \"grammo\",\n    \"grande\",\n    \"grattare\",\n    \"gravoso\",\n    \"grazia\",\n    \"greca\",\n    \"gregge\",\n    \"grifone\",\n    \"grigio\",\n    \"grinza\",\n    \"grotta\",\n    \"gruppo\",\n    \"guadagno\",\n    \"guaio\",\n    \"guanto\",\n    \"guardare\",\n    \"gufo\",\n    \"guidare\",\n    \"ibernato\",\n    \"icona\",\n    \"identico\",\n    \"idillio\",\n    \"idolo\",\n    \"idra\",\n    \"idrico\",\n    \"idrogeno\",\n    \"igiene\",\n    \"ignaro\",\n    \"ignorato\",\n    \"ilare\",\n    \"illeso\",\n    \"illogico\",\n    \"illudere\",\n    \"imballo\",\n    \"imbevuto\",\n    \"imbocco\",\n    \"imbuto\",\n    \"immane\",\n    \"immerso\",\n    \"immolato\",\n    \"impacco\",\n    \"impeto\",\n    \"impiego\",\n    \"importo\",\n    \"impronta\",\n    \"inalare\",\n    \"inarcare\",\n    \"inattivo\",\n    \"incanto\",\n    \"incendio\",\n    \"inchino\",\n    \"incisivo\",\n    \"incluso\",\n    \"incontro\",\n    \"incrocio\",\n    \"incubo\",\n    \"indagine\",\n    \"india\",\n    \"indole\",\n    \"inedito\",\n    \"infatti\",\n    \"infilare\",\n    \"inflitto\",\n    \"ingaggio\",\n    \"ingegno\",\n    \"inglese\",\n    \"ingordo\",\n    \"ingrosso\",\n    \"innesco\",\n    \"inodore\",\n    \"inoltrare\",\n    \"inondato\",\n    \"insano\",\n    \"insetto\",\n    \"insieme\",\n    \"insonnia\",\n    \"insulina\",\n    \"intasato\",\n    \"intero\",\n    \"intonaco\",\n    \"intuito\",\n    \"inumidire\",\n    \"invalido\",\n    \"invece\",\n    \"invito\",\n    \"iperbole\",\n    \"ipnotico\",\n    \"ipotesi\",\n    \"ippica\",\n    \"iride\",\n    \"irlanda\",\n    \"ironico\",\n    \"irrigato\",\n    \"irrorare\",\n    \"isolato\",\n    \"isotopo\",\n    \"isterico\",\n    \"istituto\",\n    \"istrice\",\n    \"italia\",\n    \"iterare\",\n    \"labbro\",\n    \"labirinto\",\n    \"lacca\",\n    \"lacerato\",\n    \"lacrima\",\n    \"lacuna\",\n    \"laddove\",\n    \"lago\",\n    \"lampo\",\n    \"lancetta\",\n    \"lanterna\",\n    \"lardoso\",\n    \"larga\",\n    \"laringe\",\n    \"lastra\",\n    \"latenza\",\n    \"latino\",\n    \"lattuga\",\n    \"lavagna\",\n    \"lavoro\",\n    \"legale\",\n    \"leggero\",\n    \"lembo\",\n    \"lentezza\",\n    \"lenza\",\n    \"leone\",\n    \"lepre\",\n    \"lesivo\",\n    \"lessato\",\n    \"lesto\",\n    \"letterale\",\n    \"leva\",\n    \"levigato\",\n    \"libero\",\n    \"lido\",\n    \"lievito\",\n    \"lilla\",\n    \"limatura\",\n    \"limitare\",\n    \"limpido\",\n    \"lineare\",\n    \"lingua\",\n    \"liquido\",\n    \"lira\",\n    \"lirica\",\n    \"lisca\",\n    \"lite\",\n    \"litigio\",\n    \"livrea\",\n    \"locanda\",\n    \"lode\",\n    \"logica\",\n    \"lombare\",\n    \"londra\",\n    \"longevo\",\n    \"loquace\",\n    \"lorenzo\",\n    \"loto\",\n    \"lotteria\",\n    \"luce\",\n    \"lucidato\",\n    \"lumaca\",\n    \"luminoso\",\n    \"lungo\",\n    \"lupo\",\n    \"luppolo\",\n    \"lusinga\",\n    \"lusso\",\n    \"lutto\",\n    \"macabro\",\n    \"macchina\",\n    \"macero\",\n    \"macinato\",\n    \"madama\",\n    \"magico\",\n    \"maglia\",\n    \"magnete\",\n    \"magro\",\n    \"maiolica\",\n    \"malafede\",\n    \"malgrado\",\n    \"malinteso\",\n    \"malsano\",\n    \"malto\",\n    \"malumore\",\n    \"mana\",\n    \"mancia\",\n    \"mandorla\",\n    \"mangiare\",\n    \"manifesto\",\n    \"mannaro\",\n    \"manovra\",\n    \"mansarda\",\n    \"mantide\",\n    \"manubrio\",\n    \"mappa\",\n    \"maratona\",\n    \"marcire\",\n    \"maretta\",\n    \"marmo\",\n    \"marsupio\",\n    \"maschera\",\n    \"massaia\",\n    \"mastino\",\n    \"materasso\",\n    \"matricola\",\n    \"mattone\",\n    \"maturo\",\n    \"mazurca\",\n    \"meandro\",\n    \"meccanico\",\n    \"mecenate\",\n    \"medesimo\",\n    \"meditare\",\n    \"mega\",\n    \"melassa\",\n    \"melis\",\n    \"melodia\",\n    \"meninge\",\n    \"meno\",\n    \"mensola\",\n    \"mercurio\",\n    \"merenda\",\n    \"merlo\",\n    \"meschino\",\n    \"mese\",\n    \"messere\",\n    \"mestolo\",\n    \"metallo\",\n    \"metodo\",\n    \"mettere\",\n    \"miagolare\",\n    \"mica\",\n    \"micelio\",\n    \"michele\",\n    \"microbo\",\n    \"midollo\",\n    \"miele\",\n    \"migliore\",\n    \"milano\",\n    \"milite\",\n    \"mimosa\",\n    \"minerale\",\n    \"mini\",\n    \"minore\",\n    \"mirino\",\n    \"mirtillo\",\n    \"miscela\",\n    \"missiva\",\n    \"misto\",\n    \"misurare\",\n    \"mitezza\",\n    \"mitigare\",\n    \"mitra\",\n    \"mittente\",\n    \"mnemonico\",\n    \"modello\",\n    \"modifica\",\n    \"modulo\",\n    \"mogano\",\n    \"mogio\",\n    \"mole\",\n    \"molosso\",\n    \"monastero\",\n    \"monco\",\n    \"mondina\",\n    \"monetario\",\n    \"monile\",\n    \"monotono\",\n    \"monsone\",\n    \"montato\",\n    \"monviso\",\n    \"mora\",\n    \"mordere\",\n    \"morsicato\",\n    \"mostro\",\n    \"motivato\",\n    \"motosega\",\n    \"motto\",\n    \"movenza\",\n    \"movimento\",\n    \"mozzo\",\n    \"mucca\",\n    \"mucosa\",\n    \"muffa\",\n    \"mughetto\",\n    \"mugnaio\",\n    \"mulatto\",\n    \"mulinello\",\n    \"multiplo\",\n    \"mummia\",\n    \"munto\",\n    \"muovere\",\n    \"murale\",\n    \"musa\",\n    \"muscolo\",\n    \"musica\",\n    \"mutevole\",\n    \"muto\",\n    \"nababbo\",\n    \"nafta\",\n    \"nanometro\",\n    \"narciso\",\n    \"narice\",\n    \"narrato\",\n    \"nascere\",\n    \"nastrare\",\n    \"naturale\",\n    \"nautica\",\n    \"naviglio\",\n    \"nebulosa\",\n    \"necrosi\",\n    \"negativo\",\n    \"negozio\",\n    \"nemmeno\",\n    \"neofita\",\n    \"neretto\",\n    \"nervo\",\n    \"nessuno\",\n    \"nettuno\",\n    \"neutrale\",\n    \"neve\",\n    \"nevrotico\",\n    \"nicchia\",\n    \"ninfa\",\n    \"nitido\",\n    \"nobile\",\n    \"nocivo\",\n    \"nodo\",\n    \"nome\",\n    \"nomina\",\n    \"nordico\",\n    \"normale\",\n    \"norvegese\",\n    \"nostrano\",\n    \"notare\",\n    \"notizia\",\n    \"notturno\",\n    \"novella\",\n    \"nucleo\",\n    \"nulla\",\n    \"numero\",\n    \"nuovo\",\n    \"nutrire\",\n    \"nuvola\",\n    \"nuziale\",\n    \"oasi\",\n    \"obbedire\",\n    \"obbligo\",\n    \"obelisco\",\n    \"oblio\",\n    \"obolo\",\n    \"obsoleto\",\n    \"occasione\",\n    \"occhio\",\n    \"occidente\",\n    \"occorrere\",\n    \"occultare\",\n    \"ocra\",\n    \"oculato\",\n    \"odierno\",\n    \"odorare\",\n    \"offerta\",\n    \"offrire\",\n    \"offuscato\",\n    \"oggetto\",\n    \"oggi\",\n    \"ognuno\",\n    \"olandese\",\n    \"olfatto\",\n    \"oliato\",\n    \"oliva\",\n    \"ologramma\",\n    \"oltre\",\n    \"omaggio\",\n    \"ombelico\",\n    \"ombra\",\n    \"omega\",\n    \"omissione\",\n    \"ondoso\",\n    \"onere\",\n    \"onice\",\n    \"onnivoro\",\n    \"onorevole\",\n    \"onta\",\n    \"operato\",\n    \"opinione\",\n    \"opposto\",\n    \"oracolo\",\n    \"orafo\",\n    \"ordine\",\n    \"orecchino\",\n    \"orefice\",\n    \"orfano\",\n    \"organico\",\n    \"origine\",\n    \"orizzonte\",\n    \"orma\",\n    \"ormeggio\",\n    \"ornativo\",\n    \"orologio\",\n    \"orrendo\",\n    \"orribile\",\n    \"ortensia\",\n    \"ortica\",\n    \"orzata\",\n    \"orzo\",\n    \"osare\",\n    \"oscurare\",\n    \"osmosi\",\n    \"ospedale\",\n    \"ospite\",\n    \"ossa\",\n    \"ossidare\",\n    \"ostacolo\",\n    \"oste\",\n    \"otite\",\n    \"otre\",\n    \"ottagono\",\n    \"ottimo\",\n    \"ottobre\",\n    \"ovale\",\n    \"ovest\",\n    \"ovino\",\n    \"oviparo\",\n    \"ovocito\",\n    \"ovunque\",\n    \"ovviare\",\n    \"ozio\",\n    \"pacchetto\",\n    \"pace\",\n    \"pacifico\",\n    \"padella\",\n    \"padrone\",\n    \"paese\",\n    \"paga\",\n    \"pagina\",\n    \"palazzina\",\n    \"palesare\",\n    \"pallido\",\n    \"palo\",\n    \"palude\",\n    \"pandoro\",\n    \"pannello\",\n    \"paolo\",\n    \"paonazzo\",\n    \"paprica\",\n    \"parabola\",\n    \"parcella\",\n    \"parere\",\n    \"pargolo\",\n    \"pari\",\n    \"parlato\",\n    \"parola\",\n    \"partire\",\n    \"parvenza\",\n    \"parziale\",\n    \"passivo\",\n    \"pasticca\",\n    \"patacca\",\n    \"patologia\",\n    \"pattume\",\n    \"pavone\",\n    \"peccato\",\n    \"pedalare\",\n    \"pedonale\",\n    \"peggio\",\n    \"peloso\",\n    \"penare\",\n    \"pendice\",\n    \"penisola\",\n    \"pennuto\",\n    \"penombra\",\n    \"pensare\",\n    \"pentola\",\n    \"pepe\",\n    \"pepita\",\n    \"perbene\",\n    \"percorso\",\n    \"perdonato\",\n    \"perforare\",\n    \"pergamena\",\n    \"periodo\",\n    \"permesso\",\n    \"perno\",\n    \"perplesso\",\n    \"persuaso\",\n    \"pertugio\",\n    \"pervaso\",\n    \"pesatore\",\n    \"pesista\",\n    \"peso\",\n    \"pestifero\",\n    \"petalo\",\n    \"pettine\",\n    \"petulante\",\n    \"pezzo\",\n    \"piacere\",\n    \"pianta\",\n    \"piattino\",\n    \"piccino\",\n    \"picozza\",\n    \"piega\",\n    \"pietra\",\n    \"piffero\",\n    \"pigiama\",\n    \"pigolio\",\n    \"pigro\",\n    \"pila\",\n    \"pilifero\",\n    \"pillola\",\n    \"pilota\",\n    \"pimpante\",\n    \"pineta\",\n    \"pinna\",\n    \"pinolo\",\n    \"pioggia\",\n    \"piombo\",\n    \"piramide\",\n    \"piretico\",\n    \"pirite\",\n    \"pirolisi\",\n    \"pitone\",\n    \"pizzico\",\n    \"placebo\",\n    \"planare\",\n    \"plasma\",\n    \"platano\",\n    \"plenario\",\n    \"pochezza\",\n    \"poderoso\",\n    \"podismo\",\n    \"poesia\",\n    \"poggiare\",\n    \"polenta\",\n    \"poligono\",\n    \"pollice\",\n    \"polmonite\",\n    \"polpetta\",\n    \"polso\",\n    \"poltrona\",\n    \"polvere\",\n    \"pomice\",\n    \"pomodoro\",\n    \"ponte\",\n    \"popoloso\",\n    \"porfido\",\n    \"poroso\",\n    \"porpora\",\n    \"porre\",\n    \"portata\",\n    \"posa\",\n    \"positivo\",\n    \"possesso\",\n    \"postulato\",\n    \"potassio\",\n    \"potere\",\n    \"pranzo\",\n    \"prassi\",\n    \"pratica\",\n    \"precluso\",\n    \"predica\",\n    \"prefisso\",\n    \"pregiato\",\n    \"prelievo\",\n    \"premere\",\n    \"prenotare\",\n    \"preparato\",\n    \"presenza\",\n    \"pretesto\",\n    \"prevalso\",\n    \"prima\",\n    \"principe\",\n    \"privato\",\n    \"problema\",\n    \"procura\",\n    \"produrre\",\n    \"profumo\",\n    \"progetto\",\n    \"prolunga\",\n    \"promessa\",\n    \"pronome\",\n    \"proposta\",\n    \"proroga\",\n    \"proteso\",\n    \"prova\",\n    \"prudente\",\n    \"prugna\",\n    \"prurito\",\n    \"psiche\",\n    \"pubblico\",\n    \"pudica\",\n    \"pugilato\",\n    \"pugno\",\n    \"pulce\",\n    \"pulito\",\n    \"pulsante\",\n    \"puntare\",\n    \"pupazzo\",\n    \"pupilla\",\n    \"puro\",\n    \"quadro\",\n    \"qualcosa\",\n    \"quasi\",\n    \"querela\",\n    \"quota\",\n    \"raccolto\",\n    \"raddoppio\",\n    \"radicale\",\n    \"radunato\",\n    \"raffica\",\n    \"ragazzo\",\n    \"ragione\",\n    \"ragno\",\n    \"ramarro\",\n    \"ramingo\",\n    \"ramo\",\n    \"randagio\",\n    \"rantolare\",\n    \"rapato\",\n    \"rapina\",\n    \"rappreso\",\n    \"rasatura\",\n    \"raschiato\",\n    \"rasente\",\n    \"rassegna\",\n    \"rastrello\",\n    \"rata\",\n    \"ravveduto\",\n    \"reale\",\n    \"recepire\",\n    \"recinto\",\n    \"recluta\",\n    \"recondito\",\n    \"recupero\",\n    \"reddito\",\n    \"redimere\",\n    \"regalato\",\n    \"registro\",\n    \"regola\",\n    \"regresso\",\n    \"relazione\",\n    \"remare\",\n    \"remoto\",\n    \"renna\",\n    \"replica\",\n    \"reprimere\",\n    \"reputare\",\n    \"resa\",\n    \"residente\",\n    \"responso\",\n    \"restauro\",\n    \"rete\",\n    \"retina\",\n    \"retorica\",\n    \"rettifica\",\n    \"revocato\",\n    \"riassunto\",\n    \"ribadire\",\n    \"ribelle\",\n    \"ribrezzo\",\n    \"ricarica\",\n    \"ricco\",\n    \"ricevere\",\n    \"riciclato\",\n    \"ricordo\",\n    \"ricreduto\",\n    \"ridicolo\",\n    \"ridurre\",\n    \"rifasare\",\n    \"riflesso\",\n    \"riforma\",\n    \"rifugio\",\n    \"rigare\",\n    \"rigettato\",\n    \"righello\",\n    \"rilassato\",\n    \"rilevato\",\n    \"rimanere\",\n    \"rimbalzo\",\n    \"rimedio\",\n    \"rimorchio\",\n    \"rinascita\",\n    \"rincaro\",\n    \"rinforzo\",\n    \"rinnovo\",\n    \"rinomato\",\n    \"rinsavito\",\n    \"rintocco\",\n    \"rinuncia\",\n    \"rinvenire\",\n    \"riparato\",\n    \"ripetuto\",\n    \"ripieno\",\n    \"riportare\",\n    \"ripresa\",\n    \"ripulire\",\n    \"risata\",\n    \"rischio\",\n    \"riserva\",\n    \"risibile\",\n    \"riso\",\n    \"rispetto\",\n    \"ristoro\",\n    \"risultato\",\n    \"risvolto\",\n    \"ritardo\",\n    \"ritegno\",\n    \"ritmico\",\n    \"ritrovo\",\n    \"riunione\",\n    \"riva\",\n    \"riverso\",\n    \"rivincita\",\n    \"rivolto\",\n    \"rizoma\",\n    \"roba\",\n    \"robotico\",\n    \"robusto\",\n    \"roccia\",\n    \"roco\",\n    \"rodaggio\",\n    \"rodere\",\n    \"roditore\",\n    \"rogito\",\n    \"rollio\",\n    \"romantico\",\n    \"rompere\",\n    \"ronzio\",\n    \"rosolare\",\n    \"rospo\",\n    \"rotante\",\n    \"rotondo\",\n    \"rotula\",\n    \"rovescio\",\n    \"rubizzo\",\n    \"rubrica\",\n    \"ruga\",\n    \"rullino\",\n    \"rumine\",\n    \"rumoroso\",\n    \"ruolo\",\n    \"rupe\",\n    \"russare\",\n    \"rustico\",\n    \"sabato\",\n    \"sabbiare\",\n    \"sabotato\",\n    \"sagoma\",\n    \"salasso\",\n    \"saldatura\",\n    \"salgemma\",\n    \"salivare\",\n    \"salmone\",\n    \"salone\",\n    \"saltare\",\n    \"saluto\",\n    \"salvo\",\n    \"sapere\",\n    \"sapido\",\n    \"saporito\",\n    \"saraceno\",\n    \"sarcasmo\",\n    \"sarto\",\n    \"sassoso\",\n    \"satellite\",\n    \"satira\",\n    \"satollo\",\n    \"saturno\",\n    \"savana\",\n    \"savio\",\n    \"saziato\",\n    \"sbadiglio\",\n    \"sbalzo\",\n    \"sbancato\",\n    \"sbarra\",\n    \"sbattere\",\n    \"sbavare\",\n    \"sbendare\",\n    \"sbirciare\",\n    \"sbloccato\",\n    \"sbocciato\",\n    \"sbrinare\",\n    \"sbruffone\",\n    \"sbuffare\",\n    \"scabroso\",\n    \"scadenza\",\n    \"scala\",\n    \"scambiare\",\n    \"scandalo\",\n    \"scapola\",\n    \"scarso\",\n    \"scatenare\",\n    \"scavato\",\n    \"scelto\",\n    \"scenico\",\n    \"scettro\",\n    \"scheda\",\n    \"schiena\",\n    \"sciarpa\",\n    \"scienza\",\n    \"scindere\",\n    \"scippo\",\n    \"sciroppo\",\n    \"scivolo\",\n    \"sclerare\",\n    \"scodella\",\n    \"scolpito\",\n    \"scomparto\",\n    \"sconforto\",\n    \"scoprire\",\n    \"scorta\",\n    \"scossone\",\n    \"scozzese\",\n    \"scriba\",\n    \"scrollare\",\n    \"scrutinio\",\n    \"scuderia\",\n    \"scultore\",\n    \"scuola\",\n    \"scuro\",\n    \"scusare\",\n    \"sdebitare\",\n    \"sdoganare\",\n    \"seccatura\",\n    \"secondo\",\n    \"sedano\",\n    \"seggiola\",\n    \"segnalato\",\n    \"segregato\",\n    \"seguito\",\n    \"selciato\",\n    \"selettivo\",\n    \"sella\",\n    \"selvaggio\",\n    \"semaforo\",\n    \"sembrare\",\n    \"seme\",\n    \"seminato\",\n    \"sempre\",\n    \"senso\",\n    \"sentire\",\n    \"sepolto\",\n    \"sequenza\",\n    \"serata\",\n    \"serbato\",\n    \"sereno\",\n    \"serio\",\n    \"serpente\",\n    \"serraglio\",\n    \"servire\",\n    \"sestina\",\n    \"setola\",\n    \"settimana\",\n    \"sfacelo\",\n    \"sfaldare\",\n    \"sfamato\",\n    \"sfarzoso\",\n    \"sfaticato\",\n    \"sfera\",\n    \"sfida\",\n    \"sfilato\",\n    \"sfinge\",\n    \"sfocato\",\n    \"sfoderare\",\n    \"sfogo\",\n    \"sfoltire\",\n    \"sforzato\",\n    \"sfratto\",\n    \"sfruttato\",\n    \"sfuggito\",\n    \"sfumare\",\n    \"sfuso\",\n    \"sgabello\",\n    \"sgarbato\",\n    \"sgonfiare\",\n    \"sgorbio\",\n    \"sgrassato\",\n    \"sguardo\",\n    \"sibilo\",\n    \"siccome\",\n    \"sierra\",\n    \"sigla\",\n    \"signore\",\n    \"silenzio\",\n    \"sillaba\",\n    \"simbolo\",\n    \"simpatico\",\n    \"simulato\",\n    \"sinfonia\",\n    \"singolo\",\n    \"sinistro\",\n    \"sino\",\n    \"sintesi\",\n    \"sinusoide\",\n    \"sipario\",\n    \"sisma\",\n    \"sistole\",\n    \"situato\",\n    \"slitta\",\n    \"slogatura\",\n    \"sloveno\",\n    \"smarrito\",\n    \"smemorato\",\n    \"smentito\",\n    \"smeraldo\",\n    \"smilzo\",\n    \"smontare\",\n    \"smottato\",\n    \"smussato\",\n    \"snellire\",\n    \"snervato\",\n    \"snodo\",\n    \"sobbalzo\",\n    \"sobrio\",\n    \"soccorso\",\n    \"sociale\",\n    \"sodale\",\n    \"soffitto\",\n    \"sogno\",\n    \"soldato\",\n    \"solenne\",\n    \"solido\",\n    \"sollazzo\",\n    \"solo\",\n    \"solubile\",\n    \"solvente\",\n    \"somatico\",\n    \"somma\",\n    \"sonda\",\n    \"sonetto\",\n    \"sonnifero\",\n    \"sopire\",\n    \"soppeso\",\n    \"sopra\",\n    \"sorgere\",\n    \"sorpasso\",\n    \"sorriso\",\n    \"sorso\",\n    \"sorteggio\",\n    \"sorvolato\",\n    \"sospiro\",\n    \"sosta\",\n    \"sottile\",\n    \"spada\",\n    \"spalla\",\n    \"spargere\",\n    \"spatola\",\n    \"spavento\",\n    \"spazzola\",\n    \"specie\",\n    \"spedire\",\n    \"spegnere\",\n    \"spelatura\",\n    \"speranza\",\n    \"spessore\",\n    \"spettrale\",\n    \"spezzato\",\n    \"spia\",\n    \"spigoloso\",\n    \"spillato\",\n    \"spinoso\",\n    \"spirale\",\n    \"splendido\",\n    \"sportivo\",\n    \"sposo\",\n    \"spranga\",\n    \"sprecare\",\n    \"spronato\",\n    \"spruzzo\",\n    \"spuntino\",\n    \"squillo\",\n    \"sradicare\",\n    \"srotolato\",\n    \"stabile\",\n    \"stacco\",\n    \"staffa\",\n    \"stagnare\",\n    \"stampato\",\n    \"stantio\",\n    \"starnuto\",\n    \"stasera\",\n    \"statuto\",\n    \"stelo\",\n    \"steppa\",\n    \"sterzo\",\n    \"stiletto\",\n    \"stima\",\n    \"stirpe\",\n    \"stivale\",\n    \"stizzoso\",\n    \"stonato\",\n    \"storico\",\n    \"strappo\",\n    \"stregato\",\n    \"stridulo\",\n    \"strozzare\",\n    \"strutto\",\n    \"stuccare\",\n    \"stufo\",\n    \"stupendo\",\n    \"subentro\",\n    \"succoso\",\n    \"sudore\",\n    \"suggerito\",\n    \"sugo\",\n    \"sultano\",\n    \"suonare\",\n    \"superbo\",\n    \"supporto\",\n    \"surgelato\",\n    \"surrogato\",\n    \"sussurro\",\n    \"sutura\",\n    \"svagare\",\n    \"svedese\",\n    \"sveglio\",\n    \"svelare\",\n    \"svenuto\",\n    \"svezia\",\n    \"sviluppo\",\n    \"svista\",\n    \"svizzera\",\n    \"svolta\",\n    \"svuotare\",\n    \"tabacco\",\n    \"tabulato\",\n    \"tacciare\",\n    \"taciturno\",\n    \"tale\",\n    \"talismano\",\n    \"tampone\",\n    \"tannino\",\n    \"tara\",\n    \"tardivo\",\n    \"targato\",\n    \"tariffa\",\n    \"tarpare\",\n    \"tartaruga\",\n    \"tasto\",\n    \"tattico\",\n    \"taverna\",\n    \"tavolata\",\n    \"tazza\",\n    \"teca\",\n    \"tecnico\",\n    \"telefono\",\n    \"temerario\",\n    \"tempo\",\n    \"temuto\",\n    \"tendone\",\n    \"tenero\",\n    \"tensione\",\n    \"tentacolo\",\n    \"teorema\",\n    \"terme\",\n    \"terrazzo\",\n    \"terzetto\",\n    \"tesi\",\n    \"tesserato\",\n    \"testato\",\n    \"tetro\",\n    \"tettoia\",\n    \"tifare\",\n    \"tigella\",\n    \"timbro\",\n    \"tinto\",\n    \"tipico\",\n    \"tipografo\",\n    \"tiraggio\",\n    \"tiro\",\n    \"titanio\",\n    \"titolo\",\n    \"titubante\",\n    \"tizio\",\n    \"tizzone\",\n    \"toccare\",\n    \"tollerare\",\n    \"tolto\",\n    \"tombola\",\n    \"tomo\",\n    \"tonfo\",\n    \"tonsilla\",\n    \"topazio\",\n    \"topologia\",\n    \"toppa\",\n    \"torba\",\n    \"tornare\",\n    \"torrone\",\n    \"tortora\",\n    \"toscano\",\n    \"tossire\",\n    \"tostatura\",\n    \"totano\",\n    \"trabocco\",\n    \"trachea\",\n    \"trafila\",\n    \"tragedia\",\n    \"tralcio\",\n    \"tramonto\",\n    \"transito\",\n    \"trapano\",\n    \"trarre\",\n    \"trasloco\",\n    \"trattato\",\n    \"trave\",\n    \"treccia\",\n    \"tremolio\",\n    \"trespolo\",\n    \"tributo\",\n    \"tricheco\",\n    \"trifoglio\",\n    \"trillo\",\n    \"trincea\",\n    \"trio\",\n    \"tristezza\",\n    \"triturato\",\n    \"trivella\",\n    \"tromba\",\n    \"trono\",\n    \"troppo\",\n    \"trottola\",\n    \"trovare\",\n    \"truccato\",\n    \"tubatura\",\n    \"tuffato\",\n    \"tulipano\",\n    \"tumulto\",\n    \"tunisia\",\n    \"turbare\",\n    \"turchino\",\n    \"tuta\",\n    \"tutela\",\n    \"ubicato\",\n    \"uccello\",\n    \"uccisore\",\n    \"udire\",\n    \"uditivo\",\n    \"uffa\",\n    \"ufficio\",\n    \"uguale\",\n    \"ulisse\",\n    \"ultimato\",\n    \"umano\",\n    \"umile\",\n    \"umorismo\",\n    \"uncinetto\",\n    \"ungere\",\n    \"ungherese\",\n    \"unicorno\",\n    \"unificato\",\n    \"unisono\",\n    \"unitario\",\n    \"unte\",\n    \"uovo\",\n    \"upupa\",\n    \"uragano\",\n    \"urgenza\",\n    \"urlo\",\n    \"usanza\",\n    \"usato\",\n    \"uscito\",\n    \"usignolo\",\n    \"usuraio\",\n    \"utensile\",\n    \"utilizzo\",\n    \"utopia\",\n    \"vacante\",\n    \"vaccinato\",\n    \"vagabondo\",\n    \"vagliato\",\n    \"valanga\",\n    \"valgo\",\n    \"valico\",\n    \"valletta\",\n    \"valoroso\",\n    \"valutare\",\n    \"valvola\",\n    \"vampata\",\n    \"vangare\",\n    \"vanitoso\",\n    \"vano\",\n    \"vantaggio\",\n    \"vanvera\",\n    \"vapore\",\n    \"varano\",\n    \"varcato\",\n    \"variante\",\n    \"vasca\",\n    \"vedetta\",\n    \"vedova\",\n    \"veduto\",\n    \"vegetale\",\n    \"veicolo\",\n    \"velcro\",\n    \"velina\",\n    \"velluto\",\n    \"veloce\",\n    \"venato\",\n    \"vendemmia\",\n    \"vento\",\n    \"verace\",\n    \"verbale\",\n    \"vergogna\",\n    \"verifica\",\n    \"vero\",\n    \"verruca\",\n    \"verticale\",\n    \"vescica\",\n    \"vessillo\",\n    \"vestale\",\n    \"veterano\",\n    \"vetrina\",\n    \"vetusto\",\n    \"viandante\",\n    \"vibrante\",\n    \"vicenda\",\n    \"vichingo\",\n    \"vicinanza\",\n    \"vidimare\",\n    \"vigilia\",\n    \"vigneto\",\n    \"vigore\",\n    \"vile\",\n    \"villano\",\n    \"vimini\",\n    \"vincitore\",\n    \"viola\",\n    \"vipera\",\n    \"virgola\",\n    \"virologo\",\n    \"virulento\",\n    \"viscoso\",\n    \"visione\",\n    \"vispo\",\n    \"vissuto\",\n    \"visura\",\n    \"vita\",\n    \"vitello\",\n    \"vittima\",\n    \"vivanda\",\n    \"vivido\",\n    \"viziare\",\n    \"voce\",\n    \"voga\",\n    \"volatile\",\n    \"volere\",\n    \"volpe\",\n    \"voragine\",\n    \"vulcano\",\n    \"zampogna\",\n    \"zanna\",\n    \"zappato\",\n    \"zattera\",\n    \"zavorra\",\n    \"zefiro\",\n    \"zelante\",\n    \"zelo\",\n    \"zenzero\",\n    \"zerbino\",\n    \"zibetto\",\n    \"zinco\",\n    \"zircone\",\n    \"zitto\",\n    \"zolla\",\n    \"zotico\",\n    \"zucchero\",\n    \"zufolo\",\n    \"zulu\",\n    \"zuppa\"\n]\n[\n    \"あいこくしん\",\n    \"あいさつ\",\n    \"あいだ\",\n    \"あおぞら\",\n    \"あかちゃん\",\n    \"あきる\",\n    \"あけがた\",\n    \"あける\",\n    \"あこがれる\",\n    \"あさい\",\n    \"あさひ\",\n    \"あしあと\",\n    \"あじわう\",\n    \"あずかる\",\n    \"あずき\",\n    \"あそぶ\",\n    \"あたえる\",\n    \"あたためる\",\n    \"あたりまえ\",\n    \"あたる\",\n    \"あつい\",\n    \"あつかう\",\n    \"あっしゅく\",\n    \"あつまり\",\n    \"あつめる\",\n    \"あてな\",\n    \"あてはまる\",\n    \"あひる\",\n    \"あぶら\",\n    \"あぶる\",\n    \"あふれる\",\n    \"あまい\",\n    \"あまど\",\n    \"あまやかす\",\n    \"あまり\",\n    \"あみもの\",\n    \"あめりか\",\n    \"あやまる\",\n    \"あゆむ\",\n    \"あらいぐま\",\n    \"あらし\",\n    \"あらすじ\",\n    \"あらためる\",\n    \"あらゆる\",\n    \"あらわす\",\n    \"ありがとう\",\n    \"あわせる\",\n    \"あわてる\",\n    \"あんい\",\n    \"あんがい\",\n    \"あんこ\",\n    \"あんぜん\",\n    \"あんてい\",\n    \"あんない\",\n    \"あんまり\",\n    \"いいだす\",\n    \"いおん\",\n    \"いがい\",\n    \"いがく\",\n    \"いきおい\",\n    \"いきなり\",\n    \"いきもの\",\n    \"いきる\",\n    \"いくじ\",\n    \"いくぶん\",\n    \"いけばな\",\n    \"いけん\",\n    \"いこう\",\n    \"いこく\",\n    \"いこつ\",\n    \"いさましい\",\n    \"いさん\",\n    \"いしき\",\n    \"いじゅう\",\n    \"いじょう\",\n    \"いじわる\",\n    \"いずみ\",\n    \"いずれ\",\n    \"いせい\",\n    \"いせえび\",\n    \"いせかい\",\n    \"いせき\",\n    \"いぜん\",\n    \"いそうろう\",\n    \"いそがしい\",\n    \"いだい\",\n    \"いだく\",\n    \"いたずら\",\n    \"いたみ\",\n    \"いたりあ\",\n    \"いちおう\",\n    \"いちじ\",\n    \"いちど\",\n    \"いちば\",\n    \"いちぶ\",\n    \"いちりゅう\",\n    \"いつか\",\n    \"いっしゅん\",\n    \"いっせい\",\n    \"いっそう\",\n    \"いったん\",\n    \"いっち\",\n    \"いってい\",\n    \"いっぽう\",\n    \"いてざ\",\n    \"いてん\",\n    \"いどう\",\n    \"いとこ\",\n    \"いない\",\n    \"いなか\",\n    \"いねむり\",\n    \"いのち\",\n    \"いのる\",\n    \"いはつ\",\n    \"いばる\",\n    \"いはん\",\n    \"いびき\",\n    \"いひん\",\n    \"いふく\",\n    \"いへん\",\n    \"いほう\",\n    \"いみん\",\n    \"いもうと\",\n    \"いもたれ\",\n    \"いもり\",\n    \"いやがる\",\n    \"いやす\",\n    \"いよかん\",\n    \"いよく\",\n    \"いらい\",\n    \"いらすと\",\n    \"いりぐち\",\n    \"いりょう\",\n    \"いれい\",\n    \"いれもの\",\n    \"いれる\",\n    \"いろえんぴつ\",\n    \"いわい\",\n    \"いわう\",\n    \"いわかん\",\n    \"いわば\",\n    \"いわゆる\",\n    \"いんげんまめ\",\n    \"いんさつ\",\n    \"いんしょう\",\n    \"いんよう\",\n    \"うえき\",\n    \"うえる\",\n    \"うおざ\",\n    \"うがい\",\n    \"うかぶ\",\n    \"うかべる\",\n    \"うきわ\",\n    \"うくらいな\",\n    \"うくれれ\",\n    \"うけたまわる\",\n    \"うけつけ\",\n    \"うけとる\",\n    \"うけもつ\",\n    \"うける\",\n    \"うごかす\",\n    \"うごく\",\n    \"うこん\",\n    \"うさぎ\",\n    \"うしなう\",\n    \"うしろがみ\",\n    \"うすい\",\n    \"うすぎ\",\n    \"うすぐらい\",\n    \"うすめる\",\n    \"うせつ\",\n    \"うちあわせ\",\n    \"うちがわ\",\n    \"うちき\",\n    \"うちゅう\",\n    \"うっかり\",\n    \"うつくしい\",\n    \"うったえる\",\n    \"うつる\",\n    \"うどん\",\n    \"うなぎ\",\n    \"うなじ\",\n    \"うなずく\",\n    \"うなる\",\n    \"うねる\",\n    \"うのう\",\n    \"うぶげ\",\n    \"うぶごえ\",\n    \"うまれる\",\n    \"うめる\",\n    \"うもう\",\n    \"うやまう\",\n    \"うよく\",\n    \"うらがえす\",\n    \"うらぐち\",\n    \"うらない\",\n    \"うりあげ\",\n    \"うりきれ\",\n    \"うるさい\",\n    \"うれしい\",\n    \"うれゆき\",\n    \"うれる\",\n    \"うろこ\",\n    \"うわき\",\n    \"うわさ\",\n    \"うんこう\",\n    \"うんちん\",\n    \"うんてん\",\n    \"うんどう\",\n    \"えいえん\",\n    \"えいが\",\n    \"えいきょう\",\n    \"えいご\",\n    \"えいせい\",\n    \"えいぶん\",\n    \"えいよう\",\n    \"えいわ\",\n    \"えおり\",\n    \"えがお\",\n    \"えがく\",\n    \"えきたい\",\n    \"えくせる\",\n    \"えしゃく\",\n    \"えすて\",\n    \"えつらん\",\n    \"えのぐ\",\n    \"えほうまき\",\n    \"えほん\",\n    \"えまき\",\n    \"えもじ\",\n    \"えもの\",\n    \"えらい\",\n    \"えらぶ\",\n    \"えりあ\",\n    \"えんえん\",\n    \"えんかい\",\n    \"えんぎ\",\n    \"えんげき\",\n    \"えんしゅう\",\n    \"えんぜつ\",\n    \"えんそく\",\n    \"えんちょう\",\n    \"えんとつ\",\n    \"おいかける\",\n    \"おいこす\",\n    \"おいしい\",\n    \"おいつく\",\n    \"おうえん\",\n    \"おうさま\",\n    \"おうじ\",\n    \"おうせつ\",\n    \"おうたい\",\n    \"おうふく\",\n    \"おうべい\",\n    \"おうよう\",\n    \"おえる\",\n    \"おおい\",\n    \"おおう\",\n    \"おおどおり\",\n    \"おおや\",\n    \"おおよそ\",\n    \"おかえり\",\n    \"おかず\",\n    \"おがむ\",\n    \"おかわり\",\n    \"おぎなう\",\n    \"おきる\",\n    \"おくさま\",\n    \"おくじょう\",\n    \"おくりがな\",\n    \"おくる\",\n    \"おくれる\",\n    \"おこす\",\n    \"おこなう\",\n    \"おこる\",\n    \"おさえる\",\n    \"おさない\",\n    \"おさめる\",\n    \"おしいれ\",\n    \"おしえる\",\n    \"おじぎ\",\n    \"おじさん\",\n    \"おしゃれ\",\n    \"おそらく\",\n    \"おそわる\",\n    \"おたがい\",\n    \"おたく\",\n    \"おだやか\",\n    \"おちつく\",\n    \"おっと\",\n    \"おつり\",\n    \"おでかけ\",\n    \"おとしもの\",\n    \"おとなしい\",\n    \"おどり\",\n    \"おどろかす\",\n    \"おばさん\",\n    \"おまいり\",\n    \"おめでとう\",\n    \"おもいで\",\n    \"おもう\",\n    \"おもたい\",\n    \"おもちゃ\",\n    \"おやつ\",\n    \"おやゆび\",\n    \"およぼす\",\n    \"おらんだ\",\n    \"おろす\",\n    \"おんがく\",\n    \"おんけい\",\n    \"おんしゃ\",\n    \"おんせん\",\n    \"おんだん\",\n    \"おんちゅう\",\n    \"おんどけい\",\n    \"かあつ\",\n    \"かいが\",\n    \"がいき\",\n    \"がいけん\",\n    \"がいこう\",\n    \"かいさつ\",\n    \"かいしゃ\",\n    \"かいすいよく\",\n    \"かいぜん\",\n    \"かいぞうど\",\n    \"かいつう\",\n    \"かいてん\",\n    \"かいとう\",\n    \"かいふく\",\n    \"がいへき\",\n    \"かいほう\",\n    \"かいよう\",\n    \"がいらい\",\n    \"かいわ\",\n    \"かえる\",\n    \"かおり\",\n    \"かかえる\",\n    \"かがく\",\n    \"かがし\",\n    \"かがみ\",\n    \"かくご\",\n    \"かくとく\",\n    \"かざる\",\n    \"がぞう\",\n    \"かたい\",\n    \"かたち\",\n    \"がちょう\",\n    \"がっきゅう\",\n    \"がっこう\",\n    \"がっさん\",\n    \"がっしょう\",\n    \"かなざわし\",\n    \"かのう\",\n    \"がはく\",\n    \"かぶか\",\n    \"かほう\",\n    \"かほご\",\n    \"かまう\",\n    \"かまぼこ\",\n    \"かめれおん\",\n    \"かゆい\",\n    \"かようび\",\n    \"からい\",\n    \"かるい\",\n    \"かろう\",\n    \"かわく\",\n    \"かわら\",\n    \"がんか\",\n    \"かんけい\",\n    \"かんこう\",\n    \"かんしゃ\",\n    \"かんそう\",\n    \"かんたん\",\n    \"かんち\",\n    \"がんばる\",\n    \"きあい\",\n    \"きあつ\",\n    \"きいろ\",\n    \"ぎいん\",\n    \"きうい\",\n    \"きうん\",\n    \"きえる\",\n    \"きおう\",\n    \"きおく\",\n    \"きおち\",\n    \"きおん\",\n    \"きかい\",\n    \"きかく\",\n    \"きかんしゃ\",\n    \"ききて\",\n    \"きくばり\",\n    \"きくらげ\",\n    \"きけんせい\",\n    \"きこう\",\n    \"きこえる\",\n    \"きこく\",\n    \"きさい\",\n    \"きさく\",\n    \"きさま\",\n    \"きさらぎ\",\n    \"ぎじかがく\",\n    \"ぎしき\",\n    \"ぎじたいけん\",\n    \"ぎじにってい\",\n    \"ぎじゅつしゃ\",\n    \"きすう\",\n    \"きせい\",\n    \"きせき\",\n    \"きせつ\",\n    \"きそう\",\n    \"きぞく\",\n    \"きぞん\",\n    \"きたえる\",\n    \"きちょう\",\n    \"きつえん\",\n    \"ぎっちり\",\n    \"きつつき\",\n    \"きつね\",\n    \"きてい\",\n    \"きどう\",\n    \"きどく\",\n    \"きない\",\n    \"きなが\",\n    \"きなこ\",\n    \"きぬごし\",\n    \"きねん\",\n    \"きのう\",\n    \"きのした\",\n    \"きはく\",\n    \"きびしい\",\n    \"きひん\",\n    \"きふく\",\n    \"きぶん\",\n    \"きぼう\",\n    \"きほん\",\n    \"きまる\",\n    \"きみつ\",\n    \"きむずかしい\",\n    \"きめる\",\n    \"きもだめし\",\n    \"きもち\",\n    \"きもの\",\n    \"きゃく\",\n    \"きやく\",\n    \"ぎゅうにく\",\n    \"きよう\",\n    \"きょうりゅう\",\n    \"きらい\",\n    \"きらく\",\n    \"きりん\",\n    \"きれい\",\n    \"きれつ\",\n    \"きろく\",\n    \"ぎろん\",\n    \"きわめる\",\n    \"ぎんいろ\",\n    \"きんかくじ\",\n    \"きんじょ\",\n    \"きんようび\",\n    \"ぐあい\",\n    \"くいず\",\n    \"くうかん\",\n    \"くうき\",\n    \"くうぐん\",\n    \"くうこう\",\n    \"ぐうせい\",\n    \"くうそう\",\n    \"ぐうたら\",\n    \"くうふく\",\n    \"くうぼ\",\n    \"くかん\",\n    \"くきょう\",\n    \"くげん\",\n    \"ぐこう\",\n    \"くさい\",\n    \"くさき\",\n    \"くさばな\",\n    \"くさる\",\n    \"くしゃみ\",\n    \"くしょう\",\n    \"くすのき\",\n    \"くすりゆび\",\n    \"くせげ\",\n    \"くせん\",\n    \"ぐたいてき\",\n    \"くださる\",\n    \"くたびれる\",\n    \"くちこみ\",\n    \"くちさき\",\n    \"くつした\",\n    \"ぐっすり\",\n    \"くつろぐ\",\n    \"くとうてん\",\n    \"くどく\",\n    \"くなん\",\n    \"くねくね\",\n    \"くのう\",\n    \"くふう\",\n    \"くみあわせ\",\n    \"くみたてる\",\n    \"くめる\",\n    \"くやくしょ\",\n    \"くらす\",\n    \"くらべる\",\n    \"くるま\",\n    \"くれる\",\n    \"くろう\",\n    \"くわしい\",\n    \"ぐんかん\",\n    \"ぐんしょく\",\n    \"ぐんたい\",\n    \"ぐんて\",\n    \"けあな\",\n    \"けいかく\",\n    \"けいけん\",\n    \"けいこ\",\n    \"けいさつ\",\n    \"げいじゅつ\",\n    \"けいたい\",\n    \"げいのうじん\",\n    \"けいれき\",\n    \"けいろ\",\n    \"けおとす\",\n    \"けおりもの\",\n    \"げきか\",\n    \"げきげん\",\n    \"げきだん\",\n    \"げきちん\",\n    \"げきとつ\",\n    \"げきは\",\n    \"げきやく\",\n    \"げこう\",\n    \"げこくじょう\",\n    \"げざい\",\n    \"けさき\",\n    \"げざん\",\n    \"けしき\",\n    \"けしごむ\",\n    \"けしょう\",\n    \"げすと\",\n    \"けたば\",\n    \"けちゃっぷ\",\n    \"けちらす\",\n    \"けつあつ\",\n    \"けつい\",\n    \"けつえき\",\n    \"けっこん\",\n    \"けつじょ\",\n    \"けっせき\",\n    \"けってい\",\n    \"けつまつ\",\n    \"げつようび\",\n    \"げつれい\",\n    \"けつろん\",\n    \"げどく\",\n    \"けとばす\",\n    \"けとる\",\n    \"けなげ\",\n    \"けなす\",\n    \"けなみ\",\n    \"けぬき\",\n    \"げねつ\",\n    \"けねん\",\n    \"けはい\",\n    \"げひん\",\n    \"けぶかい\",\n    \"げぼく\",\n    \"けまり\",\n    \"けみかる\",\n    \"けむし\",\n    \"けむり\",\n    \"けもの\",\n    \"けらい\",\n    \"けろけろ\",\n    \"けわしい\",\n    \"けんい\",\n    \"けんえつ\",\n    \"けんお\",\n    \"けんか\",\n    \"げんき\",\n    \"けんげん\",\n    \"けんこう\",\n    \"けんさく\",\n    \"けんしゅう\",\n    \"けんすう\",\n    \"げんそう\",\n    \"けんちく\",\n    \"けんてい\",\n    \"けんとう\",\n    \"けんない\",\n    \"けんにん\",\n    \"げんぶつ\",\n    \"けんま\",\n    \"けんみん\",\n    \"けんめい\",\n    \"けんらん\",\n    \"けんり\",\n    \"こあくま\",\n    \"こいぬ\",\n    \"こいびと\",\n    \"ごうい\",\n    \"こうえん\",\n    \"こうおん\",\n    \"こうかん\",\n    \"ごうきゅう\",\n    \"ごうけい\",\n    \"こうこう\",\n    \"こうさい\",\n    \"こうじ\",\n    \"こうすい\",\n    \"ごうせい\",\n    \"こうそく\",\n    \"こうたい\",\n    \"こうちゃ\",\n    \"こうつう\",\n    \"こうてい\",\n    \"こうどう\",\n    \"こうない\",\n    \"こうはい\",\n    \"ごうほう\",\n    \"ごうまん\",\n    \"こうもく\",\n    \"こうりつ\",\n    \"こえる\",\n    \"こおり\",\n    \"ごかい\",\n    \"ごがつ\",\n    \"ごかん\",\n    \"こくご\",\n    \"こくさい\",\n    \"こくとう\",\n    \"こくない\",\n    \"こくはく\",\n    \"こぐま\",\n    \"こけい\",\n    \"こける\",\n    \"ここのか\",\n    \"こころ\",\n    \"こさめ\",\n    \"こしつ\",\n    \"こすう\",\n    \"こせい\",\n    \"こせき\",\n    \"こぜん\",\n    \"こそだて\",\n    \"こたい\",\n    \"こたえる\",\n    \"こたつ\",\n    \"こちょう\",\n    \"こっか\",\n    \"こつこつ\",\n    \"こつばん\",\n    \"こつぶ\",\n    \"こてい\",\n    \"こてん\",\n    \"ことがら\",\n    \"ことし\",\n    \"ことば\",\n    \"ことり\",\n    \"こなごな\",\n    \"こねこね\",\n    \"このまま\",\n    \"このみ\",\n    \"このよ\",\n    \"ごはん\",\n    \"こひつじ\",\n    \"こふう\",\n    \"こふん\",\n    \"こぼれる\",\n    \"ごまあぶら\",\n    \"こまかい\",\n    \"ごますり\",\n    \"こまつな\",\n    \"こまる\",\n    \"こむぎこ\",\n    \"こもじ\",\n    \"こもち\",\n    \"こもの\",\n    \"こもん\",\n    \"こやく\",\n    \"こやま\",\n    \"こゆう\",\n    \"こゆび\",\n    \"こよい\",\n    \"こよう\",\n    \"こりる\",\n    \"これくしょん\",\n    \"ころっけ\",\n    \"こわもて\",\n    \"こわれる\",\n    \"こんいん\",\n    \"こんかい\",\n    \"こんき\",\n    \"こんしゅう\",\n    \"こんすい\",\n    \"こんだて\",\n    \"こんとん\",\n    \"こんなん\",\n    \"こんびに\",\n    \"こんぽん\",\n    \"こんまけ\",\n    \"こんや\",\n    \"こんれい\",\n    \"こんわく\",\n    \"ざいえき\",\n    \"さいかい\",\n    \"さいきん\",\n    \"ざいげん\",\n    \"ざいこ\",\n    \"さいしょ\",\n    \"さいせい\",\n    \"ざいたく\",\n    \"ざいちゅう\",\n    \"さいてき\",\n    \"ざいりょう\",\n    \"さうな\",\n    \"さかいし\",\n    \"さがす\",\n    \"さかな\",\n    \"さかみち\",\n    \"さがる\",\n    \"さぎょう\",\n    \"さくし\",\n    \"さくひん\",\n    \"さくら\",\n    \"さこく\",\n    \"さこつ\",\n    \"さずかる\",\n    \"ざせき\",\n    \"さたん\",\n    \"さつえい\",\n    \"ざつおん\",\n    \"ざっか\",\n    \"ざつがく\",\n    \"さっきょく\",\n    \"ざっし\",\n    \"さつじん\",\n    \"ざっそう\",\n    \"さつたば\",\n    \"さつまいも\",\n    \"さてい\",\n    \"さといも\",\n    \"さとう\",\n    \"さとおや\",\n    \"さとし\",\n    \"さとる\",\n    \"さのう\",\n    \"さばく\",\n    \"さびしい\",\n    \"さべつ\",\n    \"さほう\",\n    \"さほど\",\n    \"さます\",\n    \"さみしい\",\n    \"さみだれ\",\n    \"さむけ\",\n    \"さめる\",\n    \"さやえんどう\",\n    \"さゆう\",\n    \"さよう\",\n    \"さよく\",\n    \"さらだ\",\n    \"ざるそば\",\n    \"さわやか\",\n    \"さわる\",\n    \"さんいん\",\n    \"さんか\",\n    \"さんきゃく\",\n    \"さんこう\",\n    \"さんさい\",\n    \"ざんしょ\",\n    \"さんすう\",\n    \"さんせい\",\n    \"さんそ\",\n    \"さんち\",\n    \"さんま\",\n    \"さんみ\",\n    \"さんらん\",\n    \"しあい\",\n    \"しあげ\",\n    \"しあさって\",\n    \"しあわせ\",\n    \"しいく\",\n    \"しいん\",\n    \"しうち\",\n    \"しえい\",\n    \"しおけ\",\n    \"しかい\",\n    \"しかく\",\n    \"じかん\",\n    \"しごと\",\n    \"しすう\",\n    \"じだい\",\n    \"したうけ\",\n    \"したぎ\",\n    \"したて\",\n    \"したみ\",\n    \"しちょう\",\n    \"しちりん\",\n    \"しっかり\",\n    \"しつじ\",\n    \"しつもん\",\n    \"してい\",\n    \"してき\",\n    \"してつ\",\n    \"じてん\",\n    \"じどう\",\n    \"しなぎれ\",\n    \"しなもの\",\n    \"しなん\",\n    \"しねま\",\n    \"しねん\",\n    \"しのぐ\",\n    \"しのぶ\",\n    \"しはい\",\n    \"しばかり\",\n    \"しはつ\",\n    \"しはらい\",\n    \"しはん\",\n    \"しひょう\",\n    \"しふく\",\n    \"じぶん\",\n    \"しへい\",\n    \"しほう\",\n    \"しほん\",\n    \"しまう\",\n    \"しまる\",\n    \"しみん\",\n    \"しむける\",\n    \"じむしょ\",\n    \"しめい\",\n    \"しめる\",\n    \"しもん\",\n    \"しゃいん\",\n    \"しゃうん\",\n    \"しゃおん\",\n    \"じゃがいも\",\n    \"しやくしょ\",\n    \"しゃくほう\",\n    \"しゃけん\",\n    \"しゃこ\",\n    \"しゃざい\",\n    \"しゃしん\",\n    \"しゃせん\",\n    \"しゃそう\",\n    \"しゃたい\",\n    \"しゃちょう\",\n    \"しゃっきん\",\n    \"じゃま\",\n    \"しゃりん\",\n    \"しゃれい\",\n    \"じゆう\",\n    \"じゅうしょ\",\n    \"しゅくはく\",\n    \"じゅしん\",\n    \"しゅっせき\",\n    \"しゅみ\",\n    \"しゅらば\",\n    \"じゅんばん\",\n    \"しょうかい\",\n    \"しょくたく\",\n    \"しょっけん\",\n    \"しょどう\",\n    \"しょもつ\",\n    \"しらせる\",\n    \"しらべる\",\n    \"しんか\",\n    \"しんこう\",\n    \"じんじゃ\",\n    \"しんせいじ\",\n    \"しんちく\",\n    \"しんりん\",\n    \"すあげ\",\n    \"すあし\",\n    \"すあな\",\n    \"ずあん\",\n    \"すいえい\",\n    \"すいか\",\n    \"すいとう\",\n    \"ずいぶん\",\n    \"すいようび\",\n    \"すうがく\",\n    \"すうじつ\",\n    \"すうせん\",\n    \"すおどり\",\n    \"すきま\",\n    \"すくう\",\n    \"すくない\",\n    \"すける\",\n    \"すごい\",\n    \"すこし\",\n    \"ずさん\",\n    \"すずしい\",\n    \"すすむ\",\n    \"すすめる\",\n    \"すっかり\",\n    \"ずっしり\",\n    \"ずっと\",\n    \"すてき\",\n    \"すてる\",\n    \"すねる\",\n    \"すのこ\",\n    \"すはだ\",\n    \"すばらしい\",\n    \"ずひょう\",\n    \"ずぶぬれ\",\n    \"すぶり\",\n    \"すふれ\",\n    \"すべて\",\n    \"すべる\",\n    \"ずほう\",\n    \"すぼん\",\n    \"すまい\",\n    \"すめし\",\n    \"すもう\",\n    \"すやき\",\n    \"すらすら\",\n    \"するめ\",\n    \"すれちがう\",\n    \"すろっと\",\n    \"すわる\",\n    \"すんぜん\",\n    \"すんぽう\",\n    \"せあぶら\",\n    \"せいかつ\",\n    \"せいげん\",\n    \"せいじ\",\n    \"せいよう\",\n    \"せおう\",\n    \"せかいかん\",\n    \"せきにん\",\n    \"せきむ\",\n    \"せきゆ\",\n    \"せきらんうん\",\n    \"せけん\",\n    \"せこう\",\n    \"せすじ\",\n    \"せたい\",\n    \"せたけ\",\n    \"せっかく\",\n    \"せっきゃく\",\n    \"ぜっく\",\n    \"せっけん\",\n    \"せっこつ\",\n    \"せっさたくま\",\n    \"せつぞく\",\n    \"せつだん\",\n    \"せつでん\",\n    \"せっぱん\",\n    \"せつび\",\n    \"せつぶん\",\n    \"せつめい\",\n    \"せつりつ\",\n    \"せなか\",\n    \"せのび\",\n    \"せはば\",\n    \"せびろ\",\n    \"せぼね\",\n    \"せまい\",\n    \"せまる\",\n    \"せめる\",\n    \"せもたれ\",\n    \"せりふ\",\n    \"ぜんあく\",\n    \"せんい\",\n    \"せんえい\",\n    \"せんか\",\n    \"せんきょ\",\n    \"せんく\",\n    \"せんげん\",\n    \"ぜんご\",\n    \"せんさい\",\n    \"せんしゅ\",\n    \"せんすい\",\n    \"せんせい\",\n    \"せんぞ\",\n    \"せんたく\",\n    \"せんちょう\",\n    \"せんてい\",\n    \"せんとう\",\n    \"せんぬき\",\n    \"せんねん\",\n    \"せんぱい\",\n    \"ぜんぶ\",\n    \"ぜんぽう\",\n    \"せんむ\",\n    \"せんめんじょ\",\n    \"せんもん\",\n    \"せんやく\",\n    \"せんゆう\",\n    \"せんよう\",\n    \"ぜんら\",\n    \"ぜんりゃく\",\n    \"せんれい\",\n    \"せんろ\",\n    \"そあく\",\n    \"そいとげる\",\n    \"そいね\",\n    \"そうがんきょう\",\n    \"そうき\",\n    \"そうご\",\n    \"そうしん\",\n    \"そうだん\",\n    \"そうなん\",\n    \"そうび\",\n    \"そうめん\",\n    \"そうり\",\n    \"そえもの\",\n    \"そえん\",\n    \"そがい\",\n    \"そげき\",\n    \"そこう\",\n    \"そこそこ\",\n    \"そざい\",\n    \"そしな\",\n    \"そせい\",\n    \"そせん\",\n    \"そそぐ\",\n    \"そだてる\",\n    \"そつう\",\n    \"そつえん\",\n    \"そっかん\",\n    \"そつぎょう\",\n    \"そっけつ\",\n    \"そっこう\",\n    \"そっせん\",\n    \"そっと\",\n    \"そとがわ\",\n    \"そとづら\",\n    \"そなえる\",\n    \"そなた\",\n    \"そふぼ\",\n    \"そぼく\",\n    \"そぼろ\",\n    \"そまつ\",\n    \"そまる\",\n    \"そむく\",\n    \"そむりえ\",\n    \"そめる\",\n    \"そもそも\",\n    \"そよかぜ\",\n    \"そらまめ\",\n    \"そろう\",\n    \"そんかい\",\n    \"そんけい\",\n    \"そんざい\",\n    \"そんしつ\",\n    \"そんぞく\",\n    \"そんちょう\",\n    \"ぞんび\",\n    \"ぞんぶん\",\n    \"そんみん\",\n    \"たあい\",\n    \"たいいん\",\n    \"たいうん\",\n    \"たいえき\",\n    \"たいおう\",\n    \"だいがく\",\n    \"たいき\",\n    \"たいぐう\",\n    \"たいけん\",\n    \"たいこ\",\n    \"たいざい\",\n    \"だいじょうぶ\",\n    \"だいすき\",\n    \"たいせつ\",\n    \"たいそう\",\n    \"だいたい\",\n    \"たいちょう\",\n    \"たいてい\",\n    \"だいどころ\",\n    \"たいない\",\n    \"たいねつ\",\n    \"たいのう\",\n    \"たいはん\",\n    \"だいひょう\",\n    \"たいふう\",\n    \"たいへん\",\n    \"たいほ\",\n    \"たいまつばな\",\n    \"たいみんぐ\",\n    \"たいむ\",\n    \"たいめん\",\n    \"たいやき\",\n    \"たいよう\",\n    \"たいら\",\n    \"たいりょく\",\n    \"たいる\",\n    \"たいわん\",\n    \"たうえ\",\n    \"たえる\",\n    \"たおす\",\n    \"たおる\",\n    \"たおれる\",\n    \"たかい\",\n    \"たかね\",\n    \"たきび\",\n    \"たくさん\",\n    \"たこく\",\n    \"たこやき\",\n    \"たさい\",\n    \"たしざん\",\n    \"だじゃれ\",\n    \"たすける\",\n    \"たずさわる\",\n    \"たそがれ\",\n    \"たたかう\",\n    \"たたく\",\n    \"ただしい\",\n    \"たたみ\",\n    \"たちばな\",\n    \"だっかい\",\n    \"だっきゃく\",\n    \"だっこ\",\n    \"だっしゅつ\",\n    \"だったい\",\n    \"たてる\",\n    \"たとえる\",\n    \"たなばた\",\n    \"たにん\",\n    \"たぬき\",\n    \"たのしみ\",\n    \"たはつ\",\n    \"たぶん\",\n    \"たべる\",\n    \"たぼう\",\n    \"たまご\",\n    \"たまる\",\n    \"だむる\",\n    \"ためいき\",\n    \"ためす\",\n    \"ためる\",\n    \"たもつ\",\n    \"たやすい\",\n    \"たよる\",\n    \"たらす\",\n    \"たりきほんがん\",\n    \"たりょう\",\n    \"たりる\",\n    \"たると\",\n    \"たれる\",\n    \"たれんと\",\n    \"たろっと\",\n    \"たわむれる\",\n    \"だんあつ\",\n    \"たんい\",\n    \"たんおん\",\n    \"たんか\",\n    \"たんき\",\n    \"たんけん\",\n    \"たんご\",\n    \"たんさん\",\n    \"たんじょうび\",\n    \"だんせい\",\n    \"たんそく\",\n    \"たんたい\",\n    \"だんち\",\n    \"たんてい\",\n    \"たんとう\",\n    \"だんな\",\n    \"たんにん\",\n    \"だんねつ\",\n    \"たんのう\",\n    \"たんぴん\",\n    \"だんぼう\",\n    \"たんまつ\",\n    \"たんめい\",\n    \"だんれつ\",\n    \"だんろ\",\n    \"だんわ\",\n    \"ちあい\",\n    \"ちあん\",\n    \"ちいき\",\n    \"ちいさい\",\n    \"ちえん\",\n    \"ちかい\",\n    \"ちから\",\n    \"ちきゅう\",\n    \"ちきん\",\n    \"ちけいず\",\n    \"ちけん\",\n    \"ちこく\",\n    \"ちさい\",\n    \"ちしき\",\n    \"ちしりょう\",\n    \"ちせい\",\n    \"ちそう\",\n    \"ちたい\",\n    \"ちたん\",\n    \"ちちおや\",\n    \"ちつじょ\",\n    \"ちてき\",\n    \"ちてん\",\n    \"ちぬき\",\n    \"ちぬり\",\n    \"ちのう\",\n    \"ちひょう\",\n    \"ちへいせん\",\n    \"ちほう\",\n    \"ちまた\",\n    \"ちみつ\",\n    \"ちみどろ\",\n    \"ちめいど\",\n    \"ちゃんこなべ\",\n    \"ちゅうい\",\n    \"ちゆりょく\",\n    \"ちょうし\",\n    \"ちょさくけん\",\n    \"ちらし\",\n    \"ちらみ\",\n    \"ちりがみ\",\n    \"ちりょう\",\n    \"ちるど\",\n    \"ちわわ\",\n    \"ちんたい\",\n    \"ちんもく\",\n    \"ついか\",\n    \"ついたち\",\n    \"つうか\",\n    \"つうじょう\",\n    \"つうはん\",\n    \"つうわ\",\n    \"つかう\",\n    \"つかれる\",\n    \"つくね\",\n    \"つくる\",\n    \"つけね\",\n    \"つける\",\n    \"つごう\",\n    \"つたえる\",\n    \"つづく\",\n    \"つつじ\",\n    \"つつむ\",\n    \"つとめる\",\n    \"つながる\",\n    \"つなみ\",\n    \"つねづね\",\n    \"つのる\",\n    \"つぶす\",\n    \"つまらない\",\n    \"つまる\",\n    \"つみき\",\n    \"つめたい\",\n    \"つもり\",\n    \"つもる\",\n    \"つよい\",\n    \"つるぼ\",\n    \"つるみく\",\n    \"つわもの\",\n    \"つわり\",\n    \"てあし\",\n    \"てあて\",\n    \"てあみ\",\n    \"ていおん\",\n    \"ていか\",\n    \"ていき\",\n    \"ていけい\",\n    \"ていこく\",\n    \"ていさつ\",\n    \"ていし\",\n    \"ていせい\",\n    \"ていたい\",\n    \"ていど\",\n    \"ていねい\",\n    \"ていひょう\",\n    \"ていへん\",\n    \"ていぼう\",\n    \"てうち\",\n    \"ておくれ\",\n    \"てきとう\",\n    \"てくび\",\n    \"でこぼこ\",\n    \"てさぎょう\",\n    \"てさげ\",\n    \"てすり\",\n    \"てそう\",\n    \"てちがい\",\n    \"てちょう\",\n    \"てつがく\",\n    \"てつづき\",\n    \"でっぱ\",\n    \"てつぼう\",\n    \"てつや\",\n    \"でぬかえ\",\n    \"てぬき\",\n    \"てぬぐい\",\n    \"てのひら\",\n    \"てはい\",\n    \"てぶくろ\",\n    \"てふだ\",\n    \"てほどき\",\n    \"てほん\",\n    \"てまえ\",\n    \"てまきずし\",\n    \"てみじか\",\n    \"てみやげ\",\n    \"てらす\",\n    \"てれび\",\n    \"てわけ\",\n    \"てわたし\",\n    \"でんあつ\",\n    \"てんいん\",\n    \"てんかい\",\n    \"てんき\",\n    \"てんぐ\",\n    \"てんけん\",\n    \"てんごく\",\n    \"てんさい\",\n    \"てんし\",\n    \"てんすう\",\n    \"でんち\",\n    \"てんてき\",\n    \"てんとう\",\n    \"てんない\",\n    \"てんぷら\",\n    \"てんぼうだい\",\n    \"てんめつ\",\n    \"てんらんかい\",\n    \"でんりょく\",\n    \"でんわ\",\n    \"どあい\",\n    \"といれ\",\n    \"どうかん\",\n    \"とうきゅう\",\n    \"どうぐ\",\n    \"とうし\",\n    \"とうむぎ\",\n    \"とおい\",\n    \"とおか\",\n    \"とおく\",\n    \"とおす\",\n    \"とおる\",\n    \"とかい\",\n    \"とかす\",\n    \"ときおり\",\n    \"ときどき\",\n    \"とくい\",\n    \"とくしゅう\",\n    \"とくてん\",\n    \"とくに\",\n    \"とくべつ\",\n    \"とけい\",\n    \"とける\",\n    \"とこや\",\n    \"とさか\",\n    \"としょかん\",\n    \"とそう\",\n    \"とたん\",\n    \"とちゅう\",\n    \"とっきゅう\",\n    \"とっくん\",\n    \"とつぜん\",\n    \"とつにゅう\",\n    \"とどける\",\n    \"ととのえる\",\n    \"とない\",\n    \"となえる\",\n    \"となり\",\n    \"とのさま\",\n    \"とばす\",\n    \"どぶがわ\",\n    \"とほう\",\n    \"とまる\",\n    \"とめる\",\n    \"ともだち\",\n    \"ともる\",\n    \"どようび\",\n    \"とらえる\",\n    \"とんかつ\",\n    \"どんぶり\",\n    \"ないかく\",\n    \"ないこう\",\n    \"ないしょ\",\n    \"ないす\",\n    \"ないせん\",\n    \"ないそう\",\n    \"なおす\",\n    \"ながい\",\n    \"なくす\",\n    \"なげる\",\n    \"なこうど\",\n    \"なさけ\",\n    \"なたでここ\",\n    \"なっとう\",\n    \"なつやすみ\",\n    \"ななおし\",\n    \"なにごと\",\n    \"なにもの\",\n    \"なにわ\",\n    \"なのか\",\n    \"なふだ\",\n    \"なまいき\",\n    \"なまえ\",\n    \"なまみ\",\n    \"なみだ\",\n    \"なめらか\",\n    \"なめる\",\n    \"なやむ\",\n    \"ならう\",\n    \"ならび\",\n    \"ならぶ\",\n    \"なれる\",\n    \"なわとび\",\n    \"なわばり\",\n    \"にあう\",\n    \"にいがた\",\n    \"にうけ\",\n    \"におい\",\n    \"にかい\",\n    \"にがて\",\n    \"にきび\",\n    \"にくしみ\",\n    \"にくまん\",\n    \"にげる\",\n    \"にさんかたんそ\",\n    \"にしき\",\n    \"にせもの\",\n    \"にちじょう\",\n    \"にちようび\",\n    \"にっか\",\n    \"にっき\",\n    \"にっけい\",\n    \"にっこう\",\n    \"にっさん\",\n    \"にっしょく\",\n    \"にっすう\",\n    \"にっせき\",\n    \"にってい\",\n    \"になう\",\n    \"にほん\",\n    \"にまめ\",\n    \"にもつ\",\n    \"にやり\",\n    \"にゅういん\",\n    \"にりんしゃ\",\n    \"にわとり\",\n    \"にんい\",\n    \"にんか\",\n    \"にんき\",\n    \"にんげん\",\n    \"にんしき\",\n    \"にんずう\",\n    \"にんそう\",\n    \"にんたい\",\n    \"にんち\",\n    \"にんてい\",\n    \"にんにく\",\n    \"にんぷ\",\n    \"にんまり\",\n    \"にんむ\",\n    \"にんめい\",\n    \"にんよう\",\n    \"ぬいくぎ\",\n    \"ぬかす\",\n    \"ぬぐいとる\",\n    \"ぬぐう\",\n    \"ぬくもり\",\n    \"ぬすむ\",\n    \"ぬまえび\",\n    \"ぬめり\",\n    \"ぬらす\",\n    \"ぬんちゃく\",\n    \"ねあげ\",\n    \"ねいき\",\n    \"ねいる\",\n    \"ねいろ\",\n    \"ねぐせ\",\n    \"ねくたい\",\n    \"ねくら\",\n    \"ねこぜ\",\n    \"ねこむ\",\n    \"ねさげ\",\n    \"ねすごす\",\n    \"ねそべる\",\n    \"ねだん\",\n    \"ねつい\",\n    \"ねっしん\",\n    \"ねつぞう\",\n    \"ねったいぎょ\",\n    \"ねぶそく\",\n    \"ねふだ\",\n    \"ねぼう\",\n    \"ねほりはほり\",\n    \"ねまき\",\n    \"ねまわし\",\n    \"ねみみ\",\n    \"ねむい\",\n    \"ねむたい\",\n    \"ねもと\",\n    \"ねらう\",\n    \"ねわざ\",\n    \"ねんいり\",\n    \"ねんおし\",\n    \"ねんかん\",\n    \"ねんきん\",\n    \"ねんぐ\",\n    \"ねんざ\",\n    \"ねんし\",\n    \"ねんちゃく\",\n    \"ねんど\",\n    \"ねんぴ\",\n    \"ねんぶつ\",\n    \"ねんまつ\",\n    \"ねんりょう\",\n    \"ねんれい\",\n    \"のいず\",\n    \"のおづま\",\n    \"のがす\",\n    \"のきなみ\",\n    \"のこぎり\",\n    \"のこす\",\n    \"のこる\",\n    \"のせる\",\n    \"のぞく\",\n    \"のぞむ\",\n    \"のたまう\",\n    \"のちほど\",\n    \"のっく\",\n    \"のばす\",\n    \"のはら\",\n    \"のべる\",\n    \"のぼる\",\n    \"のみもの\",\n    \"のやま\",\n    \"のらいぬ\",\n    \"のらねこ\",\n    \"のりもの\",\n    \"のりゆき\",\n    \"のれん\",\n    \"のんき\",\n    \"ばあい\",\n    \"はあく\",\n    \"ばあさん\",\n    \"ばいか\",\n    \"ばいく\",\n    \"はいけん\",\n    \"はいご\",\n    \"はいしん\",\n    \"はいすい\",\n    \"はいせん\",\n    \"はいそう\",\n    \"はいち\",\n    \"ばいばい\",\n    \"はいれつ\",\n    \"はえる\",\n    \"はおる\",\n    \"はかい\",\n    \"ばかり\",\n    \"はかる\",\n    \"はくしゅ\",\n    \"はけん\",\n    \"はこぶ\",\n    \"はさみ\",\n    \"はさん\",\n    \"はしご\",\n    \"ばしょ\",\n    \"はしる\",\n    \"はせる\",\n    \"ぱそこん\",\n    \"はそん\",\n    \"はたん\",\n    \"はちみつ\",\n    \"はつおん\",\n    \"はっかく\",\n    \"はづき\",\n    \"はっきり\",\n    \"はっくつ\",\n    \"はっけん\",\n    \"はっこう\",\n    \"はっさん\",\n    \"はっしん\",\n    \"はったつ\",\n    \"はっちゅう\",\n    \"はってん\",\n    \"はっぴょう\",\n    \"はっぽう\",\n    \"はなす\",\n    \"はなび\",\n    \"はにかむ\",\n    \"はぶらし\",\n    \"はみがき\",\n    \"はむかう\",\n    \"はめつ\",\n    \"はやい\",\n    \"はやし\",\n    \"はらう\",\n    \"はろうぃん\",\n    \"はわい\",\n    \"はんい\",\n    \"はんえい\",\n    \"はんおん\",\n    \"はんかく\",\n    \"はんきょう\",\n    \"ばんぐみ\",\n    \"はんこ\",\n    \"はんしゃ\",\n    \"はんすう\",\n    \"はんだん\",\n    \"ぱんち\",\n    \"ぱんつ\",\n    \"はんてい\",\n    \"はんとし\",\n    \"はんのう\",\n    \"はんぱ\",\n    \"はんぶん\",\n    \"はんぺん\",\n    \"はんぼうき\",\n    \"はんめい\",\n    \"はんらん\",\n    \"はんろん\",\n    \"ひいき\",\n    \"ひうん\",\n    \"ひえる\",\n    \"ひかく\",\n    \"ひかり\",\n    \"ひかる\",\n    \"ひかん\",\n    \"ひくい\",\n    \"ひけつ\",\n    \"ひこうき\",\n    \"ひこく\",\n    \"ひさい\",\n    \"ひさしぶり\",\n    \"ひさん\",\n    \"びじゅつかん\",\n    \"ひしょ\",\n    \"ひそか\",\n    \"ひそむ\",\n    \"ひたむき\",\n    \"ひだり\",\n    \"ひたる\",\n    \"ひつぎ\",\n    \"ひっこし\",\n    \"ひっし\",\n    \"ひつじゅひん\",\n    \"ひっす\",\n    \"ひつぜん\",\n    \"ぴったり\",\n    \"ぴっちり\",\n    \"ひつよう\",\n    \"ひてい\",\n    \"ひとごみ\",\n    \"ひなまつり\",\n    \"ひなん\",\n    \"ひねる\",\n    \"ひはん\",\n    \"ひびく\",\n    \"ひひょう\",\n    \"ひほう\",\n    \"ひまわり\",\n    \"ひまん\",\n    \"ひみつ\",\n    \"ひめい\",\n    \"ひめじし\",\n    \"ひやけ\",\n    \"ひやす\",\n    \"ひよう\",\n    \"びょうき\",\n    \"ひらがな\",\n    \"ひらく\",\n    \"ひりつ\",\n    \"ひりょう\",\n    \"ひるま\",\n    \"ひるやすみ\",\n    \"ひれい\",\n    \"ひろい\",\n    \"ひろう\",\n    \"ひろき\",\n    \"ひろゆき\",\n    \"ひんかく\",\n    \"ひんけつ\",\n    \"ひんこん\",\n    \"ひんしゅ\",\n    \"ひんそう\",\n    \"ぴんち\",\n    \"ひんぱん\",\n    \"びんぼう\",\n    \"ふあん\",\n    \"ふいうち\",\n    \"ふうけい\",\n    \"ふうせん\",\n    \"ぷうたろう\",\n    \"ふうとう\",\n    \"ふうふ\",\n    \"ふえる\",\n    \"ふおん\",\n    \"ふかい\",\n    \"ふきん\",\n    \"ふくざつ\",\n    \"ふくぶくろ\",\n    \"ふこう\",\n    \"ふさい\",\n    \"ふしぎ\",\n    \"ふじみ\",\n    \"ふすま\",\n    \"ふせい\",\n    \"ふせぐ\",\n    \"ふそく\",\n    \"ぶたにく\",\n    \"ふたん\",\n    \"ふちょう\",\n    \"ふつう\",\n    \"ふつか\",\n    \"ふっかつ\",\n    \"ふっき\",\n    \"ふっこく\",\n    \"ぶどう\",\n    \"ふとる\",\n    \"ふとん\",\n    \"ふのう\",\n    \"ふはい\",\n    \"ふひょう\",\n    \"ふへん\",\n    \"ふまん\",\n    \"ふみん\",\n    \"ふめつ\",\n    \"ふめん\",\n    \"ふよう\",\n    \"ふりこ\",\n    \"ふりる\",\n    \"ふるい\",\n    \"ふんいき\",\n    \"ぶんがく\",\n    \"ぶんぐ\",\n    \"ふんしつ\",\n    \"ぶんせき\",\n    \"ふんそう\",\n    \"ぶんぽう\",\n    \"へいあん\",\n    \"へいおん\",\n    \"へいがい\",\n    \"へいき\",\n    \"へいげん\",\n    \"へいこう\",\n    \"へいさ\",\n    \"へいしゃ\",\n    \"へいせつ\",\n    \"へいそ\",\n    \"へいたく\",\n    \"へいてん\",\n    \"へいねつ\",\n    \"へいわ\",\n    \"へきが\",\n    \"へこむ\",\n    \"べにいろ\",\n    \"べにしょうが\",\n    \"へらす\",\n    \"へんかん\",\n    \"べんきょう\",\n    \"べんごし\",\n    \"へんさい\",\n    \"へんたい\",\n    \"べんり\",\n    \"ほあん\",\n    \"ほいく\",\n    \"ぼうぎょ\",\n    \"ほうこく\",\n    \"ほうそう\",\n    \"ほうほう\",\n    \"ほうもん\",\n    \"ほうりつ\",\n    \"ほえる\",\n    \"ほおん\",\n    \"ほかん\",\n    \"ほきょう\",\n    \"ぼきん\",\n    \"ほくろ\",\n    \"ほけつ\",\n    \"ほけん\",\n    \"ほこう\",\n    \"ほこる\",\n    \"ほしい\",\n    \"ほしつ\",\n    \"ほしゅ\",\n    \"ほしょう\",\n    \"ほせい\",\n    \"ほそい\",\n    \"ほそく\",\n    \"ほたて\",\n    \"ほたる\",\n    \"ぽちぶくろ\",\n    \"ほっきょく\",\n    \"ほっさ\",\n    \"ほったん\",\n    \"ほとんど\",\n    \"ほめる\",\n    \"ほんい\",\n    \"ほんき\",\n    \"ほんけ\",\n    \"ほんしつ\",\n    \"ほんやく\",\n    \"まいにち\",\n    \"まかい\",\n    \"まかせる\",\n    \"まがる\",\n    \"まける\",\n    \"まこと\",\n    \"まさつ\",\n    \"まじめ\",\n    \"ますく\",\n    \"まぜる\",\n    \"まつり\",\n    \"まとめ\",\n    \"まなぶ\",\n    \"まぬけ\",\n    \"まねく\",\n    \"まほう\",\n    \"まもる\",\n    \"まゆげ\",\n    \"まよう\",\n    \"まろやか\",\n    \"まわす\",\n    \"まわり\",\n    \"まわる\",\n    \"まんが\",\n    \"まんきつ\",\n    \"まんぞく\",\n    \"まんなか\",\n    \"みいら\",\n    \"みうち\",\n    \"みえる\",\n    \"みがく\",\n    \"みかた\",\n    \"みかん\",\n    \"みけん\",\n    \"みこん\",\n    \"みじかい\",\n    \"みすい\",\n    \"みすえる\",\n    \"みせる\",\n    \"みっか\",\n    \"みつかる\",\n    \"みつける\",\n    \"みてい\",\n    \"みとめる\",\n    \"みなと\",\n    \"みなみかさい\",\n    \"みねらる\",\n    \"みのう\",\n    \"みのがす\",\n    \"みほん\",\n    \"みもと\",\n    \"みやげ\",\n    \"みらい\",\n    \"みりょく\",\n    \"みわく\",\n    \"みんか\",\n    \"みんぞく\",\n    \"むいか\",\n    \"むえき\",\n    \"むえん\",\n    \"むかい\",\n    \"むかう\",\n    \"むかえ\",\n    \"むかし\",\n    \"むぎちゃ\",\n    \"むける\",\n    \"むげん\",\n    \"むさぼる\",\n    \"むしあつい\",\n    \"むしば\",\n    \"むじゅん\",\n    \"むしろ\",\n    \"むすう\",\n    \"むすこ\",\n    \"むすぶ\",\n    \"むすめ\",\n    \"むせる\",\n    \"むせん\",\n    \"むちゅう\",\n    \"むなしい\",\n    \"むのう\",\n    \"むやみ\",\n    \"むよう\",\n    \"むらさき\",\n    \"むりょう\",\n    \"むろん\",\n    \"めいあん\",\n    \"めいうん\",\n    \"めいえん\",\n    \"めいかく\",\n    \"めいきょく\",\n    \"めいさい\",\n    \"めいし\",\n    \"めいそう\",\n    \"めいぶつ\",\n    \"めいれい\",\n    \"めいわく\",\n    \"めぐまれる\",\n    \"めざす\",\n    \"めした\",\n    \"めずらしい\",\n    \"めだつ\",\n    \"めまい\",\n    \"めやす\",\n    \"めんきょ\",\n    \"めんせき\",\n    \"めんどう\",\n    \"もうしあげる\",\n    \"もうどうけん\",\n    \"もえる\",\n    \"もくし\",\n    \"もくてき\",\n    \"もくようび\",\n    \"もちろん\",\n    \"もどる\",\n    \"もらう\",\n    \"もんく\",\n    \"もんだい\",\n    \"やおや\",\n    \"やける\",\n    \"やさい\",\n    \"やさしい\",\n    \"やすい\",\n    \"やすたろう\",\n    \"やすみ\",\n    \"やせる\",\n    \"やそう\",\n    \"やたい\",\n    \"やちん\",\n    \"やっと\",\n    \"やっぱり\",\n    \"やぶる\",\n    \"やめる\",\n    \"ややこしい\",\n    \"やよい\",\n    \"やわらかい\",\n    \"ゆうき\",\n    \"ゆうびんきょく\",\n    \"ゆうべ\",\n    \"ゆうめい\",\n    \"ゆけつ\",\n    \"ゆしゅつ\",\n    \"ゆせん\",\n    \"ゆそう\",\n    \"ゆたか\",\n    \"ゆちゃく\",\n    \"ゆでる\",\n    \"ゆにゅう\",\n    \"ゆびわ\",\n    \"ゆらい\",\n    \"ゆれる\",\n    \"ようい\",\n    \"ようか\",\n    \"ようきゅう\",\n    \"ようじ\",\n    \"ようす\",\n    \"ようちえん\",\n    \"よかぜ\",\n    \"よかん\",\n    \"よきん\",\n    \"よくせい\",\n    \"よくぼう\",\n    \"よけい\",\n    \"よごれる\",\n    \"よさん\",\n    \"よしゅう\",\n    \"よそう\",\n    \"よそく\",\n    \"よっか\",\n    \"よてい\",\n    \"よどがわく\",\n    \"よねつ\",\n    \"よやく\",\n    \"よゆう\",\n    \"よろこぶ\",\n    \"よろしい\",\n    \"らいう\",\n    \"らくがき\",\n    \"らくご\",\n    \"らくさつ\",\n    \"らくだ\",\n    \"らしんばん\",\n    \"らせん\",\n    \"らぞく\",\n    \"らたい\",\n    \"らっか\",\n    \"られつ\",\n    \"りえき\",\n    \"りかい\",\n    \"りきさく\",\n    \"りきせつ\",\n    \"りくぐん\",\n    \"りくつ\",\n    \"りけん\",\n    \"りこう\",\n    \"りせい\",\n    \"りそう\",\n    \"りそく\",\n    \"りてん\",\n    \"りねん\",\n    \"りゆう\",\n    \"りゅうがく\",\n    \"りよう\",\n    \"りょうり\",\n    \"りょかん\",\n    \"りょくちゃ\",\n    \"りょこう\",\n    \"りりく\",\n    \"りれき\",\n    \"りろん\",\n    \"りんご\",\n    \"るいけい\",\n    \"るいさい\",\n    \"るいじ\",\n    \"るいせき\",\n    \"るすばん\",\n    \"るりがわら\",\n    \"れいかん\",\n    \"れいぎ\",\n    \"れいせい\",\n    \"れいぞうこ\",\n    \"れいとう\",\n    \"れいぼう\",\n    \"れきし\",\n    \"れきだい\",\n    \"れんあい\",\n    \"れんけい\",\n    \"れんこん\",\n    \"れんさい\",\n    \"れんしゅう\",\n    \"れんぞく\",\n    \"れんらく\",\n    \"ろうか\",\n    \"ろうご\",\n    \"ろうじん\",\n    \"ろうそく\",\n    \"ろくが\",\n    \"ろこつ\",\n    \"ろじうら\",\n    \"ろしゅつ\",\n    \"ろせん\",\n    \"ろてん\",\n    \"ろめん\",\n    \"ろれつ\",\n    \"ろんぎ\",\n    \"ろんぱ\",\n    \"ろんぶん\",\n    \"ろんり\",\n    \"わかす\",\n    \"わかめ\",\n    \"わかやま\",\n    \"わかれる\",\n    \"わしつ\",\n    \"わじまし\",\n    \"わすれもの\",\n    \"わらう\",\n    \"われる\"\n]\n[\n    \"가격\",\n    \"가끔\",\n    \"가난\",\n    \"가능\",\n    \"가득\",\n    \"가르침\",\n    \"가뭄\",\n    \"가방\",\n    \"가상\",\n    \"가슴\",\n    \"가운데\",\n    \"가을\",\n    \"가이드\",\n    \"가입\",\n    \"가장\",\n    \"가정\",\n    \"가족\",\n    \"가죽\",\n    \"각오\",\n    \"각자\",\n    \"간격\",\n    \"간부\",\n    \"간섭\",\n    \"간장\",\n    \"간접\",\n    \"간판\",\n    \"갈등\",\n    \"갈비\",\n    \"갈색\",\n    \"갈증\",\n    \"감각\",\n    \"감기\",\n    \"감소\",\n    \"감수성\",\n    \"감자\",\n    \"감정\",\n    \"갑자기\",\n    \"강남\",\n    \"강당\",\n    \"강도\",\n    \"강력히\",\n    \"강변\",\n    \"강북\",\n    \"강사\",\n    \"강수량\",\n    \"강아지\",\n    \"강원도\",\n    \"강의\",\n    \"강제\",\n    \"강조\",\n    \"같이\",\n    \"개구리\",\n    \"개나리\",\n    \"개방\",\n    \"개별\",\n    \"개선\",\n    \"개성\",\n    \"개인\",\n    \"객관적\",\n    \"거실\",\n    \"거액\",\n    \"거울\",\n    \"거짓\",\n    \"거품\",\n    \"걱정\",\n    \"건강\",\n    \"건물\",\n    \"건설\",\n    \"건조\",\n    \"건축\",\n    \"걸음\",\n    \"검사\",\n    \"검토\",\n    \"게시판\",\n    \"게임\",\n    \"겨울\",\n    \"견해\",\n    \"결과\",\n    \"결국\",\n    \"결론\",\n    \"결석\",\n    \"결승\",\n    \"결심\",\n    \"결정\",\n    \"결혼\",\n    \"경계\",\n    \"경고\",\n    \"경기\",\n    \"경력\",\n    \"경복궁\",\n    \"경비\",\n    \"경상도\",\n    \"경영\",\n    \"경우\",\n    \"경쟁\",\n    \"경제\",\n    \"경주\",\n    \"경찰\",\n    \"경치\",\n    \"경향\",\n    \"경험\",\n    \"계곡\",\n    \"계단\",\n    \"계란\",\n    \"계산\",\n    \"계속\",\n    \"계약\",\n    \"계절\",\n    \"계층\",\n    \"계획\",\n    \"고객\",\n    \"고구려\",\n    \"고궁\",\n    \"고급\",\n    \"고등학생\",\n    \"고무신\",\n    \"고민\",\n    \"고양이\",\n    \"고장\",\n    \"고전\",\n    \"고집\",\n    \"고춧가루\",\n    \"고통\",\n    \"고향\",\n    \"곡식\",\n    \"골목\",\n    \"골짜기\",\n    \"골프\",\n    \"공간\",\n    \"공개\",\n    \"공격\",\n    \"공군\",\n    \"공급\",\n    \"공기\",\n    \"공동\",\n    \"공무원\",\n    \"공부\",\n    \"공사\",\n    \"공식\",\n    \"공업\",\n    \"공연\",\n    \"공원\",\n    \"공장\",\n    \"공짜\",\n    \"공책\",\n    \"공통\",\n    \"공포\",\n    \"공항\",\n    \"공휴일\",\n    \"과목\",\n    \"과일\",\n    \"과장\",\n    \"과정\",\n    \"과학\",\n    \"관객\",\n    \"관계\",\n    \"관광\",\n    \"관념\",\n    \"관람\",\n    \"관련\",\n    \"관리\",\n    \"관습\",\n    \"관심\",\n    \"관점\",\n    \"관찰\",\n    \"광경\",\n    \"광고\",\n    \"광장\",\n    \"광주\",\n    \"괴로움\",\n    \"굉장히\",\n    \"교과서\",\n    \"교문\",\n    \"교복\",\n    \"교실\",\n    \"교양\",\n    \"교육\",\n    \"교장\",\n    \"교직\",\n    \"교통\",\n    \"교환\",\n    \"교훈\",\n    \"구경\",\n    \"구름\",\n    \"구멍\",\n    \"구별\",\n    \"구분\",\n    \"구석\",\n    \"구성\",\n    \"구속\",\n    \"구역\",\n    \"구입\",\n    \"구청\",\n    \"구체적\",\n    \"국가\",\n    \"국기\",\n    \"국내\",\n    \"국립\",\n    \"국물\",\n    \"국민\",\n    \"국수\",\n    \"국어\",\n    \"국왕\",\n    \"국적\",\n    \"국제\",\n    \"국회\",\n    \"군대\",\n    \"군사\",\n    \"군인\",\n    \"궁극적\",\n    \"권리\",\n    \"권위\",\n    \"권투\",\n    \"귀국\",\n    \"귀신\",\n    \"규정\",\n    \"규칙\",\n    \"균형\",\n    \"그날\",\n    \"그냥\",\n    \"그늘\",\n    \"그러나\",\n    \"그룹\",\n    \"그릇\",\n    \"그림\",\n    \"그제서야\",\n    \"그토록\",\n    \"극복\",\n    \"극히\",\n    \"근거\",\n    \"근교\",\n    \"근래\",\n    \"근로\",\n    \"근무\",\n    \"근본\",\n    \"근원\",\n    \"근육\",\n    \"근처\",\n    \"글씨\",\n    \"글자\",\n    \"금강산\",\n    \"금고\",\n    \"금년\",\n    \"금메달\",\n    \"금액\",\n    \"금연\",\n    \"금요일\",\n    \"금지\",\n    \"긍정적\",\n    \"기간\",\n    \"기관\",\n    \"기념\",\n    \"기능\",\n    \"기독교\",\n    \"기둥\",\n    \"기록\",\n    \"기름\",\n    \"기법\",\n    \"기본\",\n    \"기분\",\n    \"기쁨\",\n    \"기숙사\",\n    \"기술\",\n    \"기억\",\n    \"기업\",\n    \"기온\",\n    \"기운\",\n    \"기원\",\n    \"기적\",\n    \"기준\",\n    \"기침\",\n    \"기혼\",\n    \"기획\",\n    \"긴급\",\n    \"긴장\",\n    \"길이\",\n    \"김밥\",\n    \"김치\",\n    \"김포공항\",\n    \"깍두기\",\n    \"깜빡\",\n    \"깨달음\",\n    \"깨소금\",\n    \"껍질\",\n    \"꼭대기\",\n    \"꽃잎\",\n    \"나들이\",\n    \"나란히\",\n    \"나머지\",\n    \"나물\",\n    \"나침반\",\n    \"나흘\",\n    \"낙엽\",\n    \"난방\",\n    \"날개\",\n    \"날씨\",\n    \"날짜\",\n    \"남녀\",\n    \"남대문\",\n    \"남매\",\n    \"남산\",\n    \"남자\",\n    \"남편\",\n    \"남학생\",\n    \"낭비\",\n    \"낱말\",\n    \"내년\",\n    \"내용\",\n    \"내일\",\n    \"냄비\",\n    \"냄새\",\n    \"냇물\",\n    \"냉동\",\n    \"냉면\",\n    \"냉방\",\n    \"냉장고\",\n    \"넥타이\",\n    \"넷째\",\n    \"노동\",\n    \"노란색\",\n    \"노력\",\n    \"노인\",\n    \"녹음\",\n    \"녹차\",\n    \"녹화\",\n    \"논리\",\n    \"논문\",\n    \"논쟁\",\n    \"놀이\",\n    \"농구\",\n    \"농담\",\n    \"농민\",\n    \"농부\",\n    \"농업\",\n    \"농장\",\n    \"농촌\",\n    \"높이\",\n    \"눈동자\",\n    \"눈물\",\n    \"눈썹\",\n    \"뉴욕\",\n    \"느낌\",\n    \"늑대\",\n    \"능동적\",\n    \"능력\",\n    \"다방\",\n    \"다양성\",\n    \"다음\",\n    \"다이어트\",\n    \"다행\",\n    \"단계\",\n    \"단골\",\n    \"단독\",\n    \"단맛\",\n    \"단순\",\n    \"단어\",\n    \"단위\",\n    \"단점\",\n    \"단체\",\n    \"단추\",\n    \"단편\",\n    \"단풍\",\n    \"달걀\",\n    \"달러\",\n    \"달력\",\n    \"달리\",\n    \"닭고기\",\n    \"담당\",\n    \"담배\",\n    \"담요\",\n    \"담임\",\n    \"답변\",\n    \"답장\",\n    \"당근\",\n    \"당분간\",\n    \"당연히\",\n    \"당장\",\n    \"대규모\",\n    \"대낮\",\n    \"대단히\",\n    \"대답\",\n    \"대도시\",\n    \"대략\",\n    \"대량\",\n    \"대륙\",\n    \"대문\",\n    \"대부분\",\n    \"대신\",\n    \"대응\",\n    \"대장\",\n    \"대전\",\n    \"대접\",\n    \"대중\",\n    \"대책\",\n    \"대출\",\n    \"대충\",\n    \"대통령\",\n    \"대학\",\n    \"대한민국\",\n    \"대합실\",\n    \"대형\",\n    \"덩어리\",\n    \"데이트\",\n    \"도대체\",\n    \"도덕\",\n    \"도둑\",\n    \"도망\",\n    \"도서관\",\n    \"도심\",\n    \"도움\",\n    \"도입\",\n    \"도자기\",\n    \"도저히\",\n    \"도전\",\n    \"도중\",\n    \"도착\",\n    \"독감\",\n    \"독립\",\n    \"독서\",\n    \"독일\",\n    \"독창적\",\n    \"동화책\",\n    \"뒷모습\",\n    \"뒷산\",\n    \"딸아이\",\n    \"마누라\",\n    \"마늘\",\n    \"마당\",\n    \"마라톤\",\n    \"마련\",\n    \"마무리\",\n    \"마사지\",\n    \"마약\",\n    \"마요네즈\",\n    \"마을\",\n    \"마음\",\n    \"마이크\",\n    \"마중\",\n    \"마지막\",\n    \"마찬가지\",\n    \"마찰\",\n    \"마흔\",\n    \"막걸리\",\n    \"막내\",\n    \"막상\",\n    \"만남\",\n    \"만두\",\n    \"만세\",\n    \"만약\",\n    \"만일\",\n    \"만점\",\n    \"만족\",\n    \"만화\",\n    \"많이\",\n    \"말기\",\n    \"말씀\",\n    \"말투\",\n    \"맘대로\",\n    \"망원경\",\n    \"매년\",\n    \"매달\",\n    \"매력\",\n    \"매번\",\n    \"매스컴\",\n    \"매일\",\n    \"매장\",\n    \"맥주\",\n    \"먹이\",\n    \"먼저\",\n    \"먼지\",\n    \"멀리\",\n    \"메일\",\n    \"며느리\",\n    \"며칠\",\n    \"면담\",\n    \"멸치\",\n    \"명단\",\n    \"명령\",\n    \"명예\",\n    \"명의\",\n    \"명절\",\n    \"명칭\",\n    \"명함\",\n    \"모금\",\n    \"모니터\",\n    \"모델\",\n    \"모든\",\n    \"모범\",\n    \"모습\",\n    \"모양\",\n    \"모임\",\n    \"모조리\",\n    \"모집\",\n    \"모퉁이\",\n    \"목걸이\",\n    \"목록\",\n    \"목사\",\n    \"목소리\",\n    \"목숨\",\n    \"목적\",\n    \"목표\",\n    \"몰래\",\n    \"몸매\",\n    \"몸무게\",\n    \"몸살\",\n    \"몸속\",\n    \"몸짓\",\n    \"몸통\",\n    \"몹시\",\n    \"무관심\",\n    \"무궁화\",\n    \"무더위\",\n    \"무덤\",\n    \"무릎\",\n    \"무슨\",\n    \"무엇\",\n    \"무역\",\n    \"무용\",\n    \"무조건\",\n    \"무지개\",\n    \"무척\",\n    \"문구\",\n    \"문득\",\n    \"문법\",\n    \"문서\",\n    \"문제\",\n    \"문학\",\n    \"문화\",\n    \"물가\",\n    \"물건\",\n    \"물결\",\n    \"물고기\",\n    \"물론\",\n    \"물리학\",\n    \"물음\",\n    \"물질\",\n    \"물체\",\n    \"미국\",\n    \"미디어\",\n    \"미사일\",\n    \"미술\",\n    \"미역\",\n    \"미용실\",\n    \"미움\",\n    \"미인\",\n    \"미팅\",\n    \"미혼\",\n    \"민간\",\n    \"민족\",\n    \"민주\",\n    \"믿음\",\n    \"밀가루\",\n    \"밀리미터\",\n    \"밑바닥\",\n    \"바가지\",\n    \"바구니\",\n    \"바나나\",\n    \"바늘\",\n    \"바닥\",\n    \"바닷가\",\n    \"바람\",\n    \"바이러스\",\n    \"바탕\",\n    \"박물관\",\n    \"박사\",\n    \"박수\",\n    \"반대\",\n    \"반드시\",\n    \"반말\",\n    \"반발\",\n    \"반성\",\n    \"반응\",\n    \"반장\",\n    \"반죽\",\n    \"반지\",\n    \"반찬\",\n    \"받침\",\n    \"발가락\",\n    \"발걸음\",\n    \"발견\",\n    \"발달\",\n    \"발레\",\n    \"발목\",\n    \"발바닥\",\n    \"발생\",\n    \"발음\",\n    \"발자국\",\n    \"발전\",\n    \"발톱\",\n    \"발표\",\n    \"밤하늘\",\n    \"밥그릇\",\n    \"밥맛\",\n    \"밥상\",\n    \"밥솥\",\n    \"방금\",\n    \"방면\",\n    \"방문\",\n    \"방바닥\",\n    \"방법\",\n    \"방송\",\n    \"방식\",\n    \"방안\",\n    \"방울\",\n    \"방지\",\n    \"방학\",\n    \"방해\",\n    \"방향\",\n    \"배경\",\n    \"배꼽\",\n    \"배달\",\n    \"배드민턴\",\n    \"백두산\",\n    \"백색\",\n    \"백성\",\n    \"백인\",\n    \"백제\",\n    \"백화점\",\n    \"버릇\",\n    \"버섯\",\n    \"버튼\",\n    \"번개\",\n    \"번역\",\n    \"번지\",\n    \"번호\",\n    \"벌금\",\n    \"벌레\",\n    \"벌써\",\n    \"범위\",\n    \"범인\",\n    \"범죄\",\n    \"법률\",\n    \"법원\",\n    \"법적\",\n    \"법칙\",\n    \"베이징\",\n    \"벨트\",\n    \"변경\",\n    \"변동\",\n    \"변명\",\n    \"변신\",\n    \"변호사\",\n    \"변화\",\n    \"별도\",\n    \"별명\",\n    \"별일\",\n    \"병실\",\n    \"병아리\",\n    \"병원\",\n    \"보관\",\n    \"보너스\",\n    \"보라색\",\n    \"보람\",\n    \"보름\",\n    \"보상\",\n    \"보안\",\n    \"보자기\",\n    \"보장\",\n    \"보전\",\n    \"보존\",\n    \"보통\",\n    \"보편적\",\n    \"보험\",\n    \"복도\",\n    \"복사\",\n    \"복숭아\",\n    \"복습\",\n    \"볶음\",\n    \"본격적\",\n    \"본래\",\n    \"본부\",\n    \"본사\",\n    \"본성\",\n    \"본인\",\n    \"본질\",\n    \"볼펜\",\n    \"봉사\",\n    \"봉지\",\n    \"봉투\",\n    \"부근\",\n    \"부끄러움\",\n    \"부담\",\n    \"부동산\",\n    \"부문\",\n    \"부분\",\n    \"부산\",\n    \"부상\",\n    \"부엌\",\n    \"부인\",\n    \"부작용\",\n    \"부장\",\n    \"부정\",\n    \"부족\",\n    \"부지런히\",\n    \"부친\",\n    \"부탁\",\n    \"부품\",\n    \"부회장\",\n    \"북부\",\n    \"북한\",\n    \"분노\",\n    \"분량\",\n    \"분리\",\n    \"분명\",\n    \"분석\",\n    \"분야\",\n    \"분위기\",\n    \"분필\",\n    \"분홍색\",\n    \"불고기\",\n    \"불과\",\n    \"불교\",\n    \"불꽃\",\n    \"불만\",\n    \"불법\",\n    \"불빛\",\n    \"불안\",\n    \"불이익\",\n    \"불행\",\n    \"브랜드\",\n    \"비극\",\n    \"비난\",\n    \"비닐\",\n    \"비둘기\",\n    \"비디오\",\n    \"비로소\",\n    \"비만\",\n    \"비명\",\n    \"비밀\",\n    \"비바람\",\n    \"비빔밥\",\n    \"비상\",\n    \"비용\",\n    \"비율\",\n    \"비중\",\n    \"비타민\",\n    \"비판\",\n    \"빌딩\",\n    \"빗물\",\n    \"빗방울\",\n    \"빗줄기\",\n    \"빛깔\",\n    \"빨간색\",\n    \"빨래\",\n    \"빨리\",\n    \"사건\",\n    \"사계절\",\n    \"사나이\",\n    \"사냥\",\n    \"사람\",\n    \"사랑\",\n    \"사립\",\n    \"사모님\",\n    \"사물\",\n    \"사방\",\n    \"사상\",\n    \"사생활\",\n    \"사설\",\n    \"사슴\",\n    \"사실\",\n    \"사업\",\n    \"사용\",\n    \"사월\",\n    \"사장\",\n    \"사전\",\n    \"사진\",\n    \"사촌\",\n    \"사춘기\",\n    \"사탕\",\n    \"사투리\",\n    \"사흘\",\n    \"산길\",\n    \"산부인과\",\n    \"산업\",\n    \"산책\",\n    \"살림\",\n    \"살인\",\n    \"살짝\",\n    \"삼계탕\",\n    \"삼국\",\n    \"삼십\",\n    \"삼월\",\n    \"삼촌\",\n    \"상관\",\n    \"상금\",\n    \"상대\",\n    \"상류\",\n    \"상반기\",\n    \"상상\",\n    \"상식\",\n    \"상업\",\n    \"상인\",\n    \"상자\",\n    \"상점\",\n    \"상처\",\n    \"상추\",\n    \"상태\",\n    \"상표\",\n    \"상품\",\n    \"상황\",\n    \"새벽\",\n    \"색깔\",\n    \"색연필\",\n    \"생각\",\n    \"생명\",\n    \"생물\",\n    \"생방송\",\n    \"생산\",\n    \"생선\",\n    \"생신\",\n    \"생일\",\n    \"생활\",\n    \"서랍\",\n    \"서른\",\n    \"서명\",\n    \"서민\",\n    \"서비스\",\n    \"서양\",\n    \"서울\",\n    \"서적\",\n    \"서점\",\n    \"서쪽\",\n    \"서클\",\n    \"석사\",\n    \"석유\",\n    \"선거\",\n    \"선물\",\n    \"선배\",\n    \"선생\",\n    \"선수\",\n    \"선원\",\n    \"선장\",\n    \"선전\",\n    \"선택\",\n    \"선풍기\",\n    \"설거지\",\n    \"설날\",\n    \"설렁탕\",\n    \"설명\",\n    \"설문\",\n    \"설사\",\n    \"설악산\",\n    \"설치\",\n    \"설탕\",\n    \"섭씨\",\n    \"성공\",\n    \"성당\",\n    \"성명\",\n    \"성별\",\n    \"성인\",\n    \"성장\",\n    \"성적\",\n    \"성질\",\n    \"성함\",\n    \"세금\",\n    \"세미나\",\n    \"세상\",\n    \"세월\",\n    \"세종대왕\",\n    \"세탁\",\n    \"센터\",\n    \"센티미터\",\n    \"셋째\",\n    \"소규모\",\n    \"소극적\",\n    \"소금\",\n    \"소나기\",\n    \"소년\",\n    \"소득\",\n    \"소망\",\n    \"소문\",\n    \"소설\",\n    \"소속\",\n    \"소아과\",\n    \"소용\",\n    \"소원\",\n    \"소음\",\n    \"소중히\",\n    \"소지품\",\n    \"소질\",\n    \"소풍\",\n    \"소형\",\n    \"속담\",\n    \"속도\",\n    \"속옷\",\n    \"손가락\",\n    \"손길\",\n    \"손녀\",\n    \"손님\",\n    \"손등\",\n    \"손목\",\n    \"손뼉\",\n    \"손실\",\n    \"손질\",\n    \"손톱\",\n    \"손해\",\n    \"솔직히\",\n    \"솜씨\",\n    \"송아지\",\n    \"송이\",\n    \"송편\",\n    \"쇠고기\",\n    \"쇼핑\",\n    \"수건\",\n    \"수년\",\n    \"수단\",\n    \"수돗물\",\n    \"수동적\",\n    \"수면\",\n    \"수명\",\n    \"수박\",\n    \"수상\",\n    \"수석\",\n    \"수술\",\n    \"수시로\",\n    \"수업\",\n    \"수염\",\n    \"수영\",\n    \"수입\",\n    \"수준\",\n    \"수집\",\n    \"수출\",\n    \"수컷\",\n    \"수필\",\n    \"수학\",\n    \"수험생\",\n    \"수화기\",\n    \"숙녀\",\n    \"숙소\",\n    \"숙제\",\n    \"순간\",\n    \"순서\",\n    \"순수\",\n    \"순식간\",\n    \"순위\",\n    \"숟가락\",\n    \"술병\",\n    \"술집\",\n    \"숫자\",\n    \"스님\",\n    \"스물\",\n    \"스스로\",\n    \"스승\",\n    \"스웨터\",\n    \"스위치\",\n    \"스케이트\",\n    \"스튜디오\",\n    \"스트레스\",\n    \"스포츠\",\n    \"슬쩍\",\n    \"슬픔\",\n    \"습관\",\n    \"습기\",\n    \"승객\",\n    \"승리\",\n    \"승부\",\n    \"승용차\",\n    \"승진\",\n    \"시각\",\n    \"시간\",\n    \"시골\",\n    \"시금치\",\n    \"시나리오\",\n    \"시댁\",\n    \"시리즈\",\n    \"시멘트\",\n    \"시민\",\n    \"시부모\",\n    \"시선\",\n    \"시설\",\n    \"시스템\",\n    \"시아버지\",\n    \"시어머니\",\n    \"시월\",\n    \"시인\",\n    \"시일\",\n    \"시작\",\n    \"시장\",\n    \"시절\",\n    \"시점\",\n    \"시중\",\n    \"시즌\",\n    \"시집\",\n    \"시청\",\n    \"시합\",\n    \"시험\",\n    \"식구\",\n    \"식기\",\n    \"식당\",\n    \"식량\",\n    \"식료품\",\n    \"식물\",\n    \"식빵\",\n    \"식사\",\n    \"식생활\",\n    \"식초\",\n    \"식탁\",\n    \"식품\",\n    \"신고\",\n    \"신규\",\n    \"신념\",\n    \"신문\",\n    \"신발\",\n    \"신비\",\n    \"신사\",\n    \"신세\",\n    \"신용\",\n    \"신제품\",\n    \"신청\",\n    \"신체\",\n    \"신화\",\n    \"실감\",\n    \"실내\",\n    \"실력\",\n    \"실례\",\n    \"실망\",\n    \"실수\",\n    \"실습\",\n    \"실시\",\n    \"실장\",\n    \"실정\",\n    \"실질적\",\n    \"실천\",\n    \"실체\",\n    \"실컷\",\n    \"실태\",\n    \"실패\",\n    \"실험\",\n    \"실현\",\n    \"심리\",\n    \"심부름\",\n    \"심사\",\n    \"심장\",\n    \"심정\",\n    \"심판\",\n    \"쌍둥이\",\n    \"씨름\",\n    \"씨앗\",\n    \"아가씨\",\n    \"아나운서\",\n    \"아드님\",\n    \"아들\",\n    \"아쉬움\",\n    \"아스팔트\",\n    \"아시아\",\n    \"아울러\",\n    \"아저씨\",\n    \"아줌마\",\n    \"아직\",\n    \"아침\",\n    \"아파트\",\n    \"아프리카\",\n    \"아픔\",\n    \"아홉\",\n    \"아흔\",\n    \"악기\",\n    \"악몽\",\n    \"악수\",\n    \"안개\",\n    \"안경\",\n    \"안과\",\n    \"안내\",\n    \"안녕\",\n    \"안동\",\n    \"안방\",\n    \"안부\",\n    \"안주\",\n    \"알루미늄\",\n    \"알코올\",\n    \"암시\",\n    \"암컷\",\n    \"압력\",\n    \"앞날\",\n    \"앞문\",\n    \"애인\",\n    \"애정\",\n    \"액수\",\n    \"앨범\",\n    \"야간\",\n    \"야단\",\n    \"야옹\",\n    \"약간\",\n    \"약국\",\n    \"약속\",\n    \"약수\",\n    \"약점\",\n    \"약품\",\n    \"약혼녀\",\n    \"양념\",\n    \"양력\",\n    \"양말\",\n    \"양배추\",\n    \"양주\",\n    \"양파\",\n    \"어둠\",\n    \"어려움\",\n    \"어른\",\n    \"어젯밤\",\n    \"어쨌든\",\n    \"어쩌다가\",\n    \"어쩐지\",\n    \"언니\",\n    \"언덕\",\n    \"언론\",\n    \"언어\",\n    \"얼굴\",\n    \"얼른\",\n    \"얼음\",\n    \"얼핏\",\n    \"엄마\",\n    \"업무\",\n    \"업종\",\n    \"업체\",\n    \"엉덩이\",\n    \"엉망\",\n    \"엉터리\",\n    \"엊그제\",\n    \"에너지\",\n    \"에어컨\",\n    \"엔진\",\n    \"여건\",\n    \"여고생\",\n    \"여관\",\n    \"여군\",\n    \"여권\",\n    \"여대생\",\n    \"여덟\",\n    \"여동생\",\n    \"여든\",\n    \"여론\",\n    \"여름\",\n    \"여섯\",\n    \"여성\",\n    \"여왕\",\n    \"여인\",\n    \"여전히\",\n    \"여직원\",\n    \"여학생\",\n    \"여행\",\n    \"역사\",\n    \"역시\",\n    \"역할\",\n    \"연결\",\n    \"연구\",\n    \"연극\",\n    \"연기\",\n    \"연락\",\n    \"연설\",\n    \"연세\",\n    \"연속\",\n    \"연습\",\n    \"연애\",\n    \"연예인\",\n    \"연인\",\n    \"연장\",\n    \"연주\",\n    \"연출\",\n    \"연필\",\n    \"연합\",\n    \"연휴\",\n    \"열기\",\n    \"열매\",\n    \"열쇠\",\n    \"열심히\",\n    \"열정\",\n    \"열차\",\n    \"열흘\",\n    \"염려\",\n    \"엽서\",\n    \"영국\",\n    \"영남\",\n    \"영상\",\n    \"영양\",\n    \"영역\",\n    \"영웅\",\n    \"영원히\",\n    \"영하\",\n    \"영향\",\n    \"영혼\",\n    \"영화\",\n    \"옆구리\",\n    \"옆방\",\n    \"옆집\",\n    \"예감\",\n    \"예금\",\n    \"예방\",\n    \"예산\",\n    \"예상\",\n    \"예선\",\n    \"예술\",\n    \"예습\",\n    \"예식장\",\n    \"예약\",\n    \"예전\",\n    \"예절\",\n    \"예정\",\n    \"예컨대\",\n    \"옛날\",\n    \"오늘\",\n    \"오락\",\n    \"오랫동안\",\n    \"오렌지\",\n    \"오로지\",\n    \"오른발\",\n    \"오븐\",\n    \"오십\",\n    \"오염\",\n    \"오월\",\n    \"오전\",\n    \"오직\",\n    \"오징어\",\n    \"오페라\",\n    \"오피스텔\",\n    \"오히려\",\n    \"옥상\",\n    \"옥수수\",\n    \"온갖\",\n    \"온라인\",\n    \"온몸\",\n    \"온종일\",\n    \"온통\",\n    \"올가을\",\n    \"올림픽\",\n    \"올해\",\n    \"옷차림\",\n    \"와이셔츠\",\n    \"와인\",\n    \"완성\",\n    \"완전\",\n    \"왕비\",\n    \"왕자\",\n    \"왜냐하면\",\n    \"왠지\",\n    \"외갓집\",\n    \"외국\",\n    \"외로움\",\n    \"외삼촌\",\n    \"외출\",\n    \"외침\",\n    \"외할머니\",\n    \"왼발\",\n    \"왼손\",\n    \"왼쪽\",\n    \"요금\",\n    \"요일\",\n    \"요즘\",\n    \"요청\",\n    \"용기\",\n    \"용서\",\n    \"용어\",\n    \"우산\",\n    \"우선\",\n    \"우승\",\n    \"우연히\",\n    \"우정\",\n    \"우체국\",\n    \"우편\",\n    \"운동\",\n    \"운명\",\n    \"운반\",\n    \"운전\",\n    \"운행\",\n    \"울산\",\n    \"울음\",\n    \"움직임\",\n    \"웃어른\",\n    \"웃음\",\n    \"워낙\",\n    \"원고\",\n    \"원래\",\n    \"원서\",\n    \"원숭이\",\n    \"원인\",\n    \"원장\",\n    \"원피스\",\n    \"월급\",\n    \"월드컵\",\n    \"월세\",\n    \"월요일\",\n    \"웨이터\",\n    \"위반\",\n    \"위법\",\n    \"위성\",\n    \"위원\",\n    \"위험\",\n    \"위협\",\n    \"윗사람\",\n    \"유난히\",\n    \"유럽\",\n    \"유명\",\n    \"유물\",\n    \"유산\",\n    \"유적\",\n    \"유치원\",\n    \"유학\",\n    \"유행\",\n    \"유형\",\n    \"육군\",\n    \"육상\",\n    \"육십\",\n    \"육체\",\n    \"은행\",\n    \"음력\",\n    \"음료\",\n    \"음반\",\n    \"음성\",\n    \"음식\",\n    \"음악\",\n    \"음주\",\n    \"의견\",\n    \"의논\",\n    \"의문\",\n    \"의복\",\n    \"의식\",\n    \"의심\",\n    \"의외로\",\n    \"의욕\",\n    \"의원\",\n    \"의학\",\n    \"이것\",\n    \"이곳\",\n    \"이념\",\n    \"이놈\",\n    \"이달\",\n    \"이대로\",\n    \"이동\",\n    \"이렇게\",\n    \"이력서\",\n    \"이론적\",\n    \"이름\",\n    \"이민\",\n    \"이발소\",\n    \"이별\",\n    \"이불\",\n    \"이빨\",\n    \"이상\",\n    \"이성\",\n    \"이슬\",\n    \"이야기\",\n    \"이용\",\n    \"이웃\",\n    \"이월\",\n    \"이윽고\",\n    \"이익\",\n    \"이전\",\n    \"이중\",\n    \"이튿날\",\n    \"이틀\",\n    \"이혼\",\n    \"인간\",\n    \"인격\",\n    \"인공\",\n    \"인구\",\n    \"인근\",\n    \"인기\",\n    \"인도\",\n    \"인류\",\n    \"인물\",\n    \"인생\",\n    \"인쇄\",\n    \"인연\",\n    \"인원\",\n    \"인재\",\n    \"인종\",\n    \"인천\",\n    \"인체\",\n    \"인터넷\",\n    \"인하\",\n    \"인형\",\n    \"일곱\",\n    \"일기\",\n    \"일단\",\n    \"일대\",\n    \"일등\",\n    \"일반\",\n    \"일본\",\n    \"일부\",\n    \"일상\",\n    \"일생\",\n    \"일손\",\n    \"일요일\",\n    \"일월\",\n    \"일정\",\n    \"일종\",\n    \"일주일\",\n    \"일찍\",\n    \"일체\",\n    \"일치\",\n    \"일행\",\n    \"일회용\",\n    \"임금\",\n    \"임무\",\n    \"입대\",\n    \"입력\",\n    \"입맛\",\n    \"입사\",\n    \"입술\",\n    \"입시\",\n    \"입원\",\n    \"입장\",\n    \"입학\",\n    \"자가용\",\n    \"자격\",\n    \"자극\",\n    \"자동\",\n    \"자랑\",\n    \"자부심\",\n    \"자식\",\n    \"자신\",\n    \"자연\",\n    \"자원\",\n    \"자율\",\n    \"자전거\",\n    \"자정\",\n    \"자존심\",\n    \"자판\",\n    \"작가\",\n    \"작년\",\n    \"작성\",\n    \"작업\",\n    \"작용\",\n    \"작은딸\",\n    \"작품\",\n    \"잔디\",\n    \"잔뜩\",\n    \"잔치\",\n    \"잘못\",\n    \"잠깐\",\n    \"잠수함\",\n    \"잠시\",\n    \"잠옷\",\n    \"잠자리\",\n    \"잡지\",\n    \"장관\",\n    \"장군\",\n    \"장기간\",\n    \"장래\",\n    \"장례\",\n    \"장르\",\n    \"장마\",\n    \"장면\",\n    \"장모\",\n    \"장미\",\n    \"장비\",\n    \"장사\",\n    \"장소\",\n    \"장식\",\n    \"장애인\",\n    \"장인\",\n    \"장점\",\n    \"장차\",\n    \"장학금\",\n    \"재능\",\n    \"재빨리\",\n    \"재산\",\n    \"재생\",\n    \"재작년\",\n    \"재정\",\n    \"재채기\",\n    \"재판\",\n    \"재학\",\n    \"재활용\",\n    \"저것\",\n    \"저고리\",\n    \"저곳\",\n    \"저녁\",\n    \"저런\",\n    \"저렇게\",\n    \"저번\",\n    \"저울\",\n    \"저절로\",\n    \"저축\",\n    \"적극\",\n    \"적당히\",\n    \"적성\",\n    \"적용\",\n    \"적응\",\n    \"전개\",\n    \"전공\",\n    \"전기\",\n    \"전달\",\n    \"전라도\",\n    \"전망\",\n    \"전문\",\n    \"전반\",\n    \"전부\",\n    \"전세\",\n    \"전시\",\n    \"전용\",\n    \"전자\",\n    \"전쟁\",\n    \"전주\",\n    \"전철\",\n    \"전체\",\n    \"전통\",\n    \"전혀\",\n    \"전후\",\n    \"절대\",\n    \"절망\",\n    \"절반\",\n    \"절약\",\n    \"절차\",\n    \"점검\",\n    \"점수\",\n    \"점심\",\n    \"점원\",\n    \"점점\",\n    \"점차\",\n    \"접근\",\n    \"접시\",\n    \"접촉\",\n    \"젓가락\",\n    \"정거장\",\n    \"정도\",\n    \"정류장\",\n    \"정리\",\n    \"정말\",\n    \"정면\",\n    \"정문\",\n    \"정반대\",\n    \"정보\",\n    \"정부\",\n    \"정비\",\n    \"정상\",\n    \"정성\",\n    \"정오\",\n    \"정원\",\n    \"정장\",\n    \"정지\",\n    \"정치\",\n    \"정확히\",\n    \"제공\",\n    \"제과점\",\n    \"제대로\",\n    \"제목\",\n    \"제발\",\n    \"제법\",\n    \"제삿날\",\n    \"제안\",\n    \"제일\",\n    \"제작\",\n    \"제주도\",\n    \"제출\",\n    \"제품\",\n    \"제한\",\n    \"조각\",\n    \"조건\",\n    \"조금\",\n    \"조깅\",\n    \"조명\",\n    \"조미료\",\n    \"조상\",\n    \"조선\",\n    \"조용히\",\n    \"조절\",\n    \"조정\",\n    \"조직\",\n    \"존댓말\",\n    \"존재\",\n    \"졸업\",\n    \"졸음\",\n    \"종교\",\n    \"종로\",\n    \"종류\",\n    \"종소리\",\n    \"종업원\",\n    \"종종\",\n    \"종합\",\n    \"좌석\",\n    \"죄인\",\n    \"주관적\",\n    \"주름\",\n    \"주말\",\n    \"주머니\",\n    \"주먹\",\n    \"주문\",\n    \"주민\",\n    \"주방\",\n    \"주변\",\n    \"주식\",\n    \"주인\",\n    \"주일\",\n    \"주장\",\n    \"주전자\",\n    \"주택\",\n    \"준비\",\n    \"줄거리\",\n    \"줄기\",\n    \"줄무늬\",\n    \"중간\",\n    \"중계방송\",\n    \"중국\",\n    \"중년\",\n    \"중단\",\n    \"중독\",\n    \"중반\",\n    \"중부\",\n    \"중세\",\n    \"중소기업\",\n    \"중순\",\n    \"중앙\",\n    \"중요\",\n    \"중학교\",\n    \"즉석\",\n    \"즉시\",\n    \"즐거움\",\n    \"증가\",\n    \"증거\",\n    \"증권\",\n    \"증상\",\n    \"증세\",\n    \"지각\",\n    \"지갑\",\n    \"지경\",\n    \"지극히\",\n    \"지금\",\n    \"지급\",\n    \"지능\",\n    \"지름길\",\n    \"지리산\",\n    \"지방\",\n    \"지붕\",\n    \"지식\",\n    \"지역\",\n    \"지우개\",\n    \"지원\",\n    \"지적\",\n    \"지점\",\n    \"지진\",\n    \"지출\",\n    \"직선\",\n    \"직업\",\n    \"직원\",\n    \"직장\",\n    \"진급\",\n    \"진동\",\n    \"진로\",\n    \"진료\",\n    \"진리\",\n    \"진짜\",\n    \"진찰\",\n    \"진출\",\n    \"진통\",\n    \"진행\",\n    \"질문\",\n    \"질병\",\n    \"질서\",\n    \"짐작\",\n    \"집단\",\n    \"집안\",\n    \"집중\",\n    \"짜증\",\n    \"찌꺼기\",\n    \"차남\",\n    \"차라리\",\n    \"차량\",\n    \"차림\",\n    \"차별\",\n    \"차선\",\n    \"차츰\",\n    \"착각\",\n    \"찬물\",\n    \"찬성\",\n    \"참가\",\n    \"참기름\",\n    \"참새\",\n    \"참석\",\n    \"참여\",\n    \"참외\",\n    \"참조\",\n    \"찻잔\",\n    \"창가\",\n    \"창고\",\n    \"창구\",\n    \"창문\",\n    \"창밖\",\n    \"창작\",\n    \"창조\",\n    \"채널\",\n    \"채점\",\n    \"책가방\",\n    \"책방\",\n    \"책상\",\n    \"책임\",\n    \"챔피언\",\n    \"처벌\",\n    \"처음\",\n    \"천국\",\n    \"천둥\",\n    \"천장\",\n    \"천재\",\n    \"천천히\",\n    \"철도\",\n    \"철저히\",\n    \"철학\",\n    \"첫날\",\n    \"첫째\",\n    \"청년\",\n    \"청바지\",\n    \"청소\",\n    \"청춘\",\n    \"체계\",\n    \"체력\",\n    \"체온\",\n    \"체육\",\n    \"체중\",\n    \"체험\",\n    \"초등학생\",\n    \"초반\",\n    \"초밥\",\n    \"초상화\",\n    \"초순\",\n    \"초여름\",\n    \"초원\",\n    \"초저녁\",\n    \"초점\",\n    \"초청\",\n    \"초콜릿\",\n    \"촛불\",\n    \"총각\",\n    \"총리\",\n    \"총장\",\n    \"촬영\",\n    \"최근\",\n    \"최상\",\n    \"최선\",\n    \"최신\",\n    \"최악\",\n    \"최종\",\n    \"추석\",\n    \"추억\",\n    \"추진\",\n    \"추천\",\n    \"추측\",\n    \"축구\",\n    \"축소\",\n    \"축제\",\n    \"축하\",\n    \"출근\",\n    \"출발\",\n    \"출산\",\n    \"출신\",\n    \"출연\",\n    \"출입\",\n    \"출장\",\n    \"출판\",\n    \"충격\",\n    \"충고\",\n    \"충돌\",\n    \"충분히\",\n    \"충청도\",\n    \"취업\",\n    \"취직\",\n    \"취향\",\n    \"치약\",\n    \"친구\",\n    \"친척\",\n    \"칠십\",\n    \"칠월\",\n    \"칠판\",\n    \"침대\",\n    \"침묵\",\n    \"침실\",\n    \"칫솔\",\n    \"칭찬\",\n    \"카메라\",\n    \"카운터\",\n    \"칼국수\",\n    \"캐릭터\",\n    \"캠퍼스\",\n    \"캠페인\",\n    \"커튼\",\n    \"컨디션\",\n    \"컬러\",\n    \"컴퓨터\",\n    \"코끼리\",\n    \"코미디\",\n    \"콘서트\",\n    \"콜라\",\n    \"콤플렉스\",\n    \"콩나물\",\n    \"쾌감\",\n    \"쿠데타\",\n    \"크림\",\n    \"큰길\",\n    \"큰딸\",\n    \"큰소리\",\n    \"큰아들\",\n    \"큰어머니\",\n    \"큰일\",\n    \"큰절\",\n    \"클래식\",\n    \"클럽\",\n    \"킬로\",\n    \"타입\",\n    \"타자기\",\n    \"탁구\",\n    \"탁자\",\n    \"탄생\",\n    \"태권도\",\n    \"태양\",\n    \"태풍\",\n    \"택시\",\n    \"탤런트\",\n    \"터널\",\n    \"터미널\",\n    \"테니스\",\n    \"테스트\",\n    \"테이블\",\n    \"텔레비전\",\n    \"토론\",\n    \"토마토\",\n    \"토요일\",\n    \"통계\",\n    \"통과\",\n    \"통로\",\n    \"통신\",\n    \"통역\",\n    \"통일\",\n    \"통장\",\n    \"통제\",\n    \"통증\",\n    \"통합\",\n    \"통화\",\n    \"퇴근\",\n    \"퇴원\",\n    \"퇴직금\",\n    \"튀김\",\n    \"트럭\",\n    \"특급\",\n    \"특별\",\n    \"특성\",\n    \"특수\",\n    \"특징\",\n    \"특히\",\n    \"튼튼히\",\n    \"티셔츠\",\n    \"파란색\",\n    \"파일\",\n    \"파출소\",\n    \"판결\",\n    \"판단\",\n    \"판매\",\n    \"판사\",\n    \"팔십\",\n    \"팔월\",\n    \"팝송\",\n    \"패션\",\n    \"팩스\",\n    \"팩시밀리\",\n    \"팬티\",\n    \"퍼센트\",\n    \"페인트\",\n    \"편견\",\n    \"편의\",\n    \"편지\",\n    \"편히\",\n    \"평가\",\n    \"평균\",\n    \"평생\",\n    \"평소\",\n    \"평양\",\n    \"평일\",\n    \"평화\",\n    \"포스터\",\n    \"포인트\",\n    \"포장\",\n    \"포함\",\n    \"표면\",\n    \"표정\",\n    \"표준\",\n    \"표현\",\n    \"품목\",\n    \"품질\",\n    \"풍경\",\n    \"풍속\",\n    \"풍습\",\n    \"프랑스\",\n    \"프린터\",\n    \"플라스틱\",\n    \"피곤\",\n    \"피망\",\n    \"피아노\",\n    \"필름\",\n    \"필수\",\n    \"필요\",\n    \"필자\",\n    \"필통\",\n    \"핑계\",\n    \"하느님\",\n    \"하늘\",\n    \"하드웨어\",\n    \"하룻밤\",\n    \"하반기\",\n    \"하숙집\",\n    \"하순\",\n    \"하여튼\",\n    \"하지만\",\n    \"하천\",\n    \"하품\",\n    \"하필\",\n    \"학과\",\n    \"학교\",\n    \"학급\",\n    \"학기\",\n    \"학년\",\n    \"학력\",\n    \"학번\",\n    \"학부모\",\n    \"학비\",\n    \"학생\",\n    \"학술\",\n    \"학습\",\n    \"학용품\",\n    \"학원\",\n    \"학위\",\n    \"학자\",\n    \"학점\",\n    \"한계\",\n    \"한글\",\n    \"한꺼번에\",\n    \"한낮\",\n    \"한눈\",\n    \"한동안\",\n    \"한때\",\n    \"한라산\",\n    \"한마디\",\n    \"한문\",\n    \"한번\",\n    \"한복\",\n    \"한식\",\n    \"한여름\",\n    \"한쪽\",\n    \"할머니\",\n    \"할아버지\",\n    \"할인\",\n    \"함께\",\n    \"함부로\",\n    \"합격\",\n    \"합리적\",\n    \"항공\",\n    \"항구\",\n    \"항상\",\n    \"항의\",\n    \"해결\",\n    \"해군\",\n    \"해답\",\n    \"해당\",\n    \"해물\",\n    \"해석\",\n    \"해설\",\n    \"해수욕장\",\n    \"해안\",\n    \"핵심\",\n    \"핸드백\",\n    \"햄버거\",\n    \"햇볕\",\n    \"햇살\",\n    \"행동\",\n    \"행복\",\n    \"행사\",\n    \"행운\",\n    \"행위\",\n    \"향기\",\n    \"향상\",\n    \"향수\",\n    \"허락\",\n    \"허용\",\n    \"헬기\",\n    \"현관\",\n    \"현금\",\n    \"현대\",\n    \"현상\",\n    \"현실\",\n    \"현장\",\n    \"현재\",\n    \"현지\",\n    \"혈액\",\n    \"협력\",\n    \"형부\",\n    \"형사\",\n    \"형수\",\n    \"형식\",\n    \"형제\",\n    \"형태\",\n    \"형편\",\n    \"혜택\",\n    \"호기심\",\n    \"호남\",\n    \"호랑이\",\n    \"호박\",\n    \"호텔\",\n    \"호흡\",\n    \"혹시\",\n    \"홀로\",\n    \"홈페이지\",\n    \"홍보\",\n    \"홍수\",\n    \"홍차\",\n    \"화면\",\n    \"화분\",\n    \"화살\",\n    \"화요일\",\n    \"화장\",\n    \"화학\",\n    \"확보\",\n    \"확인\",\n    \"확장\",\n    \"확정\",\n    \"환갑\",\n    \"환경\",\n    \"환영\",\n    \"환율\",\n    \"환자\",\n    \"활기\",\n    \"활동\",\n    \"활발히\",\n    \"활용\",\n    \"활짝\",\n    \"회견\",\n    \"회관\",\n    \"회복\",\n    \"회색\",\n    \"회원\",\n    \"회장\",\n    \"회전\",\n    \"횟수\",\n    \"횡단보도\",\n    \"효율적\",\n    \"후반\",\n    \"후춧가루\",\n    \"훈련\",\n    \"훨씬\",\n    \"휴식\",\n    \"휴일\",\n    \"흉내\",\n    \"흐름\",\n    \"흑백\",\n    \"흑인\",\n    \"흔적\",\n    \"흔히\",\n    \"흥미\",\n    \"흥분\",\n    \"희곡\",\n    \"희망\",\n    \"희생\",\n    \"흰색\",\n    \"힘껏\"\n]\n[\n    \"abacate\",\n    \"abaixo\",\n    \"abalar\",\n    \"abater\",\n    \"abduzir\",\n    \"abelha\",\n    \"aberto\",\n    \"abismo\",\n    \"abotoar\",\n    \"abranger\",\n    \"abreviar\",\n    \"abrigar\",\n    \"abrupto\",\n    \"absinto\",\n    \"absoluto\",\n    \"absurdo\",\n    \"abutre\",\n    \"acabado\",\n    \"acalmar\",\n    \"acampar\",\n    \"acanhar\",\n    \"acaso\",\n    \"aceitar\",\n    \"acelerar\",\n    \"acenar\",\n    \"acervo\",\n    \"acessar\",\n    \"acetona\",\n    \"achatar\",\n    \"acidez\",\n    \"acima\",\n    \"acionado\",\n    \"acirrar\",\n    \"aclamar\",\n    \"aclive\",\n    \"acolhida\",\n    \"acomodar\",\n    \"acoplar\",\n    \"acordar\",\n    \"acumular\",\n    \"acusador\",\n    \"adaptar\",\n    \"adega\",\n    \"adentro\",\n    \"adepto\",\n    \"adequar\",\n    \"aderente\",\n    \"adesivo\",\n    \"adeus\",\n    \"adiante\",\n    \"aditivo\",\n    \"adjetivo\",\n    \"adjunto\",\n    \"admirar\",\n    \"adorar\",\n    \"adquirir\",\n    \"adubo\",\n    \"adverso\",\n    \"advogado\",\n    \"aeronave\",\n    \"afastar\",\n    \"aferir\",\n    \"afetivo\",\n    \"afinador\",\n    \"afivelar\",\n    \"aflito\",\n    \"afluente\",\n    \"afrontar\",\n    \"agachar\",\n    \"agarrar\",\n    \"agasalho\",\n    \"agenciar\",\n    \"agilizar\",\n    \"agiota\",\n    \"agitado\",\n    \"agora\",\n    \"agradar\",\n    \"agreste\",\n    \"agrupar\",\n    \"aguardar\",\n    \"agulha\",\n    \"ajoelhar\",\n    \"ajudar\",\n    \"ajustar\",\n    \"alameda\",\n    \"alarme\",\n    \"alastrar\",\n    \"alavanca\",\n    \"albergue\",\n    \"albino\",\n    \"alcatra\",\n    \"aldeia\",\n    \"alecrim\",\n    \"alegria\",\n    \"alertar\",\n    \"alface\",\n    \"alfinete\",\n    \"algum\",\n    \"alheio\",\n    \"aliar\",\n    \"alicate\",\n    \"alienar\",\n    \"alinhar\",\n    \"aliviar\",\n    \"almofada\",\n    \"alocar\",\n    \"alpiste\",\n    \"alterar\",\n    \"altitude\",\n    \"alucinar\",\n    \"alugar\",\n    \"aluno\",\n    \"alusivo\",\n    \"alvo\",\n    \"amaciar\",\n    \"amador\",\n    \"amarelo\",\n    \"amassar\",\n    \"ambas\",\n    \"ambiente\",\n    \"ameixa\",\n    \"amenizar\",\n    \"amido\",\n    \"amistoso\",\n    \"amizade\",\n    \"amolador\",\n    \"amontoar\",\n    \"amoroso\",\n    \"amostra\",\n    \"amparar\",\n    \"ampliar\",\n    \"ampola\",\n    \"anagrama\",\n    \"analisar\",\n    \"anarquia\",\n    \"anatomia\",\n    \"andaime\",\n    \"anel\",\n    \"anexo\",\n    \"angular\",\n    \"animar\",\n    \"anjo\",\n    \"anomalia\",\n    \"anotado\",\n    \"ansioso\",\n    \"anterior\",\n    \"anuidade\",\n    \"anunciar\",\n    \"anzol\",\n    \"apagador\",\n    \"apalpar\",\n    \"apanhado\",\n    \"apego\",\n    \"apelido\",\n    \"apertada\",\n    \"apesar\",\n    \"apetite\",\n    \"apito\",\n    \"aplauso\",\n    \"aplicada\",\n    \"apoio\",\n    \"apontar\",\n    \"aposta\",\n    \"aprendiz\",\n    \"aprovar\",\n    \"aquecer\",\n    \"arame\",\n    \"aranha\",\n    \"arara\",\n    \"arcada\",\n    \"ardente\",\n    \"areia\",\n    \"arejar\",\n    \"arenito\",\n    \"aresta\",\n    \"argiloso\",\n    \"argola\",\n    \"arma\",\n    \"arquivo\",\n    \"arraial\",\n    \"arrebate\",\n    \"arriscar\",\n    \"arroba\",\n    \"arrumar\",\n    \"arsenal\",\n    \"arterial\",\n    \"artigo\",\n    \"arvoredo\",\n    \"asfaltar\",\n    \"asilado\",\n    \"aspirar\",\n    \"assador\",\n    \"assinar\",\n    \"assoalho\",\n    \"assunto\",\n    \"astral\",\n    \"atacado\",\n    \"atadura\",\n    \"atalho\",\n    \"atarefar\",\n    \"atear\",\n    \"atender\",\n    \"aterro\",\n    \"ateu\",\n    \"atingir\",\n    \"atirador\",\n    \"ativo\",\n    \"atoleiro\",\n    \"atracar\",\n    \"atrevido\",\n    \"atriz\",\n    \"atual\",\n    \"atum\",\n    \"auditor\",\n    \"aumentar\",\n    \"aura\",\n    \"aurora\",\n    \"autismo\",\n    \"autoria\",\n    \"autuar\",\n    \"avaliar\",\n    \"avante\",\n    \"avaria\",\n    \"avental\",\n    \"avesso\",\n    \"aviador\",\n    \"avisar\",\n    \"avulso\",\n    \"axila\",\n    \"azarar\",\n    \"azedo\",\n    \"azeite\",\n    \"azulejo\",\n    \"babar\",\n    \"babosa\",\n    \"bacalhau\",\n    \"bacharel\",\n    \"bacia\",\n    \"bagagem\",\n    \"baiano\",\n    \"bailar\",\n    \"baioneta\",\n    \"bairro\",\n    \"baixista\",\n    \"bajular\",\n    \"baleia\",\n    \"baliza\",\n    \"balsa\",\n    \"banal\",\n    \"bandeira\",\n    \"banho\",\n    \"banir\",\n    \"banquete\",\n    \"barato\",\n    \"barbado\",\n    \"baronesa\",\n    \"barraca\",\n    \"barulho\",\n    \"baseado\",\n    \"bastante\",\n    \"batata\",\n    \"batedor\",\n    \"batida\",\n    \"batom\",\n    \"batucar\",\n    \"baunilha\",\n    \"beber\",\n    \"beijo\",\n    \"beirada\",\n    \"beisebol\",\n    \"beldade\",\n    \"beleza\",\n    \"belga\",\n    \"beliscar\",\n    \"bendito\",\n    \"bengala\",\n    \"benzer\",\n    \"berimbau\",\n    \"berlinda\",\n    \"berro\",\n    \"besouro\",\n    \"bexiga\",\n    \"bezerro\",\n    \"bico\",\n    \"bicudo\",\n    \"bienal\",\n    \"bifocal\",\n    \"bifurcar\",\n    \"bigorna\",\n    \"bilhete\",\n    \"bimestre\",\n    \"bimotor\",\n    \"biologia\",\n    \"biombo\",\n    \"biosfera\",\n    \"bipolar\",\n    \"birrento\",\n    \"biscoito\",\n    \"bisneto\",\n    \"bispo\",\n    \"bissexto\",\n    \"bitola\",\n    \"bizarro\",\n    \"blindado\",\n    \"bloco\",\n    \"bloquear\",\n    \"boato\",\n    \"bobagem\",\n    \"bocado\",\n    \"bocejo\",\n    \"bochecha\",\n    \"boicotar\",\n    \"bolada\",\n    \"boletim\",\n    \"bolha\",\n    \"bolo\",\n    \"bombeiro\",\n    \"bonde\",\n    \"boneco\",\n    \"bonita\",\n    \"borbulha\",\n    \"borda\",\n    \"boreal\",\n    \"borracha\",\n    \"bovino\",\n    \"boxeador\",\n    \"branco\",\n    \"brasa\",\n    \"braveza\",\n    \"breu\",\n    \"briga\",\n    \"brilho\",\n    \"brincar\",\n    \"broa\",\n    \"brochura\",\n    \"bronzear\",\n    \"broto\",\n    \"bruxo\",\n    \"bucha\",\n    \"budismo\",\n    \"bufar\",\n    \"bule\",\n    \"buraco\",\n    \"busca\",\n    \"busto\",\n    \"buzina\",\n    \"cabana\",\n    \"cabelo\",\n    \"cabide\",\n    \"cabo\",\n    \"cabrito\",\n    \"cacau\",\n    \"cacetada\",\n    \"cachorro\",\n    \"cacique\",\n    \"cadastro\",\n    \"cadeado\",\n    \"cafezal\",\n    \"caiaque\",\n    \"caipira\",\n    \"caixote\",\n    \"cajado\",\n    \"caju\",\n    \"calafrio\",\n    \"calcular\",\n    \"caldeira\",\n    \"calibrar\",\n    \"calmante\",\n    \"calota\",\n    \"camada\",\n    \"cambista\",\n    \"camisa\",\n    \"camomila\",\n    \"campanha\",\n    \"camuflar\",\n    \"canavial\",\n    \"cancelar\",\n    \"caneta\",\n    \"canguru\",\n    \"canhoto\",\n    \"canivete\",\n    \"canoa\",\n    \"cansado\",\n    \"cantar\",\n    \"canudo\",\n    \"capacho\",\n    \"capela\",\n    \"capinar\",\n    \"capotar\",\n    \"capricho\",\n    \"captador\",\n    \"capuz\",\n    \"caracol\",\n    \"carbono\",\n    \"cardeal\",\n    \"careca\",\n    \"carimbar\",\n    \"carneiro\",\n    \"carpete\",\n    \"carreira\",\n    \"cartaz\",\n    \"carvalho\",\n    \"casaco\",\n    \"casca\",\n    \"casebre\",\n    \"castelo\",\n    \"casulo\",\n    \"catarata\",\n    \"cativar\",\n    \"caule\",\n    \"causador\",\n    \"cautelar\",\n    \"cavalo\",\n    \"caverna\",\n    \"cebola\",\n    \"cedilha\",\n    \"cegonha\",\n    \"celebrar\",\n    \"celular\",\n    \"cenoura\",\n    \"censo\",\n    \"centeio\",\n    \"cercar\",\n    \"cerrado\",\n    \"certeiro\",\n    \"cerveja\",\n    \"cetim\",\n    \"cevada\",\n    \"chacota\",\n    \"chaleira\",\n    \"chamado\",\n    \"chapada\",\n    \"charme\",\n    \"chatice\",\n    \"chave\",\n    \"chefe\",\n    \"chegada\",\n    \"cheiro\",\n    \"cheque\",\n    \"chicote\",\n    \"chifre\",\n    \"chinelo\",\n    \"chocalho\",\n    \"chover\",\n    \"chumbo\",\n    \"chutar\",\n    \"chuva\",\n    \"cicatriz\",\n    \"ciclone\",\n    \"cidade\",\n    \"cidreira\",\n    \"ciente\",\n    \"cigana\",\n    \"cimento\",\n    \"cinto\",\n    \"cinza\",\n    \"ciranda\",\n    \"circuito\",\n    \"cirurgia\",\n    \"citar\",\n    \"clareza\",\n    \"clero\",\n    \"clicar\",\n    \"clone\",\n    \"clube\",\n    \"coado\",\n    \"coagir\",\n    \"cobaia\",\n    \"cobertor\",\n    \"cobrar\",\n    \"cocada\",\n    \"coelho\",\n    \"coentro\",\n    \"coeso\",\n    \"cogumelo\",\n    \"coibir\",\n    \"coifa\",\n    \"coiote\",\n    \"colar\",\n    \"coleira\",\n    \"colher\",\n    \"colidir\",\n    \"colmeia\",\n    \"colono\",\n    \"coluna\",\n    \"comando\",\n    \"combinar\",\n    \"comentar\",\n    \"comitiva\",\n    \"comover\",\n    \"complexo\",\n    \"comum\",\n    \"concha\",\n    \"condor\",\n    \"conectar\",\n    \"confuso\",\n    \"congelar\",\n    \"conhecer\",\n    \"conjugar\",\n    \"consumir\",\n    \"contrato\",\n    \"convite\",\n    \"cooperar\",\n    \"copeiro\",\n    \"copiador\",\n    \"copo\",\n    \"coquetel\",\n    \"coragem\",\n    \"cordial\",\n    \"corneta\",\n    \"coronha\",\n    \"corporal\",\n    \"correio\",\n    \"cortejo\",\n    \"coruja\",\n    \"corvo\",\n    \"cosseno\",\n    \"costela\",\n    \"cotonete\",\n    \"couro\",\n    \"couve\",\n    \"covil\",\n    \"cozinha\",\n    \"cratera\",\n    \"cravo\",\n    \"creche\",\n    \"credor\",\n    \"creme\",\n    \"crer\",\n    \"crespo\",\n    \"criada\",\n    \"criminal\",\n    \"crioulo\",\n    \"crise\",\n    \"criticar\",\n    \"crosta\",\n    \"crua\",\n    \"cruzeiro\",\n    \"cubano\",\n    \"cueca\",\n    \"cuidado\",\n    \"cujo\",\n    \"culatra\",\n    \"culminar\",\n    \"culpar\",\n    \"cultura\",\n    \"cumprir\",\n    \"cunhado\",\n    \"cupido\",\n    \"curativo\",\n    \"curral\",\n    \"cursar\",\n    \"curto\",\n    \"cuspir\",\n    \"custear\",\n    \"cutelo\",\n    \"damasco\",\n    \"datar\",\n    \"debater\",\n    \"debitar\",\n    \"deboche\",\n    \"debulhar\",\n    \"decalque\",\n    \"decimal\",\n    \"declive\",\n    \"decote\",\n    \"decretar\",\n    \"dedal\",\n    \"dedicado\",\n    \"deduzir\",\n    \"defesa\",\n    \"defumar\",\n    \"degelo\",\n    \"degrau\",\n    \"degustar\",\n    \"deitado\",\n    \"deixar\",\n    \"delator\",\n    \"delegado\",\n    \"delinear\",\n    \"delonga\",\n    \"demanda\",\n    \"demitir\",\n    \"demolido\",\n    \"dentista\",\n    \"depenado\",\n    \"depilar\",\n    \"depois\",\n    \"depressa\",\n    \"depurar\",\n    \"deriva\",\n    \"derramar\",\n    \"desafio\",\n    \"desbotar\",\n    \"descanso\",\n    \"desenho\",\n    \"desfiado\",\n    \"desgaste\",\n    \"desigual\",\n    \"deslize\",\n    \"desmamar\",\n    \"desova\",\n    \"despesa\",\n    \"destaque\",\n    \"desviar\",\n    \"detalhar\",\n    \"detentor\",\n    \"detonar\",\n    \"detrito\",\n    \"deusa\",\n    \"dever\",\n    \"devido\",\n    \"devotado\",\n    \"dezena\",\n    \"diagrama\",\n    \"dialeto\",\n    \"didata\",\n    \"difuso\",\n    \"digitar\",\n    \"dilatado\",\n    \"diluente\",\n    \"diminuir\",\n    \"dinastia\",\n    \"dinheiro\",\n    \"diocese\",\n    \"direto\",\n    \"discreta\",\n    \"disfarce\",\n    \"disparo\",\n    \"disquete\",\n    \"dissipar\",\n    \"distante\",\n    \"ditador\",\n    \"diurno\",\n    \"diverso\",\n    \"divisor\",\n    \"divulgar\",\n    \"dizer\",\n    \"dobrador\",\n    \"dolorido\",\n    \"domador\",\n    \"dominado\",\n    \"donativo\",\n    \"donzela\",\n    \"dormente\",\n    \"dorsal\",\n    \"dosagem\",\n    \"dourado\",\n    \"doutor\",\n    \"drenagem\",\n    \"drible\",\n    \"drogaria\",\n    \"duelar\",\n    \"duende\",\n    \"dueto\",\n    \"duplo\",\n    \"duquesa\",\n    \"durante\",\n    \"duvidoso\",\n    \"eclodir\",\n    \"ecoar\",\n    \"ecologia\",\n    \"edificar\",\n    \"edital\",\n    \"educado\",\n    \"efeito\",\n    \"efetivar\",\n    \"ejetar\",\n    \"elaborar\",\n    \"eleger\",\n    \"eleitor\",\n    \"elenco\",\n    \"elevador\",\n    \"eliminar\",\n    \"elogiar\",\n    \"embargo\",\n    \"embolado\",\n    \"embrulho\",\n    \"embutido\",\n    \"emenda\",\n    \"emergir\",\n    \"emissor\",\n    \"empatia\",\n    \"empenho\",\n    \"empinado\",\n    \"empolgar\",\n    \"emprego\",\n    \"empurrar\",\n    \"emulador\",\n    \"encaixe\",\n    \"encenado\",\n    \"enchente\",\n    \"encontro\",\n    \"endeusar\",\n    \"endossar\",\n    \"enfaixar\",\n    \"enfeite\",\n    \"enfim\",\n    \"engajado\",\n    \"engenho\",\n    \"englobar\",\n    \"engomado\",\n    \"engraxar\",\n    \"enguia\",\n    \"enjoar\",\n    \"enlatar\",\n    \"enquanto\",\n    \"enraizar\",\n    \"enrolado\",\n    \"enrugar\",\n    \"ensaio\",\n    \"enseada\",\n    \"ensino\",\n    \"ensopado\",\n    \"entanto\",\n    \"enteado\",\n    \"entidade\",\n    \"entortar\",\n    \"entrada\",\n    \"entulho\",\n    \"envergar\",\n    \"enviado\",\n    \"envolver\",\n    \"enxame\",\n    \"enxerto\",\n    \"enxofre\",\n    \"enxuto\",\n    \"epiderme\",\n    \"equipar\",\n    \"ereto\",\n    \"erguido\",\n    \"errata\",\n    \"erva\",\n    \"ervilha\",\n    \"esbanjar\",\n    \"esbelto\",\n    \"escama\",\n    \"escola\",\n    \"escrita\",\n    \"escuta\",\n    \"esfinge\",\n    \"esfolar\",\n    \"esfregar\",\n    \"esfumado\",\n    \"esgrima\",\n    \"esmalte\",\n    \"espanto\",\n    \"espelho\",\n    \"espiga\",\n    \"esponja\",\n    \"espreita\",\n    \"espumar\",\n    \"esquerda\",\n    \"estaca\",\n    \"esteira\",\n    \"esticar\",\n    \"estofado\",\n    \"estrela\",\n    \"estudo\",\n    \"esvaziar\",\n    \"etanol\",\n    \"etiqueta\",\n    \"euforia\",\n    \"europeu\",\n    \"evacuar\",\n    \"evaporar\",\n    \"evasivo\",\n    \"eventual\",\n    \"evidente\",\n    \"evoluir\",\n    \"exagero\",\n    \"exalar\",\n    \"examinar\",\n    \"exato\",\n    \"exausto\",\n    \"excesso\",\n    \"excitar\",\n    \"exclamar\",\n    \"executar\",\n    \"exemplo\",\n    \"exibir\",\n    \"exigente\",\n    \"exonerar\",\n    \"expandir\",\n    \"expelir\",\n    \"expirar\",\n    \"explanar\",\n    \"exposto\",\n    \"expresso\",\n    \"expulsar\",\n    \"externo\",\n    \"extinto\",\n    \"extrato\",\n    \"fabricar\",\n    \"fabuloso\",\n    \"faceta\",\n    \"facial\",\n    \"fada\",\n    \"fadiga\",\n    \"faixa\",\n    \"falar\",\n    \"falta\",\n    \"familiar\",\n    \"fandango\",\n    \"fanfarra\",\n    \"fantoche\",\n    \"fardado\",\n    \"farelo\",\n    \"farinha\",\n    \"farofa\",\n    \"farpa\",\n    \"fartura\",\n    \"fatia\",\n    \"fator\",\n    \"favorita\",\n    \"faxina\",\n    \"fazenda\",\n    \"fechado\",\n    \"feijoada\",\n    \"feirante\",\n    \"felino\",\n    \"feminino\",\n    \"fenda\",\n    \"feno\",\n    \"fera\",\n    \"feriado\",\n    \"ferrugem\",\n    \"ferver\",\n    \"festejar\",\n    \"fetal\",\n    \"feudal\",\n    \"fiapo\",\n    \"fibrose\",\n    \"ficar\",\n    \"ficheiro\",\n    \"figurado\",\n    \"fileira\",\n    \"filho\",\n    \"filme\",\n    \"filtrar\",\n    \"firmeza\",\n    \"fisgada\",\n    \"fissura\",\n    \"fita\",\n    \"fivela\",\n    \"fixador\",\n    \"fixo\",\n    \"flacidez\",\n    \"flamingo\",\n    \"flanela\",\n    \"flechada\",\n    \"flora\",\n    \"flutuar\",\n    \"fluxo\",\n    \"focal\",\n    \"focinho\",\n    \"fofocar\",\n    \"fogo\",\n    \"foguete\",\n    \"foice\",\n    \"folgado\",\n    \"folheto\",\n    \"forjar\",\n    \"formiga\",\n    \"forno\",\n    \"forte\",\n    \"fosco\",\n    \"fossa\",\n    \"fragata\",\n    \"fralda\",\n    \"frango\",\n    \"frasco\",\n    \"fraterno\",\n    \"freira\",\n    \"frente\",\n    \"fretar\",\n    \"frieza\",\n    \"friso\",\n    \"fritura\",\n    \"fronha\",\n    \"frustrar\",\n    \"fruteira\",\n    \"fugir\",\n    \"fulano\",\n    \"fuligem\",\n    \"fundar\",\n    \"fungo\",\n    \"funil\",\n    \"furador\",\n    \"furioso\",\n    \"futebol\",\n    \"gabarito\",\n    \"gabinete\",\n    \"gado\",\n    \"gaiato\",\n    \"gaiola\",\n    \"gaivota\",\n    \"galega\",\n    \"galho\",\n    \"galinha\",\n    \"galocha\",\n    \"ganhar\",\n    \"garagem\",\n    \"garfo\",\n    \"gargalo\",\n    \"garimpo\",\n    \"garoupa\",\n    \"garrafa\",\n    \"gasoduto\",\n    \"gasto\",\n    \"gata\",\n    \"gatilho\",\n    \"gaveta\",\n    \"gazela\",\n    \"gelado\",\n    \"geleia\",\n    \"gelo\",\n    \"gemada\",\n    \"gemer\",\n    \"gemido\",\n    \"generoso\",\n    \"gengiva\",\n    \"genial\",\n    \"genoma\",\n    \"genro\",\n    \"geologia\",\n    \"gerador\",\n    \"germinar\",\n    \"gesso\",\n    \"gestor\",\n    \"ginasta\",\n    \"gincana\",\n    \"gingado\",\n    \"girafa\",\n    \"girino\",\n    \"glacial\",\n    \"glicose\",\n    \"global\",\n    \"glorioso\",\n    \"goela\",\n    \"goiaba\",\n    \"golfe\",\n    \"golpear\",\n    \"gordura\",\n    \"gorjeta\",\n    \"gorro\",\n    \"gostoso\",\n    \"goteira\",\n    \"governar\",\n    \"gracejo\",\n    \"gradual\",\n    \"grafite\",\n    \"gralha\",\n    \"grampo\",\n    \"granada\",\n    \"gratuito\",\n    \"graveto\",\n    \"graxa\",\n    \"grego\",\n    \"grelhar\",\n    \"greve\",\n    \"grilo\",\n    \"grisalho\",\n    \"gritaria\",\n    \"grosso\",\n    \"grotesco\",\n    \"grudado\",\n    \"grunhido\",\n    \"gruta\",\n    \"guache\",\n    \"guarani\",\n    \"guaxinim\",\n    \"guerrear\",\n    \"guiar\",\n    \"guincho\",\n    \"guisado\",\n    \"gula\",\n    \"guloso\",\n    \"guru\",\n    \"habitar\",\n    \"harmonia\",\n    \"haste\",\n    \"haver\",\n    \"hectare\",\n    \"herdar\",\n    \"heresia\",\n    \"hesitar\",\n    \"hiato\",\n    \"hibernar\",\n    \"hidratar\",\n    \"hiena\",\n    \"hino\",\n    \"hipismo\",\n    \"hipnose\",\n    \"hipoteca\",\n    \"hoje\",\n    \"holofote\",\n    \"homem\",\n    \"honesto\",\n    \"honrado\",\n    \"hormonal\",\n    \"hospedar\",\n    \"humorado\",\n    \"iate\",\n    \"ideia\",\n    \"idoso\",\n    \"ignorado\",\n    \"igreja\",\n    \"iguana\",\n    \"ileso\",\n    \"ilha\",\n    \"iludido\",\n    \"iluminar\",\n    \"ilustrar\",\n    \"imagem\",\n    \"imediato\",\n    \"imenso\",\n    \"imersivo\",\n    \"iminente\",\n    \"imitador\",\n    \"imortal\",\n    \"impacto\",\n    \"impedir\",\n    \"implante\",\n    \"impor\",\n    \"imprensa\",\n    \"impune\",\n    \"imunizar\",\n    \"inalador\",\n    \"inapto\",\n    \"inativo\",\n    \"incenso\",\n    \"inchar\",\n    \"incidir\",\n    \"incluir\",\n    \"incolor\",\n    \"indeciso\",\n    \"indireto\",\n    \"indutor\",\n    \"ineficaz\",\n    \"inerente\",\n    \"infantil\",\n    \"infestar\",\n    \"infinito\",\n    \"inflamar\",\n    \"informal\",\n    \"infrator\",\n    \"ingerir\",\n    \"inibido\",\n    \"inicial\",\n    \"inimigo\",\n    \"injetar\",\n    \"inocente\",\n    \"inodoro\",\n    \"inovador\",\n    \"inox\",\n    \"inquieto\",\n    \"inscrito\",\n    \"inseto\",\n    \"insistir\",\n    \"inspetor\",\n    \"instalar\",\n    \"insulto\",\n    \"intacto\",\n    \"integral\",\n    \"intimar\",\n    \"intocado\",\n    \"intriga\",\n    \"invasor\",\n    \"inverno\",\n    \"invicto\",\n    \"invocar\",\n    \"iogurte\",\n    \"iraniano\",\n    \"ironizar\",\n    \"irreal\",\n    \"irritado\",\n    \"isca\",\n    \"isento\",\n    \"isolado\",\n    \"isqueiro\",\n    \"italiano\",\n    \"janeiro\",\n    \"jangada\",\n    \"janta\",\n    \"jararaca\",\n    \"jardim\",\n    \"jarro\",\n    \"jasmim\",\n    \"jato\",\n    \"javali\",\n    \"jazida\",\n    \"jejum\",\n    \"joaninha\",\n    \"joelhada\",\n    \"jogador\",\n    \"joia\",\n    \"jornal\",\n    \"jorrar\",\n    \"jovem\",\n    \"juba\",\n    \"judeu\",\n    \"judoca\",\n    \"juiz\",\n    \"julgador\",\n    \"julho\",\n    \"jurado\",\n    \"jurista\",\n    \"juro\",\n    \"justa\",\n    \"labareda\",\n    \"laboral\",\n    \"lacre\",\n    \"lactante\",\n    \"ladrilho\",\n    \"lagarta\",\n    \"lagoa\",\n    \"laje\",\n    \"lamber\",\n    \"lamentar\",\n    \"laminar\",\n    \"lampejo\",\n    \"lanche\",\n    \"lapidar\",\n    \"lapso\",\n    \"laranja\",\n    \"lareira\",\n    \"largura\",\n    \"lasanha\",\n    \"lastro\",\n    \"lateral\",\n    \"latido\",\n    \"lavanda\",\n    \"lavoura\",\n    \"lavrador\",\n    \"laxante\",\n    \"lazer\",\n    \"lealdade\",\n    \"lebre\",\n    \"legado\",\n    \"legendar\",\n    \"legista\",\n    \"leigo\",\n    \"leiloar\",\n    \"leitura\",\n    \"lembrete\",\n    \"leme\",\n    \"lenhador\",\n    \"lentilha\",\n    \"leoa\",\n    \"lesma\",\n    \"leste\",\n    \"letivo\",\n    \"letreiro\",\n    \"levar\",\n    \"leveza\",\n    \"levitar\",\n    \"liberal\",\n    \"libido\",\n    \"liderar\",\n    \"ligar\",\n    \"ligeiro\",\n    \"limitar\",\n    \"limoeiro\",\n    \"limpador\",\n    \"linda\",\n    \"linear\",\n    \"linhagem\",\n    \"liquidez\",\n    \"listagem\",\n    \"lisura\",\n    \"litoral\",\n    \"livro\",\n    \"lixa\",\n    \"lixeira\",\n    \"locador\",\n    \"locutor\",\n    \"lojista\",\n    \"lombo\",\n    \"lona\",\n    \"longe\",\n    \"lontra\",\n    \"lorde\",\n    \"lotado\",\n    \"loteria\",\n    \"loucura\",\n    \"lousa\",\n    \"louvar\",\n    \"luar\",\n    \"lucidez\",\n    \"lucro\",\n    \"luneta\",\n    \"lustre\",\n    \"lutador\",\n    \"luva\",\n    \"macaco\",\n    \"macete\",\n    \"machado\",\n    \"macio\",\n    \"madeira\",\n    \"madrinha\",\n    \"magnata\",\n    \"magreza\",\n    \"maior\",\n    \"mais\",\n    \"malandro\",\n    \"malha\",\n    \"malote\",\n    \"maluco\",\n    \"mamilo\",\n    \"mamoeiro\",\n    \"mamute\",\n    \"manada\",\n    \"mancha\",\n    \"mandato\",\n    \"manequim\",\n    \"manhoso\",\n    \"manivela\",\n    \"manobrar\",\n    \"mansa\",\n    \"manter\",\n    \"manusear\",\n    \"mapeado\",\n    \"maquinar\",\n    \"marcador\",\n    \"maresia\",\n    \"marfim\",\n    \"margem\",\n    \"marinho\",\n    \"marmita\",\n    \"maroto\",\n    \"marquise\",\n    \"marreco\",\n    \"martelo\",\n    \"marujo\",\n    \"mascote\",\n    \"masmorra\",\n    \"massagem\",\n    \"mastigar\",\n    \"matagal\",\n    \"materno\",\n    \"matinal\",\n    \"matutar\",\n    \"maxilar\",\n    \"medalha\",\n    \"medida\",\n    \"medusa\",\n    \"megafone\",\n    \"meiga\",\n    \"melancia\",\n    \"melhor\",\n    \"membro\",\n    \"memorial\",\n    \"menino\",\n    \"menos\",\n    \"mensagem\",\n    \"mental\",\n    \"merecer\",\n    \"mergulho\",\n    \"mesada\",\n    \"mesclar\",\n    \"mesmo\",\n    \"mesquita\",\n    \"mestre\",\n    \"metade\",\n    \"meteoro\",\n    \"metragem\",\n    \"mexer\",\n    \"mexicano\",\n    \"micro\",\n    \"migalha\",\n    \"migrar\",\n    \"milagre\",\n    \"milenar\",\n    \"milhar\",\n    \"mimado\",\n    \"minerar\",\n    \"minhoca\",\n    \"ministro\",\n    \"minoria\",\n    \"miolo\",\n    \"mirante\",\n    \"mirtilo\",\n    \"misturar\",\n    \"mocidade\",\n    \"moderno\",\n    \"modular\",\n    \"moeda\",\n    \"moer\",\n    \"moinho\",\n    \"moita\",\n    \"moldura\",\n    \"moleza\",\n    \"molho\",\n    \"molinete\",\n    \"molusco\",\n    \"montanha\",\n    \"moqueca\",\n    \"morango\",\n    \"morcego\",\n    \"mordomo\",\n    \"morena\",\n    \"mosaico\",\n    \"mosquete\",\n    \"mostarda\",\n    \"motel\",\n    \"motim\",\n    \"moto\",\n    \"motriz\",\n    \"muda\",\n    \"muito\",\n    \"mulata\",\n    \"mulher\",\n    \"multar\",\n    \"mundial\",\n    \"munido\",\n    \"muralha\",\n    \"murcho\",\n    \"muscular\",\n    \"museu\",\n    \"musical\",\n    \"nacional\",\n    \"nadador\",\n    \"naja\",\n    \"namoro\",\n    \"narina\",\n    \"narrado\",\n    \"nascer\",\n    \"nativa\",\n    \"natureza\",\n    \"navalha\",\n    \"navegar\",\n    \"navio\",\n    \"neblina\",\n    \"nebuloso\",\n    \"negativa\",\n    \"negociar\",\n    \"negrito\",\n    \"nervoso\",\n    \"neta\",\n    \"neural\",\n    \"nevasca\",\n    \"nevoeiro\",\n    \"ninar\",\n    \"ninho\",\n    \"nitidez\",\n    \"nivelar\",\n    \"nobreza\",\n    \"noite\",\n    \"noiva\",\n    \"nomear\",\n    \"nominal\",\n    \"nordeste\",\n    \"nortear\",\n    \"notar\",\n    \"noticiar\",\n    \"noturno\",\n    \"novelo\",\n    \"novilho\",\n    \"novo\",\n    \"nublado\",\n    \"nudez\",\n    \"numeral\",\n    \"nupcial\",\n    \"nutrir\",\n    \"nuvem\",\n    \"obcecado\",\n    \"obedecer\",\n    \"objetivo\",\n    \"obrigado\",\n    \"obscuro\",\n    \"obstetra\",\n    \"obter\",\n    \"obturar\",\n    \"ocidente\",\n    \"ocioso\",\n    \"ocorrer\",\n    \"oculista\",\n    \"ocupado\",\n    \"ofegante\",\n    \"ofensiva\",\n    \"oferenda\",\n    \"oficina\",\n    \"ofuscado\",\n    \"ogiva\",\n    \"olaria\",\n    \"oleoso\",\n    \"olhar\",\n    \"oliveira\",\n    \"ombro\",\n    \"omelete\",\n    \"omisso\",\n    \"omitir\",\n    \"ondulado\",\n    \"oneroso\",\n    \"ontem\",\n    \"opcional\",\n    \"operador\",\n    \"oponente\",\n    \"oportuno\",\n    \"oposto\",\n    \"orar\",\n    \"orbitar\",\n    \"ordem\",\n    \"ordinal\",\n    \"orfanato\",\n    \"orgasmo\",\n    \"orgulho\",\n    \"oriental\",\n    \"origem\",\n    \"oriundo\",\n    \"orla\",\n    \"ortodoxo\",\n    \"orvalho\",\n    \"oscilar\",\n    \"ossada\",\n    \"osso\",\n    \"ostentar\",\n    \"otimismo\",\n    \"ousadia\",\n    \"outono\",\n    \"outubro\",\n    \"ouvido\",\n    \"ovelha\",\n    \"ovular\",\n    \"oxidar\",\n    \"oxigenar\",\n    \"pacato\",\n    \"paciente\",\n    \"pacote\",\n    \"pactuar\",\n    \"padaria\",\n    \"padrinho\",\n    \"pagar\",\n    \"pagode\",\n    \"painel\",\n    \"pairar\",\n    \"paisagem\",\n    \"palavra\",\n    \"palestra\",\n    \"palheta\",\n    \"palito\",\n    \"palmada\",\n    \"palpitar\",\n    \"pancada\",\n    \"panela\",\n    \"panfleto\",\n    \"panqueca\",\n    \"pantanal\",\n    \"papagaio\",\n    \"papelada\",\n    \"papiro\",\n    \"parafina\",\n    \"parcial\",\n    \"pardal\",\n    \"parede\",\n    \"partida\",\n    \"pasmo\",\n    \"passado\",\n    \"pastel\",\n    \"patamar\",\n    \"patente\",\n    \"patinar\",\n    \"patrono\",\n    \"paulada\",\n    \"pausar\",\n    \"peculiar\",\n    \"pedalar\",\n    \"pedestre\",\n    \"pediatra\",\n    \"pedra\",\n    \"pegada\",\n    \"peitoral\",\n    \"peixe\",\n    \"pele\",\n    \"pelicano\",\n    \"penca\",\n    \"pendurar\",\n    \"peneira\",\n    \"penhasco\",\n    \"pensador\",\n    \"pente\",\n    \"perceber\",\n    \"perfeito\",\n    \"pergunta\",\n    \"perito\",\n    \"permitir\",\n    \"perna\",\n    \"perplexo\",\n    \"persiana\",\n    \"pertence\",\n    \"peruca\",\n    \"pescado\",\n    \"pesquisa\",\n    \"pessoa\",\n    \"petiscar\",\n    \"piada\",\n    \"picado\",\n    \"piedade\",\n    \"pigmento\",\n    \"pilastra\",\n    \"pilhado\",\n    \"pilotar\",\n    \"pimenta\",\n    \"pincel\",\n    \"pinguim\",\n    \"pinha\",\n    \"pinote\",\n    \"pintar\",\n    \"pioneiro\",\n    \"pipoca\",\n    \"piquete\",\n    \"piranha\",\n    \"pires\",\n    \"pirueta\",\n    \"piscar\",\n    \"pistola\",\n    \"pitanga\",\n    \"pivete\",\n    \"planta\",\n    \"plaqueta\",\n    \"platina\",\n    \"plebeu\",\n    \"plumagem\",\n    \"pluvial\",\n    \"pneu\",\n    \"poda\",\n    \"poeira\",\n    \"poetisa\",\n    \"polegada\",\n    \"policiar\",\n    \"poluente\",\n    \"polvilho\",\n    \"pomar\",\n    \"pomba\",\n    \"ponderar\",\n    \"pontaria\",\n    \"populoso\",\n    \"porta\",\n    \"possuir\",\n    \"postal\",\n    \"pote\",\n    \"poupar\",\n    \"pouso\",\n    \"povoar\",\n    \"praia\",\n    \"prancha\",\n    \"prato\",\n    \"praxe\",\n    \"prece\",\n    \"predador\",\n    \"prefeito\",\n    \"premiar\",\n    \"prensar\",\n    \"preparar\",\n    \"presilha\",\n    \"pretexto\",\n    \"prevenir\",\n    \"prezar\",\n    \"primata\",\n    \"princesa\",\n    \"prisma\",\n    \"privado\",\n    \"processo\",\n    \"produto\",\n    \"profeta\",\n    \"proibido\",\n    \"projeto\",\n    \"prometer\",\n    \"propagar\",\n    \"prosa\",\n    \"protetor\",\n    \"provador\",\n    \"publicar\",\n    \"pudim\",\n    \"pular\",\n    \"pulmonar\",\n    \"pulseira\",\n    \"punhal\",\n    \"punir\",\n    \"pupilo\",\n    \"pureza\",\n    \"puxador\",\n    \"quadra\",\n    \"quantia\",\n    \"quarto\",\n    \"quase\",\n    \"quebrar\",\n    \"queda\",\n    \"queijo\",\n    \"quente\",\n    \"querido\",\n    \"quimono\",\n    \"quina\",\n    \"quiosque\",\n    \"rabanada\",\n    \"rabisco\",\n    \"rachar\",\n    \"racionar\",\n    \"radial\",\n    \"raiar\",\n    \"rainha\",\n    \"raio\",\n    \"raiva\",\n    \"rajada\",\n    \"ralado\",\n    \"ramal\",\n    \"ranger\",\n    \"ranhura\",\n    \"rapadura\",\n    \"rapel\",\n    \"rapidez\",\n    \"raposa\",\n    \"raquete\",\n    \"raridade\",\n    \"rasante\",\n    \"rascunho\",\n    \"rasgar\",\n    \"raspador\",\n    \"rasteira\",\n    \"rasurar\",\n    \"ratazana\",\n    \"ratoeira\",\n    \"realeza\",\n    \"reanimar\",\n    \"reaver\",\n    \"rebaixar\",\n    \"rebelde\",\n    \"rebolar\",\n    \"recado\",\n    \"recente\",\n    \"recheio\",\n    \"recibo\",\n    \"recordar\",\n    \"recrutar\",\n    \"recuar\",\n    \"rede\",\n    \"redimir\",\n    \"redonda\",\n    \"reduzida\",\n    \"reenvio\",\n    \"refinar\",\n    \"refletir\",\n    \"refogar\",\n    \"refresco\",\n    \"refugiar\",\n    \"regalia\",\n    \"regime\",\n    \"regra\",\n    \"reinado\",\n    \"reitor\",\n    \"rejeitar\",\n    \"relativo\",\n    \"remador\",\n    \"remendo\",\n    \"remorso\",\n    \"renovado\",\n    \"reparo\",\n    \"repelir\",\n    \"repleto\",\n    \"repolho\",\n    \"represa\",\n    \"repudiar\",\n    \"requerer\",\n    \"resenha\",\n    \"resfriar\",\n    \"resgatar\",\n    \"residir\",\n    \"resolver\",\n    \"respeito\",\n    \"ressaca\",\n    \"restante\",\n    \"resumir\",\n    \"retalho\",\n    \"reter\",\n    \"retirar\",\n    \"retomada\",\n    \"retratar\",\n    \"revelar\",\n    \"revisor\",\n    \"revolta\",\n    \"riacho\",\n    \"rica\",\n    \"rigidez\",\n    \"rigoroso\",\n    \"rimar\",\n    \"ringue\",\n    \"risada\",\n    \"risco\",\n    \"risonho\",\n    \"robalo\",\n    \"rochedo\",\n    \"rodada\",\n    \"rodeio\",\n    \"rodovia\",\n    \"roedor\",\n    \"roleta\",\n    \"romano\",\n    \"roncar\",\n    \"rosado\",\n    \"roseira\",\n    \"rosto\",\n    \"rota\",\n    \"roteiro\",\n    \"rotina\",\n    \"rotular\",\n    \"rouco\",\n    \"roupa\",\n    \"roxo\",\n    \"rubro\",\n    \"rugido\",\n    \"rugoso\",\n    \"ruivo\",\n    \"rumo\",\n    \"rupestre\",\n    \"russo\",\n    \"sabor\",\n    \"saciar\",\n    \"sacola\",\n    \"sacudir\",\n    \"sadio\",\n    \"safira\",\n    \"saga\",\n    \"sagrada\",\n    \"saibro\",\n    \"salada\",\n    \"saleiro\",\n    \"salgado\",\n    \"saliva\",\n    \"salpicar\",\n    \"salsicha\",\n    \"saltar\",\n    \"salvador\",\n    \"sambar\",\n    \"samurai\",\n    \"sanar\",\n    \"sanfona\",\n    \"sangue\",\n    \"sanidade\",\n    \"sapato\",\n    \"sarda\",\n    \"sargento\",\n    \"sarjeta\",\n    \"saturar\",\n    \"saudade\",\n    \"saxofone\",\n    \"sazonal\",\n    \"secar\",\n    \"secular\",\n    \"seda\",\n    \"sedento\",\n    \"sediado\",\n    \"sedoso\",\n    \"sedutor\",\n    \"segmento\",\n    \"segredo\",\n    \"segundo\",\n    \"seiva\",\n    \"seleto\",\n    \"selvagem\",\n    \"semanal\",\n    \"semente\",\n    \"senador\",\n    \"senhor\",\n    \"sensual\",\n    \"sentado\",\n    \"separado\",\n    \"sereia\",\n    \"seringa\",\n    \"serra\",\n    \"servo\",\n    \"setembro\",\n    \"setor\",\n    \"sigilo\",\n    \"silhueta\",\n    \"silicone\",\n    \"simetria\",\n    \"simpatia\",\n    \"simular\",\n    \"sinal\",\n    \"sincero\",\n    \"singular\",\n    \"sinopse\",\n    \"sintonia\",\n    \"sirene\",\n    \"siri\",\n    \"situado\",\n    \"soberano\",\n    \"sobra\",\n    \"socorro\",\n    \"sogro\",\n    \"soja\",\n    \"solda\",\n    \"soletrar\",\n    \"solteiro\",\n    \"sombrio\",\n    \"sonata\",\n    \"sondar\",\n    \"sonegar\",\n    \"sonhador\",\n    \"sono\",\n    \"soprano\",\n    \"soquete\",\n    \"sorrir\",\n    \"sorteio\",\n    \"sossego\",\n    \"sotaque\",\n    \"soterrar\",\n    \"sovado\",\n    \"sozinho\",\n    \"suavizar\",\n    \"subida\",\n    \"submerso\",\n    \"subsolo\",\n    \"subtrair\",\n    \"sucata\",\n    \"sucesso\",\n    \"suco\",\n    \"sudeste\",\n    \"sufixo\",\n    \"sugador\",\n    \"sugerir\",\n    \"sujeito\",\n    \"sulfato\",\n    \"sumir\",\n    \"suor\",\n    \"superior\",\n    \"suplicar\",\n    \"suposto\",\n    \"suprimir\",\n    \"surdina\",\n    \"surfista\",\n    \"surpresa\",\n    \"surreal\",\n    \"surtir\",\n    \"suspiro\",\n    \"sustento\",\n    \"tabela\",\n    \"tablete\",\n    \"tabuada\",\n    \"tacho\",\n    \"tagarela\",\n    \"talher\",\n    \"talo\",\n    \"talvez\",\n    \"tamanho\",\n    \"tamborim\",\n    \"tampa\",\n    \"tangente\",\n    \"tanto\",\n    \"tapar\",\n    \"tapioca\",\n    \"tardio\",\n    \"tarefa\",\n    \"tarja\",\n    \"tarraxa\",\n    \"tatuagem\",\n    \"taurino\",\n    \"taxativo\",\n    \"taxista\",\n    \"teatral\",\n    \"tecer\",\n    \"tecido\",\n    \"teclado\",\n    \"tedioso\",\n    \"teia\",\n    \"teimar\",\n    \"telefone\",\n    \"telhado\",\n    \"tempero\",\n    \"tenente\",\n    \"tensor\",\n    \"tentar\",\n    \"termal\",\n    \"terno\",\n    \"terreno\",\n    \"tese\",\n    \"tesoura\",\n    \"testado\",\n    \"teto\",\n    \"textura\",\n    \"texugo\",\n    \"tiara\",\n    \"tigela\",\n    \"tijolo\",\n    \"timbrar\",\n    \"timidez\",\n    \"tingido\",\n    \"tinteiro\",\n    \"tiragem\",\n    \"titular\",\n    \"toalha\",\n    \"tocha\",\n    \"tolerar\",\n    \"tolice\",\n    \"tomada\",\n    \"tomilho\",\n    \"tonel\",\n    \"tontura\",\n    \"topete\",\n    \"tora\",\n    \"torcido\",\n    \"torneio\",\n    \"torque\",\n    \"torrada\",\n    \"torto\",\n    \"tostar\",\n    \"touca\",\n    \"toupeira\",\n    \"toxina\",\n    \"trabalho\",\n    \"tracejar\",\n    \"tradutor\",\n    \"trafegar\",\n    \"trajeto\",\n    \"trama\",\n    \"trancar\",\n    \"trapo\",\n    \"traseiro\",\n    \"tratador\",\n    \"travar\",\n    \"treino\",\n    \"tremer\",\n    \"trepidar\",\n    \"trevo\",\n    \"triagem\",\n    \"tribo\",\n    \"triciclo\",\n    \"tridente\",\n    \"trilogia\",\n    \"trindade\",\n    \"triplo\",\n    \"triturar\",\n    \"triunfal\",\n    \"trocar\",\n    \"trombeta\",\n    \"trova\",\n    \"trunfo\",\n    \"truque\",\n    \"tubular\",\n    \"tucano\",\n    \"tudo\",\n    \"tulipa\",\n    \"tupi\",\n    \"turbo\",\n    \"turma\",\n    \"turquesa\",\n    \"tutelar\",\n    \"tutorial\",\n    \"uivar\",\n    \"umbigo\",\n    \"unha\",\n    \"unidade\",\n    \"uniforme\",\n    \"urologia\",\n    \"urso\",\n    \"urtiga\",\n    \"urubu\",\n    \"usado\",\n    \"usina\",\n    \"usufruir\",\n    \"vacina\",\n    \"vadiar\",\n    \"vagaroso\",\n    \"vaidoso\",\n    \"vala\",\n    \"valente\",\n    \"validade\",\n    \"valores\",\n    \"vantagem\",\n    \"vaqueiro\",\n    \"varanda\",\n    \"vareta\",\n    \"varrer\",\n    \"vascular\",\n    \"vasilha\",\n    \"vassoura\",\n    \"vazar\",\n    \"vazio\",\n    \"veado\",\n    \"vedar\",\n    \"vegetar\",\n    \"veicular\",\n    \"veleiro\",\n    \"velhice\",\n    \"veludo\",\n    \"vencedor\",\n    \"vendaval\",\n    \"venerar\",\n    \"ventre\",\n    \"verbal\",\n    \"verdade\",\n    \"vereador\",\n    \"vergonha\",\n    \"vermelho\",\n    \"verniz\",\n    \"versar\",\n    \"vertente\",\n    \"vespa\",\n    \"vestido\",\n    \"vetorial\",\n    \"viaduto\",\n    \"viagem\",\n    \"viajar\",\n    \"viatura\",\n    \"vibrador\",\n    \"videira\",\n    \"vidraria\",\n    \"viela\",\n    \"viga\",\n    \"vigente\",\n    \"vigiar\",\n    \"vigorar\",\n    \"vilarejo\",\n    \"vinco\",\n    \"vinheta\",\n    \"vinil\",\n    \"violeta\",\n    \"virada\",\n    \"virtude\",\n    \"visitar\",\n    \"visto\",\n    \"vitral\",\n    \"viveiro\",\n    \"vizinho\",\n    \"voador\",\n    \"voar\",\n    \"vogal\",\n    \"volante\",\n    \"voleibol\",\n    \"voltagem\",\n    \"volumoso\",\n    \"vontade\",\n    \"vulto\",\n    \"vuvuzela\",\n    \"xadrez\",\n    \"xarope\",\n    \"xeque\",\n    \"xeretar\",\n    \"xerife\",\n    \"xingar\",\n    \"zangado\",\n    \"zarpar\",\n    \"zebu\",\n    \"zelador\",\n    \"zombar\",\n    \"zoologia\",\n    \"zumbido\"\n]\n[\n    \"ábaco\",\n    \"abdomen\",\n    \"abeja\",\n    \"abierto\",\n    \"abogado\",\n    \"abono\",\n    \"aborto\",\n    \"abrazo\",\n    \"abrir\",\n    \"abuelo\",\n    \"abuso\",\n    \"acabar\",\n    \"academia\",\n    \"acceso\",\n    \"acción\",\n    \"aceite\",\n    \"acelga\",\n    \"acento\",\n    \"aceptar\",\n    \"ácido\",\n    \"aclarar\",\n    \"acné\",\n    \"acoger\",\n    \"acoso\",\n    \"activo\",\n    \"acto\",\n    \"actriz\",\n    \"actuar\",\n    \"acudir\",\n    \"acuerdo\",\n    \"acusar\",\n    \"adicto\",\n    \"admitir\",\n    \"adoptar\",\n    \"adorno\",\n    \"aduana\",\n    \"adulto\",\n    \"aéreo\",\n    \"afectar\",\n    \"afición\",\n    \"afinar\",\n    \"afirmar\",\n    \"ágil\",\n    \"agitar\",\n    \"agonía\",\n    \"agosto\",\n    \"agotar\",\n    \"agregar\",\n    \"agrio\",\n    \"agua\",\n    \"agudo\",\n    \"águila\",\n    \"aguja\",\n    \"ahogo\",\n    \"ahorro\",\n    \"aire\",\n    \"aislar\",\n    \"ajedrez\",\n    \"ajeno\",\n    \"ajuste\",\n    \"alacrán\",\n    \"alambre\",\n    \"alarma\",\n    \"alba\",\n    \"álbum\",\n    \"alcalde\",\n    \"aldea\",\n    \"alegre\",\n    \"alejar\",\n    \"alerta\",\n    \"aleta\",\n    \"alfiler\",\n    \"alga\",\n    \"algodón\",\n    \"aliado\",\n    \"aliento\",\n    \"alivio\",\n    \"alma\",\n    \"almeja\",\n    \"almíbar\",\n    \"altar\",\n    \"alteza\",\n    \"altivo\",\n    \"alto\",\n    \"altura\",\n    \"alumno\",\n    \"alzar\",\n    \"amable\",\n    \"amante\",\n    \"amapola\",\n    \"amargo\",\n    \"amasar\",\n    \"ámbar\",\n    \"ámbito\",\n    \"ameno\",\n    \"amigo\",\n    \"amistad\",\n    \"amor\",\n    \"amparo\",\n    \"amplio\",\n    \"ancho\",\n    \"anciano\",\n    \"ancla\",\n    \"andar\",\n    \"andén\",\n    \"anemia\",\n    \"ángulo\",\n    \"anillo\",\n    \"ánimo\",\n    \"anís\",\n    \"anotar\",\n    \"antena\",\n    \"antiguo\",\n    \"antojo\",\n    \"anual\",\n    \"anular\",\n    \"anuncio\",\n    \"añadir\",\n    \"añejo\",\n    \"año\",\n    \"apagar\",\n    \"aparato\",\n    \"apetito\",\n    \"apio\",\n    \"aplicar\",\n    \"apodo\",\n    \"aporte\",\n    \"apoyo\",\n    \"aprender\",\n    \"aprobar\",\n    \"apuesta\",\n    \"apuro\",\n    \"arado\",\n    \"araña\",\n    \"arar\",\n    \"árbitro\",\n    \"árbol\",\n    \"arbusto\",\n    \"archivo\",\n    \"arco\",\n    \"arder\",\n    \"ardilla\",\n    \"arduo\",\n    \"área\",\n    \"árido\",\n    \"aries\",\n    \"armonía\",\n    \"arnés\",\n    \"aroma\",\n    \"arpa\",\n    \"arpón\",\n    \"arreglo\",\n    \"arroz\",\n    \"arruga\",\n    \"arte\",\n    \"artista\",\n    \"asa\",\n    \"asado\",\n    \"asalto\",\n    \"ascenso\",\n    \"asegurar\",\n    \"aseo\",\n    \"asesor\",\n    \"asiento\",\n    \"asilo\",\n    \"asistir\",\n    \"asno\",\n    \"asombro\",\n    \"áspero\",\n    \"astilla\",\n    \"astro\",\n    \"astuto\",\n    \"asumir\",\n    \"asunto\",\n    \"atajo\",\n    \"ataque\",\n    \"atar\",\n    \"atento\",\n    \"ateo\",\n    \"ático\",\n    \"atleta\",\n    \"átomo\",\n    \"atraer\",\n    \"atroz\",\n    \"atún\",\n    \"audaz\",\n    \"audio\",\n    \"auge\",\n    \"aula\",\n    \"aumento\",\n    \"ausente\",\n    \"autor\",\n    \"aval\",\n    \"avance\",\n    \"avaro\",\n    \"ave\",\n    \"avellana\",\n    \"avena\",\n    \"avestruz\",\n    \"avión\",\n    \"aviso\",\n    \"ayer\",\n    \"ayuda\",\n    \"ayuno\",\n    \"azafrán\",\n    \"azar\",\n    \"azote\",\n    \"azúcar\",\n    \"azufre\",\n    \"azul\",\n    \"baba\",\n    \"babor\",\n    \"bache\",\n    \"bahía\",\n    \"baile\",\n    \"bajar\",\n    \"balanza\",\n    \"balcón\",\n    \"balde\",\n    \"bambú\",\n    \"banco\",\n    \"banda\",\n    \"baño\",\n    \"barba\",\n    \"barco\",\n    \"barniz\",\n    \"barro\",\n    \"báscula\",\n    \"bastón\",\n    \"basura\",\n    \"batalla\",\n    \"batería\",\n    \"batir\",\n    \"batuta\",\n    \"baúl\",\n    \"bazar\",\n    \"bebé\",\n    \"bebida\",\n    \"bello\",\n    \"besar\",\n    \"beso\",\n    \"bestia\",\n    \"bicho\",\n    \"bien\",\n    \"bingo\",\n    \"blanco\",\n    \"bloque\",\n    \"blusa\",\n    \"boa\",\n    \"bobina\",\n    \"bobo\",\n    \"boca\",\n    \"bocina\",\n    \"boda\",\n    \"bodega\",\n    \"boina\",\n    \"bola\",\n    \"bolero\",\n    \"bolsa\",\n    \"bomba\",\n    \"bondad\",\n    \"bonito\",\n    \"bono\",\n    \"bonsái\",\n    \"borde\",\n    \"borrar\",\n    \"bosque\",\n    \"bote\",\n    \"botín\",\n    \"bóveda\",\n    \"bozal\",\n    \"bravo\",\n    \"brazo\",\n    \"brecha\",\n    \"breve\",\n    \"brillo\",\n    \"brinco\",\n    \"brisa\",\n    \"broca\",\n    \"broma\",\n    \"bronce\",\n    \"brote\",\n    \"bruja\",\n    \"brusco\",\n    \"bruto\",\n    \"buceo\",\n    \"bucle\",\n    \"bueno\",\n    \"buey\",\n    \"bufanda\",\n    \"bufón\",\n    \"búho\",\n    \"buitre\",\n    \"bulto\",\n    \"burbuja\",\n    \"burla\",\n    \"burro\",\n    \"buscar\",\n    \"butaca\",\n    \"buzón\",\n    \"caballo\",\n    \"cabeza\",\n    \"cabina\",\n    \"cabra\",\n    \"cacao\",\n    \"cadáver\",\n    \"cadena\",\n    \"caer\",\n    \"café\",\n    \"caída\",\n    \"caimán\",\n    \"caja\",\n    \"cajón\",\n    \"cal\",\n    \"calamar\",\n    \"calcio\",\n    \"caldo\",\n    \"calidad\",\n    \"calle\",\n    \"calma\",\n    \"calor\",\n    \"calvo\",\n    \"cama\",\n    \"cambio\",\n    \"camello\",\n    \"camino\",\n    \"campo\",\n    \"cáncer\",\n    \"candil\",\n    \"canela\",\n    \"canguro\",\n    \"canica\",\n    \"canto\",\n    \"caña\",\n    \"cañón\",\n    \"caoba\",\n    \"caos\",\n    \"capaz\",\n    \"capitán\",\n    \"capote\",\n    \"captar\",\n    \"capucha\",\n    \"cara\",\n    \"carbón\",\n    \"cárcel\",\n    \"careta\",\n    \"carga\",\n    \"cariño\",\n    \"carne\",\n    \"carpeta\",\n    \"carro\",\n    \"carta\",\n    \"casa\",\n    \"casco\",\n    \"casero\",\n    \"caspa\",\n    \"castor\",\n    \"catorce\",\n    \"catre\",\n    \"caudal\",\n    \"causa\",\n    \"cazo\",\n    \"cebolla\",\n    \"ceder\",\n    \"cedro\",\n    \"celda\",\n    \"célebre\",\n    \"celoso\",\n    \"célula\",\n    \"cemento\",\n    \"ceniza\",\n    \"centro\",\n    \"cerca\",\n    \"cerdo\",\n    \"cereza\",\n    \"cero\",\n    \"cerrar\",\n    \"certeza\",\n    \"césped\",\n    \"cetro\",\n    \"chacal\",\n    \"chaleco\",\n    \"champú\",\n    \"chancla\",\n    \"chapa\",\n    \"charla\",\n    \"chico\",\n    \"chiste\",\n    \"chivo\",\n    \"choque\",\n    \"choza\",\n    \"chuleta\",\n    \"chupar\",\n    \"ciclón\",\n    \"ciego\",\n    \"cielo\",\n    \"cien\",\n    \"cierto\",\n    \"cifra\",\n    \"cigarro\",\n    \"cima\",\n    \"cinco\",\n    \"cine\",\n    \"cinta\",\n    \"ciprés\",\n    \"circo\",\n    \"ciruela\",\n    \"cisne\",\n    \"cita\",\n    \"ciudad\",\n    \"clamor\",\n    \"clan\",\n    \"claro\",\n    \"clase\",\n    \"clave\",\n    \"cliente\",\n    \"clima\",\n    \"clínica\",\n    \"cobre\",\n    \"cocción\",\n    \"cochino\",\n    \"cocina\",\n    \"coco\",\n    \"código\",\n    \"codo\",\n    \"cofre\",\n    \"coger\",\n    \"cohete\",\n    \"cojín\",\n    \"cojo\",\n    \"cola\",\n    \"colcha\",\n    \"colegio\",\n    \"colgar\",\n    \"colina\",\n    \"collar\",\n    \"colmo\",\n    \"columna\",\n    \"combate\",\n    \"comer\",\n    \"comida\",\n    \"cómodo\",\n    \"compra\",\n    \"conde\",\n    \"conejo\",\n    \"conga\",\n    \"conocer\",\n    \"consejo\",\n    \"contar\",\n    \"copa\",\n    \"copia\",\n    \"corazón\",\n    \"corbata\",\n    \"corcho\",\n    \"cordón\",\n    \"corona\",\n    \"correr\",\n    \"coser\",\n    \"cosmos\",\n    \"costa\",\n    \"cráneo\",\n    \"cráter\",\n    \"crear\",\n    \"crecer\",\n    \"creído\",\n    \"crema\",\n    \"cría\",\n    \"crimen\",\n    \"cripta\",\n    \"crisis\",\n    \"cromo\",\n    \"crónica\",\n    \"croqueta\",\n    \"crudo\",\n    \"cruz\",\n    \"cuadro\",\n    \"cuarto\",\n    \"cuatro\",\n    \"cubo\",\n    \"cubrir\",\n    \"cuchara\",\n    \"cuello\",\n    \"cuento\",\n    \"cuerda\",\n    \"cuesta\",\n    \"cueva\",\n    \"cuidar\",\n    \"culebra\",\n    \"culpa\",\n    \"culto\",\n    \"cumbre\",\n    \"cumplir\",\n    \"cuna\",\n    \"cuneta\",\n    \"cuota\",\n    \"cupón\",\n    \"cúpula\",\n    \"curar\",\n    \"curioso\",\n    \"curso\",\n    \"curva\",\n    \"cutis\",\n    \"dama\",\n    \"danza\",\n    \"dar\",\n    \"dardo\",\n    \"dátil\",\n    \"deber\",\n    \"débil\",\n    \"década\",\n    \"decir\",\n    \"dedo\",\n    \"defensa\",\n    \"definir\",\n    \"dejar\",\n    \"delfín\",\n    \"delgado\",\n    \"delito\",\n    \"demora\",\n    \"denso\",\n    \"dental\",\n    \"deporte\",\n    \"derecho\",\n    \"derrota\",\n    \"desayuno\",\n    \"deseo\",\n    \"desfile\",\n    \"desnudo\",\n    \"destino\",\n    \"desvío\",\n    \"detalle\",\n    \"detener\",\n    \"deuda\",\n    \"día\",\n    \"diablo\",\n    \"diadema\",\n    \"diamante\",\n    \"diana\",\n    \"diario\",\n    \"dibujo\",\n    \"dictar\",\n    \"diente\",\n    \"dieta\",\n    \"diez\",\n    \"difícil\",\n    \"digno\",\n    \"dilema\",\n    \"diluir\",\n    \"dinero\",\n    \"directo\",\n    \"dirigir\",\n    \"disco\",\n    \"diseño\",\n    \"disfraz\",\n    \"diva\",\n    \"divino\",\n    \"doble\",\n    \"doce\",\n    \"dolor\",\n    \"domingo\",\n    \"don\",\n    \"donar\",\n    \"dorado\",\n    \"dormir\",\n    \"dorso\",\n    \"dos\",\n    \"dosis\",\n    \"dragón\",\n    \"droga\",\n    \"ducha\",\n    \"duda\",\n    \"duelo\",\n    \"dueño\",\n    \"dulce\",\n    \"dúo\",\n    \"duque\",\n    \"durar\",\n    \"dureza\",\n    \"duro\",\n    \"ébano\",\n    \"ebrio\",\n    \"echar\",\n    \"eco\",\n    \"ecuador\",\n    \"edad\",\n    \"edición\",\n    \"edificio\",\n    \"editor\",\n    \"educar\",\n    \"efecto\",\n    \"eficaz\",\n    \"eje\",\n    \"ejemplo\",\n    \"elefante\",\n    \"elegir\",\n    \"elemento\",\n    \"elevar\",\n    \"elipse\",\n    \"élite\",\n    \"elixir\",\n    \"elogio\",\n    \"eludir\",\n    \"embudo\",\n    \"emitir\",\n    \"emoción\",\n    \"empate\",\n    \"empeño\",\n    \"empleo\",\n    \"empresa\",\n    \"enano\",\n    \"encargo\",\n    \"enchufe\",\n    \"encía\",\n    \"enemigo\",\n    \"enero\",\n    \"enfado\",\n    \"enfermo\",\n    \"engaño\",\n    \"enigma\",\n    \"enlace\",\n    \"enorme\",\n    \"enredo\",\n    \"ensayo\",\n    \"enseñar\",\n    \"entero\",\n    \"entrar\",\n    \"envase\",\n    \"envío\",\n    \"época\",\n    \"equipo\",\n    \"erizo\",\n    \"escala\",\n    \"escena\",\n    \"escolar\",\n    \"escribir\",\n    \"escudo\",\n    \"esencia\",\n    \"esfera\",\n    \"esfuerzo\",\n    \"espada\",\n    \"espejo\",\n    \"espía\",\n    \"esposa\",\n    \"espuma\",\n    \"esquí\",\n    \"estar\",\n    \"este\",\n    \"estilo\",\n    \"estufa\",\n    \"etapa\",\n    \"eterno\",\n    \"ética\",\n    \"etnia\",\n    \"evadir\",\n    \"evaluar\",\n    \"evento\",\n    \"evitar\",\n    \"exacto\",\n    \"examen\",\n    \"exceso\",\n    \"excusa\",\n    \"exento\",\n    \"exigir\",\n    \"exilio\",\n    \"existir\",\n    \"éxito\",\n    \"experto\",\n    \"explicar\",\n    \"exponer\",\n    \"extremo\",\n    \"fábrica\",\n    \"fábula\",\n    \"fachada\",\n    \"fácil\",\n    \"factor\",\n    \"faena\",\n    \"faja\",\n    \"falda\",\n    \"fallo\",\n    \"falso\",\n    \"faltar\",\n    \"fama\",\n    \"familia\",\n    \"famoso\",\n    \"faraón\",\n    \"farmacia\",\n    \"farol\",\n    \"farsa\",\n    \"fase\",\n    \"fatiga\",\n    \"fauna\",\n    \"favor\",\n    \"fax\",\n    \"febrero\",\n    \"fecha\",\n    \"feliz\",\n    \"feo\",\n    \"feria\",\n    \"feroz\",\n    \"fértil\",\n    \"fervor\",\n    \"festín\",\n    \"fiable\",\n    \"fianza\",\n    \"fiar\",\n    \"fibra\",\n    \"ficción\",\n    \"ficha\",\n    \"fideo\",\n    \"fiebre\",\n    \"fiel\",\n    \"fiera\",\n    \"fiesta\",\n    \"figura\",\n    \"fijar\",\n    \"fijo\",\n    \"fila\",\n    \"filete\",\n    \"filial\",\n    \"filtro\",\n    \"fin\",\n    \"finca\",\n    \"fingir\",\n    \"finito\",\n    \"firma\",\n    \"flaco\",\n    \"flauta\",\n    \"flecha\",\n    \"flor\",\n    \"flota\",\n    \"fluir\",\n    \"flujo\",\n    \"flúor\",\n    \"fobia\",\n    \"foca\",\n    \"fogata\",\n    \"fogón\",\n    \"folio\",\n    \"folleto\",\n    \"fondo\",\n    \"forma\",\n    \"forro\",\n    \"fortuna\",\n    \"forzar\",\n    \"fosa\",\n    \"foto\",\n    \"fracaso\",\n    \"frágil\",\n    \"franja\",\n    \"frase\",\n    \"fraude\",\n    \"freír\",\n    \"freno\",\n    \"fresa\",\n    \"frío\",\n    \"frito\",\n    \"fruta\",\n    \"fuego\",\n    \"fuente\",\n    \"fuerza\",\n    \"fuga\",\n    \"fumar\",\n    \"función\",\n    \"funda\",\n    \"furgón\",\n    \"furia\",\n    \"fusil\",\n    \"fútbol\",\n    \"futuro\",\n    \"gacela\",\n    \"gafas\",\n    \"gaita\",\n    \"gajo\",\n    \"gala\",\n    \"galería\",\n    \"gallo\",\n    \"gamba\",\n    \"ganar\",\n    \"gancho\",\n    \"ganga\",\n    \"ganso\",\n    \"garaje\",\n    \"garza\",\n    \"gasolina\",\n    \"gastar\",\n    \"gato\",\n    \"gavilán\",\n    \"gemelo\",\n    \"gemir\",\n    \"gen\",\n    \"género\",\n    \"genio\",\n    \"gente\",\n    \"geranio\",\n    \"gerente\",\n    \"germen\",\n    \"gesto\",\n    \"gigante\",\n    \"gimnasio\",\n    \"girar\",\n    \"giro\",\n    \"glaciar\",\n    \"globo\",\n    \"gloria\",\n    \"gol\",\n    \"golfo\",\n    \"goloso\",\n    \"golpe\",\n    \"goma\",\n    \"gordo\",\n    \"gorila\",\n    \"gorra\",\n    \"gota\",\n    \"goteo\",\n    \"gozar\",\n    \"grada\",\n    \"gráfico\",\n    \"grano\",\n    \"grasa\",\n    \"gratis\",\n    \"grave\",\n    \"grieta\",\n    \"grillo\",\n    \"gripe\",\n    \"gris\",\n    \"grito\",\n    \"grosor\",\n    \"grúa\",\n    \"grueso\",\n    \"grumo\",\n    \"grupo\",\n    \"guante\",\n    \"guapo\",\n    \"guardia\",\n    \"guerra\",\n    \"guía\",\n    \"guiño\",\n    \"guion\",\n    \"guiso\",\n    \"guitarra\",\n    \"gusano\",\n    \"gustar\",\n    \"haber\",\n    \"hábil\",\n    \"hablar\",\n    \"hacer\",\n    \"hacha\",\n    \"hada\",\n    \"hallar\",\n    \"hamaca\",\n    \"harina\",\n    \"haz\",\n    \"hazaña\",\n    \"hebilla\",\n    \"hebra\",\n    \"hecho\",\n    \"helado\",\n    \"helio\",\n    \"hembra\",\n    \"herir\",\n    \"hermano\",\n    \"héroe\",\n    \"hervir\",\n    \"hielo\",\n    \"hierro\",\n    \"hígado\",\n    \"higiene\",\n    \"hijo\",\n    \"himno\",\n    \"historia\",\n    \"hocico\",\n    \"hogar\",\n    \"hoguera\",\n    \"hoja\",\n    \"hombre\",\n    \"hongo\",\n    \"honor\",\n    \"honra\",\n    \"hora\",\n    \"hormiga\",\n    \"horno\",\n    \"hostil\",\n    \"hoyo\",\n    \"hueco\",\n    \"huelga\",\n    \"huerta\",\n    \"hueso\",\n    \"huevo\",\n    \"huida\",\n    \"huir\",\n    \"humano\",\n    \"húmedo\",\n    \"humilde\",\n    \"humo\",\n    \"hundir\",\n    \"huracán\",\n    \"hurto\",\n    \"icono\",\n    \"ideal\",\n    \"idioma\",\n    \"ídolo\",\n    \"iglesia\",\n    \"iglú\",\n    \"igual\",\n    \"ilegal\",\n    \"ilusión\",\n    \"imagen\",\n    \"imán\",\n    \"imitar\",\n    \"impar\",\n    \"imperio\",\n    \"imponer\",\n    \"impulso\",\n    \"incapaz\",\n    \"índice\",\n    \"inerte\",\n    \"infiel\",\n    \"informe\",\n    \"ingenio\",\n    \"inicio\",\n    \"inmenso\",\n    \"inmune\",\n    \"innato\",\n    \"insecto\",\n    \"instante\",\n    \"interés\",\n    \"íntimo\",\n    \"intuir\",\n    \"inútil\",\n    \"invierno\",\n    \"ira\",\n    \"iris\",\n    \"ironía\",\n    \"isla\",\n    \"islote\",\n    \"jabalí\",\n    \"jabón\",\n    \"jamón\",\n    \"jarabe\",\n    \"jardín\",\n    \"jarra\",\n    \"jaula\",\n    \"jazmín\",\n    \"jefe\",\n    \"jeringa\",\n    \"jinete\",\n    \"jornada\",\n    \"joroba\",\n    \"joven\",\n    \"joya\",\n    \"juerga\",\n    \"jueves\",\n    \"juez\",\n    \"jugador\",\n    \"jugo\",\n    \"juguete\",\n    \"juicio\",\n    \"junco\",\n    \"jungla\",\n    \"junio\",\n    \"juntar\",\n    \"júpiter\",\n    \"jurar\",\n    \"justo\",\n    \"juvenil\",\n    \"juzgar\",\n    \"kilo\",\n    \"koala\",\n    \"labio\",\n    \"lacio\",\n    \"lacra\",\n    \"lado\",\n    \"ladrón\",\n    \"lagarto\",\n    \"lágrima\",\n    \"laguna\",\n    \"laico\",\n    \"lamer\",\n    \"lámina\",\n    \"lámpara\",\n    \"lana\",\n    \"lancha\",\n    \"langosta\",\n    \"lanza\",\n    \"lápiz\",\n    \"largo\",\n    \"larva\",\n    \"lástima\",\n    \"lata\",\n    \"látex\",\n    \"latir\",\n    \"laurel\",\n    \"lavar\",\n    \"lazo\",\n    \"leal\",\n    \"lección\",\n    \"leche\",\n    \"lector\",\n    \"leer\",\n    \"legión\",\n    \"legumbre\",\n    \"lejano\",\n    \"lengua\",\n    \"lento\",\n    \"leña\",\n    \"león\",\n    \"leopardo\",\n    \"lesión\",\n    \"letal\",\n    \"letra\",\n    \"leve\",\n    \"leyenda\",\n    \"libertad\",\n    \"libro\",\n    \"licor\",\n    \"líder\",\n    \"lidiar\",\n    \"lienzo\",\n    \"liga\",\n    \"ligero\",\n    \"lima\",\n    \"límite\",\n    \"limón\",\n    \"limpio\",\n    \"lince\",\n    \"lindo\",\n    \"línea\",\n    \"lingote\",\n    \"lino\",\n    \"linterna\",\n    \"líquido\",\n    \"liso\",\n    \"lista\",\n    \"litera\",\n    \"litio\",\n    \"litro\",\n    \"llaga\",\n    \"llama\",\n    \"llanto\",\n    \"llave\",\n    \"llegar\",\n    \"llenar\",\n    \"llevar\",\n    \"llorar\",\n    \"llover\",\n    \"lluvia\",\n    \"lobo\",\n    \"loción\",\n    \"loco\",\n    \"locura\",\n    \"lógica\",\n    \"logro\",\n    \"lombriz\",\n    \"lomo\",\n    \"lonja\",\n    \"lote\",\n    \"lucha\",\n    \"lucir\",\n    \"lugar\",\n    \"lujo\",\n    \"luna\",\n    \"lunes\",\n    \"lupa\",\n    \"lustro\",\n    \"luto\",\n    \"luz\",\n    \"maceta\",\n    \"macho\",\n    \"madera\",\n    \"madre\",\n    \"maduro\",\n    \"maestro\",\n    \"mafia\",\n    \"magia\",\n    \"mago\",\n    \"maíz\",\n    \"maldad\",\n    \"maleta\",\n    \"malla\",\n    \"malo\",\n    \"mamá\",\n    \"mambo\",\n    \"mamut\",\n    \"manco\",\n    \"mando\",\n    \"manejar\",\n    \"manga\",\n    \"maniquí\",\n    \"manjar\",\n    \"mano\",\n    \"manso\",\n    \"manta\",\n    \"mañana\",\n    \"mapa\",\n    \"máquina\",\n    \"mar\",\n    \"marco\",\n    \"marea\",\n    \"marfil\",\n    \"margen\",\n    \"marido\",\n    \"mármol\",\n    \"marrón\",\n    \"martes\",\n    \"marzo\",\n    \"masa\",\n    \"máscara\",\n    \"masivo\",\n    \"matar\",\n    \"materia\",\n    \"matiz\",\n    \"matriz\",\n    \"máximo\",\n    \"mayor\",\n    \"mazorca\",\n    \"mecha\",\n    \"medalla\",\n    \"medio\",\n    \"médula\",\n    \"mejilla\",\n    \"mejor\",\n    \"melena\",\n    \"melón\",\n    \"memoria\",\n    \"menor\",\n    \"mensaje\",\n    \"mente\",\n    \"menú\",\n    \"mercado\",\n    \"merengue\",\n    \"mérito\",\n    \"mes\",\n    \"mesón\",\n    \"meta\",\n    \"meter\",\n    \"método\",\n    \"metro\",\n    \"mezcla\",\n    \"miedo\",\n    \"miel\",\n    \"miembro\",\n    \"miga\",\n    \"mil\",\n    \"milagro\",\n    \"militar\",\n    \"millón\",\n    \"mimo\",\n    \"mina\",\n    \"minero\",\n    \"mínimo\",\n    \"minuto\",\n    \"miope\",\n    \"mirar\",\n    \"misa\",\n    \"miseria\",\n    \"misil\",\n    \"mismo\",\n    \"mitad\",\n    \"mito\",\n    \"mochila\",\n    \"moción\",\n    \"moda\",\n    \"modelo\",\n    \"moho\",\n    \"mojar\",\n    \"molde\",\n    \"moler\",\n    \"molino\",\n    \"momento\",\n    \"momia\",\n    \"monarca\",\n    \"moneda\",\n    \"monja\",\n    \"monto\",\n    \"moño\",\n    \"morada\",\n    \"morder\",\n    \"moreno\",\n    \"morir\",\n    \"morro\",\n    \"morsa\",\n    \"mortal\",\n    \"mosca\",\n    \"mostrar\",\n    \"motivo\",\n    \"mover\",\n    \"móvil\",\n    \"mozo\",\n    \"mucho\",\n    \"mudar\",\n    \"mueble\",\n    \"muela\",\n    \"muerte\",\n    \"muestra\",\n    \"mugre\",\n    \"mujer\",\n    \"mula\",\n    \"muleta\",\n    \"multa\",\n    \"mundo\",\n    \"muñeca\",\n    \"mural\",\n    \"muro\",\n    \"músculo\",\n    \"museo\",\n    \"musgo\",\n    \"música\",\n    \"muslo\",\n    \"nácar\",\n    \"nación\",\n    \"nadar\",\n    \"naipe\",\n    \"naranja\",\n    \"nariz\",\n    \"narrar\",\n    \"nasal\",\n    \"natal\",\n    \"nativo\",\n    \"natural\",\n    \"náusea\",\n    \"naval\",\n    \"nave\",\n    \"navidad\",\n    \"necio\",\n    \"néctar\",\n    \"negar\",\n    \"negocio\",\n    \"negro\",\n    \"neón\",\n    \"nervio\",\n    \"neto\",\n    \"neutro\",\n    \"nevar\",\n    \"nevera\",\n    \"nicho\",\n    \"nido\",\n    \"niebla\",\n    \"nieto\",\n    \"niñez\",\n    \"niño\",\n    \"nítido\",\n    \"nivel\",\n    \"nobleza\",\n    \"noche\",\n    \"nómina\",\n    \"noria\",\n    \"norma\",\n    \"norte\",\n    \"nota\",\n    \"noticia\",\n    \"novato\",\n    \"novela\",\n    \"novio\",\n    \"nube\",\n    \"nuca\",\n    \"núcleo\",\n    \"nudillo\",\n    \"nudo\",\n    \"nuera\",\n    \"nueve\",\n    \"nuez\",\n    \"nulo\",\n    \"número\",\n    \"nutria\",\n    \"oasis\",\n    \"obeso\",\n    \"obispo\",\n    \"objeto\",\n    \"obra\",\n    \"obrero\",\n    \"observar\",\n    \"obtener\",\n    \"obvio\",\n    \"oca\",\n    \"ocaso\",\n    \"océano\",\n    \"ochenta\",\n    \"ocho\",\n    \"ocio\",\n    \"ocre\",\n    \"octavo\",\n    \"octubre\",\n    \"oculto\",\n    \"ocupar\",\n    \"ocurrir\",\n    \"odiar\",\n    \"odio\",\n    \"odisea\",\n    \"oeste\",\n    \"ofensa\",\n    \"oferta\",\n    \"oficio\",\n    \"ofrecer\",\n    \"ogro\",\n    \"oído\",\n    \"oír\",\n    \"ojo\",\n    \"ola\",\n    \"oleada\",\n    \"olfato\",\n    \"olivo\",\n    \"olla\",\n    \"olmo\",\n    \"olor\",\n    \"olvido\",\n    \"ombligo\",\n    \"onda\",\n    \"onza\",\n    \"opaco\",\n    \"opción\",\n    \"ópera\",\n    \"opinar\",\n    \"oponer\",\n    \"optar\",\n    \"óptica\",\n    \"opuesto\",\n    \"oración\",\n    \"orador\",\n    \"oral\",\n    \"órbita\",\n    \"orca\",\n    \"orden\",\n    \"oreja\",\n    \"órgano\",\n    \"orgía\",\n    \"orgullo\",\n    \"oriente\",\n    \"origen\",\n    \"orilla\",\n    \"oro\",\n    \"orquesta\",\n    \"oruga\",\n    \"osadía\",\n    \"oscuro\",\n    \"osezno\",\n    \"oso\",\n    \"ostra\",\n    \"otoño\",\n    \"otro\",\n    \"oveja\",\n    \"óvulo\",\n    \"óxido\",\n    \"oxígeno\",\n    \"oyente\",\n    \"ozono\",\n    \"pacto\",\n    \"padre\",\n    \"paella\",\n    \"página\",\n    \"pago\",\n    \"país\",\n    \"pájaro\",\n    \"palabra\",\n    \"palco\",\n    \"paleta\",\n    \"pálido\",\n    \"palma\",\n    \"paloma\",\n    \"palpar\",\n    \"pan\",\n    \"panal\",\n    \"pánico\",\n    \"pantera\",\n    \"pañuelo\",\n    \"papá\",\n    \"papel\",\n    \"papilla\",\n    \"paquete\",\n    \"parar\",\n    \"parcela\",\n    \"pared\",\n    \"parir\",\n    \"paro\",\n    \"párpado\",\n    \"parque\",\n    \"párrafo\",\n    \"parte\",\n    \"pasar\",\n    \"paseo\",\n    \"pasión\",\n    \"paso\",\n    \"pasta\",\n    \"pata\",\n    \"patio\",\n    \"patria\",\n    \"pausa\",\n    \"pauta\",\n    \"pavo\",\n    \"payaso\",\n    \"peatón\",\n    \"pecado\",\n    \"pecera\",\n    \"pecho\",\n    \"pedal\",\n    \"pedir\",\n    \"pegar\",\n    \"peine\",\n    \"pelar\",\n    \"peldaño\",\n    \"pelea\",\n    \"peligro\",\n    \"pellejo\",\n    \"pelo\",\n    \"peluca\",\n    \"pena\",\n    \"pensar\",\n    \"peñón\",\n    \"peón\",\n    \"peor\",\n    \"pepino\",\n    \"pequeño\",\n    \"pera\",\n    \"percha\",\n    \"perder\",\n    \"pereza\",\n    \"perfil\",\n    \"perico\",\n    \"perla\",\n    \"permiso\",\n    \"perro\",\n    \"persona\",\n    \"pesa\",\n    \"pesca\",\n    \"pésimo\",\n    \"pestaña\",\n    \"pétalo\",\n    \"petróleo\",\n    \"pez\",\n    \"pezuña\",\n    \"picar\",\n    \"pichón\",\n    \"pie\",\n    \"piedra\",\n    \"pierna\",\n    \"pieza\",\n    \"pijama\",\n    \"pilar\",\n    \"piloto\",\n    \"pimienta\",\n    \"pino\",\n    \"pintor\",\n    \"pinza\",\n    \"piña\",\n    \"piojo\",\n    \"pipa\",\n    \"pirata\",\n    \"pisar\",\n    \"piscina\",\n    \"piso\",\n    \"pista\",\n    \"pitón\",\n    \"pizca\",\n    \"placa\",\n    \"plan\",\n    \"plata\",\n    \"playa\",\n    \"plaza\",\n    \"pleito\",\n    \"pleno\",\n    \"plomo\",\n    \"pluma\",\n    \"plural\",\n    \"pobre\",\n    \"poco\",\n    \"poder\",\n    \"podio\",\n    \"poema\",\n    \"poesía\",\n    \"poeta\",\n    \"polen\",\n    \"policía\",\n    \"pollo\",\n    \"polvo\",\n    \"pomada\",\n    \"pomelo\",\n    \"pomo\",\n    \"pompa\",\n    \"poner\",\n    \"porción\",\n    \"portal\",\n    \"posada\",\n    \"poseer\",\n    \"posible\",\n    \"poste\",\n    \"potencia\",\n    \"potro\",\n    \"pozo\",\n    \"prado\",\n    \"precoz\",\n    \"pregunta\",\n    \"premio\",\n    \"prensa\",\n    \"preso\",\n    \"previo\",\n    \"primo\",\n    \"príncipe\",\n    \"prisión\",\n    \"privar\",\n    \"proa\",\n    \"probar\",\n    \"proceso\",\n    \"producto\",\n    \"proeza\",\n    \"profesor\",\n    \"programa\",\n    \"prole\",\n    \"promesa\",\n    \"pronto\",\n    \"propio\",\n    \"próximo\",\n    \"prueba\",\n    \"público\",\n    \"puchero\",\n    \"pudor\",\n    \"pueblo\",\n    \"puerta\",\n    \"puesto\",\n    \"pulga\",\n    \"pulir\",\n    \"pulmón\",\n    \"pulpo\",\n    \"pulso\",\n    \"puma\",\n    \"punto\",\n    \"puñal\",\n    \"puño\",\n    \"pupa\",\n    \"pupila\",\n    \"puré\",\n    \"quedar\",\n    \"queja\",\n    \"quemar\",\n    \"querer\",\n    \"queso\",\n    \"quieto\",\n    \"química\",\n    \"quince\",\n    \"quitar\",\n    \"rábano\",\n    \"rabia\",\n    \"rabo\",\n    \"ración\",\n    \"radical\",\n    \"raíz\",\n    \"rama\",\n    \"rampa\",\n    \"rancho\",\n    \"rango\",\n    \"rapaz\",\n    \"rápido\",\n    \"rapto\",\n    \"rasgo\",\n    \"raspa\",\n    \"rato\",\n    \"rayo\",\n    \"raza\",\n    \"razón\",\n    \"reacción\",\n    \"realidad\",\n    \"rebaño\",\n    \"rebote\",\n    \"recaer\",\n    \"receta\",\n    \"rechazo\",\n    \"recoger\",\n    \"recreo\",\n    \"recto\",\n    \"recurso\",\n    \"red\",\n    \"redondo\",\n    \"reducir\",\n    \"reflejo\",\n    \"reforma\",\n    \"refrán\",\n    \"refugio\",\n    \"regalo\",\n    \"regir\",\n    \"regla\",\n    \"regreso\",\n    \"rehén\",\n    \"reino\",\n    \"reír\",\n    \"reja\",\n    \"relato\",\n    \"relevo\",\n    \"relieve\",\n    \"relleno\",\n    \"reloj\",\n    \"remar\",\n    \"remedio\",\n    \"remo\",\n    \"rencor\",\n    \"rendir\",\n    \"renta\",\n    \"reparto\",\n    \"repetir\",\n    \"reposo\",\n    \"reptil\",\n    \"res\",\n    \"rescate\",\n    \"resina\",\n    \"respeto\",\n    \"resto\",\n    \"resumen\",\n    \"retiro\",\n    \"retorno\",\n    \"retrato\",\n    \"reunir\",\n    \"revés\",\n    \"revista\",\n    \"rey\",\n    \"rezar\",\n    \"rico\",\n    \"riego\",\n    \"rienda\",\n    \"riesgo\",\n    \"rifa\",\n    \"rígido\",\n    \"rigor\",\n    \"rincón\",\n    \"riñón\",\n    \"río\",\n    \"riqueza\",\n    \"risa\",\n    \"ritmo\",\n    \"rito\",\n    \"rizo\",\n    \"roble\",\n    \"roce\",\n    \"rociar\",\n    \"rodar\",\n    \"rodeo\",\n    \"rodilla\",\n    \"roer\",\n    \"rojizo\",\n    \"rojo\",\n    \"romero\",\n    \"romper\",\n    \"ron\",\n    \"ronco\",\n    \"ronda\",\n    \"ropa\",\n    \"ropero\",\n    \"rosa\",\n    \"rosca\",\n    \"rostro\",\n    \"rotar\",\n    \"rubí\",\n    \"rubor\",\n    \"rudo\",\n    \"rueda\",\n    \"rugir\",\n    \"ruido\",\n    \"ruina\",\n    \"ruleta\",\n    \"rulo\",\n    \"rumbo\",\n    \"rumor\",\n    \"ruptura\",\n    \"ruta\",\n    \"rutina\",\n    \"sábado\",\n    \"saber\",\n    \"sabio\",\n    \"sable\",\n    \"sacar\",\n    \"sagaz\",\n    \"sagrado\",\n    \"sala\",\n    \"saldo\",\n    \"salero\",\n    \"salir\",\n    \"salmón\",\n    \"salón\",\n    \"salsa\",\n    \"salto\",\n    \"salud\",\n    \"salvar\",\n    \"samba\",\n    \"sanción\",\n    \"sandía\",\n    \"sanear\",\n    \"sangre\",\n    \"sanidad\",\n    \"sano\",\n    \"santo\",\n    \"sapo\",\n    \"saque\",\n    \"sardina\",\n    \"sartén\",\n    \"sastre\",\n    \"satán\",\n    \"sauna\",\n    \"saxofón\",\n    \"sección\",\n    \"seco\",\n    \"secreto\",\n    \"secta\",\n    \"sed\",\n    \"seguir\",\n    \"seis\",\n    \"sello\",\n    \"selva\",\n    \"semana\",\n    \"semilla\",\n    \"senda\",\n    \"sensor\",\n    \"señal\",\n    \"señor\",\n    \"separar\",\n    \"sepia\",\n    \"sequía\",\n    \"ser\",\n    \"serie\",\n    \"sermón\",\n    \"servir\",\n    \"sesenta\",\n    \"sesión\",\n    \"seta\",\n    \"setenta\",\n    \"severo\",\n    \"sexo\",\n    \"sexto\",\n    \"sidra\",\n    \"siesta\",\n    \"siete\",\n    \"siglo\",\n    \"signo\",\n    \"sílaba\",\n    \"silbar\",\n    \"silencio\",\n    \"silla\",\n    \"símbolo\",\n    \"simio\",\n    \"sirena\",\n    \"sistema\",\n    \"sitio\",\n    \"situar\",\n    \"sobre\",\n    \"socio\",\n    \"sodio\",\n    \"sol\",\n    \"solapa\",\n    \"soldado\",\n    \"soledad\",\n    \"sólido\",\n    \"soltar\",\n    \"solución\",\n    \"sombra\",\n    \"sondeo\",\n    \"sonido\",\n    \"sonoro\",\n    \"sonrisa\",\n    \"sopa\",\n    \"soplar\",\n    \"soporte\",\n    \"sordo\",\n    \"sorpresa\",\n    \"sorteo\",\n    \"sostén\",\n    \"sótano\",\n    \"suave\",\n    \"subir\",\n    \"suceso\",\n    \"sudor\",\n    \"suegra\",\n    \"suelo\",\n    \"sueño\",\n    \"suerte\",\n    \"sufrir\",\n    \"sujeto\",\n    \"sultán\",\n    \"sumar\",\n    \"superar\",\n    \"suplir\",\n    \"suponer\",\n    \"supremo\",\n    \"sur\",\n    \"surco\",\n    \"sureño\",\n    \"surgir\",\n    \"susto\",\n    \"sutil\",\n    \"tabaco\",\n    \"tabique\",\n    \"tabla\",\n    \"tabú\",\n    \"taco\",\n    \"tacto\",\n    \"tajo\",\n    \"talar\",\n    \"talco\",\n    \"talento\",\n    \"talla\",\n    \"talón\",\n    \"tamaño\",\n    \"tambor\",\n    \"tango\",\n    \"tanque\",\n    \"tapa\",\n    \"tapete\",\n    \"tapia\",\n    \"tapón\",\n    \"taquilla\",\n    \"tarde\",\n    \"tarea\",\n    \"tarifa\",\n    \"tarjeta\",\n    \"tarot\",\n    \"tarro\",\n    \"tarta\",\n    \"tatuaje\",\n    \"tauro\",\n    \"taza\",\n    \"tazón\",\n    \"teatro\",\n    \"techo\",\n    \"tecla\",\n    \"técnica\",\n    \"tejado\",\n    \"tejer\",\n    \"tejido\",\n    \"tela\",\n    \"teléfono\",\n    \"tema\",\n    \"temor\",\n    \"templo\",\n    \"tenaz\",\n    \"tender\",\n    \"tener\",\n    \"tenis\",\n    \"tenso\",\n    \"teoría\",\n    \"terapia\",\n    \"terco\",\n    \"término\",\n    \"ternura\",\n    \"terror\",\n    \"tesis\",\n    \"tesoro\",\n    \"testigo\",\n    \"tetera\",\n    \"texto\",\n    \"tez\",\n    \"tibio\",\n    \"tiburón\",\n    \"tiempo\",\n    \"tienda\",\n    \"tierra\",\n    \"tieso\",\n    \"tigre\",\n    \"tijera\",\n    \"tilde\",\n    \"timbre\",\n    \"tímido\",\n    \"timo\",\n    \"tinta\",\n    \"tío\",\n    \"típico\",\n    \"tipo\",\n    \"tira\",\n    \"tirón\",\n    \"titán\",\n    \"títere\",\n    \"título\",\n    \"tiza\",\n    \"toalla\",\n    \"tobillo\",\n    \"tocar\",\n    \"tocino\",\n    \"todo\",\n    \"toga\",\n    \"toldo\",\n    \"tomar\",\n    \"tono\",\n    \"tonto\",\n    \"topar\",\n    \"tope\",\n    \"toque\",\n    \"tórax\",\n    \"torero\",\n    \"tormenta\",\n    \"torneo\",\n    \"toro\",\n    \"torpedo\",\n    \"torre\",\n    \"torso\",\n    \"tortuga\",\n    \"tos\",\n    \"tosco\",\n    \"toser\",\n    \"tóxico\",\n    \"trabajo\",\n    \"tractor\",\n    \"traer\",\n    \"tráfico\",\n    \"trago\",\n    \"traje\",\n    \"tramo\",\n    \"trance\",\n    \"trato\",\n    \"trauma\",\n    \"trazar\",\n    \"trébol\",\n    \"tregua\",\n    \"treinta\",\n    \"tren\",\n    \"trepar\",\n    \"tres\",\n    \"tribu\",\n    \"trigo\",\n    \"tripa\",\n    \"triste\",\n    \"triunfo\",\n    \"trofeo\",\n    \"trompa\",\n    \"tronco\",\n    \"tropa\",\n    \"trote\",\n    \"trozo\",\n    \"truco\",\n    \"trueno\",\n    \"trufa\",\n    \"tubería\",\n    \"tubo\",\n    \"tuerto\",\n    \"tumba\",\n    \"tumor\",\n    \"túnel\",\n    \"túnica\",\n    \"turbina\",\n    \"turismo\",\n    \"turno\",\n    \"tutor\",\n    \"ubicar\",\n    \"úlcera\",\n    \"umbral\",\n    \"unidad\",\n    \"unir\",\n    \"universo\",\n    \"uno\",\n    \"untar\",\n    \"uña\",\n    \"urbano\",\n    \"urbe\",\n    \"urgente\",\n    \"urna\",\n    \"usar\",\n    \"usuario\",\n    \"útil\",\n    \"utopía\",\n    \"uva\",\n    \"vaca\",\n    \"vacío\",\n    \"vacuna\",\n    \"vagar\",\n    \"vago\",\n    \"vaina\",\n    \"vajilla\",\n    \"vale\",\n    \"válido\",\n    \"valle\",\n    \"valor\",\n    \"válvula\",\n    \"vampiro\",\n    \"vara\",\n    \"variar\",\n    \"varón\",\n    \"vaso\",\n    \"vecino\",\n    \"vector\",\n    \"vehículo\",\n    \"veinte\",\n    \"vejez\",\n    \"vela\",\n    \"velero\",\n    \"veloz\",\n    \"vena\",\n    \"vencer\",\n    \"venda\",\n    \"veneno\",\n    \"vengar\",\n    \"venir\",\n    \"venta\",\n    \"venus\",\n    \"ver\",\n    \"verano\",\n    \"verbo\",\n    \"verde\",\n    \"vereda\",\n    \"verja\",\n    \"verso\",\n    \"verter\",\n    \"vía\",\n    \"viaje\",\n    \"vibrar\",\n    \"vicio\",\n    \"víctima\",\n    \"vida\",\n    \"vídeo\",\n    \"vidrio\",\n    \"viejo\",\n    \"viernes\",\n    \"vigor\",\n    \"vil\",\n    \"villa\",\n    \"vinagre\",\n    \"vino\",\n    \"viñedo\",\n    \"violín\",\n    \"viral\",\n    \"virgo\",\n    \"virtud\",\n    \"visor\",\n    \"víspera\",\n    \"vista\",\n    \"vitamina\",\n    \"viudo\",\n    \"vivaz\",\n    \"vivero\",\n    \"vivir\",\n    \"vivo\",\n    \"volcán\",\n    \"volumen\",\n    \"volver\",\n    \"voraz\",\n    \"votar\",\n    \"voto\",\n    \"voz\",\n    \"vuelo\",\n    \"vulgar\",\n    \"yacer\",\n    \"yate\",\n    \"yegua\",\n    \"yema\",\n    \"yerno\",\n    \"yeso\",\n    \"yodo\",\n    \"yoga\",\n    \"yogur\",\n    \"zafiro\",\n    \"zanja\",\n    \"zapato\",\n    \"zarza\",\n    \"zona\",\n    \"zorro\",\n    \"zumo\",\n    \"zurdo\"\n]\nconst b4a = require('b4a')\n\nfunction byteLength (size) {\n  return Math.ceil(size / 8)\n}\n\nfunction get (buffer, bit) {\n  const n = buffer.BYTES_PER_ELEMENT * 8\n\n  const offset = bit & (n - 1)\n  const i = (bit - offset) / n\n\n  return (buffer[i] & (1 << offset)) !== 0\n}\n\nfunction set (buffer, bit, value = true) {\n  const n = buffer.BYTES_PER_ELEMENT * 8\n\n  const offset = bit & (n - 1)\n  const i = (bit - offset) / n\n  const mask = 1 << offset\n\n  if (value) {\n    if ((buffer[i] & mask) !== 0) return false\n  } else {\n    if ((buffer[i] & mask) === 0) return false\n  }\n\n  buffer[i] ^= mask\n  return true\n}\n\nfunction setRange (buffer, start, end, value = true) {\n  const n = buffer.BYTES_PER_ELEMENT * 8\n\n  let remaining = end - start\n  let offset = start & (n - 1)\n  let i = (start - offset) / n\n\n  let changed = false\n\n  while (remaining > 0) {\n    const mask = (2 ** Math.min(remaining, n - offset) - 1) << offset\n\n    if (value) {\n      if ((buffer[i] & mask) !== mask) {\n        buffer[i] |= mask\n        changed = true\n      }\n    } else {\n      if ((buffer[i] & mask) !== 0) {\n        buffer[i] &= ~mask\n        changed = true\n      }\n    }\n\n    remaining -= n - offset\n    offset = 0\n    i++\n  }\n\n  return changed\n}\n\nfunction fill (buffer, value, start = 0, end = buffer.byteLength * 8) {\n  const n = buffer.BYTES_PER_ELEMENT * 8\n  let i, j\n\n  {\n    const offset = start & (n - 1)\n    i = (start - offset) / n\n\n    if (offset !== 0) {\n      const mask = (2 ** Math.min(n - offset, end - start) - 1) << offset\n\n      if (value) buffer[i] |= mask\n      else buffer[i] &= ~mask\n\n      i++\n    }\n  }\n\n  {\n    const offset = end & (n - 1)\n    j = (end - offset) / n\n\n    if (offset !== 0 && j >= i) {\n      const mask = (2 ** offset) - 1\n\n      if (value) buffer[j] |= mask\n      else buffer[j] &= ~mask\n    }\n  }\n\n  return buffer.fill(value ? (2 ** n) - 1 : 0, i, j)\n}\n\nfunction toggle (buffer, bit) {\n  const n = buffer.BYTES_PER_ELEMENT * 8\n\n  const offset = bit & (n - 1)\n  const i = (bit - offset) / n\n  const mask = 1 << offset\n\n  buffer[i] ^= mask\n  return (buffer[i] & mask) !== 0\n}\n\nfunction remove (buffer, bit) {\n  return set(buffer, bit, false)\n}\n\nfunction removeRange (buffer, start, end) {\n  return setRange(buffer, start, end, false)\n}\n\nfunction indexOf (buffer, value, position = 0) {\n  for (let i = position, n = buffer.byteLength * 8; i < n; i++) {\n    if (get(buffer, i) === value) return i\n  }\n\n  return -1\n}\n\nfunction lastIndexOf (buffer, value, position = buffer.byteLength * 8 - 1) {\n  for (let i = position; i >= 0; i--) {\n    if (get(buffer, i) === value) return i\n  }\n\n  return -1\n}\n\nfunction of (...bits) {\n  return from(bits)\n}\n\nfunction from (bits) {\n  const buffer = b4a.alloc(byteLength(bits.length))\n  for (let i = 0; i < bits.length; i++) set(buffer, i, bits[i])\n  return buffer\n}\n\nfunction * iterator (buffer) {\n  for (let i = 0, n = buffer.byteLength * 8; i < n; i++) yield get(buffer, i)\n}\n\nmodule.exports = {\n  byteLength,\n  get,\n  set,\n  setRange,\n  fill,\n  toggle,\n  remove,\n  removeRange,\n  indexOf,\n  lastIndexOf,\n  of,\n  from,\n  iterator\n}\n{\n  \"name\": \"bits-to-bytes\",\n  \"version\": \"1.3.0\",\n  \"description\": \"Functions for doing bit manipulation of typed arrays\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"scripts\": {\n    \"test\": \"standard && brittle test.mjs\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bits-to-bytes.git\"\n  },\n  \"author\": \"Kasper Isager Dalsgarð <kasper@funktionel.co>\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bits-to-bytes/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bits-to-bytes#readme\",\n  \"dependencies\": {\n    \"b4a\": \"^1.5.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^2.3.1\",\n    \"standard\": \"^17.0.0\"\n  }\n}\nconst { EventEmitter } = require('events')\nconst sodium = require('sodium-universal')\nconst crypto = require('hypercore-crypto')\nconst b4a = require('b4a')\nconst c = require('compact-encoding')\n\nconst {\n  Invite,\n  ResponsePayload,\n  InviteRequest,\n  InviteResponse,\n  InviteData,\n  InviteReceipt,\n  PersistedRequest,\n  AuthData\n} = require('./lib/messages')\n\nconst {\n  PAIRING_REJECTED,\n  INVITE_USED,\n  INVITE_EXPIRED\n} = require('./lib/errors')\n\nconst [\n  NS_SIGNATURE,\n  NS_TOKEN,\n  NS_INVITE_ID,\n  NS_REQUEST_ID,\n  NS_SESSION,\n  NS_SESSION_KEY,\n  NS_ENCRYPT,\n  NS_NONCE\n] = crypto.namespace('blind-pairing', 8)\n\nclass CandidateRequest extends EventEmitter {\n  constructor (invite, userData, opts = {}) {\n    super()\n\n    if (b4a.isBuffer(invite)) {\n      invite = c.decode(Invite, invite)\n    }\n\n    this.discoveryKey = invite.discoveryKey\n    this.seed = invite.seed\n\n    this.keyPair = crypto.keyPair(this.seed)\n    this.inviteId = deriveInviteId(this.keyPair.publicKey)\n    this.userData = userData\n\n    this.token = deriveToken(this.keyPair.publicKey, userData)\n    this.session = opts.session || createSessionToken(this.token)\n    this.id = deriveRequestId(this.session)\n\n    this.payload = createAuth(this.userData, this.keyPair, this.session)\n\n    this._encoded = null\n\n    // set in reply\n    this.auth = null\n  }\n\n  static from (buf) {\n    const info = c.decode(PersistedRequest, buf)\n    const { seed, discoveryKey, userData } = info\n    const request = new CandidateRequest({ discoveryKey, seed }, userData)\n\n    // clear completed request\n    if (info.key) {\n      request.key = info.key\n      request.token = null\n      request.payload = null\n    }\n\n    return request\n  }\n\n  handleResponse (payload) {\n    if (b4a.isBuffer(payload)) {\n      payload = this._decodeResponse(payload)\n    }\n\n    try {\n      this._openResponse(payload)\n    } catch (err) {\n      this.emit('rejected', err)\n      return null\n    }\n\n    this._onAccept()\n\n    return this.auth\n  }\n\n  _openResponse (payload) {\n    try {\n      const response = openReply(payload, this.payload.session, this.keyPair.publicKey)\n      this.response = c.decode(ResponsePayload, response)\n    } catch (e) {\n      throw new Error('Could not decrypt reply.')\n    }\n\n    const { status, key, encryptionKey, additional } = this.response\n\n    if (status !== 0) {\n      switch (status) {\n        case 1:\n          throw PAIRING_REJECTED()\n\n        case 2:\n          throw INVITE_USED()\n\n        case 3:\n          throw INVITE_EXPIRED()\n      }\n    }\n\n    if (b4a.compare(crypto.discoveryKey(key), this.discoveryKey)) {\n      throw new Error('Invite response does not match discoveryKey')\n    }\n\n    if (additional && !crypto.verify(additional.data, additional.signature, this.keyPair.publicKey)) {\n      throw new Error('Additional data failed verification')\n    }\n\n    this.auth = { key, encryptionKey, data: additional ? additional.data : null }\n  }\n\n  _onAccept () {\n    this.emit('accepted', this.auth)\n    this.destroy()\n  }\n\n  _decodeResponse (buf) {\n    try {\n      const { payload } = c.decode(InviteResponse, buf)\n      return payload\n    } catch {\n      throw new Error('Could not decode response.')\n    }\n  }\n\n  destroy () {\n    this.token = null\n    this.payload = null\n\n    this.emit('destroyed')\n  }\n\n  encode () {\n    if (!this._encoded) this._encoded = c.encode(InviteRequest, this)\n    return this._encoded\n  }\n}\n\nclass MemberRequest {\n  constructor (inviteId, requestData) {\n    this.inviteId = inviteId\n    this.requestData = requestData\n\n    this._opened = false\n    this._confirmed = false\n    this._denied = false\n\n    // set by transport\n    this.discoveryKey = null\n\n    // set in open\n    this.publicKey = null\n    this.userData = null\n    this.session = null\n    this.id = null\n    this.receipt = null\n\n    // set in confirm/respond\n    this._payload = null\n    this.response = null\n  }\n\n  static from (req) {\n    if (b4a.isBuffer(req)) {\n      return MemberRequest.from(c.decode(InviteRequest, req))\n    }\n\n    return new MemberRequest(\n      req.inviteId,\n      req.payload\n    )\n  }\n\n  confirm ({ key, encryptionKey, additional }) {\n    if (this._confirmed || this._denied || !this._opened) return\n    this._confirmed = true\n\n    const payload = c.encode(ResponsePayload, { status: 0, key, encryptionKey, additional })\n    this._payload = createReply(payload, this.session, this.publicKey)\n\n    this._respond()\n  }\n\n  deny ({ status = 1 } = {}) {\n    if (this._confirmed || this._denied) return\n    this._denied = true\n\n    if (!status) return\n\n    const payload = c.encode(ResponsePayload, {\n      status,\n      key: null,\n      encryptionKey: null,\n      additional: null\n    })\n    this._payload = createReply(payload, this.session, this.publicKey)\n\n    this._respond()\n  }\n\n  respond () {\n    return {\n      id: this.id,\n      payload: this._payload\n    }\n  }\n\n  _respond () {\n    this.response = c.encode(InviteResponse, this.respond())\n  }\n\n  open (publicKey) {\n    if (this._opened && b4a.equals(this.publicKey, publicKey)) return this.userData\n\n    try {\n      this.receipt = openAuth(this.requestData, publicKey)\n      const { userData, session } = c.decode(InviteReceipt, this.receipt)\n\n      this.userData = userData\n      this.session = session\n      this.token = deriveToken(publicKey, userData)\n      this.id = deriveRequestId(this.session)\n    } catch (e) {\n      throw new Error('Failed to open invite with provided key')\n    }\n\n    this.publicKey = publicKey\n    this._opened = true\n\n    return this.userData\n  }\n}\n\nmodule.exports.CandidateRequest = CandidateRequest\nmodule.exports.MemberRequest = MemberRequest\nmodule.exports.createInvite = createInvite\nmodule.exports.decodeInvite = decodeInvite\nmodule.exports.verifyReceipt = verifyReceipt\nmodule.exports.createReceipt = createReceipt\nmodule.exports.Invite = Invite\n\nfunction createReceipt (invite, userData) {\n  const req = new CandidateRequest(invite, userData) // yolo, refactor\n  const receipt = openAuth(req.payload, req.keyPair.publicKey)\n  return { id: deriveInviteId(req.keyPair.publicKey), receipt }\n}\n\nfunction verifyReceipt (receipt, publicKey) {\n  if (b4a.isBuffer(receipt)) {\n    receipt = c.decode(InviteReceipt, receipt)\n  }\n\n  const { session, signature, userData } = receipt\n  const signData = c.encode(AuthData, { userData, session })\n\n  if (!verifySignature(signData, signature, publicKey)) return null\n\n  return userData\n}\n\nfunction deriveInviteId (publicKey) {\n  return crypto.hash([NS_INVITE_ID, publicKey])\n}\n\nfunction deriveKey (publicKey) {\n  const out = b4a.allocUnsafe(sodium.crypto_aead_xchacha20poly1305_ietf_KEYBYTES)\n  return crypto.hash([NS_ENCRYPT, publicKey], out)\n}\n\nfunction deriveNonce (publicKey, sessionToken) {\n  const out = b4a.allocUnsafe(sodium.crypto_aead_xchacha20poly1305_ietf_NPUBBYTES)\n  return crypto.hash([NS_NONCE, publicKey, sessionToken], out)\n}\n\nfunction deriveToken (publicKey, userData) {\n  return crypto.hash([NS_TOKEN, publicKey, userData])\n}\n\nfunction createSessionToken (token) {\n  return crypto.hash([NS_SESSION, token])\n}\n\nfunction deriveRequestId (sessionToken) {\n  return crypto.hash([NS_REQUEST_ID, sessionToken])\n}\n\nfunction createInvite (key, opts = {}) {\n  const {\n    discoveryKey = crypto.discoveryKey(key),\n    expires = 0,\n    seed = crypto.randomBytes(32),\n    sensitive = false,\n    data,\n    testInvitation = false\n  } = opts\n\n  const keyPair = crypto.keyPair(seed)\n  const additional = data\n    ? {\n        data,\n        signature: crypto.sign(data, keyPair.secretKey)\n      }\n    : null\n\n  return {\n    id: deriveInviteId(keyPair.publicKey),\n    invite: c.encode(Invite, { seed, discoveryKey, expires, sensitive, testInvitation }),\n    seed,\n    publicKey: keyPair.publicKey,\n    additional,\n    discoveryKey,\n    expires,\n    sensitive,\n    testInvitation\n  }\n}\n\nfunction decodeInvite (invite) {\n  const data = c.decode(Invite, invite)\n  return {\n    id: deriveInviteId(crypto.keyPair(data.seed).publicKey),\n    ...data\n  }\n}\n\nfunction encrypt (data, nonce, secretKey) {\n  const output = b4a.allocUnsafe(data.byteLength + sodium.crypto_aead_xchacha20poly1305_ietf_ABYTES)\n  sodium.crypto_aead_xchacha20poly1305_ietf_encrypt(output, data, nonce, null, nonce, secretKey)\n  return output\n}\n\nfunction decrypt (data, nonce, secretKey) {\n  const output = b4a.allocUnsafe(data.byteLength - sodium.crypto_aead_xchacha20poly1305_ietf_ABYTES)\n  sodium.crypto_aead_xchacha20poly1305_ietf_decrypt(output, null, data, nonce, nonce, secretKey)\n  return output\n}\n\nfunction createAuth (userData, invitationKeyPair, session) {\n  const secret = deriveKey(invitationKeyPair.publicKey)\n\n  const nonce = deriveNonce(invitationKeyPair.publicKey, session)\n  const signData = c.encode(AuthData, { userData, session })\n  const signature = createSignature(signData, invitationKeyPair.secretKey)\n\n  const inviteData = c.encode(InviteData, { userData, signature })\n  const data = encrypt(inviteData, nonce, secret)\n\n  return {\n    session,\n    data\n  }\n}\n\nfunction openAuth (payload, invitationKey) {\n  const secret = deriveKey(invitationKey)\n\n  const { session, data } = payload\n\n  const nonce = deriveNonce(invitationKey, session)\n\n  let plaintext\n  try {\n    plaintext = decrypt(data, nonce, secret)\n  } catch {\n    // todo stronger check\n    throw new Error('Decryption failed.')\n  }\n\n  const { userData, signature } = c.decode(InviteData, plaintext)\n  const receipt = { session, signature, userData }\n\n  if (!verifyReceipt(receipt, invitationKey)) {\n    throw new Error('Invalid reply')\n  }\n\n  return c.encode(InviteReceipt, { session, signature, userData })\n}\n\nfunction createReply (payload, sessionToken, invitationKey) {\n  const sessionKey = crypto.hash([NS_SESSION_KEY, invitationKey, sessionToken])\n  const secret = deriveKey(sessionKey)\n  const nonce = deriveNonce(sessionKey, sessionToken)\n\n  return encrypt(payload, nonce, secret)\n}\n\nfunction openReply (data, sessionToken, invitationKey) {\n  const sessionKey = crypto.hash([NS_SESSION_KEY, invitationKey, sessionToken])\n  const secret = deriveKey(sessionKey)\n  const nonce = deriveNonce(sessionKey, sessionToken)\n\n  return decrypt(data, nonce, secret)\n}\n\nfunction createSignature (data, secretKey) {\n  const signature = b4a.allocUnsafe(sodium.crypto_sign_BYTES)\n  const namespaced = b4a.allocUnsafe(32 + data.byteLength)\n\n  namespaced.set(NS_SIGNATURE, 0)\n  namespaced.set(data, 32)\n\n  sodium.crypto_sign_detached(signature, namespaced, secretKey)\n\n  return signature\n}\n\nfunction verifySignature (data, signature, publicKey) {\n  const namespaced = b4a.allocUnsafe(32 + data.byteLength)\n\n  namespaced.set(NS_SIGNATURE, 0)\n  namespaced.set(data, 32)\n\n  return sodium.crypto_sign_verify_detached(signature, namespaced, publicKey)\n}\nmodule.exports = class PairingError extends Error {\n  constructor (msg, code, fn = PairingError) {\n    super(`${code}: ${msg}`)\n    this.code = code\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, fn)\n    }\n  }\n\n  get name () {\n    return 'PairingError'\n  }\n\n  static PAIRING_REJECTED (msg = 'Pairing was rejected') {\n    return new PairingError(msg, 'PAIRING_REJECTED', PairingError.PAIRING_REJECTED)\n  }\n\n  static INVITE_USED (msg = 'Invite has been used') {\n    return new PairingError(msg, 'INVITE_USED', PairingError.INVITE_USED)\n  }\n\n  static INVITE_EXPIRED (msg = 'Invite has expireds') {\n    return new PairingError(msg, 'INVITE_EXPIRED', PairingError.INVITE_EXPIRED)\n  }\n}\nconst c = require('compact-encoding')\n\nconst Invite = {\n  preencode (state, i) {\n    state.end++ // version\n    state.end++ // flags\n    c.fixed32.preencode(state, i.seed)\n    if (i.discoveryKey) c.fixed32.preencode(state, i.discoveryKey)\n    if (i.expires) c.uint32.preencode(state, Math.floor(i.expires / 1000)) // store as secs\n  },\n  encode (state, i) {\n    c.uint.encode(state, 1) // version\n    c.uint.encode(state, (i.discoveryKey ? 1 : 0) | (i.expires ? 2 : 0) | (i.sensitive ? 4 : 0) | (i.testInvitation ? 8 : 0))\n    c.fixed32.encode(state, i.seed)\n    if (i.discoveryKey) c.fixed32.encode(state, i.discoveryKey)\n    if (i.expires) c.uint32.encode(state, Math.floor(i.expires / 1000))\n  },\n  decode (state) {\n    const version = c.uint.decode(state)\n    if (version !== 1) {\n      throw new Error('Unknown invite version')\n    }\n\n    const flags = c.uint.decode(state)\n\n    return {\n      seed: c.fixed32.decode(state),\n      discoveryKey: (flags & 1) ? c.fixed32.decode(state) : null,\n      expires: (flags & 2) ? c.uint32.decode(state) * 1000 : 0,\n      sensitive: (flags & 4) !== 0,\n      testInvitation: (flags & 8) !== 0\n    }\n  }\n}\n\nconst RequestPayload = {\n  preencode (state, p) {\n    c.buffer.preencode(state, p.session)\n    c.buffer.preencode(state, p.data)\n  },\n  encode (state, p) {\n    c.buffer.encode(state, p.session)\n    c.buffer.encode(state, p.data)\n  },\n  decode (state) {\n    return {\n      session: c.buffer.decode(state),\n      data: c.buffer.decode(state)\n    }\n  }\n}\n\nconst ResponseStatus = c.uint\n\nconst AdditionalData = {\n  preencode (state, m) {\n    c.buffer.preencode(state, m.data)\n    c.fixed64.preencode(state, m.signature)\n  },\n  encode (state, m) {\n    c.buffer.encode(state, m.data)\n    c.fixed64.encode(state, m.signature)\n  },\n  decode (state) {\n    return {\n      data: c.buffer.decode(state),\n      signature: c.fixed64.decode(state)\n    }\n  }\n}\n\nconst ResponsePayload = {\n  preencode (state, p) {\n    ResponseStatus.preencode(state, p.status)\n    if (p.status !== 0) return\n\n    let flags = 0\n    if (p.encryptionKey) flags |= 1\n    if (p.additional) flags |= 2\n    c.uint.preencode(state, flags) // flags\n\n    c.fixed32.preencode(state, p.key)\n    if (p.encryptionKey) c.fixed32.preencode(state, p.encryptionKey)\n    if (p.additional) AdditionalData.preencode(state, p.additional)\n  },\n  encode (state, p) {\n    ResponseStatus.encode(state, p.status)\n    if (p.status !== 0) return\n\n    let flags = 0\n    if (p.encryptionKey) flags |= 1\n    if (p.additional) flags |= 2\n    c.uint.encode(state, flags)\n\n    c.fixed32.encode(state, p.key)\n    if (p.encryptionKey) c.fixed32.encode(state, p.encryptionKey)\n    if (p.additional) AdditionalData.encode(state, p.additional)\n  },\n  decode (state) {\n    const status = ResponseStatus.decode(state)\n\n    if (status !== 0) {\n      return {\n        status,\n        key: null,\n        encryptionKey: null,\n        additional: null\n      }\n    }\n\n    const flags = c.uint.decode(state)\n    const key = c.fixed32.decode(state)\n    const encryptionKey = (flags & 1) !== 0 ? c.fixed32.decode(state) : null\n    const additional = (flags & 2) !== 0 ? AdditionalData.decode(state) : null\n\n    return {\n      status: 0,\n      key,\n      encryptionKey,\n      additional\n    }\n  }\n}\n\nconst InviteRequest = {\n  preencode (state, i) {\n    c.fixed32.preencode(state, i.inviteId)\n    RequestPayload.preencode(state, i.payload)\n  },\n  encode (state, i) {\n    c.fixed32.encode(state, i.inviteId)\n    RequestPayload.encode(state, i.payload)\n  },\n  decode (state) {\n    return {\n      inviteId: c.fixed32.decode(state),\n      payload: RequestPayload.decode(state)\n    }\n  }\n}\n\nconst InviteResponse = {\n  preencode (state, i) {\n    c.fixed32.preencode(state, i.id)\n    c.buffer.preencode(state, i.payload)\n  },\n  encode (state, i) {\n    c.fixed32.encode(state, i.id)\n    c.buffer.encode(state, i.payload)\n  },\n  decode (state) {\n    return {\n      id: c.fixed32.decode(state),\n      payload: c.buffer.decode(state)\n    }\n  }\n}\n\nconst InviteData = {\n  preencode (state, i) {\n    c.fixed64.preencode(state, i.signature)\n    c.buffer.preencode(state, i.userData)\n  },\n  encode (state, i) {\n    c.fixed64.encode(state, i.signature)\n    c.buffer.encode(state, i.userData)\n  },\n  decode (state) {\n    return {\n      signature: c.fixed64.decode(state),\n      userData: c.buffer.decode(state)\n    }\n  }\n}\n\nconst InviteReceipt = {\n  preencode (state, i) {\n    c.fixed32.preencode(state, i.session)\n    c.fixed64.preencode(state, i.signature)\n    c.buffer.preencode(state, i.userData)\n  },\n  encode (state, i) {\n    c.fixed32.encode(state, i.session)\n    c.fixed64.encode(state, i.signature)\n    c.buffer.encode(state, i.userData)\n  },\n  decode (state) {\n    return {\n      session: c.fixed32.decode(state),\n      signature: c.fixed64.decode(state),\n      userData: c.buffer.decode(state)\n    }\n  }\n}\n\nconst AuthData = {\n  preencode (state, i) {\n    c.buffer.preencode(state, i.session)\n    c.buffer.preencode(state, i.userData)\n  },\n  encode (state, i) {\n    c.buffer.encode(state, i.session)\n    c.buffer.encode(state, i.userData)\n  },\n  decode (state) {\n    return {\n      session: c.buffer.decode(state),\n      userData: c.buffer.decode(state)\n    }\n  }\n}\n\nmodule.exports = {\n  Invite,\n  ResponsePayload,\n  InviteRequest,\n  InviteResponse,\n  InviteData,\n  InviteReceipt,\n  AuthData\n}\n{\n  \"name\": \"blind-pairing-core\",\n  \"version\": \"2.8.0\",\n  \"description\": \"Core blind pairing module\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"lib/**.js\"\n  ],\n  \"scripts\": {\n    \"test\": \"standard && brittle test/*.js\"\n  },\n  \"imports\": {\n    \"events\": {\n      \"bare\": \"bare-events\",\n      \"default\": \"events\"\n    }\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/blind-pairing-core.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/blind-pairing-core/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/blind-pairing-core#readme\",\n  \"dependencies\": {\n    \"b4a\": \"^1.6.4\",\n    \"bare-events\": \"^2.5.0\",\n    \"compact-encoding\": \"^2.11.0\",\n    \"hypercore-crypto\": \"^3.4.0\",\n    \"sodium-universal\": \"^4.0.0\",\n    \"tiny-buffer-map\": \"^1.1.1\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.2.1\",\n    \"standard\": \"^17.0.0\"\n  }\n}\nconst crypto = require('hypercore-crypto')\nconst b4a = require('b4a')\nconst safetyCatch = require('safety-catch')\nconst ReadyResource = require('ready-resource')\nconst Xache = require('xache')\nconst { MemberRequest, CandidateRequest, createInvite, decodeInvite, verifyReceipt, Invite } = require('blind-pairing-core')\nconst Protomux = require('protomux')\nconst c = require('compact-encoding')\nconst debounce = require('debounceify')\nconst isOptions = require('is-options')\n\nconst [NS_EPHEMERAL, NS_REPLY, NS_DISCOVERY] = crypto.namespace('blind-pairing/dht', 3)\n\nconst DEFAULT_POLL = 7 * 60 * 1000\nconst PEER_INTERVAL = 1000\n\nclass TimeoutPromise {\n  constructor (ms) {\n    this.ms = ms\n    this.resolve = null\n    this.timeout = null\n    this.destroyed = false\n    this.suspended = false\n\n    this._resolveBound = this._resolve.bind(this)\n    this._ontimerBound = this._ontimer.bind(this)\n  }\n\n  wait () {\n    if (this.destroyed) return Promise.resolve()\n    if (this.resolve) this._resolve()\n    return new Promise(this._ontimerBound)\n  }\n\n  suspend () {\n    this.suspended = true\n    if (this.timeout !== null) clearTimeout(this.timeout)\n    this.timeout = null\n  }\n\n  resume () {\n    this.suspended = false\n    if (this.resolve) this._resolve()\n  }\n\n  destroy () {\n    this.destroyed = true\n    if (this.resolve) this._resolve()\n  }\n\n  _ontimer (resolve) {\n    this.resolve = resolve\n    if (!this.suspended) this.timeout = setTimeout(this._resolveBound, this.ms)\n  }\n\n  _resolve () {\n    if (this.timeout !== null) clearTimeout(this.timeout)\n\n    const resolve = this.resolve\n    this.timeout = null\n    this.resolve = null\n\n    resolve()\n  }\n}\n\nclass BlindPairing extends ReadyResource {\n  constructor (swarm, { poll = DEFAULT_POLL, onincoming = noop } = {}) {\n    super()\n\n    this.swarm = swarm\n    this.poll = poll\n    this.active = new Map()\n    this.suspended = false\n\n    this._onincoming = onincoming\n    this._onconnectionBound = this._onconnection.bind(this)\n    this._refreshBound = this.refresh.bind(this)\n    this._refreshing = null\n\n    this.swarm.on('connection', this._onconnectionBound)\n    this.swarm.dht.on('network-change', this._refreshBound)\n  }\n\n  static Invite = Invite\n\n  static createInvite (key, opts) {\n    return createInvite(key, opts)\n  }\n\n  static decodeInvite (invite) {\n    return decodeInvite(invite)\n  }\n\n  static verifyReceipt (receipt, publicKey) {\n    return verifyReceipt(receipt, publicKey)\n  }\n\n  static createRequest (invite, userData) {\n    return new CandidateRequest(invite, userData)\n  }\n\n  async suspend () {\n    if (this.suspended) return\n    this.suspended = true\n\n    const all = []\n\n    for (const ref of this.active.values()) {\n      if (ref.candidate) all.push(ref.candidate._suspend())\n      if (ref.member) all.push(ref.member._suspend())\n    }\n\n    await Promise.allSettled(all)\n  }\n\n  resume () {\n    if (!this.suspended) return\n    this.suspended = false\n    this.refresh().catch(safetyCatch) // no need to wait for the refreshes\n  }\n\n  async refresh () {\n    if (this._refreshing) {\n      await this._refreshing\n      return\n    }\n\n    if (this.closing || this.suspended) return\n\n    const r = this._refreshing = this._refresh()\n\n    try {\n      await r\n    } finally {\n      if (r === this._refreshing) this._refreshing = null\n    }\n  }\n\n  async _refresh () {\n    if (this.closing || this.suspended) return\n\n    const all = []\n\n    for (const ref of this.active.values()) {\n      if (ref.candidate) all.push(ref.candidate.refresh())\n      if (ref.member) all.push(ref.member.refresh())\n    }\n\n    await Promise.allSettled(all)\n  }\n\n  addMember (opts) {\n    return new Member(this, opts)\n  }\n\n  addCandidate (request, opts) {\n    if (isOptions(request)) return this.addCandidate(null, request)\n    if (!request) request = new CandidateRequest(opts.invite, opts.userData)\n    return new Candidate(this, request, opts)\n  }\n\n  async _close () {\n    this.swarm.removeListener('connection', this._onconnectionBound)\n    this.swarm.dht.removeListener('network-change', this._refreshBound)\n\n    const all = []\n\n    for (const conn of this.swarm.connections) {\n      const mux = getMuxer(conn)\n      mux.unpair({ protocol: 'blind-pairing' })\n      for (const ref of this.active.values()) mux.unpair({ protocol: 'blind-pairing', id: ref.discoveryKey })\n    }\n\n    for (const ref of this.active.values()) {\n      if (ref.member) all.push(ref.member.close())\n      if (ref.candidate) all.push(ref.candidate.close())\n      if (ref.discovery) all.push(ref.discovery.destroy())\n    }\n\n    await Promise.allSettled(all)\n  }\n\n  _randomPoll () {\n    return randomInterval(this.poll)\n  }\n\n  _add (discoveryKey) {\n    const id = b4a.toString(discoveryKey, 'hex')\n    const t = this.active.get(id)\n    if (t) return t\n\n    const fresh = {\n      id,\n      discoveryKey,\n      member: null,\n      candidate: null,\n      channels: new Set(),\n      alwaysServer: false,\n      alwaysClient: false,\n      discovery: null\n    }\n\n    this.active.set(id, fresh)\n    return fresh\n  }\n\n  _swarm (ref) {\n    const server = ref.alwaysServer || !!ref.member\n    const client = ref.alwaysClient || !!ref.candidate\n\n    if (ref.discovery && ref.discovery.isServer === server && ref.discovery.isClient === client) {\n      return\n    }\n\n    if (ref.discovery) ref.discovery.destroy().catch(safetyCatch)\n\n    // just a sanity check, not needed but doesnt hurt\n    if (!server && !client) return\n\n    ref.discovery = this.swarm.join(ref.discoveryKey, { server, client })\n    this._attachToSwarm(ref)\n  }\n\n  _attachToSwarm (ref) {\n    for (const conn of this.swarm.connections) {\n      const mux = getMuxer(conn)\n      this._attachToMuxer(mux, ref.discoveryKey, ref)\n    }\n  }\n\n  _gc (ref) {\n    if (ref.member || ref.candidate) {\n      if (ref.discovery) this._swarm(ref) // in case it needs updating...\n      return false\n    }\n    this.active.delete(ref.id)\n    for (const ch of ref.channels) ch.close()\n    for (const conn of this.swarm.connections) {\n      const mux = getMuxer(conn)\n      mux.unpair({ protocol: 'blind-pairing', id: ref.discoveryKey })\n    }\n    if (ref.discovery) ref.discovery.destroy().catch(safetyCatch)\n    return true\n  }\n\n  _onconnection (conn) {\n    const mux = getMuxer(conn)\n\n    mux.pair({ protocol: 'blind-pairing' }, this._onincoming)\n\n    for (const ref of this.active.values()) {\n      this._attachToMuxer(mux, ref.discoveryKey, ref)\n    }\n  }\n\n  _attachToMuxer (mux, discoveryKey, ref) {\n    if (!ref) ref = this._add(discoveryKey)\n\n    const ch = mux.createChannel({\n      protocol: 'blind-pairing',\n      id: discoveryKey,\n      messages: [\n        { encoding: c.buffer, onmessage: (req) => this._onpairingrequest(ch, ref, req) },\n        { encoding: c.buffer, onmessage: (res) => this._onpairingresponse(ch, ref, res) }\n      ],\n      onclose: () => {\n        ref.channels.delete(ch)\n        if (ref.candidate) ref.candidate.visited.delete(ch)\n      }\n    })\n\n    if (ch === null) return\n\n    ch.open()\n    mux.pair({ protocol: 'blind-pairing', id: discoveryKey }, () => this._attachToMuxer(mux, discoveryKey, null))\n    ref.channels.add(ch)\n\n    if (ref.candidate) ref.candidate.broadcast()\n  }\n\n  async _onpairingrequest (ch, ref, req) {\n    if (!ref.member) return\n\n    const request = await ref.member._addRequest(req)\n    if (!request) return\n\n    ch.messages[1].send(request.response)\n  }\n\n  async _onpairingresponse (ch, ref, res) {\n    if (!ref.candidate) return\n\n    await ref.candidate._addResponse(res, false)\n  }\n}\n\nclass Member extends ReadyResource {\n  constructor (blind, { announce = true, discoveryKey, onadd = noop } = {}) {\n    super()\n\n    if (!discoveryKey) {\n      throw new Error('Must provide discoveryKey')\n    }\n\n    const ref = blind._add(discoveryKey)\n\n    if (ref.member) {\n      throw new Error('Active member already exist')\n    }\n\n    ref.member = this\n\n    this._pendingRequests = new Map()\n\n    this.blind = blind\n    this.dht = blind.swarm.dht\n    this.discoveryKey = discoveryKey\n    this.pairingDiscoveryKey = deriveDiscoveryKey(discoveryKey)\n    this.timeout = new TimeoutPromise(blind._randomPoll())\n    this.pairing = null\n    this.skip = new Xache({ maxSize: 512 })\n    this.ref = ref\n    this.onadd = onadd\n\n    this._activeQuery = null\n    this._activePoll = null\n    this._closestNodes = null\n    this._autoAnnounce = announce\n\n    this.ready()\n  }\n\n  announce () {\n    if (this.pairing) return this.pairing\n\n    this.blind._swarm(this.ref)\n    this.pairing = this._run()\n    this.pairing.catch(safetyCatch)\n\n    return this.pairing\n  }\n\n  async flushed () {\n    if (!this.ref.discovery) return\n    return this.ref.discovery.flushed()\n  }\n\n  _open () {\n    if (this._autoAnnounce) this.announce()\n    else this.blind._attachToSwarm(this.ref)\n  }\n\n  _suspend () {\n    this.timeout.suspend()\n    return this._abort()\n  }\n\n  async _abort () {\n    if (this._activeQuery) this._activeQuery.destroy()\n    while (this._activePoll !== null) await this._activePoll\n  }\n\n  async refresh () {\n    await this._abort()\n    this.timeout.resume()\n  }\n\n  async _close () {\n    this.ref.member = null\n    this.blind._gc(this.ref)\n    this.timeout.destroy()\n    await this._abort()\n\n    try {\n      await this.pairing\n    } catch {\n      // ignore errors since we teardown\n    }\n  }\n\n  async _run () {\n    while (!this.closing) {\n      this._activePoll = this._poll()\n      await this._activePoll\n      this._activePoll = null\n      await this.timeout.wait()\n    }\n  }\n\n  async _poll () {\n    const visited = new Set()\n    let alwaysClient = false\n\n    if (this._activeQuery) this._activeQuery.destroy()\n\n    const query = this._activeQuery = this.dht.lookup(this.pairingDiscoveryKey, { closestNodes: this._closestNodes })\n\n    try {\n      for await (const data of this._activeQuery) {\n        if (this.closing || this.blind.suspended) return\n\n        for (const peer of data.peers) {\n          const id = b4a.toString(peer.publicKey, 'hex')\n\n          if (visited.has(id) || this.skip.get(id)) continue\n          visited.add(id)\n\n          try {\n            if (await this._add(peer.publicKey, id)) alwaysClient = true\n          } catch (err) {\n            safetyCatch(err)\n          }\n\n          if (this.closing || this.blind.suspended) return\n\n          if (alwaysClient && !this.ref.alwaysClient) {\n            this.ref.alwaysClient = true\n            this.blind._swarm(this.ref)\n          }\n        }\n      }\n    } catch {\n      // do nothing\n    } finally {\n      const nodes = this._activeQuery.closestNodes\n      if (this._activeQuery === query) this._activeQuery = null\n      if (nodes && nodes.length > 0) this._closestNodes = nodes\n    }\n\n    if (alwaysClient) this._revertClientAfterFlush() // safe to do in bg\n  }\n\n  async _revertClientAfterFlush () {\n    try {\n      await this.blind.swarm.flush()\n    } catch {\n      return\n    }\n    if (this.closing || this.blind.suspended) return\n\n    this.ref.alwaysClient = false\n    this.blind._swarm(this.ref)\n  }\n\n  async _addRequest (value) {\n    let request = null\n    try {\n      request = MemberRequest.from(value)\n    } catch {\n      return null\n    }\n\n    request.discoveryKey = this.discoveryKey\n\n    const session = b4a.toString(request.requestData.session, 'hex')\n\n    if (!this._pendingRequests.has(session)) {\n      this._pendingRequests.set(session, {\n        request,\n        promise: this.onadd(request)\n      })\n    }\n\n    // laod existing request if it exists\n    const pending = this._pendingRequests.get(session)\n\n    try {\n      await pending.promise\n    } catch (e) {\n      safetyCatch(e)\n      return null\n    }\n\n    this._pendingRequests.delete(session)\n\n    if (!pending.request.response) return null\n\n    return pending.request\n  }\n\n  async _add (publicKey, id) {\n    const node = await this.dht.mutableGet(publicKey, { latest: false })\n    if (!node) return false\n\n    this.skip.set(id, true)\n\n    const request = await this._addRequest(node.value)\n    if (!request) return false\n\n    const replyKeyPair = deriveReplyKeyPair(request.token)\n    await this.dht.mutablePut(replyKeyPair, request.response)\n\n    return true\n  }\n}\n\nclass Candidate extends ReadyResource {\n  constructor (blind, request, { discoveryKey = request.discoveryKey, onadd = noop } = {}) {\n    super()\n\n    const ref = blind._add(discoveryKey)\n    if (ref.candidate) {\n      throw new Error('Active candidate already exist')\n    }\n\n    ref.candidate = this\n\n    this.blind = blind\n    this.discoveryKey = discoveryKey\n    this.pairingDiscoveryKey = deriveDiscoveryKey(discoveryKey)\n    this.dht = blind.swarm.dht\n    this.request = request\n    this.token = request.token\n    this.timeout = new TimeoutPromise(blind._randomPoll())\n    this.announced = false\n    this.gcing = null\n    this.ref = ref\n    this.paired = null\n    this.pairing = null\n    this.onadd = onadd\n\n    this.signal = null\n    this.visited = new Set()\n    this.broadcast = debounce(this._broadcast.bind(this))\n\n    this._activePoll = null\n\n    this.ready()\n  }\n\n  _open () {\n    this.blind._swarm(this.ref)\n    this.pairing = this._run()\n    this.broadcast()\n  }\n\n  _suspend () {\n    this.timeout.suspend()\n    // no good way to suspend the mut gets atm unfortunately so we just rely on the polls timing out\n  }\n\n  async refresh () {\n    while (this._activePoll !== null) await this._activePoll\n    this.announced = false\n    this.timeout.resume()\n  }\n\n  async _close () {\n    this.ref.candidate = null\n    this.blind._gc(this.ref)\n    this.timeout.destroy()\n    this.visited.clear()\n    await this.pairing\n    // gc never throws\n    if (this.gcing) await this.gcing\n  }\n\n  async _addResponse (value, gc) {\n    if (this.paired) return\n\n    const paired = this.request.handleResponse(value)\n    if (!paired) return\n\n    this.paired = paired\n    if (this.signal) this.signal.destroy()\n\n    if ((gc || this.announced) && !this.gcing) this.gcing = this._gc() // gc in the background\n    await this.onadd(paired)\n    this.timeout.destroy()\n  }\n\n  async _run () {\n    while (!this._done()) {\n      this._activePoll = this._poll()\n      await this._activePoll\n      this._activePoll = null\n      if (this._done()) break\n      await this.timeout.wait()\n    }\n\n    this.close().catch(safetyCatch)\n    return this.paired\n  }\n\n  _done () {\n    return !!(this.closing || this.paired)\n  }\n\n  async _announce () {\n    const eph = deriveEphemeralKeyPair(this.token)\n\n    await this.dht.mutablePut(eph, this.request.encode())\n    if (this._done()) return\n\n    await this.dht.announce(this.pairingDiscoveryKey, eph).finished()\n    if (this._done()) return\n\n    if (!this.paired) {\n      this.ref.alwaysServer = true\n      this.blind._swarm(this.ref)\n    }\n\n    this.emit('announce')\n  }\n\n  async _gc () {\n    const eph = deriveEphemeralKeyPair(this.token)\n\n    try {\n      await this.dht.unannounce(this.pairingDiscoveryKey, eph)\n    } catch (err) {\n      safetyCatch(err) // just gc, whatevs\n    }\n  }\n\n  _sendRequest (ch) {\n    ch.messages[0].send(this.request.encode())\n    this.visited.add(ch)\n  }\n\n  async _broadcast () {\n    for (const channel of this.closestPeers()) {\n      this.signal = new TimeoutPromise(randomInterval(PEER_INTERVAL))\n      if (channel) this._sendRequest(channel)\n\n      await this.signal.wait() // resolves on destroy\n\n      if (this.paired || this.suspended) break\n    }\n  }\n\n  * closestPeers () {\n    while (!this.paired) {\n      const closest = Infinity\n      let channel = null\n\n      for (const ch of this.ref.channels) {\n        if (this.visited.has(ch)) continue\n\n        const { rtt } = ch._mux.stream.rawStream\n        if (rtt < closest) channel = ch\n      }\n\n      if (!channel) return\n\n      yield channel\n    }\n  }\n\n  async _poll () {\n    try {\n      const value = await this._getReply()\n      if (this._done() || this.blind.suspended) return\n\n      if (value) {\n        await this._addResponse(value, true)\n        if (this._done() || this.blind.suspended) return\n      }\n\n      if (!this.announced) {\n        this.announced = true\n        await this._announce()\n      }\n    } catch {\n      // can run in bg, should never crash it\n    }\n  }\n\n  async _getReply () {\n    const { publicKey } = deriveReplyKeyPair(this.token)\n    const node = await this.dht.mutableGet(publicKey, { latest: false })\n    if (!node) return null\n    return node.value\n  }\n}\n\nmodule.exports = BlindPairing\n\nfunction noop () {}\n\nfunction deriveReplyKeyPair (token) {\n  return crypto.keyPair(crypto.hash([NS_REPLY, token]))\n}\n\nfunction deriveEphemeralKeyPair (token) {\n  return crypto.keyPair(crypto.hash([NS_EPHEMERAL, token]))\n}\n\nfunction deriveDiscoveryKey (discoveryKey) {\n  return crypto.hash([NS_DISCOVERY, discoveryKey])\n}\n\nfunction getMuxer (stream) {\n  if (stream.userData) return stream.userData\n  const protocol = Protomux.from(stream)\n  stream.setKeepAlive(5000)\n  stream.userData = protocol\n  return protocol\n}\n\nfunction randomInterval (n) {\n  return n + (n * 0.5 * Math.random()) | 0\n}\n{\n  \"name\": \"blind-pairing\",\n  \"version\": \"2.3.1\",\n  \"description\": \"Blind pairing using Hyperswarm\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"blind-pairing-core\": \"^2.0.0\",\n    \"b4a\": \"^1.6.4\",\n    \"debounceify\": \"^1.1.0\",\n    \"hypercore-crypto\": \"^3.4.0\",\n    \"is-options\": \"^1.0.2\",\n    \"ready-resource\": \"^1.0.0\",\n    \"safety-catch\": \"^1.0.2\",\n    \"xache\": \"^1.2.0\"\n  },\n  \"devDependencies\": {\n    \"@hyperswarm/testnet\": \"^3.1.4\",\n    \"brittle\": \"^3.3.2\",\n    \"hyperdht\": \"^6.8.9\",\n    \"hyperswarm\": \"^4.7.3\",\n    \"minimist\": \"^1.2.8\",\n    \"standard\": \"^17.1.0\",\n    \"z32\": \"^1.0.1\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test/*.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/holepunchto/blind-pairing.git\"\n  },\n  \"author\": \"Holepunch Inc\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/blind-pairing/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/blind-pairing\"\n}\nconst EventEmitter = require('events')\nconst Protomux = require('protomux')\nconst { Readable } = require('streamx')\nconst sodium = require('sodium-universal')\nconst b4a = require('b4a')\nconst c = require('compact-encoding')\nconst bitfield = require('compact-encoding-bitfield')\nconst bits = require('bits-to-bytes')\nconst errors = require('./lib/errors')\nconst { createTracer } = require('hypertrace')\n\nexports.Server = class BlindRelayServer extends EventEmitter {\n  constructor (opts = {}) {\n    super()\n\n    const {\n      createStream\n    } = opts\n\n    this._createStream = createStream\n    this._pairing = new Map()\n    this._sessions = new Set()\n  }\n\n  get sessions () {\n    return this._sessions[Symbol.iterator]()\n  }\n\n  accept (stream, opts) {\n    const session = new BlindRelaySession(this, stream, opts)\n\n    this._sessions.add(session)\n\n    return session\n  }\n\n  async close () {\n    const ending = []\n\n    for (const session of this._sessions) {\n      ending.push(session.end())\n    }\n\n    await Promise.all(ending)\n\n    this._pairing.clear()\n  }\n}\n\nclass BlindRelaySession extends EventEmitter {\n  constructor (server, stream, opts = {}) {\n    super()\n\n    const {\n      id,\n      handshake,\n      handshakeEncoding\n    } = opts\n\n    this.tracer = createTracer(this, {\n      props: {\n        id,\n        remotePublicKey: stream.remotePublicKey\n      }\n    })\n\n    this._server = server\n    this._mux = Protomux.from(stream)\n\n    this._channel = this._mux.createChannel({\n      protocol: 'blind-relay',\n      id,\n      handshake: handshake ? handshakeEncoding || c.raw : null,\n      onopen: this._onopen.bind(this),\n      onclose: this._onclose.bind(this),\n      ondestroy: this._ondestroy.bind(this)\n    })\n\n    this._pair = this._channel.addMessage({\n      encoding: m.pair,\n      onmessage: this._onpair.bind(this)\n    })\n\n    this._unpair = this._channel.addMessage({\n      encoding: m.unpair,\n      onmessage: this._onunpair.bind(this)\n    })\n\n    this._ending = null\n    this._destroyed = false\n    this._error = null\n    this._pairing = new Set()\n    this._streams = new Map()\n\n    this._onerror = (err) => this.emit('error', err)\n\n    this._channel.open(handshake)\n  }\n\n  get closed () {\n    return this._channel.closed\n  }\n\n  get mux () {\n    return this._mux\n  }\n\n  get stream () {\n    return this._mux.stream\n  }\n\n  _onopen () {\n    this.tracer.trace('open')\n    this.emit('open')\n  }\n\n  _onclose () {\n    this._ending = Promise.resolve()\n\n    const err = this._error || errors.CHANNEL_CLOSED()\n\n    for (const token of this._pairing) {\n      this._server._pairing.delete(token.toString('hex'))\n    }\n\n    for (const stream of this._streams.values()) {\n      stream\n        .off('error', this._onerror)\n        .on('error', noop)\n        .destroy(err)\n    }\n\n    this._pairing.clear()\n    this._streams.clear()\n\n    this._server._sessions.delete(this)\n\n    this.tracer.trace('close', { error: err })\n    this.emit('close')\n  }\n\n  _ondestroy () {\n    this._destroyed = true\n    this.emit('destroy')\n  }\n\n  _onpair ({ isInitiator, token, id: remoteId }) {\n    const keyString = token.toString('hex')\n\n    let pair = this._server._pairing.get(keyString)\n\n    if (pair === undefined) {\n      pair = new BlindRelayPair(token)\n      this._server._pairing.set(keyString, pair)\n    } else if (pair.links[+isInitiator]) return\n\n    this._pairing.add(keyString)\n\n    pair.links[+isInitiator] = new BlindRelayLink(this, isInitiator, remoteId)\n\n    if (!pair.paired) return\n\n    this._server._pairing.delete(keyString)\n\n    // 1st pass: Create the raw streams needed for each end of the link.\n    for (const link of pair.links) {\n      link.createStream()\n    }\n\n    // 2nd pass: Connect the raw streams and set up handlers.\n    for (const { isInitiator, session, stream } of pair.links) {\n      const remote = pair.remote(isInitiator)\n\n      stream\n        .on('error', session._onerror)\n        .on('close', () => session._streams.delete(keyString))\n        .relayTo(remote.stream)\n\n      session._pairing.delete(keyString)\n      session._streams.set(keyString, stream)\n    }\n\n    // 3rd pass: Let either end of the link know the streams were set up.\n    for (const { isInitiator, session, remoteId, stream } of pair.links) {\n      session._pair.send({\n        isInitiator,\n        token,\n        id: stream.id,\n        seq: 0\n      })\n\n      session._endMaybe()\n\n      session.emit('pair', isInitiator, token, stream, remoteId)\n    }\n  }\n\n  _onunpair ({ token }) {\n    const keyString = token.toString('hex')\n\n    const pair = this._server._pairing.get(keyString)\n\n    if (pair) {\n      for (const link of pair.links) {\n        if (link) link.session._pairing.delete(keyString)\n      }\n\n      return this._server._pairing.delete(keyString)\n    }\n\n    const stream = this._streams.get(keyString)\n\n    if (stream) {\n      stream\n        .off('error', this._onerror)\n        .on('error', noop)\n        .destroy(errors.PAIRING_CANCELLED())\n\n      this._streams.delete(keyString)\n    }\n  }\n\n  cork () {\n    this._channel.cork()\n  }\n\n  uncork () {\n    this._channel.uncork()\n  }\n\n  async end () {\n    if (this._ending) return this._ending\n\n    this._ending = EventEmitter.once(this, 'close')\n    this._endMaybe()\n\n    return this._ending\n  }\n\n  _endMaybe () {\n    if (this._ending && this._pairing.size === 0) {\n      this._channel.close()\n    }\n  }\n\n  destroy (err) {\n    if (this._destroyed) return\n    this._destroyed = true\n\n    this._error = err || errors.CHANNEL_DESTROYED()\n    this._channel.close()\n    this.tracer.trace('destroy', { error: this._error })\n  }\n}\n\nclass BlindRelayPair {\n  constructor (token) {\n    this.token = token\n    this.links = [null, null]\n  }\n\n  get paired () {\n    return this.links[0] !== null && this.links[1] !== null\n  }\n\n  remote (isInitiator) {\n    return this.links[isInitiator ? 0 : 1]\n  }\n}\n\nclass BlindRelayLink {\n  constructor (session, isInitiator, remoteId) {\n    this.session = session\n    this.isInitiator = isInitiator\n    this.remoteId = remoteId\n    this.stream = null\n  }\n\n  createStream () {\n    if (this.stream) return\n\n    this.stream = this.session._server._createStream({\n      firewall: this._onfirewall.bind(this)\n    })\n  }\n\n  _onfirewall (socket, port, host) {\n    this.stream.connect(socket, this.remoteId, port, host)\n\n    return false\n  }\n}\n\nexports.Client = class BlindRelayClient extends EventEmitter {\n  static _clients = new WeakMap()\n\n  static from (stream, opts) {\n    let client = this._clients.get(stream)\n    if (client) return client\n    client = new this(stream, opts)\n    this._clients.set(stream, client)\n    return client\n  }\n\n  constructor (stream, opts = {}) {\n    super()\n\n    const {\n      id,\n      handshake,\n      handshakeEncoding\n    } = opts\n\n    this.tracer = createTracer(this, {\n      props: {\n        id,\n        remotePublicKey: stream.remotePublicKey\n      }\n    })\n\n    this._mux = Protomux.from(stream)\n\n    this._channel = this._mux.createChannel({\n      protocol: 'blind-relay',\n      id,\n      handshake: handshake ? handshakeEncoding || c.raw : null,\n      onopen: this._onopen.bind(this),\n      onclose: this._onclose.bind(this),\n      ondestroy: this._ondestroy.bind(this)\n    })\n\n    this._pair = this._channel.addMessage({\n      encoding: m.pair,\n      onmessage: this._onpair.bind(this)\n    })\n\n    this._unpair = this._channel.addMessage({\n      encoding: m.unpair\n    })\n\n    this._ending = false\n    this._destroyed = false\n    this._error = null\n    this._requests = new Map()\n\n    this._channel.open(handshake)\n  }\n\n  get closed () {\n    return this._channel.closed\n  }\n\n  get mux () {\n    return this._mux\n  }\n\n  get stream () {\n    return this._mux.stream\n  }\n\n  get requests () {\n    return this._requests.values()\n  }\n\n  _onopen () {\n    this.tracer.trace('open')\n    this.emit('open')\n  }\n\n  _onclose () {\n    this._ending = Promise.resolve()\n\n    const err = this._error || errors.CHANNEL_CLOSED()\n\n    for (const request of this._requests.values()) {\n      request.destroy(err)\n    }\n\n    this._requests.clear()\n\n    this.constructor._clients.delete(this.stream)\n\n    this.tracer.trace('close', { error: err })\n    this.emit('close')\n  }\n\n  _ondestroy () {\n    this._destroyed = true\n    this.emit('destroy')\n  }\n\n  _onpair ({ isInitiator, token, id: remoteId }) {\n    const request = this._requests.get(token.toString('hex'))\n\n    if (request === undefined || request.isInitiator !== isInitiator) return\n\n    request.push(remoteId)\n    request.push(null)\n\n    this.emit('pair', request.isInitiator, request.token, request.stream, remoteId)\n  }\n\n  pair (isInitiator, token, stream) {\n    if (this._destroyed) throw errors.CHANNEL_DESTROYED()\n\n    const keyString = token.toString('hex')\n\n    if (this._requests.has(keyString)) throw errors.ALREADY_PAIRING()\n\n    const request = new BlindRelayRequest(this, isInitiator, token, stream)\n\n    this._requests.set(keyString, request)\n\n    return request\n  }\n\n  unpair (token) {\n    if (this._destroyed) throw errors.CHANNEL_DESTROYED()\n\n    const request = this._requests.get(token.toString('hex'))\n\n    if (request) request.destroy(errors.PAIRING_CANCELLED())\n\n    this._unpair.send({ token })\n  }\n\n  cork () {\n    this._channel.cork()\n  }\n\n  uncork () {\n    this._channel.uncork()\n  }\n\n  async end () {\n    if (this._ending) return this._ending\n\n    this._ending = EventEmitter.once(this, 'close')\n    this._endMaybe()\n\n    return this._ending\n  }\n\n  _endMaybe () {\n    if (this._ending && this._requests.size === 0) {\n      this._channel.close()\n    }\n  }\n\n  destroy (err) {\n    if (this._destroyed) return\n    this._destroyed = true\n\n    this._error = err || errors.CHANNEL_DESTROYED()\n    this._channel.close()\n    this.tracer.trace('destroy', { error: err })\n  }\n}\n\nclass BlindRelayRequest extends Readable {\n  constructor (client, isInitiator, token, stream) {\n    super()\n\n    this.client = client\n    this.isInitiator = isInitiator\n    this.token = token\n    this.stream = stream\n\n    this.tracer = createTracer(this, {\n      parent: client.tracer\n    })\n  }\n\n  _open (cb) {\n    if (this.client._destroyed) return cb(errors.CHANNEL_DESTROYED())\n\n    this.tracer.trace('open', {\n      isInitiator: this.isInitiator,\n      stream: this.stream\n    })\n\n    this.client._pair.send({\n      isInitiator: this.isInitiator,\n      token: this.token,\n      id: this.stream.id,\n      seq: 0\n    })\n\n    cb(null)\n  }\n\n  _destroy (cb) {\n    this.tracer.trace('destroy')\n\n    this.client._requests.delete(this.token.toString('hex'))\n\n    cb(null)\n\n    this.client._endMaybe()\n  }\n}\n\nexports.token = function token (buf = b4a.allocUnsafe(32)) {\n  sodium.randombytes_buf(buf)\n  return buf\n}\n\nfunction noop () {}\n\nconst m = exports.messages = {}\n\nconst flags = bitfield(7)\n\nm.pair = {\n  preencode (state, m) {\n    flags.preencode(state)\n    c.fixed32.preencode(state, m.token)\n    c.uint.preencode(state, m.id)\n    c.uint.preencode(state, m.seq)\n  },\n  encode (state, m) {\n    flags.encode(state, bits.of(m.isInitiator))\n    c.fixed32.encode(state, m.token)\n    c.uint.encode(state, m.id)\n    c.uint.encode(state, m.seq)\n  },\n  decode (state) {\n    const [isInitiator] = bits.iterator(flags.decode(state))\n\n    return {\n      isInitiator,\n      token: c.fixed32.decode(state),\n      id: c.uint.decode(state),\n      seq: c.uint.decode(state)\n    }\n  }\n}\n\nm.unpair = {\n  preencode (state, m) {\n    flags.preencode(state)\n    c.fixed32.preencode(state, m.token)\n  },\n  encode (state, m) {\n    flags.encode(state, bits.of())\n    c.fixed32.encode(state, m.token)\n  },\n  decode (state) {\n    flags.decode(state)\n\n    return {\n      token: c.fixed32.decode(state)\n    }\n  }\n}\nmodule.exports = class BlindRelayError extends Error {\n  constructor (msg, code, fn = BlindRelayError) {\n    super(`${code}: ${msg}`)\n    this.code = code\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, fn)\n    }\n  }\n\n  get name () {\n    return 'BlindRelayError'\n  }\n\n  static DUPLICATE_CHANNEL (msg = 'Duplicate channel') {\n    return new BlindRelayError(msg, 'DUPLICATE_CHANNEL', BlindRelayError.DUPLICATE_CHANNEL)\n  }\n\n  static CHANNEL_CLOSED (msg = 'Channel closed') {\n    return new BlindRelayError(msg, 'CHANNEL_CLOSED', BlindRelayError.CHANNEL_CLOSED)\n  }\n\n  static CHANNEL_DESTROYED (msg = 'Channel destroyed') {\n    return new BlindRelayError(msg, 'CHANNEL_DESTROYED', BlindRelayError.CHANNEL_DESTROYED)\n  }\n\n  static ALREADY_PAIRING (msg = 'Already pairing') {\n    return new BlindRelayError(msg, 'ALREADY_PAIRING', BlindRelayError.ALREADY_PAIRING)\n  }\n\n  static PAIRING_CANCELLED (msg = 'Pairing cancelled') {\n    return new BlindRelayError(msg, 'PAIRING_CANCELLED', BlindRelayError.PAIRING_CANCELLED)\n  }\n}\n{\n  \"name\": \"blind-relay\",\n  \"version\": \"1.3.3\",\n  \"description\": \"Blind relay for UDX over Protomux channels\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"lib\"\n  ],\n  \"scripts\": {\n    \"test\": \"standard && brittle test.mjs\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/blind-relay.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/blind-relay/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/blind-relay#readme\",\n  \"imports\": {\n    \"events\": {\n      \"bare\": \"bare-events\",\n      \"default\": \"events\"\n    }\n  },\n  \"dependencies\": {\n    \"b4a\": \"^1.6.4\",\n    \"bare-events\": \"^2.2.0\",\n    \"bits-to-bytes\": \"^1.3.0\",\n    \"compact-encoding\": \"^2.12.0\",\n    \"compact-encoding-bitfield\": \"^1.0.0\",\n    \"hypertrace\": \"^1.4.1\",\n    \"protomux\": \"^3.5.1\",\n    \"sodium-universal\": \"^4.0.0\",\n    \"streamx\": \"^2.15.1\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.2.1\",\n    \"hyperdht\": \"^6.6.1\",\n    \"standard\": \"^17.0.0\",\n    \"udx-native\": \"^1.6.1\"\n  }\n}\n// https://ipinfo.io/bogon\n\nconst b4a = require('b4a')\nconst c = require('compact-encoding')\nconst net = require('compact-encoding-net')\n\nmodule.exports = exports = function isBogon (ip) {\n  return isBogonIP(ensureBuffer(ip))\n}\n\nexports.isBogon = exports\n\nexports.isPrivate = function isPrivate (ip) {\n  return isPrivateIP(ensureBuffer(ip))\n}\n\nfunction isBogonIP (ip) {\n  return isPrivateIP(ip) || isReservedIP(ip)\n}\n\nfunction isPrivateIP (ip) {\n  return ip.byteLength === 4 ? isPrivateIPv4(ip) : false // IPv6 has no private IPs\n}\n\nfunction isPrivateIPv4 (ip) {\n  return (\n    // 10.0.0.0/8  Private-use networks\n    (ip[0] === 10) ||\n    // 100.64.0.0/10 Carrier-grade NAT\n    (ip[0] === 100 && ip[1] >= 64 && ip[1] <= 127) ||\n    // 127.0.0.0/8 Loopback + Name collision occurrence (127.0.53.53)\n    (ip[0] === 127) ||\n    // 169.254.0.0/16  Link local\n    (ip[0] === 169 && ip[1] === 254) ||\n    // 172.16.0.0/12 Private-use networks\n    (ip[0] === 172 && ip[1] >= 16 && ip[1] <= 31) ||\n    // 192.168.0.0/16  Private-use networks\n    (ip[0] === 192 && ip[1] === 168)\n  )\n}\n\nfunction isReservedIP (ip) {\n  return ip.byteLength === 4 ? isReservedIPv4(ip) : isReservedIPv6(ip)\n}\n\nfunction isReservedIPv4 (ip) {\n  return (\n    // 0.0.0.0/8 \"This\" network\n    (ip[0] === 0) ||\n    // 192.0.0.0/24  IETF protocol assignments\n    (ip[0] === 192 && ip[1] === 0 && ip[2] === 0) ||\n    // 192.0.2.0/24  TEST-NET-1\n    (ip[0] === 192 && ip[1] === 0 && ip[2] === 2) ||\n    // 198.18.0.0/15 Network interconnect device benchmark testing\n    (ip[0] === 198 && ip[1] >= 18 && ip[1] <= 19) ||\n    // 198.51.100.0/24 TEST-NET-2\n    (ip[0] === 198 && ip[1] === 51 && ip[2] === 100) ||\n    // 203.0.113.0/24  TEST-NET-3\n    (ip[0] === 203 && ip[1] === 0 && ip[2] === 113) ||\n    // 224.0.0.0/4 Multicast\n    (ip[0] >= 224 && ip[0] <= 239) ||\n    // 240.0.0.0/4 Reserved for future use\n    (ip[0] >= 240) ||\n    // 255.255.255.255/32\n    (ip[0] === 255 && ip[1] === 255 && ip[2] === 255 && ip[3] === 255)\n  )\n}\n\nfunction isReservedIPv6 (ip) {\n  return (\n    // ::/128 Node-scope unicast unspecified address\n    // ::1/128 Node-scope unicast loopback address\n    (\n      ip[0] === 0 && ip[1] === 0 && ip[2] === 0 && ip[3] === 0 && ip[4] === 0 &&\n      ip[5] === 0 && ip[6] === 0 && ip[7] === 0 && ip[8] === 0 && ip[9] === 0 &&\n      ip[10] === 0 && ip[11] === 0 && ip[12] === 0 && ip[13] === 0 && ip[14] === 0 &&\n      ip[15] <= 1\n    ) ||\n    // ::ffff:0:0/96 IPv4-mapped addresses\n    // ::/96 IPv4-compatible addresses\n    (\n      ip[0] === 0 && ip[1] === 0 && ip[2] === 0 && ip[3] === 0 && ip[4] === 0 &&\n      ip[5] === 0 && ip[6] === 0 && ip[7] === 0 && ip[8] === 0 && ip[9] === 0 &&\n      (ip[10] === 0 || ip[10] === 0xff) &&\n      (ip[11] === 0 || ip[11] === 0xff)\n    ) ||\n    // 100::/64 Remotely triggered black hole addresses\n    (ip[0] === 0x01 && ip[1] === 0 && ip[2] === 0 && ip[3] === 0 && ip[4] === 0 && ip[5] === 0 && ip[6] === 0 && ip[7] === 0) ||\n    // 2001:10::/28 Overlay routable cryptographic hash identifiers (ORCHID)\n    (ip[0] === 0x20 && ip[1] === 0x01 && ip[2] === 0 && ip[3] >= 0x10 && ip[3] <= 0x1f) ||\n    // 2001:20::/28 Overlay routable cryptographic hash identifiers version 2 (ORCHIDv2)\n    (ip[0] === 0x20 && ip[1] === 0x01 && ip[2] === 0 && ip[3] >= 0x20 && ip[3] <= 0x2f) ||\n    // 2001:db8::/32 Documentation prefix\n    (ip[0] === 0x20 && ip[1] === 0x01 && ip[2] === 0x0d && ip[3] === 0xb8) ||\n    // fc00::/7 Unique local addresses (ULA)\n    (ip[0] >= 0xfc && ip[0] <= 0xfd) ||\n    // fe80::/10 Link-local unicast\n    (ip[0] === 0xfe && ip[1] >= 0x80 && ip[1] <= 0xbf) ||\n    // ff00::/8 Multicast\n    (ip[0] === 0xff)\n  )\n}\n\nconst state = c.state(0, 0, b4a.allocUnsafe(1 /* family */ + 16))\n\nfunction ensureBuffer (ip) {\n  if (b4a.isBuffer(ip)) return ip\n\n  net.ip.preencode(state, ip)\n  net.ip.encode(state, ip)\n\n  const buffer = state.buffer.subarray(1 /* family */, state.end)\n\n  state.start = 0\n  state.end = 0\n\n  return buffer\n}\n{\n  \"name\": \"bogon\",\n  \"version\": \"1.1.0\",\n  \"description\": \"Check if an IP is a bogon\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"standard && brittle test.mjs\"\n  },\n  \"dependencies\": {\n    \"compact-encoding\": \"^2.11.0\",\n    \"compact-encoding-net\": \"^1.2.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.0.4\",\n    \"nanobench\": \"^2.1.1\",\n    \"standard\": \"^17.0.0\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/bogon.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/bogon/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/bogon\"\n}\nconst b4a = require('b4a')\n\nmodule.exports = codecs\n\ncodecs.ascii = createString('ascii')\ncodecs.utf8 = createString('utf-8')\ncodecs.hex = createString('hex')\ncodecs.base64 = createString('base64')\ncodecs.ucs2 = createString('ucs2')\ncodecs.utf16le = createString('utf16le')\ncodecs.ndjson = createJSON(true)\ncodecs.json = createJSON(false)\ncodecs.binary = {\n  name: 'binary',\n  encode: function encodeBinary (obj) {\n    return typeof obj === 'string'\n      ? b4a.from(obj, 'utf-8')\n      : b4a.toBuffer(obj)\n  },\n  decode: function decodeBinary (buf) {\n    return b4a.toBuffer(buf)\n  }\n}\n\nfunction isCompactEncoding (c) {\n  return !!(c.encode && c.decode && c.preencode)\n}\n\nfunction fromCompactEncoding (c) {\n  return {\n    name: 'compact-encoding',\n    encode: function encodeWithCompact (value) {\n      const state = { start: 0, end: 0, buffer: null, cache: null }\n      c.preencode(state, value)\n      state.buffer = b4a.allocUnsafe(state.end)\n      c.encode(state, value)\n      return state.buffer\n    },\n    decode: function decodeWithCompact (buffer) {\n      return c.decode({ start: 0, end: buffer.byteLength, buffer, cache: null })\n    }\n  }\n}\n\nfunction codecs (fmt, fallback) {\n  if (typeof fmt === 'object' && fmt) {\n    return isCompactEncoding(fmt) ? fromCompactEncoding(fmt) : fmt\n  }\n\n  switch (fmt) {\n    case 'ndjson': return codecs.ndjson\n    case 'json': return codecs.json\n    case 'ascii': return codecs.ascii\n    case 'utf-8':\n    case 'utf8': return codecs.utf8\n    case 'hex': return codecs.hex\n    case 'base64': return codecs.base64\n    case 'ucs-2':\n    case 'ucs2': return codecs.ucs2\n    case 'utf16-le':\n    case 'utf16le': return codecs.utf16le\n  }\n\n  return fallback !== undefined ? fallback : codecs.binary\n}\n\nfunction createJSON (newline) {\n  return {\n    name: newline ? 'ndjson' : 'json',\n    encode: newline ? encodeNDJSON : encodeJSON,\n    decode: function decodeJSON (buf) {\n      return JSON.parse(b4a.toString(buf))\n    }\n  }\n\n  function encodeJSON (val) {\n    return b4a.from(JSON.stringify(val))\n  }\n\n  function encodeNDJSON (val) {\n    return b4a.from(JSON.stringify(val) + '\\n')\n  }\n}\n\nfunction createString (type) {\n  return {\n    name: type,\n    encode: function encodeString (val) {\n      if (typeof val !== 'string') val = val.toString()\n      return b4a.from(val, type)\n    },\n    decode: function decodeString (buf) {\n      return b4a.toString(buf, type)\n    }\n  }\n}\n{\n  \"name\": \"codecs\",\n  \"version\": \"3.1.0\",\n  \"description\": \"Create an binary encoder/decoder for json, utf-8 or custom types\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"b4a\": \"^1.6.3\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.2.1\",\n    \"compact-encoding\": \"^2.11.0\",\n    \"standard\": \"^17.0.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/codecs.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/codecs/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/codecs\"\n}\nconst c = require('compact-encoding')\n\nmodule.exports = function bitfield (length) {\n  if (length > 64) throw new RangeError('Bitfield cannot be larger than 64 bits')\n\n  let byteLength\n  if (length < 8) byteLength = 1\n  else if (length <= 16) byteLength = 2\n  else if (length <= 32) byteLength = 4\n  else byteLength = 8\n\n  return {\n    preencode (state) {\n      state.end++ // Length byte, used for data when byteLength === 1\n\n      if (byteLength === 1) ;\n      else if (byteLength === 2) c.uint16.preencode(state)\n      else if (byteLength === 4) c.uint32.preencode(state)\n      else c.uint64.preencode(state)\n    },\n\n    encode (state, b) {\n      if (byteLength === 1) ;\n      else if (byteLength === 2) c.uint8.encode(state, 0xfd)\n      else if (byteLength === 4) c.uint8.encode(state, 0xfe)\n      else c.uint8.encode(state, 0xff)\n\n      if (typeof b === 'number') {\n        if (byteLength === 1) c.uint8.encode(state, b)\n        else if (byteLength === 2) c.uint16.encode(state, b)\n        else if (byteLength === 4) c.uint32.encode(state, b)\n        else c.uint64.encode(state, b)\n      } else {\n        state.buffer.set(b, state.start)\n\n        if (b.byteLength < byteLength) {\n          // Zero-fill the rest of the byte length.\n          state.buffer.fill(\n            0,\n            state.start + b.byteLength,\n            state.start + byteLength\n          )\n        }\n\n        state.start += byteLength\n      }\n    },\n\n    decode (state) {\n      const byte = state.buffer[state.start]\n\n      let byteLength\n      if (byte <= 0xfc) byteLength = 1\n      else if (byte === 0xfd) byteLength = 2\n      else if (byte === 0xfe) byteLength = 4\n      else byteLength = 8\n\n      if (byteLength > 1) state.start++ // Skip the length byte\n\n      if (state.end - state.start < byteLength) throw new Error('Out of bounds')\n\n      const b = state.buffer.subarray(state.start, (state.start += byteLength))\n\n      return length <= 8 ? b.subarray(0, 1) : b\n    }\n  }\n}\n{\n  \"name\": \"compact-encoding-bitfield\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Compact codec for bitfields\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"scripts\": {\n    \"test\": \"standard && brittle test.mjs\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/compact-encoding/compact-encoding-bitfield.git\"\n  },\n  \"author\": \"Kasper Isager Dalsgarð <kasper@funktionel.co>\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/compact-encoding/compact-encoding-bitfield/issues\"\n  },\n  \"homepage\": \"https://github.com/compact-encoding/compact-encoding-bitfield#readme\",\n  \"dependencies\": {\n    \"compact-encoding\": \"^2.4.1\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^1.3.5\",\n    \"standard\": \"^16.0.3\"\n  },\n  \"standard\": {\n    \"ignore\": [\n      \"__snapshots__/**\"\n    ]\n  }\n}\nconst c = require('compact-encoding')\n\nconst port = c.uint16\n\nconst address = (host, family) => {\n  return {\n    preencode (state, m) {\n      host.preencode(state, m.host)\n      port.preencode(state, m.port)\n    },\n    encode (state, m) {\n      host.encode(state, m.host)\n      port.encode(state, m.port)\n    },\n    decode (state) {\n      return {\n        host: host.decode(state),\n        family,\n        port: port.decode(state)\n      }\n    }\n  }\n}\n\nconst ipv4 = {\n  preencode (state) {\n    state.end += 4\n  },\n  encode (state, string) {\n    const start = state.start\n    const end = start + 4\n\n    let i = 0\n\n    while (i < string.length) {\n      let n = 0\n      let c\n\n      while (i < string.length && (c = string.charCodeAt(i++)) !== /* . */ 0x2e) {\n        n = n * 10 + (c - /* 0 */ 0x30)\n      }\n\n      state.buffer[state.start++] = n\n    }\n\n    state.start = end\n  },\n  decode (state) {\n    if (state.end - state.start < 4) throw new Error('Out of bounds')\n    return (\n      state.buffer[state.start++] + '.' +\n      state.buffer[state.start++] + '.' +\n      state.buffer[state.start++] + '.' +\n      state.buffer[state.start++]\n    )\n  }\n}\n\nconst ipv4Address = address(ipv4, 4)\n\nconst ipv6 = {\n  preencode (state) {\n    state.end += 16\n  },\n  encode (state, string) {\n    const start = state.start\n    const end = start + 16\n\n    let i = 0\n    let split = null\n\n    while (i < string.length) {\n      let n = 0\n      let c\n\n      while (i < string.length && (c = string.charCodeAt(i++)) !== /* : */ 0x3a) {\n        if (c >= 0x30 && c <= 0x39) n = n * 0x10 + (c - /* 0 */ 0x30)\n        else if (c >= 0x41 && c <= 0x46) n = n * 0x10 + (c - /* A */ 0x41 + 10)\n        else if (c >= 0x61 && c <= 0x66) n = n * 0x10 + (c - /* a */ 0x61 + 10)\n      }\n\n      state.buffer[state.start++] = n >>> 8\n      state.buffer[state.start++] = n\n\n      if (i < string.length && string.charCodeAt(i) === /* : */ 0x3a) {\n        i++\n        split = state.start\n      }\n    }\n\n    if (split !== null) {\n      const offset = end - state.start\n      state.buffer\n        .copyWithin(split + offset, split)\n        .fill(0, split, split + offset)\n    }\n\n    state.start = end\n  },\n  decode (state) {\n    if (state.end - state.start < 16) throw new Error('Out of bounds')\n    return (\n      (state.buffer[state.start++] * 256 + state.buffer[state.start++]).toString(16) + ':' +\n      (state.buffer[state.start++] * 256 + state.buffer[state.start++]).toString(16) + ':' +\n      (state.buffer[state.start++] * 256 + state.buffer[state.start++]).toString(16) + ':' +\n      (state.buffer[state.start++] * 256 + state.buffer[state.start++]).toString(16) + ':' +\n      (state.buffer[state.start++] * 256 + state.buffer[state.start++]).toString(16) + ':' +\n      (state.buffer[state.start++] * 256 + state.buffer[state.start++]).toString(16) + ':' +\n      (state.buffer[state.start++] * 256 + state.buffer[state.start++]).toString(16) + ':' +\n      (state.buffer[state.start++] * 256 + state.buffer[state.start++]).toString(16)\n    )\n  }\n}\n\nconst ipv6Address = address(ipv6, 6)\n\nconst ip = {\n  preencode (state, string) {\n    const family = string.includes(':') ? 6 : 4\n    c.uint8.preencode(state, family)\n    if (family === 4) ipv4.preencode(state)\n    else ipv6.preencode(state)\n  },\n  encode (state, string) {\n    const family = string.includes(':') ? 6 : 4\n    c.uint8.encode(state, family)\n    if (family === 4) ipv4.encode(state, string)\n    else ipv6.encode(state, string)\n  },\n  decode (state) {\n    const family = c.uint8.decode(state)\n    if (family === 4) return ipv4.decode(state)\n    else return ipv6.decode(state)\n  }\n}\n\nconst ipAddress = {\n  preencode (state, m) {\n    ip.preencode(state, m.host)\n    port.preencode(state, m.port)\n  },\n  encode (state, m) {\n    ip.encode(state, m.host)\n    port.encode(state, m.port)\n  },\n  decode (state) {\n    const family = c.uint8.decode(state)\n    return {\n      host: family === 4 ? ipv4.decode(state) : ipv6.decode(state),\n      family,\n      port: port.decode(state)\n    }\n  }\n}\n\nmodule.exports = {\n  port,\n  ipv4,\n  ipv4Address,\n  ipv6,\n  ipv6Address,\n  ip,\n  ipAddress\n}\n{\n  \"name\": \"compact-encoding-net\",\n  \"version\": \"1.2.0\",\n  \"description\": \"Compact codecs for net types\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"standard && brittle test.mjs\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/compact-encoding/compact-encoding-net.git\"\n  },\n  \"author\": \"Kasper Isager Dalsgarð <kasper@funktionel.co>\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/compact-encoding/compact-encoding-net/issues\"\n  },\n  \"homepage\": \"https://github.com/compact-encoding/compact-encoding-net#readme\",\n  \"dependencies\": {\n    \"compact-encoding\": \"^2.4.1\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^1.3.5\",\n    \"nanobench\": \"^2.1.1\",\n    \"standard\": \"^16.0.3\"\n  }\n}\nconst LE = exports.LE = (new Uint8Array(new Uint16Array([0xff]).buffer))[0] === 0xff\n\nexports.BE = !LE\nconst b4a = require('b4a')\n\nconst { BE } = require('./endian')\n\nexports.state = function (start = 0, end = 0, buffer = null) {\n  return { start, end, buffer, cache: null }\n}\n\nconst raw = exports.raw = require('./raw')\n\nconst uint = exports.uint = {\n  preencode (state, n) {\n    state.end += n <= 0xfc ? 1 : n <= 0xffff ? 3 : n <= 0xffffffff ? 5 : 9\n  },\n  encode (state, n) {\n    if (n <= 0xfc) uint8.encode(state, n)\n    else if (n <= 0xffff) {\n      state.buffer[state.start++] = 0xfd\n      uint16.encode(state, n)\n    } else if (n <= 0xffffffff) {\n      state.buffer[state.start++] = 0xfe\n      uint32.encode(state, n)\n    } else {\n      state.buffer[state.start++] = 0xff\n      uint64.encode(state, n)\n    }\n  },\n  decode (state) {\n    const a = uint8.decode(state)\n    if (a <= 0xfc) return a\n    if (a === 0xfd) return uint16.decode(state)\n    if (a === 0xfe) return uint32.decode(state)\n    return uint64.decode(state)\n  }\n}\n\nconst uint8 = exports.uint8 = {\n  preencode (state, n) {\n    state.end += 1\n  },\n  encode (state, n) {\n    validateUint(n)\n    state.buffer[state.start++] = n\n  },\n  decode (state) {\n    if (state.start >= state.end) throw new Error('Out of bounds')\n    return state.buffer[state.start++]\n  }\n}\n\nconst uint16 = exports.uint16 = {\n  preencode (state, n) {\n    state.end += 2\n  },\n  encode (state, n) {\n    validateUint(n)\n    state.buffer[state.start++] = n\n    state.buffer[state.start++] = n >>> 8\n  },\n  decode (state) {\n    if (state.end - state.start < 2) throw new Error('Out of bounds')\n    return (\n      state.buffer[state.start++] +\n      state.buffer[state.start++] * 0x100\n    )\n  }\n}\n\nconst uint24 = exports.uint24 = {\n  preencode (state, n) {\n    state.end += 3\n  },\n  encode (state, n) {\n    validateUint(n)\n    state.buffer[state.start++] = n\n    state.buffer[state.start++] = n >>> 8\n    state.buffer[state.start++] = n >>> 16\n  },\n  decode (state) {\n    if (state.end - state.start < 3) throw new Error('Out of bounds')\n    return (\n      state.buffer[state.start++] +\n      state.buffer[state.start++] * 0x100 +\n      state.buffer[state.start++] * 0x10000\n    )\n  }\n}\n\nconst uint32 = exports.uint32 = {\n  preencode (state, n) {\n    state.end += 4\n  },\n  encode (state, n) {\n    validateUint(n)\n    state.buffer[state.start++] = n\n    state.buffer[state.start++] = n >>> 8\n    state.buffer[state.start++] = n >>> 16\n    state.buffer[state.start++] = n >>> 24\n  },\n  decode (state) {\n    if (state.end - state.start < 4) throw new Error('Out of bounds')\n    return (\n      state.buffer[state.start++] +\n      state.buffer[state.start++] * 0x100 +\n      state.buffer[state.start++] * 0x10000 +\n      state.buffer[state.start++] * 0x1000000\n    )\n  }\n}\n\nconst uint40 = exports.uint40 = {\n  preencode (state, n) {\n    state.end += 5\n  },\n  encode (state, n) {\n    validateUint(n)\n    const r = Math.floor(n / 0x100)\n    uint8.encode(state, n)\n    uint32.encode(state, r)\n  },\n  decode (state) {\n    if (state.end - state.start < 5) throw new Error('Out of bounds')\n    return uint8.decode(state) + 0x100 * uint32.decode(state)\n  }\n}\n\nconst uint48 = exports.uint48 = {\n  preencode (state, n) {\n    state.end += 6\n  },\n  encode (state, n) {\n    validateUint(n)\n    const r = Math.floor(n / 0x10000)\n    uint16.encode(state, n)\n    uint32.encode(state, r)\n  },\n  decode (state) {\n    if (state.end - state.start < 6) throw new Error('Out of bounds')\n    return uint16.decode(state) + 0x10000 * uint32.decode(state)\n  }\n}\n\nconst uint56 = exports.uint56 = {\n  preencode (state, n) {\n    state.end += 7\n  },\n  encode (state, n) {\n    validateUint(n)\n    const r = Math.floor(n / 0x1000000)\n    uint24.encode(state, n)\n    uint32.encode(state, r)\n  },\n  decode (state) {\n    if (state.end - state.start < 7) throw new Error('Out of bounds')\n    return uint24.decode(state) + 0x1000000 * uint32.decode(state)\n  }\n}\n\nconst uint64 = exports.uint64 = {\n  preencode (state, n) {\n    state.end += 8\n  },\n  encode (state, n) {\n    validateUint(n)\n    const r = Math.floor(n / 0x100000000)\n    uint32.encode(state, n)\n    uint32.encode(state, r)\n  },\n  decode (state) {\n    if (state.end - state.start < 8) throw new Error('Out of bounds')\n    return uint32.decode(state) + 0x100000000 * uint32.decode(state)\n  }\n}\n\nexports.int = zigZagInt(uint)\nexports.int8 = zigZagInt(uint8)\nexports.int16 = zigZagInt(uint16)\nexports.int24 = zigZagInt(uint24)\nexports.int32 = zigZagInt(uint32)\nexports.int40 = zigZagInt(uint40)\nexports.int48 = zigZagInt(uint48)\nexports.int56 = zigZagInt(uint56)\nexports.int64 = zigZagInt(uint64)\n\nconst biguint64 = exports.biguint64 = {\n  preencode (state, n) {\n    state.end += 8\n  },\n  encode (state, n) {\n    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 8)\n    view.setBigUint64(0, n, true) // little endian\n    state.start += 8\n  },\n  decode (state) {\n    if (state.end - state.start < 8) throw new Error('Out of bounds')\n    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 8)\n    const n = view.getBigUint64(0, true) // little endian\n    state.start += 8\n    return n\n  }\n}\n\nexports.bigint64 = zigZagBigInt(biguint64)\n\nconst biguint = exports.biguint = {\n  preencode (state, n) {\n    let len = 0\n    for (let m = n; m; m = m >> 64n) len++\n    uint.preencode(state, len)\n    state.end += 8 * len\n  },\n  encode (state, n) {\n    let len = 0\n    for (let m = n; m; m = m >> 64n) len++\n    uint.encode(state, len)\n    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 8 * len)\n    for (let m = n, i = 0; m; m = m >> 64n, i += 8) {\n      view.setBigUint64(i, BigInt.asUintN(64, m), true) // little endian\n    }\n    state.start += 8 * len\n  },\n  decode (state) {\n    const len = uint.decode(state)\n    if (state.end - state.start < 8 * len) throw new Error('Out of bounds')\n    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 8 * len)\n    let n = 0n\n    for (let i = len - 1; i >= 0; i--) n = (n << 64n) + view.getBigUint64(i * 8, true) // little endian\n    state.start += 8 * len\n    return n\n  }\n}\n\nexports.bigint = zigZagBigInt(biguint)\n\nexports.lexint = require('./lexint')\n\nexports.float32 = {\n  preencode (state, n) {\n    state.end += 4\n  },\n  encode (state, n) {\n    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 4)\n    view.setFloat32(0, n, true) // little endian\n    state.start += 4\n  },\n  decode (state) {\n    if (state.end - state.start < 4) throw new Error('Out of bounds')\n    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 4)\n    const float = view.getFloat32(0, true) // little endian\n    state.start += 4\n    return float\n  }\n}\n\nexports.float64 = {\n  preencode (state, n) {\n    state.end += 8\n  },\n  encode (state, n) {\n    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 8)\n    view.setFloat64(0, n, true) // little endian\n    state.start += 8\n  },\n  decode (state) {\n    if (state.end - state.start < 8) throw new Error('Out of bounds')\n    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 8)\n    const float = view.getFloat64(0, true) // little endian\n    state.start += 8\n    return float\n  }\n}\n\nconst buffer = exports.buffer = {\n  preencode (state, b) {\n    if (b) uint8array.preencode(state, b)\n    else state.end++\n  },\n  encode (state, b) {\n    if (b) uint8array.encode(state, b)\n    else state.buffer[state.start++] = 0\n  },\n  decode (state) {\n    const len = uint.decode(state)\n    if (len === 0) return null\n    if (state.end - state.start < len) throw new Error('Out of bounds')\n    return state.buffer.subarray(state.start, (state.start += len))\n  }\n}\n\nexports.binary = {\n  ...buffer,\n  preencode (state, b) {\n    if (typeof b === 'string') utf8.preencode(state, b)\n    else buffer.preencode(state, b)\n  },\n  encode (state, b) {\n    if (typeof b === 'string') utf8.encode(state, b)\n    else buffer.encode(state, b)\n  }\n}\n\nexports.arraybuffer = {\n  preencode (state, b) {\n    uint.preencode(state, b.byteLength)\n    state.end += b.byteLength\n  },\n  encode (state, b) {\n    uint.encode(state, b.byteLength)\n\n    const view = new Uint8Array(b)\n\n    state.buffer.set(view, state.start)\n    state.start += b.byteLength\n  },\n  decode (state) {\n    const len = uint.decode(state)\n\n    const b = new ArrayBuffer(len)\n    const view = new Uint8Array(b)\n\n    view.set(state.buffer.subarray(state.start, state.start += len))\n\n    return b\n  }\n}\n\nfunction typedarray (TypedArray, swap) {\n  const n = TypedArray.BYTES_PER_ELEMENT\n\n  return {\n    preencode (state, b) {\n      uint.preencode(state, b.length)\n      state.end += b.byteLength\n    },\n    encode (state, b) {\n      uint.encode(state, b.length)\n\n      const view = new Uint8Array(b.buffer, b.byteOffset, b.byteLength)\n\n      if (BE && swap) swap(view)\n\n      state.buffer.set(view, state.start)\n      state.start += b.byteLength\n    },\n    decode (state) {\n      const len = uint.decode(state)\n\n      let b = state.buffer.subarray(state.start, state.start += len * n)\n      if (b.byteLength !== len * n) throw new Error('Out of bounds')\n      if ((b.byteOffset % n) !== 0) b = new Uint8Array(b)\n\n      if (BE && swap) swap(b)\n\n      return new TypedArray(b.buffer, b.byteOffset, b.byteLength / n)\n    }\n  }\n}\n\nconst uint8array = exports.uint8array = typedarray(Uint8Array)\nexports.uint16array = typedarray(Uint16Array, b4a.swap16)\nexports.uint32array = typedarray(Uint32Array, b4a.swap32)\n\nexports.int8array = typedarray(Int8Array)\nexports.int16array = typedarray(Int16Array, b4a.swap16)\nexports.int32array = typedarray(Int32Array, b4a.swap32)\n\nexports.biguint64array = typedarray(BigUint64Array, b4a.swap64)\nexports.bigint64array = typedarray(BigInt64Array, b4a.swap64)\n\nexports.float32array = typedarray(Float32Array, b4a.swap32)\nexports.float64array = typedarray(Float64Array, b4a.swap64)\n\nfunction string (encoding) {\n  return {\n    preencode (state, s) {\n      const len = b4a.byteLength(s, encoding)\n      uint.preencode(state, len)\n      state.end += len\n    },\n    encode (state, s) {\n      const len = b4a.byteLength(s, encoding)\n      uint.encode(state, len)\n      b4a.write(state.buffer, s, state.start, encoding)\n      state.start += len\n    },\n    decode (state) {\n      const len = uint.decode(state)\n      if (state.end - state.start < len) throw new Error('Out of bounds')\n      return b4a.toString(state.buffer, encoding, state.start, (state.start += len))\n    },\n    fixed (n) {\n      return {\n        preencode (state) {\n          state.end += n\n        },\n        encode (state, s) {\n          b4a.write(state.buffer, s, state.start, n, encoding)\n          state.start += n\n        },\n        decode (state) {\n          if (state.end - state.start < n) throw new Error('Out of bounds')\n          return b4a.toString(state.buffer, encoding, state.start, (state.start += n))\n        }\n      }\n    }\n  }\n}\n\nconst utf8 = exports.string = exports.utf8 = string('utf-8')\nexports.ascii = string('ascii')\nexports.hex = string('hex')\nexports.base64 = string('base64')\nexports.ucs2 = exports.utf16le = string('utf16le')\n\nexports.bool = {\n  preencode (state, b) {\n    state.end++\n  },\n  encode (state, b) {\n    state.buffer[state.start++] = b ? 1 : 0\n  },\n  decode (state) {\n    if (state.start >= state.end) throw Error('Out of bounds')\n    return state.buffer[state.start++] === 1\n  }\n}\n\nconst fixed = exports.fixed = function fixed (n) {\n  return {\n    preencode (state, s) {\n      if (s.byteLength !== n) throw new Error('Incorrect buffer size')\n      state.end += n\n    },\n    encode (state, s) {\n      state.buffer.set(s, state.start)\n      state.start += n\n    },\n    decode (state) {\n      if (state.end - state.start < n) throw new Error('Out of bounds')\n      return state.buffer.subarray(state.start, (state.start += n))\n    }\n  }\n}\n\nexports.fixed32 = fixed(32)\nexports.fixed64 = fixed(64)\n\nexports.array = function array (enc) {\n  return {\n    preencode (state, list) {\n      uint.preencode(state, list.length)\n      for (let i = 0; i < list.length; i++) enc.preencode(state, list[i])\n    },\n    encode (state, list) {\n      uint.encode(state, list.length)\n      for (let i = 0; i < list.length; i++) enc.encode(state, list[i])\n    },\n    decode (state) {\n      const len = uint.decode(state)\n      if (len > 0x100000) throw new Error('Array is too big')\n      const arr = new Array(len)\n      for (let i = 0; i < len; i++) arr[i] = enc.decode(state)\n      return arr\n    }\n  }\n}\n\nexports.frame = function frame (enc) {\n  const dummy = exports.state()\n\n  return {\n    preencode (state, m) {\n      const end = state.end\n      enc.preencode(state, m)\n      uint.preencode(state, state.end - end)\n    },\n    encode (state, m) {\n      dummy.end = 0\n      enc.preencode(dummy, m)\n      uint.encode(state, dummy.end)\n      enc.encode(state, m)\n    },\n    decode (state) {\n      const end = state.end\n      const len = uint.decode(state)\n      state.end = state.start + len\n      const m = enc.decode(state)\n      state.start = state.end\n      state.end = end\n      return m\n    }\n  }\n}\n\nexports.date = {\n  preencode (state, d) {\n    uint.preencode(state, d.getTime())\n  },\n  encode (state, d) {\n    uint.encode(state, d.getTime())\n  },\n  decode (state, d) {\n    return new Date(uint.decode(state))\n  }\n}\n\nexports.json = {\n  preencode (state, v) {\n    utf8.preencode(state, JSON.stringify(v))\n  },\n  encode (state, v) {\n    utf8.encode(state, JSON.stringify(v))\n  },\n  decode (state) {\n    return JSON.parse(utf8.decode(state))\n  }\n}\n\nexports.ndjson = {\n  preencode (state, v) {\n    utf8.preencode(state, JSON.stringify(v) + '\\n')\n  },\n  encode (state, v) {\n    utf8.encode(state, JSON.stringify(v) + '\\n')\n  },\n  decode (state) {\n    return JSON.parse(utf8.decode(state))\n  }\n}\n\n// simple helper for when you want to just express nothing\nexports.none = {\n  preencode (state, n) {\n    // do nothing\n  },\n  encode (state, n) {\n    // do nothing\n  },\n  decode (state) {\n    return null\n  }\n}\n\n// \"any\" encoders here for helping just structure any object without schematising it\n\nconst anyArray = {\n  preencode (state, arr) {\n    uint.preencode(state, arr.length)\n    for (let i = 0; i < arr.length; i++) {\n      any.preencode(state, arr[i])\n    }\n  },\n  encode (state, arr) {\n    uint.encode(state, arr.length)\n    for (let i = 0; i < arr.length; i++) {\n      any.encode(state, arr[i])\n    }\n  },\n  decode (state) {\n    const arr = []\n    let len = uint.decode(state)\n    while (len-- > 0) {\n      arr.push(any.decode(state))\n    }\n    return arr\n  }\n}\n\nconst anyObject = {\n  preencode (state, o) {\n    const keys = Object.keys(o)\n    uint.preencode(state, keys.length)\n    for (const key of keys) {\n      utf8.preencode(state, key)\n      any.preencode(state, o[key])\n    }\n  },\n  encode (state, o) {\n    const keys = Object.keys(o)\n    uint.encode(state, keys.length)\n    for (const key of keys) {\n      utf8.encode(state, key)\n      any.encode(state, o[key])\n    }\n  },\n  decode (state) {\n    let len = uint.decode(state)\n    const o = {}\n    while (len-- > 0) {\n      const key = utf8.decode(state)\n      o[key] = any.decode(state)\n    }\n    return o\n  }\n}\n\nconst anyTypes = [\n  exports.none,\n  exports.bool,\n  exports.string,\n  exports.buffer,\n  exports.uint,\n  exports.int,\n  exports.float64,\n  anyArray,\n  anyObject,\n  exports.date\n]\n\nconst any = exports.any = {\n  preencode (state, o) {\n    const t = getType(o)\n    uint.preencode(state, t)\n    anyTypes[t].preencode(state, o)\n  },\n  encode (state, o) {\n    const t = getType(o)\n    uint.encode(state, t)\n    anyTypes[t].encode(state, o)\n  },\n  decode (state) {\n    const t = uint.decode(state)\n    if (t >= anyTypes.length) throw new Error('Unknown type: ' + t)\n    return anyTypes[t].decode(state)\n  }\n}\n\nfunction getType (o) {\n  if (o === null || o === undefined) return 0\n  if (typeof o === 'boolean') return 1\n  if (typeof o === 'string') return 2\n  if (b4a.isBuffer(o)) return 3\n  if (typeof o === 'number') {\n    if (Number.isInteger(o)) return o >= 0 ? 4 : 5\n    return 6\n  }\n  if (Array.isArray(o)) return 7\n  if (o instanceof Date) return 9\n  if (typeof o === 'object') return 8\n\n  throw new Error('Unsupported type for ' + o)\n}\n\nexports.from = function from (enc) {\n  if (typeof enc === 'string') return fromNamed(enc)\n  if (enc.preencode) return enc\n  if (enc.encodingLength) return fromAbstractEncoder(enc)\n  return fromCodec(enc)\n}\n\nfunction fromNamed (enc) {\n  switch (enc) {\n    case 'ascii': return raw.ascii\n    case 'utf-8':\n    case 'utf8': return raw.utf8\n    case 'hex': return raw.hex\n    case 'base64': return raw.base64\n    case 'utf16-le':\n    case 'utf16le':\n    case 'ucs-2':\n    case 'ucs2': return raw.ucs2\n    case 'ndjson': return raw.ndjson\n    case 'json': return raw.json\n    case 'binary':\n    default: return raw.binary\n  }\n}\n\nfunction fromCodec (enc) {\n  let tmpM = null\n  let tmpBuf = null\n\n  return {\n    preencode (state, m) {\n      tmpM = m\n      tmpBuf = enc.encode(m)\n      state.end += tmpBuf.byteLength\n    },\n    encode (state, m) {\n      raw.encode(state, m === tmpM ? tmpBuf : enc.encode(m))\n      tmpM = tmpBuf = null\n    },\n    decode (state) {\n      return enc.decode(raw.decode(state))\n    }\n  }\n}\n\nfunction fromAbstractEncoder (enc) {\n  return {\n    preencode (state, m) {\n      state.end += enc.encodingLength(m)\n    },\n    encode (state, m) {\n      enc.encode(m, state.buffer, state.start)\n      state.start += enc.encode.bytes\n    },\n    decode (state) {\n      const m = enc.decode(state.buffer, state.start, state.end)\n      state.start += enc.decode.bytes\n      return m\n    }\n  }\n}\n\nexports.encode = function encode (enc, m) {\n  const state = exports.state()\n  enc.preencode(state, m)\n  state.buffer = b4a.allocUnsafe(state.end)\n  enc.encode(state, m)\n  return state.buffer\n}\n\nexports.decode = function decode (enc, buffer) {\n  return enc.decode(exports.state(0, buffer.byteLength, buffer))\n}\n\nfunction zigZagInt (enc) {\n  return {\n    preencode (state, n) {\n      enc.preencode(state, zigZagEncodeInt(n))\n    },\n    encode (state, n) {\n      enc.encode(state, zigZagEncodeInt(n))\n    },\n    decode (state) {\n      return zigZagDecodeInt(enc.decode(state))\n    }\n  }\n}\n\nfunction zigZagDecodeInt (n) {\n  return n === 0 ? n : (n & 1) === 0 ? n / 2 : -(n + 1) / 2\n}\n\nfunction zigZagEncodeInt (n) {\n  // 0, -1, 1, -2, 2, ...\n  return n < 0 ? (2 * -n) - 1 : n === 0 ? 0 : 2 * n\n}\n\nfunction zigZagBigInt (enc) {\n  return {\n    preencode (state, n) {\n      enc.preencode(state, zigZagEncodeBigInt(n))\n    },\n    encode (state, n) {\n      enc.encode(state, zigZagEncodeBigInt(n))\n    },\n    decode (state) {\n      return zigZagDecodeBigInt(enc.decode(state))\n    }\n  }\n}\n\nfunction zigZagDecodeBigInt (n) {\n  return n === 0n ? n : (n & 1n) === 0n ? n / 2n : -(n + 1n) / 2n\n}\n\nfunction zigZagEncodeBigInt (n) {\n  // 0, -1, 1, -2, 2, ...\n  return n < 0n ? (2n * -n) - 1n : n === 0n ? 0n : 2n * n\n}\n\nfunction validateUint (n) {\n  if ((n >= 0) === false /* Handles NaN as well */) throw new Error('uint must be positive')\n}\nmodule.exports = {\n  preencode,\n  encode,\n  decode\n}\n\nfunction preencode (state, num) {\n  if (num < 251) {\n    state.end++\n  } else if (num < 256) {\n    state.end += 2\n  } else if (num < 0x10000) {\n    state.end += 3\n  } else if (num < 0x1000000) {\n    state.end += 4\n  } else if (num < 0x100000000) {\n    state.end += 5\n  } else {\n    state.end++\n    const exp = Math.floor(Math.log(num) / Math.log(2)) - 32\n    preencode(state, exp)\n    state.end += 6\n  }\n}\n\nfunction encode (state, num) {\n  const max = 251\n  const x = num - max\n\n  if (num < max) {\n    state.buffer[state.start++] = num\n  } else if (num < 256) {\n    state.buffer[state.start++] = max\n    state.buffer[state.start++] = x\n  } else if (num < 0x10000) {\n    state.buffer[state.start++] = max + 1\n    state.buffer[state.start++] = x >> 8 & 0xff\n    state.buffer[state.start++] = x & 0xff\n  } else if (num < 0x1000000) {\n    state.buffer[state.start++] = max + 2\n    state.buffer[state.start++] = x >> 16\n    state.buffer[state.start++] = x >> 8 & 0xff\n    state.buffer[state.start++] = x & 0xff\n  } else if (num < 0x100000000) {\n    state.buffer[state.start++] = max + 3\n    state.buffer[state.start++] = x >> 24\n    state.buffer[state.start++] = x >> 16 & 0xff\n    state.buffer[state.start++] = x >> 8 & 0xff\n    state.buffer[state.start++] = x & 0xff\n  } else {\n    // need to use Math here as bitwise ops are 32 bit\n    const exp = Math.floor(Math.log(x) / Math.log(2)) - 32\n    state.buffer[state.start++] = 0xff\n\n    encode(state, exp)\n    const rem = x / Math.pow(2, exp - 11)\n\n    for (let i = 5; i >= 0; i--) {\n      state.buffer[state.start++] = rem / Math.pow(2, 8 * i) & 0xff\n    }\n  }\n}\n\nfunction decode (state) {\n  const max = 251\n\n  if (state.end - state.start < 1) throw new Error('Out of bounds')\n\n  const flag = state.buffer[state.start++]\n\n  if (flag < max) return flag\n\n  if (state.end - state.start < flag - max + 1) {\n    throw new Error('Out of bounds.')\n  }\n\n  if (flag < 252) {\n    return state.buffer[state.start++] +\n      max\n  }\n\n  if (flag < 253) {\n    return (state.buffer[state.start++] << 8) +\n      state.buffer[state.start++] +\n      max\n  }\n\n  if (flag < 254) {\n    return (state.buffer[state.start++] << 16) +\n      (state.buffer[state.start++] << 8) +\n      state.buffer[state.start++] +\n      max\n  }\n\n  // << 24 result may be interpreted as negative\n  if (flag < 255) {\n    return (state.buffer[state.start++] * 0x1000000) +\n      (state.buffer[state.start++] << 16) +\n      (state.buffer[state.start++] << 8) +\n      state.buffer[state.start++] +\n      max\n  }\n\n  const exp = decode(state)\n\n  if (state.end - state.start < 6) throw new Error('Out of bounds')\n\n  let rem = 0\n  for (let i = 5; i >= 0; i--) {\n    rem += state.buffer[state.start++] * Math.pow(2, 8 * i)\n  }\n\n  return (rem * Math.pow(2, exp - 11)) + max\n}\n{\n  \"name\": \"compact-encoding\",\n  \"version\": \"2.16.0\",\n  \"description\": \"A series of compact encoding schemes for building small and fast parsers and serializers\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"b4a\": \"^1.3.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.0.0\",\n    \"standard\": \"^16.0.3\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/compact-encoding/compact-encoding.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/compact-encoding/compact-encoding/issues\"\n  },\n  \"homepage\": \"https://github.com/compact-encoding/compact-encoding\"\n}\nconst b4a = require('b4a')\n\nconst { BE } = require('./endian')\n\nexports = module.exports = {\n  preencode (state, b) {\n    state.end += b.byteLength\n  },\n  encode (state, b) {\n    state.buffer.set(b, state.start)\n    state.start += b.byteLength\n  },\n  decode (state) {\n    const b = state.buffer.subarray(state.start, state.end)\n    state.start = state.end\n    return b\n  }\n}\n\nconst buffer = exports.buffer = {\n  preencode (state, b) {\n    if (b) uint8array.preencode(state, b)\n    else state.end++\n  },\n  encode (state, b) {\n    if (b) uint8array.encode(state, b)\n    else state.buffer[state.start++] = 0\n  },\n  decode (state) {\n    const b = state.buffer.subarray(state.start)\n    if (b.byteLength === 0) return null\n    state.start = state.end\n    return b\n  }\n}\n\nexports.binary = {\n  ...buffer,\n  preencode (state, b) {\n    if (typeof b === 'string') utf8.preencode(state, b)\n    else buffer.preencode(state, b)\n  },\n  encode (state, b) {\n    if (typeof b === 'string') utf8.encode(state, b)\n    else buffer.encode(state, b)\n  }\n}\n\nexports.arraybuffer = {\n  preencode (state, b) {\n    state.end += b.byteLength\n  },\n  encode (state, b) {\n    const view = new Uint8Array(b)\n\n    state.buffer.set(view, state.start)\n    state.start += b.byteLength\n  },\n  decode (state) {\n    const b = new ArrayBuffer(state.end - state.start)\n    const view = new Uint8Array(b)\n\n    view.set(state.buffer.subarray(state.start))\n\n    state.start = state.end\n\n    return b\n  }\n}\n\nfunction typedarray (TypedArray, swap) {\n  const n = TypedArray.BYTES_PER_ELEMENT\n\n  return {\n    preencode (state, b) {\n      state.end += b.byteLength\n    },\n    encode (state, b) {\n      const view = new Uint8Array(b.buffer, b.byteOffset, b.byteLength)\n\n      if (BE && swap) swap(view)\n\n      state.buffer.set(view, state.start)\n      state.start += b.byteLength\n    },\n    decode (state) {\n      let b = state.buffer.subarray(state.start)\n      if ((b.byteOffset % n) !== 0) b = new Uint8Array(b)\n\n      if (BE && swap) swap(b)\n\n      state.start = state.end\n\n      return new TypedArray(b.buffer, b.byteOffset, b.byteLength / n)\n    }\n  }\n}\n\nconst uint8array = exports.uint8array = typedarray(Uint8Array)\nexports.uint16array = typedarray(Uint16Array, b4a.swap16)\nexports.uint32array = typedarray(Uint32Array, b4a.swap32)\n\nexports.int8array = typedarray(Int8Array)\nexports.int16array = typedarray(Int16Array, b4a.swap16)\nexports.int32array = typedarray(Int32Array, b4a.swap32)\n\nexports.biguint64array = typedarray(BigUint64Array, b4a.swap64)\nexports.bigint64array = typedarray(BigInt64Array, b4a.swap64)\n\nexports.float32array = typedarray(Float32Array, b4a.swap32)\nexports.float64array = typedarray(Float64Array, b4a.swap64)\n\nfunction string (encoding) {\n  return {\n    preencode (state, s) {\n      state.end += b4a.byteLength(s, encoding)\n    },\n    encode (state, s) {\n      state.start += b4a.write(state.buffer, s, state.start, encoding)\n    },\n    decode (state) {\n      const s = b4a.toString(state.buffer, encoding, state.start)\n      state.start = state.end\n      return s\n    }\n  }\n}\n\nconst utf8 = exports.string = exports.utf8 = string('utf-8')\nexports.ascii = string('ascii')\nexports.hex = string('hex')\nexports.base64 = string('base64')\nexports.ucs2 = exports.utf16le = string('utf16le')\n\nexports.array = function array (enc) {\n  return {\n    preencode (state, list) {\n      for (const value of list) enc.preencode(state, value)\n    },\n    encode (state, list) {\n      for (const value of list) enc.encode(state, value)\n    },\n    decode (state) {\n      const arr = []\n      while (state.start < state.end) arr.push(enc.decode(state))\n      return arr\n    }\n  }\n}\n\nexports.json = {\n  preencode (state, v) {\n    utf8.preencode(state, JSON.stringify(v))\n  },\n  encode (state, v) {\n    utf8.encode(state, JSON.stringify(v))\n  },\n  decode (state) {\n    return JSON.parse(utf8.decode(state))\n  }\n}\n\nexports.ndjson = {\n  preencode (state, v) {\n    utf8.preencode(state, JSON.stringify(v) + '\\n')\n  },\n  encode (state, v) {\n    utf8.encode(state, JSON.stringify(v) + '\\n')\n  },\n  decode (state) {\n    return JSON.parse(utf8.decode(state))\n  }\n}\nconst safetyCatch = require('safety-catch')\n\nmodule.exports = class CoreCoupler {\n  constructor (target, wakeup) {\n    this.target = target\n    this.wakeup = wakeup\n    this.coupled = new Set()\n\n    this._onpeeraddBound = this._onpeeradd.bind(this)\n    this.target.on('peer-add', this._onpeeraddBound)\n  }\n\n  add (core) {\n    const added = this.coupled.size\n    this.coupled.add(core)\n    if (added !== this.coupled.size) this._couple(core)\n  }\n\n  remove (core) {\n    this.coupled.delete(core)\n  }\n\n  destroy () {\n    this.target.off('peer-add', this._onpeeraddBound)\n  }\n\n  async update (stream) {\n    const muxer = stream.userData\n    if (!muxer) return\n\n    try {\n      if (!(await this._hasMuxer(this.target, muxer))) return\n\n      let wakeup = null\n\n      for (const core of this.coupled) {\n        if (await this._hasMuxer(core, muxer)) continue\n        if (wakeup === null) wakeup = []\n        wakeup.push(core)\n      }\n\n      if (wakeup !== null) {\n        this.wakeup(stream, wakeup)\n      }\n    } catch (err) {\n      safetyCatch(err)\n    }\n  }\n\n  async _couple (core) {\n    try {\n      let wakeup = null\n\n      for (const peer of this.target.peers) {\n        if (await this._hasPeer(core, peer)) continue\n        if (wakeup === null) wakeup = []\n        wakeup.push(peer)\n      }\n\n      if (wakeup !== null && this.coupled.has(core)) {\n        for (const peer of wakeup) this.wakeup(peer.stream, [core])\n      }\n    } catch (err) {\n      safetyCatch(err)\n    }\n  }\n\n  async _onpeeradd (peer) {\n    try {\n      let wakeup = null\n\n      for (const core of this.coupled) {\n        if (await this._hasPeer(core, peer)) continue\n        if (wakeup === null) wakeup = []\n        wakeup.push(core)\n      }\n\n      if (wakeup !== null) {\n        this.wakeup(peer.stream, wakeup)\n      }\n    } catch (err) {\n      safetyCatch(err)\n    }\n  }\n\n  _hasMuxer (core, muxer) {\n    const ch = muxer.getLastChannel({ protocol: 'hypercore', id: core.discoveryKey })\n    if (ch) return ch.fullyOpened()\n\n    const cha = muxer.getLastChannel({ protocol: 'hypercore/alpha', id: core.discoveryKey })\n    if (cha) return cha.fullyOpened()\n\n    return Promise.resolve(false)\n  }\n\n  _hasPeer (core, peer) {\n    return this._hasMuxer(core, peer.protomux)\n  }\n}\n{\n  \"name\": \"core-coupler\",\n  \"version\": \"2.0.0\",\n  \"description\": \"Couple the peers of cores\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"standard\"\n  },\n  \"dependencies\": {\n    \"safety-catch\": \"^1.0.2\"\n  },\n  \"devDependencies\": {\n    \"corestore\": \"^6.18.2\",\n    \"standard\": \"^17.1.0\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/holepunchto/core-coupler.git\"\n  },\n  \"author\": \"Holepunch Inc\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/core-coupler/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/core-coupler\"\n}\nconst b4a = require('b4a')\nconst Hypercore = require('hypercore')\nconst ReadyResource = require('ready-resource')\nconst sodium = require('sodium-universal')\nconst crypto = require('hypercore-crypto')\nconst ID = require('hypercore-id-encoding')\nconst { STORAGE_EMPTY } = require('hypercore-errors')\n\nconst auditStore = require('./lib/audit.js')\n\nconst [NS] = crypto.namespace('corestore', 1)\nconst DEFAULT_NAMESPACE = b4a.alloc(32) // This is meant to be 32 0-bytes\n\nclass StreamTracker {\n  constructor () {\n    this.records = []\n  }\n\n  add (stream, isExternal) {\n    const record = { index: 0, stream, isExternal }\n    record.index = this.records.push(record) - 1\n    return record\n  }\n\n  remove (record) {\n    const popped = this.records.pop()\n    if (popped === record) return\n    this.records[(popped.index = record.index)] = popped\n  }\n\n  attachAll (core) {\n    for (let i = 0; i < this.records.length; i++) {\n      const record = this.records[i]\n      const muxer = record.stream.noiseStream.userData\n      if (!core.replicator.attached(muxer)) core.replicator.attachTo(muxer)\n    }\n  }\n\n  destroy () {\n    // reverse is safer cause we delete mb\n    for (let i = this.records.length - 1; i >= 0; i--) {\n      const record = this.records[i]\n      if (!record.isExternal) record.stream.destroy()\n    }\n  }\n}\n\nclass SessionTracker {\n  constructor () {\n    this.map = new Map()\n  }\n\n  get size () {\n    return this.map.size\n  }\n\n  get (id) {\n    const existing = this.map.get(id)\n    if (existing !== undefined) return existing\n    const fresh = []\n    this.map.set(id, fresh)\n    return fresh\n  }\n\n  gc (id) {\n    this.map.delete(id)\n  }\n\n  list (id) {\n    return id ? (this.map.get(id) || []) : [...this]\n  }\n\n  * [Symbol.iterator] () {\n    for (const sessions of this.map.values()) {\n      yield * sessions[Symbol.iterator]()\n    }\n  }\n}\n\nclass CoreTracker {\n  constructor () {\n    this.map = new Map()\n    this.watching = []\n\n    this._gcing = new Set()\n    this._gcInterval = null\n    this._gcCycleBound = this._gcCycle.bind(this)\n  }\n\n  get size () {\n    return this.map.size\n  }\n\n  watch (store) {\n    if (store.watchIndex !== -1) return\n    store.watchIndex = this.watching.push(store) - 1\n  }\n\n  unwatch (store) {\n    if (store.watchIndex === -1) return\n    const head = this.watching.pop()\n    if (head !== store) this.watching[(head.watchIndex = store.watchIndex)] = head\n    store.watchIndex = -1\n  }\n\n  resume (id) {\n    const core = this.map.get(id)\n\n    if (!core) return null\n\n    // signal back that we have a closing one stored\n    if (core.closing) return core\n\n    if (core.gc) {\n      this._gcing.delete(core)\n      if (this._gcing.size === 0) this._stopGC()\n      core.gc = 0\n    }\n\n    return core\n  }\n\n  opened (id) {\n    const core = this.map.get(id)\n    return !!(core && core.opened && !core.closing)\n  }\n\n  get (id) {\n    // we allow you do call this from the outside, so support normal buffers also\n    if (b4a.isBuffer(id)) id = b4a.toString(id, 'hex')\n    const core = this.map.get(id)\n    if (!core || core.closing) return null\n    return core\n  }\n\n  set (id, core) {\n    this.map.set(id, core)\n    if (this.watching.length > 0) this._emit(core)\n  }\n\n  _emit (core) {\n    for (let i = this.watching.length - 1; i >= 0; i--) {\n      const store = this.watching[i]\n      for (const fn of store.watchers) fn(core)\n    }\n  }\n\n  _gc (core) {\n    const id = toHex(core.discoveryKey)\n    if (this.map.get(id) === core) this.map.delete(id)\n  }\n\n  _gcCycle () {\n    for (const core of this._gcing) {\n      if (++core.gc < 4) continue\n      const gc = this._gc.bind(this, core)\n      core.close().then(gc, gc)\n      this._gcing.delete(core)\n    }\n\n    if (this._gcing.size === 0) this._stopGC()\n  }\n\n  gc (core) {\n    core.gc = 1 // first strike\n    this._gcing.add(core)\n    if (this._gcing.size === 1) this._startGC()\n  }\n\n  _stopGC () {\n    clearInterval(this._gcInterval)\n    this._gcInterval = null\n  }\n\n  _startGC () {\n    if (this._gcInterval) return\n    this._gcInterval = setInterval(this._gcCycleBound, 2000)\n    if (this._gcInterval.unref) this._gcInterval.unref()\n  }\n\n  close () {\n    this._stopGC()\n    this._gcing.clear()\n\n    const all = []\n    for (const core of this.map.values()) {\n      core.onidle = noop // no reentry\n      all.push(core.close())\n    }\n    this.map.clear()\n\n    return Promise.all(all)\n  }\n\n  * [Symbol.iterator] () {\n    for (const core of this.map.values()) {\n      if (!core.closing) yield core\n    }\n  }\n}\n\nclass FindingPeers {\n  constructor () {\n    this.count = 0\n    this.pending = []\n  }\n\n  add (core) {\n    if (this.count === 0) return\n    this.pending.push(core.findingPeers())\n  }\n\n  inc (sessions) {\n    if (++this.count !== 1) return\n\n    for (const core of sessions) {\n      this.pending.push(core.findingPeers())\n    }\n  }\n\n  dec (sessions) {\n    if (--this.count !== 0) return\n    while (this.pending.length > 0) this.pending.pop()()\n  }\n}\n\nclass Corestore extends ReadyResource {\n  constructor (storage, opts = {}) {\n    super()\n\n    this.root = opts.root || null\n    this.storage = this.root ? this.root.storage : Hypercore.defaultStorage(storage, { id: opts.id })\n    this.streamTracker = this.root ? this.root.streamTracker : new StreamTracker()\n    this.cores = this.root ? this.root.cores : new CoreTracker()\n    this.sessions = new SessionTracker()\n    this.corestores = this.root ? this.root.corestores : new Set()\n    this.readOnly = opts.writable === false\n    this.globalCache = this.root ? this.root.globalCache : (opts.globalCache || null)\n    this.primaryKey = this.root ? this.root.primaryKey : (opts.primaryKey || null)\n    this.ns = opts.namespace || DEFAULT_NAMESPACE\n\n    this.watchers = null\n    this.watchIndex = -1\n\n    this.manifestVersion = 1 // just compat\n\n    this._findingPeers = null // here for legacy\n    this._ongcBound = this._ongc.bind(this)\n\n    if (this.root) this.corestores.add(this)\n\n    this.ready().catch(noop)\n  }\n\n  watch (fn) {\n    if (this.watchers === null) {\n      this.watchers = new Set()\n      this.cores.watch(this)\n    }\n\n    this.watchers.add(fn)\n  }\n\n  unwatch (fn) {\n    if (this.watchers === null) return\n\n    this.watchers.delete(fn)\n\n    if (this.watchers.size === 0) {\n      this.watchers = null\n      this.cores.unwatch(this)\n    }\n  }\n\n  findingPeers () {\n    if (this._findingPeers === null) this._findingPeers = new FindingPeers()\n    this._findingPeers.inc(this.sessions)\n    let done = false\n    return () => {\n      if (done) return\n      done = true\n      this._findingPeers.dec(this.sessions)\n    }\n  }\n\n  audit (opts = {}) {\n    return auditStore(this, opts)\n  }\n\n  async suspend () {\n    await this.storage.db.flush()\n    await this.storage.db.suspend()\n  }\n\n  resume () {\n    return this.storage.db.resume()\n  }\n\n  session (opts) {\n    this._maybeClosed()\n    const root = this.root || this\n    return new Corestore(null, { ...opts, root })\n  }\n\n  namespace (name, opts) {\n    return this.session({ ...opts, namespace: generateNamespace(this.ns, name) })\n  }\n\n  getAuth (discoveryKey) {\n    return this.storage.getAuth(discoveryKey)\n  }\n\n  _ongc (session) {\n    if (session.sessions.length === 0) this.sessions.gc(session.id)\n  }\n\n  async _getOrSetSeed () {\n    const seed = await this.storage.getSeed()\n    if (seed !== null) return seed\n    return await this.storage.setSeed(this.primaryKey || crypto.randomBytes(32))\n  }\n\n  async _open () {\n    if (this.root !== null) {\n      if (this.root.opened === false) await this.root.ready()\n      this.primaryKey = this.root.primaryKey\n      return\n    }\n\n    const primaryKey = await this._getOrSetSeed()\n\n    if (this.primaryKey === null) {\n      this.primaryKey = primaryKey\n      return\n    }\n\n    if (!b4a.equals(primaryKey, this.primaryKey)) {\n      throw new Error('Another corestore is stored here')\n    }\n  }\n\n  async _close () {\n    const closing = []\n    const hanging = [...this.sessions]\n    for (const sess of hanging) closing.push(sess.close())\n\n    if (this.watchers !== null) this.cores.unwatch(this)\n\n    if (this.root !== null) {\n      await Promise.all(closing)\n      return\n    }\n\n    for (const store of this.corestores) {\n      closing.push(store.close())\n    }\n\n    await Promise.all(closing)\n\n    await this.cores.close()\n    await this.storage.close()\n  }\n\n  async _attachMaybe (muxer, discoveryKey) {\n    if (this.opened === false) await this.ready()\n    if (!this.cores.opened(toHex(discoveryKey)) && !(await this.storage.has(discoveryKey, { ifMigrated: true }))) return\n    if (this.closing) return\n\n    const core = this._openCore(discoveryKey, { createIfMissing: false })\n\n    if (!core) return\n    if (!core.opened) await core.ready()\n\n    if (!core.replicator.attached(muxer)) {\n      core.replicator.attachTo(muxer)\n    }\n\n    core.checkIfIdle()\n  }\n\n  replicate (isInitiator, opts) {\n    this._maybeClosed()\n\n    const isExternal = isStream(isInitiator)\n    const stream = Hypercore.createProtocolStream(isInitiator, {\n      ...opts,\n      ondiscoverykey: discoveryKey => {\n        if (this.closing) return\n        const muxer = stream.noiseStream.userData\n        return this._attachMaybe(muxer, discoveryKey)\n      }\n    })\n\n    if (this.cores.size > 0) {\n      const muxer = stream.noiseStream.userData\n      const uncork = muxer.uncork.bind(muxer)\n      muxer.cork()\n\n      for (const core of this.cores) {\n        if (!core.replicator.downloading || core.replicator.attached(muxer) || !core.opened) continue\n        core.replicator.attachTo(muxer)\n      }\n\n      stream.noiseStream.opened.then(uncork)\n    }\n\n    const record = this.streamTracker.add(stream, isExternal)\n    stream.once('close', () => this.streamTracker.remove(record))\n    return stream\n  }\n\n  _maybeClosed () {\n    if (this.closing || (this.root !== null && this.root.closing)) {\n      throw new Error('Corestore is closed')\n    }\n  }\n\n  get (opts) {\n    this._maybeClosed()\n\n    if (b4a.isBuffer(opts) || typeof opts === 'string') opts = { key: opts }\n    if (!opts) opts = {}\n\n    const conf = {\n      preload: null,\n      sessions: null,\n      ongc: null,\n      core: null,\n      active: opts.active !== false,\n      encryption: opts.encryption || null,\n      encryptionKey: opts.encryptionKey || null, // back compat, should remove\n      isBlockKey: !!opts.isBlockKey, // back compat, should remove\n      valueEncoding: opts.valueEncoding || null,\n      exclusive: !!opts.exclusive,\n      manifest: opts.manifest || null,\n      keyPair: opts.keyPair || null,\n      onwait: opts.onwait || null,\n      wait: opts.wait !== false,\n      timeout: opts.timeout || 0,\n      draft: !!opts.draft,\n      writable: opts.writable === undefined && this.readOnly ? false : opts.writable\n    }\n\n    // name requires us to rt to storage + ready, so needs preload\n    // same goes if user has defined async preload obvs\n    if (opts.name || opts.preload) {\n      conf.preload = this._preload(opts)\n      return this._makeSession(conf)\n    }\n\n    if (opts.discoveryKey && !opts.key && !opts.manifest) {\n      conf.preload = this._preloadCheckIfExists(opts)\n      return this._makeSession(conf)\n    }\n\n    // if not not we can sync create it, which just is easier for the\n    // upstream user in terms of guarantees (key is there etc etc)\n    const core = this._openCore(null, opts)\n\n    conf.core = core\n    conf.sessions = this.sessions.get(core.id)\n    conf.ongc = this._ongcBound\n\n    return this._makeSession(conf)\n  }\n\n  _makeSession (conf) {\n    const session = new Hypercore(null, null, conf)\n    if (this._findingPeers !== null) this._findingPeers.add(session)\n    return session\n  }\n\n  async createKeyPair (name, ns = this.ns) {\n    if (this.opened === false) await this.ready()\n    return createKeyPair(this.primaryKey, ns, name)\n  }\n\n  async _preloadCheckIfExists (opts) {\n    const has = await this.storage.has(opts.discoveryKey)\n    if (!has) throw STORAGE_EMPTY('No Hypercore is stored here')\n    return this._preload(opts)\n  }\n\n  async _preload (opts) {\n    if (opts.preload) opts = { ...opts, ...(await opts.preload) }\n    if (this.opened === false) await this.ready()\n\n    const discoveryKey = opts.name ? await this.storage.getAlias({ name: opts.name, namespace: this.ns }) : null\n    this._maybeClosed()\n\n    const core = this._openCore(discoveryKey, opts)\n\n    return {\n      core,\n      sessions: this.sessions.get(core.id),\n      ongc: this._ongcBound,\n      encryption: opts.encryption || null,\n      encryptionKey: opts.encryptionKey || null, // back compat, should remove\n      isBlockKey: !!opts.isBlockKey // back compat, should remove\n    }\n  }\n\n  _auth (discoveryKey, opts) {\n    const result = {\n      keyPair: null,\n      key: null,\n      discoveryKey,\n      manifest: null\n    }\n\n    if (opts.name) {\n      result.keyPair = createKeyPair(this.primaryKey, this.ns, opts.name)\n    } else if (opts.keyPair) {\n      result.keyPair = opts.keyPair\n    }\n\n    if (opts.manifest) {\n      result.manifest = opts.manifest\n    } else if (result.keyPair && !result.discoveryKey) {\n      result.manifest = { version: 1, signers: [{ publicKey: result.keyPair.publicKey }] }\n    }\n\n    if (opts.key) result.key = ID.decode(opts.key)\n    else if (result.manifest) result.key = Hypercore.key(result.manifest)\n\n    if (result.discoveryKey) return result\n\n    if (opts.discoveryKey) result.discoveryKey = ID.decode(opts.discoveryKey)\n    else if (result.key) result.discoveryKey = crypto.discoveryKey(result.key)\n    else throw new Error('Could not derive discovery from input')\n\n    return result\n  }\n\n  _openCore (discoveryKey, opts) {\n    const auth = this._auth(discoveryKey, opts)\n\n    const id = toHex(auth.discoveryKey)\n    const existing = this.cores.resume(id)\n    if (existing && !existing.closing) return existing\n\n    const core = Hypercore.createCore(this.storage, {\n      preopen: (existing && existing.opened) ? existing.closing : null, // always wait for the prev one to close first in any case...\n      eagerUpgrade: true,\n      notDownloadingLinger: opts.notDownloadingLinger,\n      allowFork: opts.allowFork !== false,\n      inflightRange: opts.inflightRange,\n      compat: false, // no compat for now :)\n      force: opts.force,\n      createIfMissing: opts.createIfMissing,\n      discoveryKey: auth.discoveryKey,\n      overwrite: opts.overwrite,\n      key: auth.key,\n      keyPair: auth.keyPair,\n      legacy: opts.legacy,\n      manifest: auth.manifest,\n      globalCache: opts.globalCache || this.globalCache || null,\n      alias: opts.name ? { name: opts.name, namespace: this.ns } : null\n    })\n\n    core.onidle = () => {\n      this.cores.gc(core)\n    }\n\n    core.replicator.ondownloading = () => {\n      this.streamTracker.attachAll(core)\n    }\n\n    this.cores.set(id, core)\n    return core\n  }\n}\n\nmodule.exports = Corestore\n\nfunction isStream (s) {\n  return typeof s === 'object' && s && typeof s.pipe === 'function'\n}\n\nfunction generateNamespace (namespace, name) {\n  if (!b4a.isBuffer(name)) name = b4a.from(name)\n  const out = b4a.allocUnsafeSlow(32)\n  sodium.crypto_generichash_batch(out, [namespace, name])\n  return out\n}\n\nfunction deriveSeed (primaryKey, namespace, name) {\n  if (!b4a.isBuffer(name)) name = b4a.from(name)\n  const out = b4a.alloc(32)\n  sodium.crypto_generichash_batch(out, [NS, namespace, name], primaryKey)\n  return out\n}\n\nfunction createKeyPair (primaryKey, namespace, name) {\n  const seed = deriveSeed(primaryKey, namespace, name)\n  const buf = b4a.alloc(sodium.crypto_sign_PUBLICKEYBYTES + sodium.crypto_sign_SECRETKEYBYTES)\n  const keyPair = {\n    publicKey: buf.subarray(0, sodium.crypto_sign_PUBLICKEYBYTES),\n    secretKey: buf.subarray(sodium.crypto_sign_PUBLICKEYBYTES)\n  }\n  sodium.crypto_sign_seed_keypair(keyPair.publicKey, keyPair.secretKey, seed)\n  return keyPair\n}\n\nfunction noop () {}\n\nfunction toHex (discoveryKey) {\n  return b4a.toString(discoveryKey, 'hex')\n}\nmodule.exports = async function * audit (store, { dryRun = false } = {}) {\n  for await (const { discoveryKey } of store.storage.createCoreStream()) {\n    const core = store.get({ discoveryKey, active: false })\n    await core.ready()\n\n    yield { discoveryKey, key: core.key, audit: await core.core.audit({ dryRun }) }\n\n    try {\n      await core.close()\n    } catch {\n      // ignore if failed, we are auditing...\n    }\n  }\n}\n{\n  \"name\": \"corestore\",\n  \"version\": \"7.0.23\",\n  \"description\": \"A Hypercore factory that simplifies managing collections of cores.\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"lib/*\"\n  ],\n  \"dependencies\": {\n    \"b4a\": \"^1.6.7\",\n    \"hypercore\": \"^11.0.0\",\n    \"hypercore-crypto\": \"^3.4.2\",\n    \"hypercore-errors\": \"^1.4.0\",\n    \"hypercore-id-encoding\": \"^1.3.0\",\n    \"ready-resource\": \"^1.1.1\",\n    \"sodium-universal\": \"^4.0.1\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.7.0\",\n    \"rache\": \"^1.0.0\",\n    \"standard\": \"^17.1.2\",\n    \"test-tmp\": \"^1.3.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test/*.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/holepunchto/corestore2.git\"\n  },\n  \"author\": \"Holepunch Inc\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/corestore2/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/corestore2\"\n}\nmodule.exports = require('bare-crypto')\n{\n  \"name\": \"bare-node-crypto\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Bare compatibility wrapper for the Node.js builtin `crypto` module\",\n  \"exports\": {\n    \".\": \"./index.js\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bare-node.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bare-node/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bare-node#readme\",\n  \"dependencies\": {\n    \"bare-crypto\": \"*\"\n  }\n}\nmodule.exports = function debounce (worker, context = null) {\n  debounced.running = null\n  return debounced\n\n  async function debounced () {\n    if (debounced.running !== null) {\n      try {\n        await debounced.running\n      } catch (_) {\n        // ignore - do not fail on old errors\n      }\n    }\n\n    // another \"thread\" beat us to it, just piggy pack on that one\n    if (debounced.running !== null) return debounced.running\n\n    debounced.running = worker.call(context)\n\n    try {\n      return await debounced.running\n    } finally {\n      debounced.running = null\n    }\n  }\n}\n{\n  \"name\": \"debounceify\",\n  \"version\": \"1.1.0\",\n  \"description\": \"Tiny async debouncer\",\n  \"main\": \"index.js\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"standard\": \"^16.0.3\",\n    \"tape\": \"^5.1.1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/debounceify.git\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && tape test.js\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/debounceify/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/debounceify\"\n}\nconst fs = require('fs')\nconst fsx = require('fs-native-extensions')\nconst b4a = require('b4a')\n\nconst PLATFORM = global.Bare ? global.Bare.platform : global.process.platform\nconst IS_WIN = PLATFORM === 'win32'\nconst IS_LINUX = PLATFORM === 'linux'\nconst MODIFIED_SLACK = 3000\nconst EMPTY = b4a.alloc(0)\nconst ATTR = IS_LINUX ? 'user.device-file' : 'device-file'\n\nconst nl = IS_WIN ? '\\r\\n' : '\\n'\n\nexports.create = writeDeviceFile\nexports.resume = verifyDeviceFile\n\nasync function writeDeviceFile (filename, data = {}) {\n  let s = ''\n\n  for (const [key, value] of Object.entries(data)) {\n    if (value === null) continue\n    s += key + '=' + value + nl\n  }\n\n  const fd = await open(filename, 'w')\n  const st = await fstat(fd)\n\n  const created = st.birthtime.getTime()\n\n  s += 'device/platform=' + PLATFORM + nl\n  s += 'device/inode=' + st.ino + nl\n  s += 'device/created=' + created + nl\n\n  if (await setAttr(fd, ATTR, b4a.from('original'))) {\n    s += 'device/attribute=original' + nl\n  }\n\n  await write(fd, b4a.from(s))\n  await close(fd)\n}\n\nasync function verifyDeviceFile (filename, data = {}) {\n  let fd = 0\n\n  try {\n    fd = await open(filename, 'r')\n  } catch {\n    fd = 0\n  }\n\n  if (fd === 0) return null\n\n  const buf = await read(fd)\n  const result = {}\n\n  const s = b4a.toString(buf).trim().split('\\n')\n\n  let inode = 0\n  let created = 0\n  let attr = ''\n  let platform = ''\n\n  for (const ln of s) {\n    const i = ln.indexOf('=')\n    if (i === -1) continue\n\n    const k = ln.slice(0, i).trim()\n    const v = ln.slice(i + 1).trim()\n\n    switch (k) {\n      case 'device/platform':\n        platform = v\n        break\n      case 'device/inode':\n        inode = Number(v)\n        break\n      case 'device/created':\n        created = Number(v)\n        break\n      case 'device/attribute':\n        attr = v\n        break\n      default:\n        result[k] = v\n        break\n    }\n  }\n\n  for (const [k, v] of Object.entries(data)) {\n    if (v === null) continue\n    if (result[k] === undefined) continue // allow upserts\n    if (result[k] !== ('' + v)) {\n      throw new Error('Invalid device file, ' + k + ' has changed')\n    }\n  }\n\n  const st = await fstat(fd)\n  const at = await getAttr(fd, ATTR)\n  await close(fd)\n\n  const sameAttr = b4a.toString(at || EMPTY) === attr\n  const modified = Math.max(st.ctime.getTime(), st.mtime.getTime(), st.birthtime.getTime())\n\n  if (platform && platform !== PLATFORM) {\n    throw new Error('Invalid device file, was made on different platform')\n  }\n\n  if (!sameAttr) {\n    throw new Error('Invalid device file, was moved unsafely')\n  }\n\n  if (st.ino !== inode || Math.abs(modified - created) >= MODIFIED_SLACK) {\n    throw new Error('Invalid device file, was modified')\n  }\n\n  return result\n}\n\nasync function getAttr (fd, name) {\n  try {\n    return await fsx.getAttr(fd, name)\n  } catch {\n    return null\n  }\n}\n\nasync function setAttr (fd, name, value) {\n  try {\n    await fsx.setAttr(fd, name, value)\n    return true\n  } catch {\n    return false\n  }\n}\n\nfunction fstat (fd) {\n  return new Promise((resolve, reject) => {\n    fs.fstat(fd, (err, st) => {\n      if (err) reject(err)\n      resolve(st)\n    })\n  })\n}\n\nfunction close (fd) {\n  return new Promise((resolve, reject) => {\n    fs.close(fd, (err, st) => {\n      if (err) reject(err)\n      resolve(st)\n    })\n  })\n}\n\nfunction write (fd, buf) {\n  return new Promise((resolve, reject) => {\n    let offset = 0\n\n    onwrite(null, 0)\n\n    function onwrite (err, wrote) {\n      if (err) return reject(err)\n      if (offset === buf.byteLength) return resolve()\n      offset += wrote\n      fs.write(fd, buf, offset, buf.byteLength - offset, offset, onwrite)\n    }\n  })\n}\n\nfunction read (fd) {\n  const buf = b4a.allocUnsafe(4096)\n\n  return new Promise((resolve, reject) => {\n    let offset = 0\n\n    fs.read(fd, buf, 0, buf.byteLength, 0, onread)\n\n    function onread (err, read) {\n      if (err) return reject(err)\n      if (read === 0) return resolve(buf.subarray(0, offset))\n      offset += read\n      fs.read(fd, buf, offset, buf.byteLength - offset, offset, onread)\n    }\n  })\n}\n\nfunction open (filename, flags) {\n  return new Promise((resolve, reject) => {\n    fs.open(filename, flags, (err, fd) => {\n      if (err) reject(err)\n      resolve(fd)\n    })\n  })\n}\n{\n  \"name\": \"device-file\",\n  \"version\": \"1.2.4\",\n  \"description\": \"Device only file\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"b4a\": \"^1.6.7\",\n    \"bare-fs\": \"^4.0.1\",\n    \"fs-native-extensions\": \"^1.4.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.13.1\",\n    \"standard\": \"^17.1.2\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"imports\": {\n    \"fs\": {\n      \"bare\": \"bare-fs\",\n      \"default\": \"fs\"\n    }\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/holepunchto/device-file.git\"\n  },\n  \"author\": \"Holepunch Inc\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/device-file/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/device-file\"\n}\nconst { EventEmitter } = require('events')\nconst Table = require('kademlia-routing-table')\nconst TOS = require('time-ordered-set')\nconst UDX = require('udx-native')\nconst sodium = require('sodium-universal')\nconst c = require('compact-encoding')\nconst NatSampler = require('nat-sampler')\nconst b4a = require('b4a')\nconst IO = require('./lib/io')\nconst Query = require('./lib/query')\nconst Session = require('./lib/session')\nconst peer = require('./lib/peer')\nconst { UNKNOWN_COMMAND, INVALID_TOKEN } = require('./lib/errors')\nconst { PING, PING_NAT, FIND_NODE, DOWN_HINT } = require('./lib/commands')\n\nconst TMP = b4a.allocUnsafe(32)\nconst TICK_INTERVAL = 5000\nconst SLEEPING_INTERVAL = 3 * TICK_INTERVAL\nconst STABLE_TICKS = 240 // if nothing major bad happens in ~20mins we can consider this node stable (if nat is friendly)\nconst MORE_STABLE_TICKS = 3 * STABLE_TICKS\nconst REFRESH_TICKS = 60 // refresh every ~5min when idle\nconst RECENT_NODE = 12 // we've heard from a node less than 1min ago\nconst OLD_NODE = 360 // if an node has been around more than 30 min we consider it old\n\nclass DHT extends EventEmitter {\n  constructor (opts = {}) {\n    super()\n\n    this.bootstrapNodes = opts.bootstrap === false ? [] : (opts.bootstrap || []).map(parseNode)\n    this.table = new Table(randomBytes(32))\n    this.nodes = new TOS()\n    this.udx = opts.udx || new UDX()\n    this.io = new IO(this.table, this.udx, {\n      ...opts,\n      onrequest: this._onrequest.bind(this),\n      onresponse: this._onresponse.bind(this),\n      ontimeout: this._ontimeout.bind(this)\n    })\n\n    this.concurrency = opts.concurrency || 10\n    this.bootstrapped = false\n    this.ephemeral = true\n    this.firewalled = this.io.firewalled\n    this.adaptive = typeof opts.ephemeral !== 'boolean' && opts.adaptive !== false\n    this.destroyed = false\n    this.suspended = false\n    this.online = true\n    this.stats = {\n      queries: { active: 0, total: 0 },\n      commands: {\n        ping: this.io.stats.commands[PING],\n        pingNat: this.io.stats.commands[PING_NAT],\n        findNode: this.io.stats.commands[FIND_NODE],\n        downHint: this.io.stats.commands[DOWN_HINT]\n      }\n    }\n\n    this._nat = new NatSampler()\n    this._quickFirewall = opts.quickFirewall !== false\n    this._forcePersistent = opts.ephemeral === false\n    this._repinging = 0\n    this._checks = 0\n    this._tick = randomOffset(100) // make sure to random offset all the network ticks\n    this._refreshTicks = randomOffset(REFRESH_TICKS)\n    this._stableTicks = this.adaptive ? STABLE_TICKS : 0\n    this._tickInterval = setInterval(this._ontick.bind(this), TICK_INTERVAL)\n    this._lastTick = Date.now()\n    this._lastHost = null\n    this._filterNode = opts.filterNode || opts.addNode || null // opts.addNode is deprecating, use opts.filterNode instead\n    this._onrow = (row) => row.on('full', (node) => this._onfullrow(node, row))\n    this._nonePersistentSamples = []\n    this._bootstrapping = this._bootstrap()\n    this._bootstrapping.catch(noop)\n\n    this.table.on('row', this._onrow)\n\n    this.io.networkInterfaces.on('change', (interfaces) => this._onnetworkchange(interfaces))\n\n    if (opts.nodes) {\n      for (let i = opts.nodes.length - 1; i >= 0; i--) {\n        this.addNode(opts.nodes[i])\n      }\n    }\n  }\n\n  static bootstrapper (port, host, opts) {\n    if (!port) throw new Error('Port is required')\n    if (!host) throw new Error('Host is required')\n    if (host === '0.0.0.0' || host === '::') throw new Error('Invalid host')\n    if (!UDX.isIPv4(host)) throw new Error('Host must be a IPv4 address')\n\n    const dht = new this({ port, ephemeral: false, firewalled: false, anyPort: false, bootstrap: [], ...opts })\n    dht._nat.add(host, port)\n    return dht\n  }\n\n  get id () {\n    return this.ephemeral ? null : this.table.id\n  }\n\n  get host () {\n    return this._nat.host\n  }\n\n  get port () {\n    return this._nat.port\n  }\n\n  get randomized () {\n    return this._nat.host !== null && (this._nat.port === 0)\n  }\n\n  get socket () {\n    return this.firewalled ? this.io.clientSocket : this.io.serverSocket\n  }\n\n  onmessage (socket, buf, rinfo) {\n    if (buf.byteLength > 1) this.io.onmessage(socket, buf, rinfo)\n  }\n\n  bind () {\n    return this.io.bind()\n  }\n\n  async suspend () {\n    await this.io.bind()\n    if (this.suspended || this.destroyed) return\n    this.suspended = true\n    clearInterval(this._tickInterval)\n    await this.io.suspend()\n    this.emit('suspend')\n  }\n\n  async resume () {\n    if (!this.suspended || this.destroyed) return\n    this.suspended = false\n    this._tickInterval = setInterval(this._ontick.bind(this), TICK_INTERVAL)\n    this._onwakeup()\n    await this.io.resume()\n    this.io.networkInterfaces.on('change', (interfaces) => this._onnetworkchange(interfaces))\n    this.refresh()\n    this.emit('resume')\n  }\n\n  address () {\n    const socket = this.socket\n    return socket ? socket.address() : null\n  }\n\n  localAddress () {\n    if (!this.io.serverSocket) return null\n\n    return {\n      host: localIP(this.udx),\n      port: this.io.serverSocket.address().port\n    }\n  }\n\n  remoteAddress () {\n    if (!this.host) return null\n    if (!this.port) return null\n    if (this.firewalled) return null\n    if (!this.io.serverSocket) return null\n\n    const port = this.io.serverSocket.address().port\n    if (port !== this.port) return null\n\n    return {\n      host: this.host,\n      port\n    }\n  }\n\n  addNode ({ host, port }) {\n    this._addNode({\n      id: peer.id(host, port),\n      port,\n      host,\n      token: null,\n      to: null,\n      sampled: 0,\n      added: this._tick,\n      pinged: 0,\n      seen: 0,\n      downHints: 0,\n      prev: null,\n      next: null\n    })\n  }\n\n  toArray (opts) {\n    const limit = (opts && opts.limit)\n    if (limit === 0) return []\n    return this.nodes.toArray({ limit, reverse: true }).map(({ host, port }) => ({ host, port }))\n  }\n\n  async fullyBootstrapped () {\n    return this._bootstrapping\n  }\n\n  ready () {\n    // Deprecating, use fullyBootstrapped instead (removed on next major)\n    return this.fullyBootstrapped()\n  }\n\n  findNode (target, opts) {\n    if (this.destroyed) throw new Error('Node destroyed')\n    this._refreshTicks = REFRESH_TICKS\n    return new Query(this, target, true, FIND_NODE, null, opts)\n  }\n\n  query ({ target, command, value }, opts) {\n    if (this.destroyed) throw new Error('Node destroyed')\n    this._refreshTicks = REFRESH_TICKS\n    return new Query(this, target, false, command, value || null, opts)\n  }\n\n  ping ({ host, port }, opts) {\n    let value = null\n\n    if (opts && opts.size && opts.size > 0) value = b4a.alloc(opts.size)\n\n    const req = this.io.createRequest({ id: null, host, port }, null, true, PING, null, value, (opts && opts.session) || null, (opts && opts.ttl))\n    return this._requestToPromise(req, opts)\n  }\n\n  request ({ token = null, command, target = null, value = null }, { host, port }, opts) {\n    const req = this.io.createRequest({ id: null, host, port }, token, false, command, target, value, (opts && opts.session) || null, (opts && opts.ttl))\n    return this._requestToPromise(req, opts)\n  }\n\n  session () {\n    return new Session(this)\n  }\n\n  _requestToPromise (req, opts) {\n    if (req === null) return Promise.reject(new Error('Node destroyed'))\n\n    if (opts && opts.socket) req.socket = opts.socket\n    if (opts && opts.retry === false) req.retries = 0\n\n    return new Promise((resolve, reject) => {\n      req.onresponse = resolve\n      req.onerror = reject\n      req.send()\n    })\n  }\n\n  async _bootstrap () {\n    const self = this\n\n    await Promise.resolve() // wait a tick, so apis can be used from the outside\n    await this.io.bind()\n\n    this.emit('listening')\n\n    // TODO: some papers describe more advanced ways of bootstrapping - we should prob look into that\n\n    let first = this.firewalled && this._quickFirewall && !this._forcePersistent\n    let testNat = false\n\n    const onlyFirewall = !this._forcePersistent\n\n    for (let i = 0; i < 2; i++) {\n      await this._backgroundQuery(this.table.id).on('data', ondata).finished()\n\n      if (this.bootstrapped || (!testNat && !this._forcePersistent)) break\n      if (!(await this._updateNetworkState(onlyFirewall))) break\n    }\n\n    if (this.bootstrapped) return\n    this.bootstrapped = true\n\n    this.emit('ready')\n\n    function ondata (data) {\n      // Simple QUICK nat heuristic.\n      // If we get ONE positive nat ping before the bootstrap query finishes\n      // then we always to a nat test, no matter if we are adaptive...\n      // This should be expanded in the future to try more than one node etc, not always hit the first etc\n      // If this fails, then nbd, as the onstable hook will pick it up later.\n\n      if (!first) return\n      first = false\n\n      const value = b4a.allocUnsafe(2)\n      c.uint16.encode({ start: 0, end: 2, buffer: value }, self.io.serverSocket.address().port)\n\n      self._request(data.from, true, PING_NAT, null, value, null, () => { testNat = true }, noop)\n    }\n  }\n\n  refresh () {\n    const node = this.table.random()\n    this._backgroundQuery(node ? node.id : this.table.id).on('error', noop)\n  }\n\n  async destroy () {\n    const emitClose = !this.destroyed\n    this.destroyed = true\n    clearInterval(this._tickInterval)\n    await this.io.destroy()\n    if (emitClose) this.emit('close')\n  }\n\n  _request (to, internal, command, target, value, session, onresponse, onerror) {\n    const req = this.io.createRequest(to, null, internal, command, target, value, session)\n    if (req === null) return null\n\n    req.onresponse = onresponse\n    req.onerror = onerror\n    req.send()\n\n    return req\n  }\n\n  _natAdd (host, port) {\n    const prevHost = this._nat.host\n    const prevPort = this._nat.port\n\n    this._nat.add(host, port)\n\n    if (prevHost === this._nat.host && prevPort === this._nat.port) return\n\n    this.emit('nat-update', this._nat.host, this._nat.port)\n  }\n\n  // we don't check that this is a bootstrap node but we limit the sample size to very few nodes, so fine\n  _sampleBootstrapMaybe (from, to) {\n    if (this._nonePersistentSamples.length >= Math.max(1, this.bootstrapNodes.length)) return\n    const id = from.host + ':' + from.port\n    if (this._nonePersistentSamples.indexOf(id) > -1) return\n    this._nonePersistentSamples.push(id)\n    this._natAdd(to.host, to.port)\n  }\n\n  _addNodeFromNetwork (sample, from, to) {\n    if (this._filterNode !== null && !this._filterNode(from)) {\n      return\n    }\n\n    if (from.id === null) {\n      this._sampleBootstrapMaybe(from, to)\n      return\n    }\n\n    const oldNode = this.table.get(from.id)\n\n    // refresh it, if we've seen this before\n    if (oldNode) {\n      if (sample && (oldNode.sampled === 0 || (this._tick - oldNode.sampled) >= OLD_NODE)) {\n        oldNode.to = to\n        oldNode.sampled = this._tick\n        this._natAdd(to.host, to.port)\n      }\n\n      oldNode.pinged = oldNode.seen = this._tick\n      this.nodes.add(oldNode)\n      return\n    }\n\n    this._addNode({\n      id: from.id,\n      port: from.port,\n      host: from.host,\n      to,\n      sampled: 0,\n      added: this._tick,\n      pinged: this._tick, // last time we interacted with them\n      seen: this._tick, // last time we heard from them\n      downHints: 0,\n      prev: null,\n      next: null\n    })\n  }\n\n  _addNode (node) {\n    if (this.nodes.has(node) || b4a.equals(node.id, this.table.id)) return\n\n    node.added = node.pinged = node.seen = this._tick\n\n    if (!this.table.add(node)) return\n    this.nodes.add(node)\n\n    if (node.to && node.sampled === 0) {\n      node.sampled = this._tick\n      this._natAdd(node.to.host, node.to.port)\n    }\n\n    this.emit('add-node', node)\n  }\n\n  _removeStaleNode (node, lastSeen) {\n    if (node.seen <= lastSeen) this._removeNode(node)\n  }\n\n  _removeNode (node) {\n    if (!this.nodes.has(node)) return\n\n    this.table.remove(node.id)\n    this.nodes.remove(node)\n\n    this.emit('remove-node', node)\n  }\n\n  _onwakeup () {\n    this._tick += 2 * OLD_NODE // bump the tick enough that everything appears old.\n    this._tick += 8 - (this._tick & 7) - 2 // triggers a series of pings in two ticks\n    this._stableTicks = MORE_STABLE_TICKS\n    this._refreshTicks = 1 // triggers a refresh next tick (allow network time to wake up also)\n    this._lastHost = null // clear network cache check\n\n    if (this.adaptive) {\n      // TODO: re-enable this as soon as we find out why this is over triggering in some edge cases\n      // this.firewalled = true\n      // this.io.firewalled = true\n\n      if (!this.ephemeral) {\n        this.ephemeral = true\n        this.io.ephemeral = true\n        this.emit('ephemeral')\n      }\n    }\n\n    this.emit('wakeup')\n  }\n\n  _onfullrow (newNode, row) {\n    if (!this.bootstrapped || this._repinging >= 3) return\n\n    let oldest = null\n    for (const node of row.nodes) {\n      if (node.pinged === this._tick) continue\n      if (oldest === null || oldest.pinged > node.pinged || (oldest.pinged === node.pinged && oldest.added > node.added)) oldest = node\n    }\n\n    if (oldest === null) return\n    if ((this._tick - oldest.pinged) < RECENT_NODE && (this._tick - oldest.added) > OLD_NODE) return\n\n    this._repingAndSwap(newNode, oldest)\n  }\n\n  _onnetworkchange (interfaces) {\n    this.emit('network-change', interfaces)\n    this.emit('network-update')\n  }\n\n  _repingAndSwap (newNode, oldNode) {\n    const self = this\n    const lastSeen = oldNode.seen\n\n    oldNode.pinged = this._tick\n\n    this._repinging++\n    this._request({ id: null, host: oldNode.host, port: oldNode.port }, true, PING, null, null, null, onsuccess, onswap)\n\n    function onsuccess (m) {\n      if (oldNode.seen <= lastSeen) return onswap()\n      self._repinging--\n    }\n\n    function onswap (e) {\n      self._repinging--\n      self._removeNode(oldNode)\n      self._addNode(newNode)\n    }\n  }\n\n  _onrequest (req, external) {\n    if (req.from.id !== null) {\n      this._addNodeFromNetwork(!external, req.from, req.to)\n    }\n\n    if (req.internal) {\n      switch (req.command) {\n        // standard keep alive call\n        case PING: {\n          req.sendReply(0, null, false, false)\n          return\n        }\n        // check if the other side can receive a message to their other socket\n        case PING_NAT: {\n          if (req.value === null || req.value.byteLength < 2) return\n          const port = c.uint16.decode({ start: 0, end: 2, buffer: req.value })\n          if (port === 0) return\n          req.from.port = port\n          req.sendReply(0, null, false, false)\n          return\n        }\n        // empty dht reply back\n        case FIND_NODE: {\n          if (!req.target) return\n          req.sendReply(0, null, false, true)\n          return\n        }\n        // \"this is node you sent me is down\" - let's try to ping it\n        case DOWN_HINT: {\n          if (req.value === null || req.value.byteLength < 6) return\n          if (this._checks < 10) {\n            sodium.crypto_generichash(TMP, req.value.subarray(0, 6))\n            const node = this.table.get(TMP)\n            if (node && (node.pinged < this._tick || node.downHints === 0)) {\n              node.downHints++\n              this._check(node)\n            }\n          }\n          req.sendReply(0, null, false, false)\n          return\n        }\n      }\n\n      req.sendReply(UNKNOWN_COMMAND, null, false, req.target !== null)\n      return\n    }\n\n    // ask the user to handle it or reply back with a bad command\n    if (this.onrequest(req) === false) {\n      req.sendReply(UNKNOWN_COMMAND, null, false, req.target !== null)\n    }\n  }\n\n  onrequest (req) {\n    return this.emit('request', req)\n  }\n\n  _onresponse (res, external) {\n    this._addNodeFromNetwork(!external, res.from, res.to)\n  }\n\n  _ontimeout (req) {\n    if (!req.to.id) return\n    const node = this.table.get(req.to.id)\n    if (node) this._removeNode(node)\n  }\n\n  _pingSome () {\n    let cnt = this.io.inflight.length > 2 ? 3 : 5\n    let oldest = this.nodes.oldest\n\n    // tiny dht, pinged the bootstrap again\n    if (!oldest) {\n      this.refresh()\n      return\n    }\n\n    // we've recently pinged the oldest one, so only trigger a couple of repings\n    if ((this._tick - oldest.pinged) < RECENT_NODE) {\n      cnt = 2\n    }\n\n    while (cnt--) {\n      if (!oldest || this._tick === oldest.pinged) continue\n      this._check(oldest)\n      oldest = oldest.next\n    }\n  }\n\n  _check (node) {\n    node.pinged = this._tick\n\n    const lastSeen = node.seen\n    const onresponse = () => {\n      this._checks--\n      this._removeStaleNode(node, lastSeen)\n    }\n    const onerror = () => {\n      this._checks--\n      this._removeNode(node)\n    }\n\n    this._checks++\n    this._request({ id: null, host: node.host, port: node.port }, true, PING, null, null, null, onresponse, onerror)\n  }\n\n  _ontick () {\n    const time = Date.now()\n\n    if (time - this._lastTick > SLEEPING_INTERVAL && this.suspended === false) {\n      this._onwakeup()\n    } else {\n      this._tick++\n    }\n\n    this._lastTick = time\n\n    if (!this.bootstrapped || this.suspended) return\n\n    if (this.adaptive && this.ephemeral && --this._stableTicks <= 0) {\n      if (this._lastHost === this._nat.host) { // do not recheck the same network...\n        this._stableTicks = MORE_STABLE_TICKS\n      } else {\n        this._updateNetworkState() // the promise returned here never fails so just ignore it\n      }\n    }\n\n    if ((this._tick & 7) === 0) {\n      this._pingSome()\n    }\n\n    if (((this._tick & 63) === 0 && this.nodes.length < this.table.k) || --this._refreshTicks <= 0) {\n      this.refresh()\n    }\n  }\n\n  async _updateNetworkState (onlyFirewall = false) {\n    if (!this.ephemeral) return false\n    if (onlyFirewall && !this.firewalled) return false\n\n    const { host, port } = this._nat\n\n    if (!onlyFirewall) {\n      // remember what host we checked and reset the counter\n      this._stableTicks = MORE_STABLE_TICKS\n      this._lastHost = host\n    }\n\n    // check if we have a consistent host and port\n    if (host === null || port === 0) {\n      return false\n    }\n\n    const natSampler = this.firewalled ? new NatSampler() : this._nat\n\n    // ask remote nodes to ping us on our server socket to see if we have the port open\n    const firewalled = this.firewalled && await this._checkIfFirewalled(natSampler)\n    if (firewalled) return false\n\n    this.firewalled = this.io.firewalled = false\n\n    // incase it's called in parallel for some reason, or if our nat status somehow changed\n    if (!this.ephemeral || host !== this._nat.host || port !== this._nat.port) return false\n    // if the firewall probe returned a different host / non consistent port, bail as well\n    if (natSampler.host !== host || natSampler.port === 0) return false\n\n    const id = peer.id(natSampler.host, natSampler.port)\n\n    if (!onlyFirewall) {\n      this.ephemeral = this.io.ephemeral = false\n    }\n\n    if (natSampler !== this._nat) {\n      const prevHost = this._nat.host\n      const prevPort = this._nat.port\n\n      this._nonePersistentSamples = []\n      this._nat = natSampler\n\n      if (prevHost !== this._nat.host || prevPort !== this._nat.port) {\n        this.emit('nat-update', this._nat.host, this._nat.port)\n      }\n    }\n\n    // TODO: we should make this a bit more defensive in terms of using more\n    // resources to make sure that the new routing table contains as many alive nodes\n    // as possible, vs blindly copying them over...\n\n    // all good! copy over the old routing table to the new one\n    if (!b4a.equals(this.table.id, id)) {\n      const nodes = this.table.toArray()\n\n      this.table = this.io.table = new Table(id)\n\n      for (const node of nodes) {\n        if (b4a.equals(node.id, id)) continue\n        if (!this.table.add(node)) this.nodes.remove(node)\n      }\n\n      this.table.on('row', this._onrow)\n\n      // we need to rebootstrap/refresh since we updated our id\n      if (this.bootstrapped) this.refresh()\n    }\n\n    if (!this.ephemeral) {\n      this.emit('persistent')\n    }\n\n    return true\n  }\n\n  async * _resolveBootstrapNodes () {\n    for (let { host, port } of this.bootstrapNodes) {\n      let doLookup = false\n\n      if (host.indexOf('@') === -1) {\n        doLookup = true\n      } else {\n        const [suggestedIP, fallbackHost] = host.split('@')\n        try {\n          await this.ping({ host: suggestedIP, port })\n          host = suggestedIP\n        } catch {\n          host = fallbackHost\n          doLookup = true\n        }\n      }\n\n      if (doLookup) {\n        try {\n          host = UDX.isIPv4(host) ? host : (await this.udx.lookup(host, { family: 4 })).host\n        } catch {\n          continue\n        }\n      }\n\n      yield {\n        id: peer.id(host, port),\n        host,\n        port\n      }\n    }\n  }\n\n  async _addBootstrapNodes (nodes) {\n    for await (const node of this._resolveBootstrapNodes()) {\n      nodes.push(node)\n    }\n  }\n\n  async _checkIfFirewalled (natSampler = new NatSampler()) {\n    const nodes = []\n    for (let node = this.nodes.latest; node && nodes.length < 5; node = node.prev) {\n      nodes.push(node)\n    }\n\n    if (nodes.length < 5) await this._addBootstrapNodes(nodes)\n    // if no nodes are available, including bootstrappers - bail\n    if (nodes.length === 0) return true\n\n    const hosts = new Set()\n    const value = b4a.allocUnsafe(2)\n\n    c.uint16.encode({ start: 0, end: 2, buffer: value }, this.io.serverSocket.address().port)\n\n    // double check they actually came on the server socket...\n    this.io.serverSocket.on('message', onmessage)\n\n    const pongs = await requestAll(this, true, PING_NAT, value, nodes)\n\n    let count = 0\n    for (const res of pongs) {\n      if (hosts.has(res.from.host)) {\n        count++\n        natSampler.add(res.to.host, res.to.port)\n      }\n    }\n\n    this.io.serverSocket.removeListener('message', onmessage)\n\n    // if we got no or very few replies, consider it a fluke\n    if (count < (nodes.length >= 5 ? 3 : 1)) return true\n\n    // check that the server socket has the same ip as the client socket\n    if (natSampler.host === null || this._nat.host !== natSampler.host) return true\n\n    // check that the local port of the server socket is the same as the remote port\n    // TODO: we might want a flag to opt out of this heuristic for specific remapped port servers\n    if (natSampler.port === 0 || natSampler.port !== this.io.serverSocket.address().port) return true\n\n    return false\n\n    function onmessage (_, { host }) {\n      hosts.add(host)\n    }\n  }\n\n  _backgroundQuery (target) {\n    this._refreshTicks = REFRESH_TICKS\n\n    const backgroundCon = Math.min(this.concurrency, Math.max(2, (this.concurrency / 8) | 0))\n    const q = new Query(this, target, true, FIND_NODE, null, { concurrency: backgroundCon, maxSlow: 0 })\n\n    q.on('data', () => {\n      // yield to other traffic\n      q.concurrency = this.io.inflight.length < 3\n        ? this.concurrency\n        : backgroundCon\n    })\n\n    return q\n  }\n\n  // called by the query\n  _online () {\n    if (this.online) return\n    this.online = true\n    this.emit('network-update')\n  }\n\n  // called by the query\n  _offline () {\n    if (!this.online) return\n    this.online = false\n    this.emit('network-update')\n  }\n}\n\nDHT.OK = 0\nDHT.ERROR_UNKNOWN_COMMAND = UNKNOWN_COMMAND\nDHT.ERROR_INVALID_TOKEN = INVALID_TOKEN\n\nmodule.exports = DHT\n\nfunction localIP (udx, family = 4) {\n  let host = null\n\n  for (const n of udx.networkInterfaces()) {\n    if (n.family !== family || n.internal) continue\n\n    // mac really likes en0, mb a better way but this shouldnt be bad anywhere so return now\n    if (n.name === 'en0') return n.host\n\n    // otherwise pick the first non internal host (let the loop continue in case we see en0)\n    if (host === null) host = n.host\n  }\n\n  return host || (family === 4 ? '127.0.0.1' : '::1')\n}\n\nfunction parseNode (s) {\n  if (typeof s === 'object') return s\n  if (typeof s === 'number') return { host: '127.0.0.1', port: s }\n  const [host, port] = s.split(':')\n  if (!port) throw new Error('Bootstrap node format is host:port')\n\n  return {\n    host,\n    port: Number(port)\n  }\n}\n\nfunction randomBytes (n) {\n  const b = b4a.alloc(n)\n  sodium.randombytes_buf(b)\n  return b\n}\n\nfunction randomOffset (n) {\n  return n - ((Math.random() * 0.5 * n) | 0)\n}\n\nfunction requestAll (dht, internal, command, value, nodes) {\n  let missing = nodes.length\n  const replies = []\n\n  return new Promise((resolve) => {\n    for (const node of nodes) {\n      const req = dht._request(node, internal, command, null, value, null, onsuccess, onerror)\n      if (!req) return resolve(replies)\n    }\n\n    function onsuccess (res) {\n      replies.push(res)\n      if (--missing === 0) resolve(replies)\n    }\n\n    function onerror () {\n      if (--missing === 0) resolve(replies)\n    }\n  })\n}\n\nfunction noop () {}\nexports.PING = 0\nexports.PING_NAT = 1\nexports.FIND_NODE = 2\nexports.DOWN_HINT = 3\nmodule.exports = class DHTError extends Error {\n  constructor (msg, code, fn = DHTError) {\n    super(`${code}: ${msg}`)\n    this.code = code\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, fn)\n    }\n  }\n\n  get name () {\n    return 'DHTError'\n  }\n\n  static UNKNOWN_COMMAND = 1\n  static INVALID_TOKEN = 2\n\n  static REQUEST_TIMEOUT (msg = 'Request timed out') {\n    return new DHTError(msg, 'REQUEST_TIMEOUT', DHTError.REQUEST_TIMEOUT)\n  }\n\n  static REQUEST_DESTROYED (msg = 'Request destroyed') {\n    return new DHTError(msg, 'REQUEST_DESTROYED', DHTError.REQUEST_DESTROYED)\n  }\n\n  static IO_SUSPENDED (msg = 'I/O suspended') {\n    return new DHTError(msg, 'IO_SUSPENDED', DHTError.IO_SUSPENDED)\n  }\n}\nconst FIFO = require('fast-fifo')\nconst sodium = require('sodium-universal')\nconst c = require('compact-encoding')\nconst b4a = require('b4a')\nconst peer = require('./peer')\nconst {\n  INVALID_TOKEN,\n  REQUEST_TIMEOUT,\n  REQUEST_DESTROYED,\n  IO_SUSPENDED\n} = require('./errors')\n\nconst VERSION = 0b11\nconst RESPONSE_ID = (0b0001 << 4) | VERSION\nconst REQUEST_ID = (0b0000 << 4) | VERSION\nconst EMPTY_ARRAY = []\n\nmodule.exports = class IO {\n  constructor (table, udx, { maxWindow = 80, port = 0, host = '0.0.0.0', anyPort = true, firewalled = true, onrequest, onresponse = noop, ontimeout = noop } = {}) {\n    this.table = table\n    this.udx = udx\n    this.inflight = []\n    this.clientSocket = null\n    this.serverSocket = null\n    this.firewalled = firewalled !== false\n    this.ephemeral = true\n    this.congestion = new CongestionWindow(maxWindow)\n    this.networkInterfaces = udx.watchNetworkInterfaces()\n    this.suspended = false\n\n    this.stats = {\n      commands: [\n        { tx: 0, rx: 0 }, // tx = transmitted, rx = received\n        { tx: 0, rx: 0 },\n        { tx: 0, rx: 0 },\n        { tx: 0, rx: 0 }\n      ]\n    }\n\n    this.onrequest = onrequest\n    this.onresponse = onresponse\n    this.ontimeout = ontimeout\n\n    this._pending = new FIFO()\n    this._rotateSecrets = 10\n    this._tid = (Math.random() * 65536) | 0\n    this._secrets = null\n    this._drainInterval = null\n    this._destroying = null\n    this._binding = null\n\n    // port can be a number or a range [start, to]\n    this.portRange = port.length\n      ? port\n      : port === 0 ? [0, 0] : [port, port + 5]\n\n    this._host = host\n    this._anyPort = anyPort !== false\n    this._boundServerPort = 0\n    this._boundClientPort = 0\n  }\n\n  onmessage (socket, buffer, { host, port }) {\n    if (buffer.byteLength < 2 || !(port > 0 && port < 65536) || this.suspended === true) return\n\n    const from = { id: null, host, port }\n    const state = { start: 1, end: buffer.byteLength, buffer }\n    const expectedSocket = this.firewalled ? this.clientSocket : this.serverSocket\n    const external = socket !== expectedSocket\n\n    if (buffer[0] === REQUEST_ID) {\n      const req = Request.decode(this, socket, from, state)\n      if (req === null) return\n      if (req.token !== null && !b4a.equals(req.token, this.token(req.from, 1)) && !b4a.equals(req.token, this.token(req.from, 0))) {\n        req.error(INVALID_TOKEN, { token: true })\n        return\n      }\n      this.onrequest(req, external)\n      return\n    }\n\n    if (buffer[0] === RESPONSE_ID) {\n      const res = decodeReply(from, state)\n      if (res === null) return\n\n      for (let i = 0; i < this.inflight.length; i++) {\n        const req = this.inflight[i]\n        if (req.tid !== res.tid) continue\n\n        res.rtt = Date.now() - req._timestamp\n\n        if (i === this.inflight.length - 1) this.inflight.pop()\n        else this.inflight[i] = this.inflight.pop()\n\n        if (req.session) req.session._detach(req)\n\n        // TODO: Auto retry here if errors.INVALID_TOKEN is returned?\n\n        if (req._timeout) {\n          clearTimeout(req._timeout)\n          req._timeout = null\n        }\n\n        this.congestion.recv()\n\n        if (req.internal && req.command < this.stats.commands.length) {\n          this.stats.commands[req.command].rx++\n        }\n\n        this.onresponse(res, external)\n        req.onresponse(res, req)\n        break\n      }\n    }\n  }\n\n  token (addr, i) {\n    if (this._secrets === null) {\n      const buf = b4a.alloc(64)\n      this._secrets = [buf.subarray(0, 32), buf.subarray(32, 64)]\n      sodium.randombytes_buf(this._secrets[0])\n      sodium.randombytes_buf(this._secrets[1])\n    }\n\n    const token = b4a.allocUnsafe(32)\n    sodium.crypto_generichash(token, b4a.from(addr.host), this._secrets[i])\n    return token\n  }\n\n  async destroy () {\n    if (this._destroying) return this._destroying\n    this._destroying = this._destroy()\n    return this._destroying\n  }\n\n  async _destroy () {\n    // simplifies timing to await the bind here also, although it might be unneeded\n    await this.bind()\n    await this._clear(false)\n  }\n\n  async _clear (suspended) {\n    if (this._drainInterval) {\n      clearInterval(this._drainInterval)\n      this._drainInterval = null\n    }\n\n    while (this.inflight.length) {\n      const req = this.inflight.pop()\n      if (req._timeout) clearTimeout(req._timeout)\n      req._timeout = null\n      req.destroyed = true\n\n      if (req.session) req.session._detach(req)\n\n      req.onerror(suspended ? IO_SUSPENDED() : REQUEST_DESTROYED(), req)\n    }\n\n    await Promise.allSettled([\n      this.serverSocket.close(),\n      this.clientSocket.close()\n    ])\n\n    this.networkInterfaces.destroy()\n  }\n\n  async suspend () {\n    this.suspended = true\n    await this._clear(true)\n    if (this._drainInterval) {\n      clearInterval(this._drainInterval)\n      this._drainInterval = null\n    }\n  }\n\n  async _rebind (binding) {\n    if (binding) await binding\n    if (this._destroying) return this._destroying\n    await this._bindSockets()\n    this.networkInterfaces = this.udx.watchNetworkInterfaces()\n  }\n\n  resume () {\n    this.suspended = false\n    const binding = this._binding\n    this._binding = this._rebind(binding)\n    return this._binding\n  }\n\n  bind () {\n    if (this._binding) return this._binding\n    this._binding = this._bindSockets()\n    return this._binding\n  }\n\n  async _bindSockets () {\n    const serverSocket = this.udx.createSocket()\n\n    const candidatePorts = []\n\n    // Retrying previous port always has precedence\n    if (this._boundServerPort) candidatePorts.push(this._boundServerPort)\n\n    for (let i = this.portRange[0]; i < this.portRange[1]; i++) candidatePorts.push(i)\n\n    for (const port of candidatePorts) {\n      if (serverSocket.bound) break\n\n      try {\n        serverSocket.bind(port, this._host)\n      } catch (err) {\n        if (!this._anyPort) {\n          await serverSocket.close()\n          throw err\n        }\n      }\n    }\n\n    if (!serverSocket.bound) {\n      try {\n        serverSocket.bind(0, this._host)\n      } catch (err) {\n        await serverSocket.close()\n        throw err\n      }\n    }\n\n    const clientSocket = this.udx.createSocket()\n\n    try {\n      clientSocket.bind(this._boundClientPort || 0, this._host)\n    } catch {\n      try {\n        clientSocket.bind(0, this._host)\n      } catch (err) {\n        await serverSocket.close()\n        await clientSocket.close()\n        throw err\n      }\n    }\n\n    this._boundServerPort = serverSocket.address().port\n    this._boundClientPort = clientSocket.address().port\n\n    this.clientSocket = clientSocket\n    this.serverSocket = serverSocket\n\n    this.serverSocket.on('message', this.onmessage.bind(this, this.serverSocket))\n    this.clientSocket.on('message', this.onmessage.bind(this, this.clientSocket))\n\n    if (this._drainInterval === null) {\n      this._drainInterval = setInterval(this._drain.bind(this), 750)\n      if (this._drainInterval.unref) this._drainInterval.unref()\n    }\n\n    for (const req of this.inflight) {\n      if (!req.socket) req.socket = this.firewalled ? this.clientSocket : this.serverSocket\n      req.sent = 0\n      req.send(false)\n    }\n  }\n\n  _drain () {\n    if (this._secrets !== null && --this._rotateSecrets === 0) {\n      this._rotateSecrets = 10\n      const tmp = this._secrets[0]\n      this._secrets[0] = this._secrets[1]\n      this._secrets[1] = tmp\n      sodium.crypto_generichash(tmp, tmp)\n    }\n\n    this.congestion.drain()\n\n    while (!this.congestion.isFull()) {\n      const p = this._pending.shift()\n      if (p === undefined) return\n      p._sendNow()\n    }\n  }\n\n  createRequest (to, token, internal, command, target, value, session, ttl) {\n    if (this._destroying !== null) return null\n\n    if (this._tid === 65536) this._tid = 0\n\n    const tid = this._tid++\n    const socket = this.firewalled ? this.clientSocket : this.serverSocket\n\n    const req = new Request(this, socket, tid, null, to, token, internal, command, target, value, session, ttl || 0)\n    this.inflight.push(req)\n    if (session) session._attach(req)\n\n    if (internal && command < this.stats.commands.length) {\n      this.stats.commands[command].tx++\n    }\n\n    return req\n  }\n}\n\nclass Request {\n  constructor (io, socket, tid, from, to, token, internal, command, target, value, session, ttl) {\n    this.socket = socket\n    this.tid = tid\n    this.from = from\n    this.to = to\n    this.token = token\n    this.command = command\n    this.target = target\n    this.value = value\n    this.internal = internal\n    this.session = session\n    this.ttl = ttl\n    this.index = -1\n    this.sent = 0\n    this.retries = 3\n    this.destroyed = false\n\n    this.oncycle = noop\n    this.onerror = noop\n    this.onresponse = noop\n\n    this._buffer = null\n    this._io = io\n    this._timeout = null\n    this._timestamp = Date.now()\n  }\n\n  static decode (io, socket, from, state) {\n    try {\n      const flags = c.uint.decode(state)\n      const tid = c.uint16.decode(state)\n      const to = peer.ipv4.decode(state)\n      const id = flags & 1 ? c.fixed32.decode(state) : null\n      const token = flags & 2 ? c.fixed32.decode(state) : null\n      const internal = (flags & 4) !== 0\n      const command = c.uint.decode(state)\n      const target = flags & 8 ? c.fixed32.decode(state) : null\n      const value = flags & 16 ? c.buffer.decode(state) : null\n\n      if (id !== null) from.id = validateId(id, from)\n\n      return new Request(io, socket, tid, from, to, token, internal, command, target, value, null, 0)\n    } catch {\n      return null\n    }\n  }\n\n  reply (value, opts = {}) {\n    const socket = opts.socket || this.socket\n    const to = opts.to || this.from\n    this._sendReply(0, value || null, opts.token !== false, opts.closerNodes !== false, to, socket)\n  }\n\n  error (code, opts = {}) {\n    const socket = opts.socket || this.socket\n    const to = opts.to || this.from\n    this._sendReply(code, null, opts.token === true, opts.closerNodes !== false, to, socket)\n  }\n\n  relay (value, to, opts) {\n    const socket = (opts && opts.socket) || this.socket\n    const buffer = this._encodeRequest(null, value, to, socket)\n    socket.trySend(buffer, to.port, to.host, this.ttl)\n  }\n\n  send (force = false) {\n    if (this.destroyed) return\n\n    if (this.socket === null) return\n    if (this._buffer === null) this._buffer = this._encodeRequest(this.token, this.value, this.to, this.socket)\n\n    if (!force && this._io.congestion.isFull()) {\n      this._io._pending.push(this)\n      return\n    }\n\n    this._sendNow()\n  }\n\n  sendReply (error, value, token, hasCloserNodes) {\n    this._sendReply(error, value, token, hasCloserNodes, this.from, this.socket, null)\n  }\n\n  _sendNow () {\n    if (this.destroyed) return\n    this.sent++\n    this._io.congestion.send()\n    this.socket.trySend(this._buffer, this.to.port, this.to.host, this.ttl)\n    if (this._timeout) clearTimeout(this._timeout)\n    this._timeout = setTimeout(oncycle, 1000, this)\n  }\n\n  destroy (err) {\n    if (this.destroyed) return\n    this.destroyed = true\n\n    if (this._timeout) {\n      clearTimeout(this._timeout)\n      this._timeout = null\n    }\n\n    const i = this._io.inflight.indexOf(this)\n    if (i === -1) return\n\n    if (i === this._io.inflight.length - 1) this._io.inflight.pop()\n    else this._io.inflight[i] = this._io.inflight.pop()\n\n    if (this.session) this.session._detach(this)\n\n    this.onerror(err || REQUEST_DESTROYED(), this)\n  }\n\n  _sendReply (error, value, token, hasCloserNodes, from, socket) {\n    if (socket === null || this.destroyed) return\n\n    const id = this._io.ephemeral === false && socket === this._io.serverSocket\n    const closerNodes = (this.target !== null && hasCloserNodes) ? this._io.table.closest(this.target) : EMPTY_ARRAY\n    const state = { start: 0, end: 1 + 1 + 6 + 2, buffer: null } // (type | version) + flags + to + tid\n\n    if (id) state.end += 32\n    if (token) state.end += 32\n    if (closerNodes.length > 0) peer.ipv4Array.preencode(state, closerNodes)\n    if (error > 0) c.uint.preencode(state, error)\n    if (value) c.buffer.preencode(state, value)\n\n    state.buffer = b4a.allocUnsafe(state.end)\n    state.buffer[state.start++] = RESPONSE_ID\n    state.buffer[state.start++] = (id ? 1 : 0) | (token ? 2 : 0) | (closerNodes.length > 0 ? 4 : 0) | (error > 0 ? 8 : 0) | (value ? 16 : 0)\n\n    c.uint16.encode(state, this.tid)\n    peer.ipv4.encode(state, from)\n\n    if (id) c.fixed32.encode(state, this._io.table.id)\n    if (token) c.fixed32.encode(state, this._io.token(from, 1))\n    if (closerNodes.length > 0) peer.ipv4Array.encode(state, closerNodes)\n    if (error > 0) c.uint.encode(state, error)\n    if (value) c.buffer.encode(state, value)\n\n    socket.trySend(state.buffer, from.port, from.host, this.ttl)\n  }\n\n  _encodeRequest (token, value, to, socket) {\n    const id = this._io.ephemeral === false && socket === this._io.serverSocket\n    const state = { start: 0, end: 1 + 1 + 6 + 2, buffer: null } // (type | version) + flags + to + tid\n\n    if (id) state.end += 32\n    if (token) state.end += 32\n\n    c.uint.preencode(state, this.command)\n\n    if (this.target) state.end += 32\n    if (value) c.buffer.preencode(state, value)\n\n    state.buffer = b4a.allocUnsafe(state.end)\n    state.buffer[state.start++] = REQUEST_ID\n    state.buffer[state.start++] = (id ? 1 : 0) | (token ? 2 : 0) | (this.internal ? 4 : 0) | (this.target ? 8 : 0) | (value ? 16 : 0)\n\n    c.uint16.encode(state, this.tid)\n    peer.ipv4.encode(state, to)\n\n    if (id) c.fixed32.encode(state, this._io.table.id)\n    if (token) c.fixed32.encode(state, token)\n\n    c.uint.encode(state, this.command)\n\n    if (this.target) c.fixed32.encode(state, this.target)\n    if (value) c.buffer.encode(state, value)\n\n    return state.buffer\n  }\n}\n\nclass CongestionWindow {\n  constructor (maxWindow) {\n    this._i = 0\n    this._total = 0\n    this._window = [0, 0, 0, 0]\n    this._maxWindow = maxWindow\n  }\n\n  isFull () {\n    return this._total >= 2 * this._maxWindow || this._window[this._i] >= this._maxWindow\n  }\n\n  recv () {\n    if (this._window[this._i] > 0) {\n      this._window[this._i]--\n      this._total--\n    }\n  }\n\n  send () {\n    this._total++\n    this._window[this._i]++\n  }\n\n  drain () {\n    this._i = (this._i + 1) & 3\n    this._total -= this._window[this._i]\n    this._window[this._i] = 0 // clear oldest\n  }\n}\n\nfunction noop () {}\n\nfunction oncycle (req) {\n  req._timeout = null\n  req.oncycle(req)\n  if (req.sent >= req.retries) {\n    req.destroy(REQUEST_TIMEOUT())\n    req._io.ontimeout(req)\n  } else {\n    req.send()\n  }\n}\n\nfunction decodeReply (from, state) {\n  try {\n    const flags = c.uint.decode(state)\n    const tid = c.uint16.decode(state)\n    const to = peer.ipv4.decode(state)\n    const id = flags & 1 ? c.fixed32.decode(state) : null\n    const token = flags & 2 ? c.fixed32.decode(state) : null\n    const closerNodes = flags & 4 ? peer.ipv4Array.decode(state) : null\n    const error = flags & 8 ? c.uint.decode(state) : 0\n    const value = flags & 16 ? c.buffer.decode(state) : null\n\n    if (id !== null) from.id = validateId(id, from)\n\n    return { tid, rtt: 0, from, to, token, closerNodes, error, value }\n  } catch {\n    return null\n  }\n}\n\nfunction validateId (id, from) {\n  const expected = peer.id(from.host, from.port)\n  return b4a.equals(expected, id) ? expected : null\n}\nconst sodium = require('sodium-universal')\nconst c = require('compact-encoding')\nconst net = require('compact-encoding-net')\nconst b4a = require('b4a')\n\nconst ipv4 = {\n  ...net.ipv4Address,\n  decode (state) {\n    const ip = net.ipv4Address.decode(state)\n    return {\n      id: null, // populated by the callee\n      host: ip.host,\n      port: ip.port\n    }\n  }\n}\n\nmodule.exports = { id, ipv4, ipv4Array: c.array(ipv4) }\n\nfunction id (host, port, out = b4a.allocUnsafeSlow(32)) {\n  const addr = out.subarray(0, 6)\n  ipv4.encode(\n    { start: 0, end: 6, buffer: addr },\n    { host, port }\n  )\n  sodium.crypto_generichash(out, addr)\n  return out\n}\nconst { Readable } = require('streamx')\nconst b4a = require('b4a')\nconst peer = require('./peer')\nconst { DOWN_HINT } = require('./commands')\n\nconst DONE = []\nconst DOWN = []\n\nmodule.exports = class Query extends Readable {\n  constructor (dht, target, internal, command, value, opts = {}) {\n    super()\n\n    dht.stats.queries.total++\n    dht.stats.queries.active++\n\n    this.dht = dht\n    this.k = this.dht.table.k\n    this.target = target\n    this.internal = internal\n    this.command = command\n    this.value = value\n    this.errors = 0\n    this.successes = 0\n    this.concurrency = opts.concurrency || this.dht.concurrency\n    this.inflight = 0\n    this.map = opts.map || defaultMap\n    this.maxSlow = opts.maxSlow === 0 ? 0 : (opts.maxSlow || 5)\n    this.closestReplies = []\n\n    this._slow = 0\n    this._online = false\n    this._slowdown = false\n    this._seen = new Map()\n    this._pending = []\n    this._fromTable = false\n    this._commit = opts.commit === true ? autoCommit : (opts.commit || null)\n    this._commiting = false\n    this._session = opts.session || dht.session()\n    this._autoDestroySession = !opts.session\n    this._onlyClosestNodes = false\n\n    this._onvisitbound = this._onvisit.bind(this)\n    this._onerrorbound = this._onerror.bind(this)\n    this._oncyclebound = this._oncycle.bind(this)\n\n    const nodes = opts.nodes || opts.closestNodes\n    const replies = opts.replies || opts.closestReplies\n\n    // add them reverse as we pop below\n    if (nodes) {\n      for (let i = nodes.length - 1; i >= 0; i--) {\n        const node = nodes[i]\n        this._addPending({ id: node.id || peer.id(node.host, node.port), host: node.host, port: node.port }, null)\n      }\n    } else if (replies) {\n      for (let i = replies.length - 1; i >= 0; i--) {\n        this._addPending(replies[i].from, null)\n      }\n    }\n\n    if (opts.onlyClosestNodes) this._onlyClosestNodes = true\n  }\n\n  get closestNodes () {\n    const nodes = new Array(this.closestReplies.length)\n\n    for (let i = 0; i < nodes.length; i++) {\n      nodes[i] = this.closestReplies[i].from\n    }\n\n    return nodes\n  }\n\n  finished () {\n    return new Promise((resolve, reject) => {\n      const self = this\n      let error = null\n\n      this.resume()\n      this.on('error', onerror)\n      this.on('close', onclose)\n\n      function onclose () {\n        self.removeListener('error', onerror)\n        self.removeListener('close', onclose)\n        if (error) reject(error)\n        else resolve()\n      }\n\n      function onerror (err) {\n        error = err\n      }\n    })\n  }\n\n  _addFromTable () {\n    if (this._pending.length >= this.k) return\n    this._fromTable = true\n\n    const closest = this.dht.table.closest(this.target, this.k - this._pending.length)\n\n    for (const node of closest) {\n      this._addPending({ id: node.id, host: node.host, port: node.port }, null)\n    }\n  }\n\n  async _open (cb) {\n    this._addFromTable()\n    if (this._pending.length >= this.k) return cb(null)\n\n    for await (const node of this.dht._resolveBootstrapNodes()) {\n      this._addPending(node, null)\n    }\n\n    cb(null)\n  }\n\n  _isCloser (id) {\n    return this.closestReplies.length < this.k || this._compare(id, this.closestReplies[this.closestReplies.length - 1].from.id) < 0\n  }\n\n  _addPending (node, ref) {\n    if (this._onlyClosestNodes) return false\n\n    const addr = node.host + ':' + node.port\n    const refs = this._seen.get(addr)\n    const isCloser = this._isCloser(node.id)\n\n    if (refs === DONE) {\n      return isCloser\n    }\n\n    if (refs === DOWN) {\n      if (ref) this._downHint(ref, node)\n      return isCloser\n    }\n\n    if (refs) {\n      if (ref !== null) refs.push(ref)\n      return isCloser\n    }\n\n    if (!isCloser) {\n      return false\n    }\n\n    this._seen.set(addr, ref === null ? [] : [ref])\n    this._pending.push(node)\n\n    return true\n  }\n\n  _read (cb) {\n    this._readMore()\n    cb(null)\n  }\n\n  _readMore () {\n    if (this.destroying || this._commiting) return\n\n    const concurrency = (this._slowdown ? 3 : this.concurrency) + this._slow\n\n    while (this.inflight < concurrency && this._pending.length > 0) {\n      const next = this._pending.pop()\n      if (next && next.id && !this._isCloser(next.id)) continue\n      this._visit(next)\n    }\n\n    // if reusing closest nodes, slow down after the first readMore tick to allow\n    // the closest node a chance to reply before going broad to question more\n    if (!this._fromTable && this.successes === 0 && this.errors === 0) {\n      this._slowdown = true\n    }\n\n    if (this._pending.length > 0) return\n\n    // if no inflight OR all the queries we are waiting on are marked as slow (within our limits) and we have a full result.\n    if (this.inflight === 0 || (this._slow <= this.maxSlow && this._slow === this.inflight && this.closestReplies.length >= this.k)) {\n      // if more than 3/4 failed and we only used cached nodes, try again from the routing table\n      if (!this._fromTable && this.successes < this.k / 4) {\n        this._addFromTable()\n        this._readMore()\n        return\n      }\n\n      this._flush()\n    }\n  }\n\n  _flush () {\n    if (this._commiting) return\n    this._commiting = true\n\n    if (this._commit === null) {\n      this.push(null)\n      return\n    }\n\n    const p = []\n    for (const m of this.closestReplies) p.push(this._commit(m, this.dht, this))\n    this._endAfterCommit(p)\n  }\n\n  _endAfterCommit (ps) {\n    if (!ps.length) {\n      this.destroy(new Error('Too few nodes responded'))\n      return\n    }\n\n    const self = this\n\n    let pending = ps.length\n    let success = 0\n\n    for (const p of ps) p.then(ondone, onerror)\n\n    function ondone () {\n      success++\n      if (--pending === 0) self.push(null)\n    }\n\n    function onerror (err) {\n      if (--pending > 0) return\n      if (success) self.push(null)\n      else self.destroy(err)\n    }\n  }\n\n  _dec (req) {\n    if (req.oncycle === noop) {\n      this._slow--\n    } else {\n      req.oncycle = noop\n    }\n    this.inflight--\n  }\n\n  _onvisit (m, req) {\n    this._dec(req)\n\n    this._online = true\n    if (!this.dht.online) this.dht._online()\n\n    const addr = req.to.host + ':' + req.to.port\n    this._seen.set(addr, DONE)\n\n    if (this._commiting) return\n\n    if (m.error === 0) this.successes++\n    else this.errors++\n\n    if (m.error === 0 && m.from.id !== null && this._isCloser(m.from.id)) this._pushClosest(m)\n\n    if (m.closerNodes !== null) {\n      for (const node of m.closerNodes) {\n        node.id = peer.id(node.host, node.port)\n        if (this.dht._filterNode !== null && !this.dht._filterNode(node)) continue\n        if (b4a.equals(node.id, this.dht.table.id)) continue\n        // TODO: we could continue here instead of breaking to ensure that one of the nodes in the closer list\n        // is later marked as DOWN that we gossip that back\n        if (!this._addPending(node, m.from)) break\n      }\n    }\n\n    if (!this._fromTable && this.successes + this.errors >= this.concurrency) {\n      this._slowdown = false\n    }\n\n    if (m.error !== 0) {\n      this._readMore()\n      return\n    }\n\n    const data = this.map(m)\n    if (!data || this.push(data) !== false) {\n      this._readMore()\n    }\n  }\n\n  _onerror (err, req) {\n    const addr = req.to.host + ':' + req.to.port\n    const refs = this._seen.get(addr)\n\n    if (err.code === 'REQUEST_TIMEOUT') {\n      this._seen.set(addr, DOWN)\n      for (const node of refs) this._downHint(node, req.to)\n    }\n\n    this._dec(req)\n    this.errors++\n    this._readMore()\n  }\n\n  _oncycle (req) {\n    req.oncycle = noop\n    this._slow++\n    this._readMore()\n  }\n\n  _downHint (node, down) {\n    const state = { start: 0, end: 6, buffer: b4a.allocUnsafe(6) }\n    peer.ipv4.encode(state, down)\n    this.dht._request(node, true, DOWN_HINT, null, state.buffer, this._session, noop, noop)\n  }\n\n  _pushClosest (m) {\n    this.closestReplies.push(m)\n    for (let i = this.closestReplies.length - 2; i >= 0; i--) {\n      const prev = this.closestReplies[i]\n      const cmp = this._compare(prev.from.id, m.from.id)\n      // if sorted, done!\n      if (cmp < 0) break\n      // if dup, splice it out (rare)\n      if (cmp === 0) {\n        this.closestReplies.splice(i + 1, 1)\n        break\n      }\n      // swap and continue down\n      this.closestReplies[i + 1] = prev\n      this.closestReplies[i] = m\n    }\n    if (this.closestReplies.length > this.k) this.closestReplies.pop()\n  }\n\n  _compare (a, b) {\n    for (let i = 0; i < a.length; i++) {\n      if (a[i] === b[i]) continue\n      const t = this.target[i]\n      return (t ^ a[i]) - (t ^ b[i])\n    }\n    return 0\n  }\n\n  _visit (to) {\n    this.inflight++\n\n    const req = this.dht._request(to, this.internal, this.command, this.target, this.value, this._session, this._onvisitbound, this._onerrorbound)\n    if (req === null) {\n      this.destroy(new Error('Node was destroyed'))\n      return\n    }\n    req.oncycle = this._oncyclebound\n  }\n\n  _destroy (cb) {\n    this.dht.stats.queries.active--\n    if (!this._online && this.dht.online) this.dht._offline()\n    if (this._autoDestroySession) this._session.destroy()\n    cb(null)\n  }\n}\n\nfunction autoCommit (reply, dht, query) {\n  if (!reply.token) return Promise.reject(new Error('No token received for closest node'))\n  return dht.request({ token: reply.token, target: query.target, command: query.command, value: query.value }, reply.from)\n}\n\nfunction defaultMap (m) {\n  return m\n}\n\nfunction noop () {}\nmodule.exports = class Session {\n  constructor (dht) {\n    this.dht = dht\n    this.inflight = []\n  }\n\n  _attach (req) {\n    req.index = this.inflight.push(req) - 1\n  }\n\n  _detach (req) {\n    const i = req.index\n    if (i === -1) return\n    req.index = -1\n\n    if (i === this.inflight.length - 1) this.inflight.pop()\n    else {\n      const req = this.inflight[i] = this.inflight.pop()\n      req.index = i\n    }\n  }\n\n  query ({ target, command, value }, opts = {}) {\n    return this.dht.query({ target, command, value }, { ...opts, session: this })\n  }\n\n  request ({ token, command, target, value }, { host, port }, opts = {}) {\n    return this.dht.request({ token, command, target, value }, { host, port }, { ...opts, session: this })\n  }\n\n  ping ({ host, port }, opts = {}) {\n    return this.dht.ping({ host, port }, { ...opts, session: this })\n  }\n\n  destroy (err) {\n    while (this.inflight.length) {\n      const req = this.inflight[0]\n      // prevent destroyed requests from contributing to congestion counts\n      this.dht.io.congestion.recv()\n      req.destroy(err)\n    }\n  }\n}\n{\n  \"name\": \"dht-rpc\",\n  \"version\": \"6.17.0\",\n  \"description\": \"Make RPC calls over a Kademlia based DHT\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"lib/*.js\"\n  ],\n  \"imports\": {\n    \"events\": {\n      \"bare\": \"bare-events\",\n      \"default\": \"events\"\n    }\n  },\n  \"dependencies\": {\n    \"b4a\": \"^1.6.1\",\n    \"bare-events\": \"^2.2.0\",\n    \"compact-encoding\": \"^2.11.0\",\n    \"compact-encoding-net\": \"^1.2.0\",\n    \"fast-fifo\": \"^1.1.0\",\n    \"kademlia-routing-table\": \"^1.0.1\",\n    \"nat-sampler\": \"^1.0.1\",\n    \"sodium-universal\": \"^4.0.0\",\n    \"streamx\": \"^2.13.2\",\n    \"time-ordered-set\": \"^2.0.0\",\n    \"udx-native\": \"^1.5.3\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.0.0\",\n    \"standard\": \"^17.0.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/dht-rpc.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/dht-rpc/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/dht-rpc\"\n}\nmodule.exports = class FixedFIFO {\n  constructor (hwm) {\n    if (!(hwm > 0) || ((hwm - 1) & hwm) !== 0) throw new Error('Max size for a FixedFIFO should be a power of two')\n    this.buffer = new Array(hwm)\n    this.mask = hwm - 1\n    this.top = 0\n    this.btm = 0\n    this.next = null\n  }\n\n  clear () {\n    this.top = this.btm = 0\n    this.next = null\n    this.buffer.fill(undefined)\n  }\n\n  push (data) {\n    if (this.buffer[this.top] !== undefined) return false\n    this.buffer[this.top] = data\n    this.top = (this.top + 1) & this.mask\n    return true\n  }\n\n  shift () {\n    const last = this.buffer[this.btm]\n    if (last === undefined) return undefined\n    this.buffer[this.btm] = undefined\n    this.btm = (this.btm + 1) & this.mask\n    return last\n  }\n\n  peek () {\n    return this.buffer[this.btm]\n  }\n\n  isEmpty () {\n    return this.buffer[this.btm] === undefined\n  }\n}\nconst FixedFIFO = require('./fixed-size')\n\nmodule.exports = class FastFIFO {\n  constructor (hwm) {\n    this.hwm = hwm || 16\n    this.head = new FixedFIFO(this.hwm)\n    this.tail = this.head\n    this.length = 0\n  }\n\n  clear () {\n    this.head = this.tail\n    this.head.clear()\n    this.length = 0\n  }\n\n  push (val) {\n    this.length++\n    if (!this.head.push(val)) {\n      const prev = this.head\n      this.head = prev.next = new FixedFIFO(2 * this.head.buffer.length)\n      this.head.push(val)\n    }\n  }\n\n  shift () {\n    if (this.length !== 0) this.length--\n    const val = this.tail.shift()\n    if (val === undefined && this.tail.next) {\n      const next = this.tail.next\n      this.tail.next = null\n      this.tail = next\n      return this.tail.shift()\n    }\n\n    return val\n  }\n\n  peek () {\n    const val = this.tail.peek()\n    if (val === undefined && this.tail.next) return this.tail.next.peek()\n    return val\n  }\n\n  isEmpty () {\n    return this.length === 0\n  }\n}\n{\n  \"name\": \"fast-fifo\",\n  \"version\": \"1.3.2\",\n  \"description\": \"A fast fifo implementation similar to the one powering nextTick in Node.js core\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"./index.js\",\n    \"./fixed-size.js\"\n  ],\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"standard\": \"^17.1.0\",\n    \"brittle\": \"^3.3.2\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/fast-fifo.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/fast-fifo/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/fast-fifo\"\n}\nexports.fullRoots = function (index, result) {\n  if (index & 1) throw new Error('You can only look up roots for depth(0) blocks')\n  if (!result) result = []\n\n  index /= 2\n\n  let offset = 0\n  let factor = 1\n\n  while (true) {\n    if (!index) return result\n    while (factor * 2 <= index) factor *= 2\n    result.push(offset + factor - 1)\n    offset = offset + 2 * factor\n    index -= factor\n    factor = 1\n  }\n}\n\nexports.futureRoots = function (index, result) {\n  if (index & 1) throw new Error('You can only look up future roots for depth(0) blocks')\n  if (!result) result = []\n\n  let factor = 1\n\n  // make first root\n  while (factor * 2 <= index) factor *= 2\n\n  // full factor of 2 - done\n  if (factor * 2 - 2 === index) return result\n\n  let pos = factor / 2 - 1\n\n  // while its not a full tree\n  while ((pos + factor / 2 - 1) !== index) {\n    pos += factor\n\n    // read too far, to to left child\n    while ((pos + factor / 2 - 1) > index) {\n      factor /= 2\n      pos -= factor / 2\n    }\n\n    // the \"gap\" is a future root\n    result.push(pos - factor / 2)\n  }\n\n  return result\n}\n\nexports.patch = function (from, to) {\n  if (from === 0 || from >= to) return []\n\n  const roots = exports.fullRoots(from)\n  const target = exports.fullRoots(to)\n\n  // first find the first root that is different\n\n  let i = 0\n  for (; i < target.length; i++) {\n    if (i >= roots.length || roots[i] !== target[i]) break\n  }\n\n  const patch = []\n\n  if (i < roots.length) {\n    // now we need to grow the newest root until it hits the diff one\n    let prev = roots.length - 1\n\n    const ite = exports.iterator(roots[prev--])\n\n    while (ite.index !== target[i]) {\n      ite.sibling()\n\n      if (prev >= 0 && ite.index === roots[prev]) {\n        prev--\n      } else {\n        patch.push(ite.index)\n      }\n\n      patch.push(ite.parent())\n    }\n\n    i++ // patched to next root, so inc\n  }\n\n  // include the rest\n\n  for (; i < target.length; i++) patch.push(target[i])\n\n  return patch\n}\n\nexports.depth = function (index) {\n  let depth = 0\n\n  index += 1\n  while (!(index & 1)) {\n    depth++\n    index = rightShift(index)\n  }\n\n  return depth\n}\n\nexports.sibling = function (index, depth) {\n  if (!depth) depth = exports.depth(index)\n  const offset = exports.offset(index, depth)\n\n  return exports.index(depth, offset & 1 ? offset - 1 : offset + 1)\n}\n\nexports.parent = function (index, depth) {\n  if (!depth) depth = exports.depth(index)\n  const offset = exports.offset(index, depth)\n\n  return exports.index(depth + 1, rightShift(offset))\n}\n\nexports.leftChild = function (index, depth) {\n  if (!(index & 1)) return -1\n  if (!depth) depth = exports.depth(index)\n  return exports.index(depth - 1, exports.offset(index, depth) * 2)\n}\n\nexports.rightChild = function (index, depth) {\n  if (!(index & 1)) return -1\n  if (!depth) depth = exports.depth(index)\n  return exports.index(depth - 1, 1 + (exports.offset(index, depth) * 2))\n}\n\nexports.children = function (index, depth) {\n  if (!(index & 1)) return null\n\n  if (!depth) depth = exports.depth(index)\n  const offset = exports.offset(index, depth) * 2\n\n  return [\n    exports.index(depth - 1, offset),\n    exports.index(depth - 1, offset + 1)\n  ]\n}\n\nexports.leftSpan = function (index, depth) {\n  if (!(index & 1)) return index\n  if (!depth) depth = exports.depth(index)\n  return exports.offset(index, depth) * twoPow(depth + 1)\n}\n\nexports.rightSpan = function (index, depth) {\n  if (!(index & 1)) return index\n  if (!depth) depth = exports.depth(index)\n  return (exports.offset(index, depth) + 1) * twoPow(depth + 1) - 2\n}\n\nexports.nextLeaf = function (index) {\n  let factor = 1\n  let r = index\n\n  while ((r & 1) === 1) {\n    r = (r - 1) / 2\n    factor *= 2\n  }\n\n  return index + factor + 1\n}\n\nexports.count = function (index, depth) {\n  if (!(index & 1)) return 1\n  if (!depth) depth = exports.depth(index)\n  return twoPow(depth + 1) - 1\n}\n\nexports.countLeaves = function (index) {\n  return (exports.count(index) + 1) / 2\n}\n\nexports.spans = function (index, depth) {\n  if (!(index & 1)) return [index, index]\n  if (!depth) depth = exports.depth(index)\n\n  const offset = exports.offset(index, depth)\n  const width = twoPow(depth + 1)\n\n  return [offset * width, (offset + 1) * width - 2]\n}\n\nexports.index = function (depth, offset) {\n  return (1 + 2 * offset) * twoPow(depth) - 1\n}\n\nexports.offset = function (index, depth) {\n  if (!(index & 1)) return index / 2\n  if (!depth) depth = exports.depth(index)\n\n  return ((index + 1) / twoPow(depth) - 1) / 2\n}\n\nexports.iterator = function (index) {\n  const ite = new Iterator()\n  ite.seek(index || 0)\n  return ite\n}\n\nfunction twoPow (n) {\n  return n < 31 ? 1 << n : ((1 << 30) * (1 << (n - 30)))\n}\n\nfunction rightShift (n) {\n  return (n - (n & 1)) / 2\n}\n\nfunction Iterator () {\n  this.index = 0\n  this.offset = 0\n  this.factor = 0\n}\n\nIterator.prototype.seek = function (index) {\n  this.index = index\n  if (this.index & 1) {\n    this.offset = exports.offset(index)\n    this.factor = twoPow(exports.depth(index) + 1)\n  } else {\n    this.offset = index / 2\n    this.factor = 2\n  }\n}\n\nIterator.prototype.isLeft = function () {\n  return (this.offset & 1) === 0\n}\n\nIterator.prototype.isRight = function () {\n  return (this.offset & 1) === 1\n}\n\nIterator.prototype.contains = function (index) {\n  return index > this.index\n    ? index < (this.index + this.factor / 2)\n    : index < this.index\n      ? index > (this.index - this.factor / 2)\n      : true\n}\n\nIterator.prototype.prev = function () {\n  if (!this.offset) return this.index\n  this.offset--\n  this.index -= this.factor\n  return this.index\n}\n\nIterator.prototype.next = function () {\n  this.offset++\n  this.index += this.factor\n  return this.index\n}\n\nIterator.prototype.count = function () {\n  if (!(this.index & 1)) return 1\n  return this.factor - 1\n}\n\nIterator.prototype.countLeaves = function () {\n  return (this.count() + 1) / 2\n}\n\nIterator.prototype.sibling = function () {\n  return this.isLeft() ? this.next() : this.prev()\n}\n\nIterator.prototype.parent = function () {\n  if (this.offset & 1) {\n    this.index -= this.factor / 2\n    this.offset = (this.offset - 1) / 2\n  } else {\n    this.index += this.factor / 2\n    this.offset /= 2\n  }\n  this.factor *= 2\n  return this.index\n}\n\nIterator.prototype.leftSpan = function () {\n  this.index = this.index - this.factor / 2 + 1\n  this.offset = this.index / 2\n  this.factor = 2\n  return this.index\n}\n\nIterator.prototype.rightSpan = function () {\n  this.index = this.index + this.factor / 2 - 1\n  this.offset = this.index / 2\n  this.factor = 2\n  return this.index\n}\n\nIterator.prototype.leftChild = function () {\n  if (this.factor === 2) return this.index\n  this.factor /= 2\n  this.index -= this.factor / 2\n  this.offset *= 2\n  return this.index\n}\n\nIterator.prototype.rightChild = function () {\n  if (this.factor === 2) return this.index\n  this.factor /= 2\n  this.index += this.factor / 2\n  this.offset = 2 * this.offset + 1\n  return this.index\n}\n\nIterator.prototype.nextTree = function () {\n  this.index = this.index + this.factor / 2 + 1\n  this.offset = this.index / 2\n  this.factor = 2\n  return this.index\n}\n\nIterator.prototype.prevTree = function () {\n  if (!this.offset) {\n    this.index = 0\n    this.factor = 2\n  } else {\n    this.index = this.index - this.factor / 2 - 1\n    this.offset = this.index / 2\n    this.factor = 2\n  }\n  return this.index\n}\n\nIterator.prototype.fullRoot = function (index) {\n  if (index <= this.index || (this.index & 1) > 0) return false\n  while (index > this.index + this.factor + this.factor / 2) {\n    this.index += this.factor / 2\n    this.factor *= 2\n    this.offset /= 2\n  }\n  return true\n}\n{\n  \"name\": \"flat-tree\",\n  \"version\": \"1.12.1\",\n  \"description\": \"A series of functions to map a binary tree to a list\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"brittle\": \"^3.3.2\",\n    \"standard\": \"^17.1.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/flat-tree.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/flat-tree/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/flat-tree\"\n}\nrequire.addon = require('require-addon')\n\nmodule.exports = require.addon('.', __filename)\nconst { isWindows } = require('which-runtime')\nconst binding = require('./binding')\n\nfunction onwork(err, result) {\n  if (err) this.reject(err)\n  else this.resolve(result)\n}\n\nexports.tryLock = function tryLock(fd, offset = 0, length = 0, opts = {}) {\n  if (typeof offset === 'object') {\n    opts = offset\n    offset = 0\n  }\n\n  if (typeof length === 'object') {\n    opts = length\n    length = 0\n  }\n\n  if (typeof opts !== 'object') {\n    opts = {}\n  }\n\n  try {\n    binding.fs_ext_napi_try_lock(fd, offset, length, opts.shared ? 0 : 1)\n  } catch (err) {\n    if (err.code === 'EAGAIN') return false\n    throw err\n  }\n\n  return true\n}\n\nexports.waitForLock = function waitForLock(\n  fd,\n  offset = 0,\n  length = 0,\n  opts = {}\n) {\n  if (typeof offset === 'object') {\n    opts = offset\n    offset = 0\n  }\n\n  if (typeof length === 'object') {\n    opts = length\n    length = 0\n  }\n\n  if (typeof opts !== 'object') {\n    opts = {}\n  }\n\n  const req = Buffer.alloc(binding.sizeof_fs_ext_napi_lock_t)\n  const ctx = {\n    req,\n    resolve: null,\n    reject: null\n  }\n\n  const promise = new Promise((resolve, reject) => {\n    ctx.resolve = resolve\n    ctx.reject = reject\n  })\n\n  try {\n    binding.fs_ext_napi_wait_for_lock(\n      req,\n      fd,\n      offset,\n      length,\n      opts.shared ? 0 : 1,\n      ctx,\n      onwork\n    )\n  } catch (err) {\n    return Promise.reject(err)\n  }\n\n  return promise\n}\n\nexports.tryDowngradeLock = function tryDowngradeLock(\n  fd,\n  offset = 0,\n  length = 0\n) {\n  try {\n    binding.fs_ext_napi_try_downgrade_lock(fd, offset, length)\n  } catch (err) {\n    if (err.code === 'EAGAIN') return false\n    throw err\n  }\n\n  return true\n}\n\nexports.waitForDowngradeLock = function downgradeLock(\n  fd,\n  offset = 0,\n  length = 0\n) {\n  const req = Buffer.alloc(binding.sizeof_fs_ext_napi_lock_t)\n  const ctx = {\n    req,\n    resolve: null,\n    reject: null\n  }\n\n  const promise = new Promise((resolve, reject) => {\n    ctx.resolve = resolve\n    ctx.reject = reject\n  })\n\n  try {\n    binding.fs_ext_napi_wait_for_downgrade_lock(\n      req,\n      fd,\n      offset,\n      length,\n      ctx,\n      onwork\n    )\n  } catch (err) {\n    return Promise.reject(err)\n  }\n\n  return promise\n}\n\nexports.tryUpgradeLock = function tryUpgradeLock(fd, offset = 0, length = 0) {\n  try {\n    binding.fs_ext_napi_try_upgrade_lock(fd, offset, length)\n  } catch (err) {\n    if (err.code === 'EAGAIN') return false\n    throw err\n  }\n\n  return true\n}\n\nexports.waitForUpgradeLock = function upgradeLock(fd, offset = 0, length = 0) {\n  const req = Buffer.alloc(binding.sizeof_fs_ext_napi_lock_t)\n  const ctx = {\n    req,\n    resolve: null,\n    reject: null\n  }\n\n  const promise = new Promise((resolve, reject) => {\n    ctx.resolve = resolve\n    ctx.reject = reject\n  })\n\n  try {\n    binding.fs_ext_napi_wait_for_upgrade_lock(\n      req,\n      fd,\n      offset,\n      length,\n      ctx,\n      onwork\n    )\n  } catch (err) {\n    return Promise.reject(err)\n  }\n\n  return promise\n}\n\nexports.unlock = function unlock(fd, offset = 0, length = 0) {\n  binding.fs_ext_napi_unlock(fd, offset, length)\n}\n\nexports.trim = function trim(fd, offset, length) {\n  const req = Buffer.alloc(binding.sizeof_fs_ext_napi_trim_t)\n  const ctx = {\n    req,\n    resolve: null,\n    reject: null\n  }\n\n  const promise = new Promise((resolve, reject) => {\n    ctx.resolve = resolve\n    ctx.reject = reject\n  })\n\n  try {\n    binding.fs_ext_napi_trim(req, fd, offset, length, ctx, onwork)\n  } catch (err) {\n    return Promise.reject(err)\n  }\n\n  return promise\n}\n\nexports.sparse = function sparse(fd) {\n  // Short circuit on everything but Windows\n  if (!isWindows) return Promise.resolve()\n\n  const req = Buffer.alloc(binding.sizeof_fs_ext_napi_sparse_t)\n  const ctx = {\n    req,\n    resolve: null,\n    reject: null\n  }\n\n  const promise = new Promise((resolve, reject) => {\n    ctx.resolve = resolve\n    ctx.reject = reject\n  })\n\n  try {\n    binding.fs_ext_napi_sparse(req, fd, ctx, onwork)\n  } catch (err) {\n    return Promise.reject(err)\n  }\n\n  return promise\n}\n\nexports.swap = function swap(from, to) {\n  const req = Buffer.alloc(binding.sizeof_fs_ext_napi_swap_t)\n  const ctx = {\n    req,\n    resolve: null,\n    reject: null\n  }\n\n  const promise = new Promise((resolve, reject) => {\n    ctx.resolve = resolve\n    ctx.reject = reject\n  })\n\n  try {\n    binding.fs_ext_napi_swap(req, from, to, ctx, onwork)\n  } catch (err) {\n    return Promise.reject(err)\n  }\n\n  return promise\n}\n\nexports.getAttr = function getAttr(fd, name) {\n  const req = Buffer.alloc(binding.sizeof_fs_ext_napi_get_attr_t)\n  const ctx = {\n    req,\n    resolve: null,\n    reject: null\n  }\n\n  const promise = new Promise((resolve, reject) => {\n    ctx.resolve = resolve\n    ctx.reject = reject\n  })\n\n  try {\n    binding.fs_ext_napi_get_attr(req, fd, name, ctx, onwork)\n  } catch (err) {\n    return Promise.reject(err)\n  }\n\n  return promise.then((buffer) =>\n    buffer === null ? null : Buffer.from(buffer)\n  )\n}\n\nexports.setAttr = function setAttr(fd, name, value, encoding) {\n  if (typeof value === 'string') value = Buffer.from(value, encoding)\n\n  const req = Buffer.alloc(binding.sizeof_fs_ext_napi_set_attr_t)\n  const ctx = {\n    req,\n    value,\n    resolve: null,\n    reject: null\n  }\n\n  const promise = new Promise((resolve, reject) => {\n    ctx.resolve = resolve\n    ctx.reject = reject\n  })\n\n  try {\n    binding.fs_ext_napi_set_attr(req, fd, name, value, ctx, onwork)\n  } catch (err) {\n    return Promise.reject(err)\n  }\n\n  return promise\n}\n\nexports.removeAttr = function removeAttr(fd, name) {\n  const req = Buffer.alloc(binding.sizeof_fs_ext_napi_remove_attr_t)\n  const ctx = {\n    req,\n    resolve: null,\n    reject: null\n  }\n\n  const promise = new Promise((resolve, reject) => {\n    ctx.resolve = resolve\n    ctx.reject = reject\n  })\n\n  try {\n    binding.fs_ext_napi_remove_attr(req, fd, name, ctx, onwork)\n  } catch (err) {\n    return Promise.reject(err)\n  }\n\n  return promise\n}\n\nexports.listAttrs = function listAttrs(fd) {\n  const req = Buffer.alloc(binding.sizeof_fs_ext_napi_list_attrs_t)\n  const ctx = {\n    req,\n    resolve: null,\n    reject: null\n  }\n\n  const promise = new Promise((resolve, reject) => {\n    ctx.resolve = resolve\n    ctx.reject = reject\n  })\n\n  try {\n    binding.fs_ext_napi_list_attrs(req, fd, ctx, onwork)\n  } catch (err) {\n    return Promise.reject(err)\n  }\n\n  return promise\n}\n{\n  \"name\": \"fs-native-extensions\",\n  \"version\": \"1.4.2\",\n  \"description\": \"Native file system extensions for advanced file operations\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"macros.h\",\n    \"binding.c\",\n    \"binding.js\",\n    \"CMakeLists.txt\",\n    \"include\",\n    \"src\",\n    \"prebuilds\"\n  ],\n  \"imports\": {\n    \"child_process\": {\n      \"bare\": \"bare-subprocess\",\n      \"default\": \"child_process\"\n    },\n    \"fs\": {\n      \"bare\": \"bare-fs\",\n      \"default\": \"fs\"\n    },\n    \"fs/*\": {\n      \"bare\": \"bare-fs/*\",\n      \"default\": \"fs/*\"\n    },\n    \"path\": {\n      \"bare\": \"bare-path\",\n      \"default\": \"path\"\n    }\n  },\n  \"addon\": true,\n  \"scripts\": {\n    \"test\": \"npm run lint && npm run test:bare && npm run test:node\",\n    \"test:bare\": \"bare test.js\",\n    \"test:node\": \"node test.js\",\n    \"lint\": \"prettier . --check\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/fs-native-extensions.git\"\n  },\n  \"author\": \"Kasper Isager Dalsgarð <kasper@funktionel.co>\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/fs-native-extensions/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/fs-native-extensions#readme\",\n  \"dependencies\": {\n    \"require-addon\": \"^1.1.0\",\n    \"which-runtime\": \"^1.2.0\"\n  },\n  \"devDependencies\": {\n    \"bare-fs\": \"^3.0.2\",\n    \"bare-path\": \"^3.0.0\",\n    \"bare-subprocess\": \"^4.0.1\",\n    \"brittle\": \"^3.1.1\",\n    \"cmake-bare\": \"^1.1.10\",\n    \"cmake-napi\": \"^1.0.5\",\n    \"minimist\": \"^1.2.6\",\n    \"prettier\": \"^3.5.3\",\n    \"prettier-config-standard\": \"^7.0.0\",\n    \"test-tmp\": \"^1.2.1\"\n  }\n}\nconst codecs = require('codecs')\nconst { Readable } = require('streamx')\nconst mutexify = require('mutexify/promise')\nconst b4a = require('b4a')\nconst safetyCatch = require('safety-catch')\nconst ReadyResource = require('ready-resource')\nconst debounce = require('debounceify')\nconst Rache = require('rache')\n\nconst { all: unslabAll } = require('unslab')\n\nconst RangeIterator = require('./iterators/range')\nconst HistoryIterator = require('./iterators/history')\nconst DiffIterator = require('./iterators/diff')\nconst Extension = require('./lib/extension')\nconst { YoloIndex, Node, Header } = require('./lib/messages')\nconst { BLOCK_NOT_AVAILABLE, DECODING_ERROR } = require('hypercore-errors')\n\nconst T = 5\nconst MIN_KEYS = T - 1\nconst MAX_CHILDREN = MIN_KEYS * 2 + 1\n\nconst SEP = b4a.alloc(1)\nconst EMPTY = b4a.alloc(0)\n\nclass Key {\n  constructor (seq, value) {\n    this.seq = seq\n    this.value = value\n  }\n}\n\nclass Child {\n  constructor (seq, offset, value) {\n    this.seq = seq\n    this.offset = offset\n    this.value = value\n  }\n}\n\nclass Cache {\n  constructor (rache) {\n    this.keys = rache\n    this.length = 0\n  }\n\n  get (seq) {\n    return this.keys.get(seq) || null\n  }\n\n  set (seq, key) {\n    this.keys.set(seq, key)\n    if (seq >= this.length) this.length = seq + 1\n  }\n\n  gc (length) {\n    // if we need to \"work\" more than 128 ticks, just bust the cache...\n    if (this.length - length > 128) {\n      this.keys.clear()\n    } else {\n      for (let i = length; i < this.length; i++) {\n        this.keys.delete(i)\n      }\n    }\n\n    this.length = length\n  }\n}\n\nclass Pointers {\n  constructor (decoded) {\n    this.levels = decoded.levels.map(l => {\n      const children = []\n      const keys = []\n\n      for (let i = 0; i < l.keys.length; i++) {\n        keys.push(new Key(l.keys[i], null))\n      }\n\n      for (let i = 0; i < l.children.length; i += 2) {\n        children.push(new Child(l.children[i], l.children[i + 1], null))\n      }\n\n      return { keys, children }\n    })\n  }\n\n  get (i) {\n    return this.levels[i]\n  }\n\n  hasKey (seq) {\n    for (const lvl of this.levels) {\n      for (const key of lvl.keys) {\n        if (key.seq === seq) return true\n      }\n    }\n    return false\n  }\n}\n\nfunction inflate (entry) {\n  if (entry.inflated === null) {\n    entry.inflated = YoloIndex.decode(entry.index)\n    entry.index = null\n  }\n  return new Pointers(entry.inflated)\n}\n\nfunction deflate (index) {\n  const levels = index.map(l => {\n    const keys = []\n    const children = []\n\n    for (let i = 0; i < l.value.keys.length; i++) {\n      keys.push(l.value.keys[i].seq)\n    }\n\n    for (let i = 0; i < l.value.children.length; i++) {\n      children.push(l.value.children[i].seq, l.value.children[i].offset)\n    }\n\n    return { keys, children }\n  })\n\n  return YoloIndex.encode({ levels })\n}\n\nclass TreeNode {\n  constructor (block, keys, children, offset) {\n    this.block = block\n    this.offset = offset\n    this.keys = keys\n    this.children = children\n    this.changed = false\n\n    this.preload()\n  }\n\n  preload () {\n    if (this.block === null) return\n\n    const core = getBackingCore(this.block.tree.core)\n    if (!core) return\n\n    const bitfield = core.core.bitfield\n    const blocks = []\n\n    for (let i = 0; i < this.keys.length; i++) {\n      const k = this.keys[i]\n      if (k.value) continue\n      if (k.seq >= core.signedLength || (bitfield && bitfield.get(k.seq))) continue\n      blocks.push(k.seq)\n    }\n    for (let i = 0; i < this.children.length; i++) {\n      const c = this.children[i]\n      if (c.value) continue\n      if (c.seq >= core.signedLength || (bitfield && bitfield.get(c.seq))) continue\n      blocks.push(c.seq)\n    }\n\n    if (blocks.length) core.download({ blocks })\n  }\n\n  async insertKey (key, value, child, node, encoding, cas) {\n    let s = 0\n    let e = this.keys.length\n    let c\n\n    while (s < e) {\n      const mid = (s + e) >> 1\n      c = b4a.compare(key.value, await this.getKey(mid))\n\n      if (c === 0) {\n        if (cas) {\n          const prev = await this.getKeyNode(mid)\n          if (!(await cas(prev.final(encoding), node))) return true\n        }\n        if (!this.block.tree.tree.alwaysDuplicate) {\n          const prev = await this.getKeyNode(mid)\n          if (sameValue(prev.value, value)) return true\n        }\n        this.changed = true\n        this.keys[mid] = key\n        return true\n      }\n\n      if (c < 0) e = mid\n      else s = mid + 1\n    }\n\n    const i = c < 0 ? e : s\n    this.keys.splice(i, 0, key)\n    if (child) this.children.splice(i + 1, 0, new Child(0, 0, child))\n    this.changed = true\n\n    return this.keys.length < MAX_CHILDREN\n  }\n\n  removeKey (index) {\n    this.keys.splice(index, 1)\n    if (this.children.length) {\n      this.children[index + 1].seq = 0 // mark as freed\n      this.children.splice(index + 1, 1)\n    }\n    this.changed = true\n  }\n\n  async siblings (parent) {\n    for (let i = 0; i < parent.children.length; i++) {\n      if (parent.children[i].value === this) {\n        const [left, right] = await Promise.all([\n          i ? parent.getChildNode(i - 1) : null,\n          i < parent.children.length - 1 ? parent.getChildNode(i + 1) : null\n        ])\n        return { left, index: i, right }\n      }\n    }\n\n    throw new Error('Bad parent')\n  }\n\n  merge (node, median) {\n    this.changed = true\n    this.keys.push(median)\n    for (let i = 0; i < node.keys.length; i++) this.keys.push(node.keys[i])\n    for (let i = 0; i < node.children.length; i++) this.children.push(node.children[i])\n  }\n\n  async split () {\n    const len = this.keys.length >> 1\n    const right = TreeNode.create(this.block)\n\n    while (right.keys.length < len) right.keys.push(this.keys.pop())\n    right.keys.reverse()\n\n    await this.getKey(this.keys.length - 1) // make sure the median is loaded\n    const median = this.keys.pop()\n\n    if (this.children.length) {\n      while (right.children.length < len + 1) right.children.push(this.children.pop())\n      right.children.reverse()\n    }\n\n    this.changed = true\n\n    return {\n      left: this,\n      median,\n      right\n    }\n  }\n\n  getKeyNode (index) {\n    return this.block.tree.getBlock(this.keys[index].seq)\n  }\n\n  async getChildNode (index) {\n    const child = this.children[index]\n    if (child.value) return child.value\n    const block = child.seq === this.block.seq ? this.block : await this.block.tree.getBlock(child.seq)\n    return (child.value = block.getTreeNode(child.offset))\n  }\n\n  setKey (index, key) {\n    this.keys[index] = key\n    this.changed = true\n  }\n\n  async getKey (index) {\n    const key = this.keys[index]\n    if (key.value) return key.value\n    const k = key.seq === this.block.seq ? this.block.key : await this.block.tree.getKey(key.seq)\n    return (key.value = k)\n  }\n\n  indexChanges (index, seq) {\n    const offset = index.push(null) - 1\n    this.changed = false\n\n    for (const child of this.children) {\n      if (!child.value || !child.value.changed) continue\n      child.seq = seq\n      child.offset = child.value.indexChanges(index, seq)\n      index[child.offset] = child\n    }\n\n    return offset\n  }\n\n  updateChildren (seq, block) {\n    for (const child of this.children) {\n      if (!child.value || child.seq !== seq) continue\n      child.value.block = block\n      child.value.updateChildren(seq, block)\n    }\n  }\n\n  static create (block) {\n    const node = new TreeNode(block, [], [], 0)\n    node.changed = true\n    return node\n  }\n}\n\nclass BlockEntry {\n  constructor (seq, tree, entry) {\n    this.seq = seq\n    this.tree = tree\n    this.index = null\n    this.entry = entry\n    this.key = entry.key\n    this.value = entry.value\n  }\n\n  isTarget (key) {\n    return b4a.equals(this.key, key)\n  }\n\n  isDeletion () {\n    if (this.value !== null) return false\n\n    if (this.index === null) {\n      this.index = inflate(this.entry)\n    }\n\n    return !this.index.hasKey(this.seq)\n  }\n\n  final (encoding) {\n    return {\n      seq: this.seq,\n      key: encoding.key ? encoding.key.decode(this.key) : this.key,\n      value: this.value && (encoding.value ? encoding.value.decode(this.value) : this.value)\n    }\n  }\n\n  getTreeNode (offset) {\n    if (this.index === null) {\n      this.index = inflate(this.entry)\n    }\n    const entry = this.index.get(offset)\n    return new TreeNode(this, entry.keys, entry.children, offset)\n  }\n}\n\nclass BatchEntry extends BlockEntry {\n  constructor (seq, tree, key, value, index) {\n    super(seq, tree, { key, value, index: null, inflated: null })\n    this.pendingIndex = index\n  }\n\n  isTarget (key) {\n    return false\n  }\n\n  getTreeNode (offset) {\n    return this.pendingIndex[offset].value\n  }\n}\n\nclass Hyperbee extends ReadyResource {\n  constructor (core, opts = {}) {\n    super()\n    // this.feed is now deprecated, and will be this.core going forward\n    this.feed = core\n    this.core = core\n\n    this.keyEncoding = opts.keyEncoding ? codecs(opts.keyEncoding) : null\n    this.valueEncoding = opts.valueEncoding ? codecs(opts.valueEncoding) : null\n    this.extension = opts.extension !== false ? opts.extension || Extension.register(this) : null\n    this.metadata = opts.metadata || null\n    this.lock = opts.lock || mutexify()\n    this.sep = opts.sep || SEP\n    this.readonly = !!opts.readonly\n    this.prefix = opts.prefix || null\n\n    // In a future version, this should be false by default\n    this.alwaysDuplicate = opts.alwaysDuplicate !== false\n\n    this._unprefixedKeyEncoding = this.keyEncoding\n    this._sub = !!this.prefix\n    this._checkout = opts.checkout || 0\n    this._view = !!opts._view\n\n    this._onappendBound = this._view ? null : this._onappend.bind(this)\n    this._ontruncateBound = this._view ? null : this._ontruncate.bind(this)\n    this._watchers = this._onappendBound ? [] : null\n    this._entryWatchers = this._onappendBound ? [] : null\n    this._sessions = opts.sessions !== false\n\n    this._keyCache = null\n    this._nodeCache = null\n\n    this._batches = []\n\n    if (this._watchers) {\n      this.core.on('append', this._onappendBound)\n      this.core.on('truncate', this._ontruncateBound)\n    }\n\n    if (this.prefix && opts._sub) {\n      this.keyEncoding = prefixEncoding(this.prefix, this.keyEncoding)\n    }\n\n    this.ready().catch(safetyCatch)\n  }\n\n  async _open () {\n    if (this.core.opened === false) await this.core.ready()\n\n    // snapshot\n    if (this._checkout === -1) this._checkout = Math.max(1, this.core.length)\n\n    const baseCache = Rache.from(this.core.globalCache)\n    this._keyCache = new Cache(baseCache)\n    this._nodeCache = new Cache(Rache.from(baseCache))\n  }\n\n  get version () {\n    return Math.max(1, this._checkout || this.core.length)\n  }\n\n  get id () {\n    return this.core.id\n  }\n\n  get key () {\n    return this.core.key\n  }\n\n  get discoveryKey () {\n    return this.core.discoveryKey\n  }\n\n  get writable () {\n    return this.core.writable\n  }\n\n  get readable () {\n    return this.core.readable\n  }\n\n  replicate (isInitiator, opts) {\n    return this.core.replicate(isInitiator, opts)\n  }\n\n  update (opts) {\n    return this.core.update(opts)\n  }\n\n  peek (range, opts) {\n    return iteratorPeek(this.createRangeIterator(range, { ...opts, limit: 1 }))\n  }\n\n  createRangeIterator (range, opts = {}) {\n    // backwards compat range arg\n    opts = opts ? { ...opts, ...range } : range\n\n    const extension = (opts.extension === false && opts.limit !== 0) ? null : this.extension\n    const keyEncoding = opts.keyEncoding ? codecs(opts.keyEncoding) : this.keyEncoding\n\n    if (extension) {\n      const { onseq, onwait } = opts\n      let version = 0\n      let next = 0\n\n      opts = encRange(keyEncoding, {\n        ...opts,\n        sub: this._sub,\n        onseq (seq) {\n          if (!version) version = seq + 1\n          if (next) next--\n          if (onseq) onseq(seq)\n        },\n        onwait (seq) {\n          if (!next) {\n            next = Extension.BATCH_SIZE\n            extension.iterator(ite.snapshot(version))\n          }\n          if (onwait) onwait(seq)\n        }\n      })\n    } else {\n      opts = encRange(keyEncoding, { ...opts, sub: this._sub })\n    }\n\n    const ite = new RangeIterator(new Batch(this, this._makeSnapshot(), null, false, opts), null, opts)\n    return ite\n  }\n\n  createReadStream (range, opts) {\n    const signal = (opts && opts.signal) || null\n    return iteratorToStream(this.createRangeIterator(range, opts), signal)\n  }\n\n  createHistoryStream (opts) {\n    const session = (opts && opts.live) ? this.core.session() : this._makeSnapshot()\n    const signal = (opts && opts.signal) || null\n    return iteratorToStream(new HistoryIterator(new Batch(this, session, null, false, opts), opts), signal)\n  }\n\n  createDiffStream (right, range, opts) {\n    if (typeof right === 'number') right = this.checkout(Math.max(1, right), { reuseSession: true })\n\n    // backwards compat range arg\n    opts = opts ? { ...opts, ...range } : range\n\n    const signal = (opts && opts.signal) || null\n\n    const keyEncoding = opts && opts.keyEncoding ? codecs(opts.keyEncoding) : this.keyEncoding\n    if (keyEncoding) opts = encRange(keyEncoding, { ...opts, sub: this._sub })\n\n    let done\n    let closing\n    let ite\n\n    const left = this\n\n    const rs = new Readable({\n      signal,\n      eagerOpen: true,\n      async open (cb) {\n        try {\n          if (right.opened === false) await right.ready()\n          if (left.opened === false) await left.ready()\n        } catch (err) {\n          cb(err)\n          return\n        }\n\n        if (closing) {\n          cb(null)\n          return\n        }\n\n        if (left.core.closing || right.core.closing) {\n          cb(new Error('Bee closed'))\n          return\n        }\n\n        const snapshot = right.version > left.version\n          ? right._makeSnapshot()\n          : left._makeSnapshot()\n\n        done = cb\n        ite = new DiffIterator(\n          new Batch(left, snapshot, null, false, opts),\n          new Batch(right, snapshot, null, false, opts),\n          opts\n        )\n        ite.open().then(fin, fin)\n      },\n      read (cb) {\n        done = cb\n        ite.next().then(push, fin)\n      },\n      predestroy () {\n        if (!ite) {\n          closing = Promise.resolve()\n        } else {\n          closing = ite.close()\n          closing.catch(noop)\n        }\n      },\n      destroy (cb) {\n        done = cb\n        if (!closing) closing = ite.close()\n        closing.then(fin, fin)\n      }\n    })\n\n    return rs\n\n    function fin (err) {\n      done(err)\n    }\n\n    function push (val) {\n      rs.push(val)\n      done(null)\n    }\n  }\n\n  get (key, opts) {\n    const b = new Batch(this, this._makeSnapshot(), null, true, opts)\n    return b.get(key)\n  }\n\n  getBySeq (seq, opts) {\n    const b = new Batch(this, this._makeSnapshot(), null, true, opts)\n    return b.getBySeq(seq)\n  }\n\n  put (key, value, opts) {\n    const b = new Batch(this, this.core, null, true, opts)\n    return b.put(key, value, opts)\n  }\n\n  batch (opts) {\n    return new Batch(this, this.core, mutexify(), true, opts)\n  }\n\n  del (key, opts) {\n    const b = new Batch(this, this.core, null, true, opts)\n    return b.del(key, opts)\n  }\n\n  watch (range, opts) {\n    if (!this._watchers) throw new Error('Can only watch the main bee instance')\n    return new Watcher(this, range, opts)\n  }\n\n  async getAndWatch (key, opts) {\n    if (!this._watchers) throw new Error('Can only watch the main bee instance')\n\n    const watcher = new EntryWatcher(this, key, opts)\n    await watcher._debouncedUpdate()\n\n    if (this.closing) {\n      await watcher.close()\n      throw new Error('Bee closed')\n    }\n\n    return watcher\n  }\n\n  _onappend () {\n    for (const watcher of this._watchers) {\n      watcher._onappend()\n    }\n\n    for (const watcher of this._entryWatchers) {\n      watcher._onappend()\n    }\n  }\n\n  _ontruncate (length) {\n    for (const watcher of this._watchers) {\n      watcher._ontruncate()\n    }\n\n    for (const watcher of this._entryWatchers) {\n      watcher._ontruncate()\n    }\n\n    this._nodeCache.gc(length)\n    this._keyCache.gc(length)\n  }\n\n  _makeSnapshot () {\n    if (this._sessions === false) return this.core\n    // TODO: better if we could encapsulate this in hypercore in the future\n    return (this._checkout <= this.core.length || this._checkout <= 1) ? this.core.snapshot() : this.core.session({ snapshot: false })\n  }\n\n  checkout (version, opts = {}) {\n    if (version === 0) version = 1\n\n    // same as above, just checkout isn't set yet...\n    const snap = (opts.reuseSession || this._sessions === false)\n      ? this.core\n      : (version <= this.core.length || version <= 1) ? this.core.snapshot() : this.core.session({ snapshot: false })\n\n    return new Hyperbee(snap, {\n      _view: true,\n      _sub: false,\n      prefix: this.prefix,\n      sep: this.sep,\n      lock: this.lock,\n      checkout: version,\n      keyEncoding: opts.keyEncoding || this.keyEncoding,\n      valueEncoding: opts.valueEncoding || this.valueEncoding,\n      extension: this.extension !== null ? this.extension : false\n    })\n  }\n\n  snapshot (opts) {\n    return this.checkout((this.core.opened === false || this._checkout <= 0) ? -1 : Math.max(1, this.version), opts)\n  }\n\n  sub (prefix, opts = {}) {\n    let sep = opts.sep || this.sep\n    if (!b4a.isBuffer(sep)) sep = b4a.from(sep)\n\n    prefix = b4a.concat([this.prefix || EMPTY, b4a.from(prefix), sep])\n\n    const valueEncoding = codecs(opts.valueEncoding || this.valueEncoding)\n    const keyEncoding = codecs(opts.keyEncoding || this._unprefixedKeyEncoding)\n\n    return new Hyperbee(this.core, {\n      _view: true,\n      _sub: true,\n      prefix,\n      sep: this.sep,\n      lock: this.lock,\n      checkout: this._checkout,\n      valueEncoding,\n      keyEncoding,\n      extension: this.extension !== null ? this.extension : false,\n      metadata: this.metadata\n    })\n  }\n\n  async getHeader (opts) {\n    const blk = await this.core.get(0, opts)\n    try {\n      return blk && Header.decode(blk)\n    } catch {\n      throw DECODING_ERROR()\n    }\n  }\n\n  async _close () {\n    if (this._watchers) {\n      this.core.off('append', this._onappendBound)\n      this.core.off('truncate', this._ontruncateBound)\n\n      while (this._watchers.length) {\n        await this._watchers[this._watchers.length - 1].close()\n      }\n    }\n\n    if (this._entryWatchers) {\n      while (this._entryWatchers.length) {\n        await this._entryWatchers[this._entryWatchers.length - 1].close()\n      }\n    }\n\n    while (this._batches.length) {\n      await this._batches[this._batches.length - 1].close()\n    }\n\n    return this.core.close()\n  }\n\n  static async isHyperbee (core, opts) {\n    await core.ready()\n\n    const blk0 = await core.get(0, opts)\n    if (blk0 === null) throw BLOCK_NOT_AVAILABLE()\n\n    try {\n      return Header.decode(blk0).protocol === 'hyperbee'\n    } catch (err) { // undecodable\n      return false\n    }\n  }\n}\n\nclass Batch {\n  constructor (tree, core, batchLock, cache, options = {}) {\n    this.tree = tree\n    // this.feed is now deprecated, and will be this.core going forward\n    this.feed = core\n    this.core = core\n    this.index = tree._batches.push(this) - 1\n    this.blocks = cache ? new Map() : null\n    this.autoFlush = !batchLock\n    this.rootSeq = 0\n    this.root = null\n    this.length = 0\n    this.options = options\n    this.locked = null\n    this.batchLock = batchLock\n    this.onseq = this.options.onseq || noop\n    this.appending = null\n    this.isSnapshot = this.core !== this.tree.core\n    this.shouldUpdate = this.options.update !== false\n    this.updating = null\n    this.encoding = {\n      key: options.keyEncoding ? codecs(options.keyEncoding) : tree.keyEncoding,\n      value: options.valueEncoding ? codecs(options.valueEncoding) : tree.valueEncoding\n    }\n  }\n\n  async ready () {\n    if (this.core.opened === false) await this.core.ready()\n    if (this.tree.opened === false) await this.tree.ready()\n  }\n\n  async lock () {\n    if (this.tree.readonly) throw new Error('Hyperbee is marked as read-only')\n    if (this.locked === null) this.locked = await this.tree.lock()\n  }\n\n  get version () {\n    return Math.max(1, this.tree._checkout ? this.tree._checkout : this.core.length + this.length)\n  }\n\n  async getRoot (ensureHeader) {\n    await this.ready()\n    if (ensureHeader) {\n      if (this.core.length === 0 && this.core.writable && !this.tree.readonly) {\n        await this.core.append(Header.encode({\n          protocol: 'hyperbee',\n          metadata: this.tree.metadata\n        }))\n      }\n    }\n    if (this.tree._checkout === 0 && this.shouldUpdate) {\n      if (this.updating === null) this.updating = this.core.update()\n      await this.updating\n    }\n    if (this.version < 2) return null\n    return (await this.getBlock(this.version - 1)).getTreeNode(0)\n  }\n\n  async getKey (seq) {\n    const k = this.core.fork === this.tree.core.fork ? this.tree._keyCache.get(seq) : null\n    if (k !== null) return k\n    const key = (await this.getBlock(seq)).key\n    if (this.core.fork === this.tree.core.fork) this.tree._keyCache.set(seq, key)\n    return key\n  }\n\n  async _getNode (seq) {\n    const cached = (this.tree._nodeCache !== null && this.core.fork === this.tree.core.fork) ? this.tree._nodeCache.get(seq) : null\n    if (cached !== null) return cached\n    const entry = await this.core.get(seq, { ...this.options, valueEncoding: Node })\n    if (entry === null) throw BLOCK_NOT_AVAILABLE()\n    const wrap = copyEntry(entry)\n    if (this.core.fork === this.tree.core.fork && this.tree._nodeCache !== null) this.tree._nodeCache.set(seq, wrap)\n    return wrap\n  }\n\n  async getBlock (seq) {\n    if (this.rootSeq === 0) this.rootSeq = seq\n    let b = this.blocks && this.blocks.get(seq)\n    if (b) return b\n    this.onseq(seq)\n    const entry = await this._getNode(seq)\n    b = new BlockEntry(seq, this, entry)\n    if (this.blocks && (this.blocks.size - this.length) < 128) this.blocks.set(seq, b)\n    return b\n  }\n\n  _onwait (key) {\n    this.options.onwait = null\n    this.tree.extension.get(this.rootSeq + 1, key)\n  }\n\n  _getEncoding (opts) {\n    if (!opts) return this.encoding\n    return {\n      key: opts.keyEncoding ? codecs(opts.keyEncoding) : this.encoding.key,\n      value: opts.valueEncoding ? codecs(opts.valueEncoding) : this.encoding.value\n    }\n  }\n\n  peek (range, opts) {\n    return iteratorPeek(this.createRangeIterator(range, { ...opts, limit: 1 }))\n  }\n\n  createRangeIterator (range, opts = {}) {\n    // backwards compat range arg\n    opts = opts ? { ...opts, ...range } : range\n\n    const encoding = this._getEncoding(opts)\n    return new RangeIterator(this, encoding, encRange(encoding.key, { ...opts, sub: this.tree._sub }))\n  }\n\n  createReadStream (range, opts) {\n    const signal = (opts && opts.signal) || null\n    return iteratorToStream(this.createRangeIterator(range, opts), signal)\n  }\n\n  async getBySeq (seq, opts) {\n    const encoding = this._getEncoding(opts)\n\n    try {\n      const block = (await this.getBlock(seq)).final(encoding)\n      return { key: block.key, value: block.value }\n    } finally {\n      await this._closeSnapshot()\n    }\n  }\n\n  async get (key, opts) {\n    const encoding = this._getEncoding(opts)\n\n    try {\n      return await this._get(key, encoding)\n    } finally {\n      await this._closeSnapshot()\n    }\n  }\n\n  async _get (key, encoding) {\n    key = enc(encoding.key, key)\n\n    if (this.tree.extension !== null && this.options.extension !== false) {\n      this.options.onwait = this._onwait.bind(this, key)\n    }\n\n    let node = await this.getRoot(false)\n    if (!node) return null\n\n    while (true) {\n      if (node.block.isTarget(key)) {\n        return node.block.isDeletion() ? null : node.block.final(encoding)\n      }\n\n      let s = 0\n      let e = node.keys.length\n      let c\n\n      while (s < e) {\n        const mid = (s + e) >> 1\n\n        c = b4a.compare(key, await node.getKey(mid))\n\n        if (c === 0) return (await this.getBlock(node.keys[mid].seq)).final(encoding)\n\n        if (c < 0) e = mid\n        else s = mid + 1\n      }\n\n      if (!node.children.length) return null\n\n      const i = c < 0 ? e : s\n      node = await node.getChildNode(i)\n    }\n  }\n\n  async put (key, value, opts) {\n    const release = this.batchLock ? await this.batchLock() : null\n\n    const cas = (opts && opts.cas) || null\n    const encoding = this._getEncoding(opts)\n\n    if (!this.locked) await this.lock()\n    if (!release) return this._put(key, value, encoding, cas)\n\n    try {\n      return await this._put(key, value, encoding, cas)\n    } finally {\n      release()\n    }\n  }\n\n  async _put (key, value, encoding, cas) {\n    const newNode = {\n      seq: 0,\n      key,\n      value\n    }\n    key = enc(encoding.key, key)\n    value = enc(encoding.value, value)\n\n    const stack = []\n\n    let root\n    let node = root = await this.getRoot(true)\n    if (!node) node = root = TreeNode.create(null)\n\n    const seq = newNode.seq = this.core.length + this.length\n    const target = new Key(seq, key)\n\n    while (node.children.length) {\n      stack.push(node)\n      node.changed = true // changed, but compressible\n\n      let s = 0\n      let e = node.keys.length\n      let c\n\n      while (s < e) {\n        const mid = (s + e) >> 1\n        c = b4a.compare(target.value, await node.getKey(mid))\n\n        if (c === 0) {\n          if (cas) {\n            const prev = await node.getKeyNode(mid)\n            if (!(await cas(prev.final(encoding), newNode))) return this._unlockMaybe()\n          }\n          if (!this.tree.alwaysDuplicate) {\n            const prev = await node.getKeyNode(mid)\n            if (sameValue(prev.value, value)) return this._unlockMaybe()\n          }\n          node.setKey(mid, target)\n          return this._append(root, seq, key, value)\n        }\n\n        if (c < 0) e = mid\n        else s = mid + 1\n      }\n\n      const i = c < 0 ? e : s\n      node = await node.getChildNode(i)\n    }\n\n    let needsSplit = !(await node.insertKey(target, value, null, newNode, encoding, cas))\n    if (!node.changed) return this._unlockMaybe()\n\n    while (needsSplit) {\n      const parent = stack.pop()\n      const { median, right } = await node.split()\n\n      if (parent) {\n        needsSplit = !(await parent.insertKey(median, value, right, null, encoding, null))\n        node = parent\n      } else {\n        root = TreeNode.create(node.block)\n        root.changed = true\n        root.keys.push(median)\n        root.children.push(new Child(0, 0, node), new Child(0, 0, right))\n        needsSplit = false\n      }\n    }\n\n    return this._append(root, seq, key, value)\n  }\n\n  async del (key, opts) {\n    const release = this.batchLock ? await this.batchLock() : null\n    const cas = (opts && opts.cas) || null\n    const encoding = this._getEncoding(opts)\n\n    if (!this.locked) await this.lock()\n    if (!release) return this._del(key, encoding, cas)\n\n    try {\n      return await this._del(key, encoding, cas)\n    } finally {\n      release()\n    }\n  }\n\n  async _del (key, encoding, cas) {\n    const delNode = {\n      seq: 0,\n      key,\n      value: null\n    }\n\n    key = enc(encoding.key, key)\n\n    const stack = []\n\n    let node = await this.getRoot(true)\n    if (!node) return this._unlockMaybe()\n\n    const seq = delNode.seq = this.core.length + this.length\n\n    while (true) {\n      stack.push(node)\n\n      let s = 0\n      let e = node.keys.length\n      let c\n\n      while (s < e) {\n        const mid = (s + e) >> 1\n        c = b4a.compare(key, await node.getKey(mid))\n\n        if (c === 0) {\n          if (cas) {\n            const prev = await node.getKeyNode(mid)\n            if (!(await cas(prev.final(encoding), delNode))) return this._unlockMaybe()\n          }\n          if (node.children.length) await setKeyToNearestLeaf(node, mid, stack)\n          else node.removeKey(mid)\n          // we mark these as changed late, so we don't rewrite them if it is a 404\n          for (const node of stack) node.changed = true\n          return this._append(await rebalance(stack), seq, key, null)\n        }\n\n        if (c < 0) e = mid\n        else s = mid + 1\n      }\n\n      if (!node.children.length) return this._unlockMaybe()\n\n      const i = c < 0 ? e : s\n      node = await node.getChildNode(i)\n    }\n  }\n\n  async _closeSnapshot () {\n    if (this.isSnapshot) {\n      await this.core.close()\n      this._finalize()\n    }\n  }\n\n  async close () {\n    if (this.isSnapshot) return this._closeSnapshot()\n\n    this.root = null\n    if (this.blocks) this.blocks.clear()\n    this.length = 0\n    this._unlock()\n  }\n\n  destroy () { // compat, remove later\n    this.close().catch(noop)\n  }\n\n  toBlocks () {\n    if (this.appending) return this.appending\n\n    const batch = new Array(this.length)\n\n    for (let i = 0; i < this.length; i++) {\n      const seq = this.core.length + i\n      const { pendingIndex, key, value } = this.blocks.get(seq)\n\n      if (i < this.length - 1) {\n        pendingIndex[0] = null\n        let j = 0\n\n        while (j < pendingIndex.length) {\n          const idx = pendingIndex[j]\n          if (idx !== null && idx.seq === seq) {\n            idx.offset = j++\n            continue\n          }\n          if (j === pendingIndex.length - 1) pendingIndex.pop()\n          else pendingIndex[j] = pendingIndex.pop()\n        }\n      }\n\n      batch[i] = Node.encode({\n        key,\n        value,\n        index: deflate(pendingIndex)\n      })\n    }\n\n    this.appending = batch\n    return batch\n  }\n\n  flush () {\n    if (!this.length) return this.close()\n\n    const batch = this.toBlocks()\n\n    this.root = null\n    this.blocks.clear()\n    this.length = 0\n\n    return this._appendBatch(batch)\n  }\n\n  _unlockMaybe () {\n    if (this.autoFlush) this._unlock()\n  }\n\n  _unlock () {\n    const locked = this.locked\n    this.locked = null\n    if (locked !== null) locked()\n    this._finalize()\n  }\n\n  _finalize () {\n    // technically finalize can be called more than once, so here we just check if we already have been removed\n    if (this.index >= this.tree._batches.length || this.tree._batches[this.index] !== this) return\n    const top = this.tree._batches.pop()\n    if (top === this) return\n    top.index = this.index\n    this.tree._batches[top.index] = top\n  }\n\n  _append (root, seq, key, value) {\n    const index = []\n    root.indexChanges(index, seq)\n    index[0] = new Child(seq, 0, root)\n\n    if (!this.autoFlush) {\n      const block = new BatchEntry(seq, this, key, value, index)\n      root.block = block\n      this.root = root\n      this.length++\n      this.blocks.set(seq, block)\n\n      root.updateChildren(seq, block)\n      return\n    }\n\n    return this._appendBatch(Node.encode({\n      key,\n      value,\n      index: deflate(index)\n    }))\n  }\n\n  async _appendBatch (raw) {\n    try {\n      await this.core.append(raw)\n    } finally {\n      this._unlock()\n    }\n  }\n}\n\nclass EntryWatcher extends ReadyResource {\n  constructor (bee, key, opts = {}) {\n    super()\n\n    this.keyEncoding = opts.keyEncoding || bee.keyEncoding\n    this.valueEncoding = opts.valueEncoding || bee.valueEncoding\n\n    this.index = bee._entryWatchers.push(this) - 1\n    this.bee = bee\n\n    this.key = key\n    this.node = null\n\n    this._forceUpdate = false\n    this._debouncedUpdate = debounce(this._processUpdate.bind(this))\n  }\n\n  _close () {\n    const top = this.bee._entryWatchers.pop()\n    if (top !== this) {\n      top.index = this.index\n      this.bee._entryWatchers[top.index] = top\n    }\n  }\n\n  _onappend () {\n    this._debouncedUpdate()\n  }\n\n  _ontruncate () {\n    this._forceUpdate = true\n    this._debouncedUpdate()\n  }\n\n  async _processUpdate () {\n    const force = this._forceUpdate\n    this._forceUpdate = false\n\n    let newNode\n    try {\n      newNode = await this.bee.get(this.key, {\n        keyEncoding: this.keyEncoding,\n        valueEncoding: this.valueEncoding\n      })\n    } catch (e) {\n      if (e.code === 'SNAPSHOT_NOT_AVAILABLE') {\n        // There was a truncate event before the get resolved\n        // So this handler will run again anyway\n        return\n      } else if (this.bee.closing) {\n        this.close().catch(safetyCatch)\n        return\n      }\n      this.emit('error', e)\n      return\n    }\n\n    if (force || newNode?.seq !== this.node?.seq) {\n      this.node = newNode\n      this.emit('update')\n    }\n  }\n}\n\nclass Watcher extends ReadyResource {\n  constructor (bee, range, opts = {}) {\n    super()\n\n    this.keyEncoding = opts.keyEncoding || bee.keyEncoding\n    this.valueEncoding = opts.valueEncoding || bee.valueEncoding\n    this.index = bee._watchers.push(this) - 1\n    this.bee = bee\n    this.core = bee.core\n\n    this.latestDiff = 0\n    this.range = range\n    this.map = opts.map || defaultWatchMap\n\n    this.current = null\n    this.previous = null\n    this.currentMapped = null\n    this.previousMapped = null\n    this.stream = null\n\n    this._lock = mutexify()\n    this._flowing = false\n    this._resolveOnChange = null\n    this._differ = opts.differ || defaultDiffer\n    this._eager = !!opts.eager\n    this._onchange = opts.onchange || null\n\n    this.on('newListener', autoFlowOnUpdate)\n\n    this.ready().catch(safetyCatch)\n  }\n\n  async _consume () {\n    if (this._flowing) return\n    try {\n      for await (const _ of this) {} // eslint-disable-line\n    } catch {}\n  }\n\n  async _open () {\n    await this.bee.ready()\n\n    const opts = {\n      keyEncoding: this.keyEncoding,\n      valueEncoding: this.valueEncoding\n    }\n\n    // Point from which to start watching\n    this.current = this._eager ? this.bee.checkout(1, opts) : this.bee.snapshot(opts)\n    await this.current.ready()\n\n    if (this._onchange) {\n      if (this._eager) await this._onchange()\n      this._consume()\n    }\n  }\n\n  [Symbol.asyncIterator] () {\n    this._flowing = true\n    return this\n  }\n\n  _ontruncate () {\n    this._onappend()\n  }\n\n  _onappend () {\n    const resolve = this._resolveOnChange\n    this._resolveOnChange = null\n    if (resolve) resolve()\n  }\n\n  async _waitForChanges () {\n    if (this.current.version < this.bee.version || this.closing) return\n\n    await new Promise(resolve => {\n      this._resolveOnChange = resolve\n    })\n  }\n\n  async next () {\n    try {\n      return await this._next()\n    } catch (err) {\n      if (this.closing) return { value: undefined, done: true }\n      await this.close()\n      throw err\n    }\n  }\n\n  async _next () {\n    const release = await this._lock()\n\n    try {\n      if (this.closing) return { value: undefined, done: true }\n\n      if (!this.opened) await this.ready()\n\n      while (true) {\n        await this._waitForChanges()\n\n        if (this.closing) return { value: undefined, done: true }\n\n        await this._closePrevious()\n        this.previous = this.current.snapshot()\n\n        await this._closeCurrent()\n        this.current = this.bee.snapshot({\n          keyEncoding: this.keyEncoding,\n          valueEncoding: this.valueEncoding\n        })\n\n        await this.current.ready()\n        await this.previous.ready()\n\n        if (this.current.core.fork !== this.previous.core.fork) {\n          return await this._yield()\n        }\n\n        this.stream = this._differ(this.current, this.previous, this.range)\n\n        try {\n          for await (const data of this.stream) { // eslint-disable-line\n            return await this._yield()\n          }\n        } finally {\n          this.stream = null\n        }\n      }\n    } finally {\n      release()\n    }\n  }\n\n  async _yield () {\n    this.currentMapped = this.map(this.current)\n    this.previousMapped = this.map(this.previous)\n\n    if (this._onchange) {\n      try {\n        await this._onchange()\n      } catch (err) {\n        safetyCatch(err)\n      }\n    }\n\n    this.emit('update')\n    return { done: false, value: [this.currentMapped, this.previousMapped] }\n  }\n\n  async return () {\n    await this.close()\n    return { done: true }\n  }\n\n  async _close () {\n    const top = this.bee._watchers.pop()\n    if (top !== this) {\n      top.index = this.index\n      this.bee._watchers[top.index] = top\n    }\n\n    if (this.stream && !this.stream.destroying) {\n      this.stream.destroy()\n    }\n\n    this._onappend() // Continue execution being closed\n\n    await this._closeCurrent().catch(safetyCatch)\n    await this._closePrevious().catch(safetyCatch)\n\n    const release = await this._lock()\n    release()\n  }\n\n  destroy () {\n    return this.close()\n  }\n\n  async _closeCurrent () {\n    if (this.currentMapped) await this.currentMapped.close()\n    if (this.current) await this.current.close()\n    this.current = this.currentMapped = null\n  }\n\n  async _closePrevious () {\n    if (this.previousMapped) await this.previousMapped.close()\n    if (this.previous) await this.previous.close()\n    this.previous = this.previousMapped = null\n  }\n}\n\nfunction autoFlowOnUpdate (name) {\n  if (name === 'update') this._consume()\n}\n\nfunction defaultWatchMap (snapshot) {\n  return snapshot\n}\n\nasync function leafSize (node, goLeft) {\n  while (node.children.length) node = await node.getChildNode(goLeft ? 0 : node.children.length - 1)\n  return node.keys.length\n}\n\nasync function setKeyToNearestLeaf (node, index, stack) {\n  let [left, right] = await Promise.all([node.getChildNode(index), node.getChildNode(index + 1)])\n  const [ls, rs] = await Promise.all([leafSize(left, false), leafSize(right, true)])\n\n  if (ls < rs) { // if fewer leaves on the left\n    stack.push(right)\n    while (right.children.length) stack.push(right = right.children[0].value)\n    node.keys[index] = right.keys.shift()\n  } else { // if fewer leaves on the right\n    stack.push(left)\n    while (left.children.length) stack.push(left = left.children[left.children.length - 1].value)\n    node.keys[index] = left.keys.pop()\n  }\n}\n\nasync function rebalance (stack) {\n  const root = stack[0]\n\n  while (stack.length > 1) {\n    const node = stack.pop()\n    const parent = stack[stack.length - 1]\n\n    if (node.keys.length >= MIN_KEYS) return root\n\n    let { left, index, right } = await node.siblings(parent)\n\n    // maybe borrow from left sibling?\n    if (left && left.keys.length > MIN_KEYS) {\n      left.changed = true\n      node.keys.unshift(parent.keys[index - 1])\n      if (left.children.length) node.children.unshift(left.children.pop())\n      parent.keys[index - 1] = left.keys.pop()\n      return root\n    }\n\n    // maybe borrow from right sibling?\n    if (right && right.keys.length > MIN_KEYS) {\n      right.changed = true\n      node.keys.push(parent.keys[index])\n      if (right.children.length) node.children.push(right.children.shift())\n      parent.keys[index] = right.keys.shift()\n      return root\n    }\n\n    // merge node with another sibling\n    if (left) {\n      index--\n      right = node\n    } else {\n      left = node\n    }\n\n    left.merge(right, parent.keys[index])\n    parent.removeKey(index)\n  }\n\n  // check if the tree shrunk\n  if (!root.keys.length && root.children.length) return root.getChildNode(0)\n  return root\n}\n\nfunction iteratorToStream (ite, signal) {\n  let done\n  let closing\n\n  const rs = new Readable({\n    signal,\n    open (cb) {\n      done = cb\n      ite.open().then(fin, fin)\n    },\n    read (cb) {\n      done = cb\n      ite.next().then(push, fin)\n    },\n    predestroy () {\n      closing = ite.close()\n      closing.catch(noop)\n    },\n    destroy (cb) {\n      done = cb\n      if (!closing) closing = ite.close()\n      closing.then(fin, fin)\n    }\n  })\n\n  return rs\n\n  function fin (err) {\n    done(err)\n  }\n\n  function push (val) {\n    rs.push(val)\n    done(null)\n  }\n}\n\nasync function iteratorPeek (ite) {\n  try {\n    await ite.open()\n    return await ite.next()\n  } finally {\n    await ite.close()\n  }\n}\n\nfunction encRange (e, opts) {\n  if (!e) return opts\n\n  if (e.encodeRange) {\n    const r = e.encodeRange({ gt: opts.gt, gte: opts.gte, lt: opts.lt, lte: opts.lte })\n    opts.gt = r.gt\n    opts.gte = r.gte\n    opts.lt = r.lt\n    opts.lte = r.lte\n    return opts\n  }\n\n  if (opts.gt !== undefined) opts.gt = enc(e, opts.gt)\n  if (opts.gte !== undefined) opts.gte = enc(e, opts.gte)\n  if (opts.lt !== undefined) opts.lt = enc(e, opts.lt)\n  if (opts.lte !== undefined) opts.lte = enc(e, opts.lte)\n  if (opts.sub && !opts.gt && !opts.gte) opts.gt = enc(e, SEP)\n  if (opts.sub && !opts.lt && !opts.lte) opts.lt = bump(enc(e, EMPTY))\n\n  return opts\n}\n\nfunction bump (key) {\n  // key should have been copied by enc above before hitting this\n  key[key.length - 1]++\n  return key\n}\n\nfunction enc (e, v) {\n  if (v === undefined || v === null) return null\n  if (e !== null) return e.encode(v)\n  if (typeof v === 'string') return b4a.from(v)\n  return v\n}\n\nfunction prefixEncoding (prefix, keyEncoding) {\n  return {\n    encode (key) {\n      return b4a.concat([prefix, b4a.isBuffer(key) ? key : enc(keyEncoding, key)])\n    },\n    decode (key) {\n      const sliced = key.slice(prefix.length, key.length)\n      return keyEncoding ? keyEncoding.decode(sliced) : sliced\n    }\n  }\n}\n\nfunction copyEntry (entry) {\n  let key = entry.key\n  let value = entry.value\n  let index = entry.index\n\n  // key, value and index all refer to the same buffer (one hypercore block)\n  // If together they are larger than half the buffer's byteLength,\n  // this means that they got their own private slab (see Buffer.allocUnsafe docs)\n  // so no need to unslab\n  const size = key.byteLength + (value === null ? 0 : value.byteLength) + (index === null ? 0 : index.byteLength)\n  if (2 * size < key.buffer.byteLength) {\n    const [newKey, newValue, newIndex] = unslabAll([entry.key, entry.value, entry.index])\n    key = newKey\n    value = newValue\n    index = newIndex\n  }\n\n  return {\n    key,\n    value,\n    index,\n    inflated: null\n  }\n}\n\nfunction defaultDiffer (currentSnap, previousSnap, opts) {\n  return currentSnap.createDiffStream(previousSnap, opts)\n}\n\nfunction getBackingCore (core) {\n  if (core.core) return core\n  if (core.getBackingCore) return core.getBackingCore().session\n  return null\n}\n\nfunction sameValue (a, b) {\n  return a === b || (a !== null && b !== null && b4a.equals(a, b))\n}\n\nfunction noop () {}\n\nmodule.exports = Hyperbee\nconst b4a = require('b4a')\n\nclass SubTree {\n  constructor (node, parent) {\n    this.node = node\n    this.parent = parent\n\n    this.isKey = node.children.length === 0\n    this.i = this.isKey ? 1 : 0\n    this.n = 0\n\n    const child = this.isKey ? null : this.node.children[0]\n    this.seq = child !== null ? child.seq : this.node.keys[0].seq\n    this.offset = child !== null ? child.offset : 0\n  }\n\n  next () {\n    this.i++\n    this.isKey = (this.i & 1) === 1\n    if (!this.isKey && !this.node.children.length) this.i++\n    return this.update()\n  }\n\n  async bisect (key, incl) {\n    let s = 0\n    let e = this.node.keys.length\n    let c\n\n    while (s < e) {\n      const mid = (s + e) >> 1\n      c = cmp(key, await this.node.getKey(mid))\n\n      if (c === 0) {\n        if (incl) this.i = mid * 2 + 1\n        else this.i = mid * 2 + (this.node.children.length ? 2 : 3)\n        return true\n      }\n\n      if (c < 0) e = mid\n      else s = mid + 1\n    }\n\n    const i = c < 0 ? e : s\n    this.i = 2 * i + (this.node.children.length ? 0 : 1)\n    return this.node.children.length === 0\n  }\n\n  update () {\n    this.isKey = (this.i & 1) === 1\n    this.n = this.i >> 1\n    if (this.n >= (this.isKey ? this.node.keys.length : this.node.children.length)) return false\n    const child = this.isKey ? null : this.node.children[this.n]\n    this.seq = child !== null ? child.seq : this.node.keys[this.n].seq\n    this.offset = child !== null ? child.offset : 0\n    return true\n  }\n\n  async key () {\n    return this.n < this.node.keys.length ? this.node.getKey(this.n) : (this.parent && this.parent.key())\n  }\n\n  async compare (tree) {\n    const [a, b] = await Promise.all([this.key(), tree.key()])\n    return cmp(a, b)\n  }\n}\n\nclass TreeIterator {\n  constructor (batch, opts) {\n    this.batch = batch\n    this.stack = []\n    this.lt = opts.lt || opts.lte || null\n    this.lte = !!opts.lte\n    this.gt = opts.gt || opts.gte || null\n    this.gte = !!opts.gte\n    this.seeking = !!this.gt\n    this.encoding = opts.encoding || batch.encoding\n  }\n\n  async open () {\n    const node = await this.batch.getRoot(false)\n    if (!node || !node.keys.length) return\n    const tree = new SubTree(node, null)\n    if (this.seeking && !(await this._seek(tree))) return\n    this.stack.push(tree)\n  }\n\n  async _seek (tree) {\n    const done = await tree.bisect(this.gt, this.gte)\n    const oob = !tree.update()\n    if (done || oob) {\n      this.seeking = false\n      if (oob) return false\n    }\n    return true\n  }\n\n  peek () {\n    if (!this.stack.length) return null\n    return this.stack[this.stack.length - 1]\n  }\n\n  skip () {\n    if (!this.stack.length) return\n    if (!this.stack[this.stack.length - 1].next()) this.stack.pop()\n  }\n\n  async nextKey () {\n    let n = null\n    while (this.stack.length && n === null) n = await this.next()\n    if (n === null) return null\n    if (!this.lt) return n.final(this.encoding)\n\n    const c = cmp(n.key, this.lt)\n    if (this.lte ? c <= 0 : c < 0) return n.final(this.encoding)\n    this.stack = []\n    return null\n  }\n\n  async next () {\n    if (!this.stack.length) return null\n\n    const top = this.stack[this.stack.length - 1]\n    const { isKey, n, seq } = top\n\n    if (!top.next()) {\n      this.stack.pop()\n    }\n\n    if (isKey) {\n      this.seeking = false\n      return this.batch.getBlock(seq)\n    }\n\n    const child = await top.node.getChildNode(n)\n    top.node.children[n] = null // unlink to save memory\n    const tree = new SubTree(child, top)\n    if (this.seeking && !(await this._seek(tree))) return null\n    this.stack.push(tree)\n\n    return null\n  }\n\n  close () {\n    return this.batch._closeSnapshot()\n  }\n}\n\nmodule.exports = class DiffIterator {\n  constructor (left, right, opts = {}) {\n    this.left = new TreeIterator(left, opts)\n    this.right = new TreeIterator(right, opts)\n    this.limit = typeof opts.limit === 'number' ? opts.limit : -1\n  }\n\n  async open () {\n    await Promise.all([this.left.open(), this.right.open()])\n  }\n\n  async next () {\n    if (this.limit === 0) return null\n    const res = await this._next()\n    if (!res || (res.left === null && res.right === null)) return null\n    this.limit--\n    return res\n  }\n\n  async _next () {\n    const a = this.left\n    const b = this.right\n\n    while (true) {\n      const [l, r] = await Promise.all([a.peek(), b.peek()])\n\n      if (!l && !r) return null\n      if (!l) return { left: null, right: await b.nextKey() }\n      if (!r) return { left: await a.nextKey(), right: null }\n\n      if (l.seq === r.seq && l.isKey === r.isKey && l.offset === r.offset) {\n        a.skip()\n        b.skip()\n        continue\n      }\n\n      const c = await l.compare(r)\n\n      if (l.isKey && !r.isKey) {\n        await b.next()\n        continue\n      }\n\n      if (!l.isKey && r.isKey) {\n        await a.next()\n        continue\n      }\n\n      if (l.isKey && r.isKey) {\n        if (c === 0) return { left: await a.nextKey(), right: await b.nextKey() }\n        if (c < 0) return { left: await a.nextKey(), right: null }\n        return { left: null, right: await b.nextKey() }\n      }\n\n      if (c === 0) await Promise.all([a.next(), b.next()])\n      else if (c < 0) await b.next()\n      else await a.next()\n    }\n  }\n\n  async close () {\n    await Promise.all([this.left.close(), this.right.close()])\n  }\n}\n\nfunction cmp (a, b) {\n  if (!a) return b ? 1 : 0\n  if (!b) return a ? -1 : 0\n  return b4a.compare(a, b)\n}\nmodule.exports = class HistoryIterator {\n  constructor (batch, opts = {}) {\n    this.batch = batch\n    this.options = opts\n    this.live = !!opts.live\n    this.gte = 0\n    this.lt = 0\n    this.reverse = !!opts.reverse\n    this.limit = typeof opts.limit === 'number' ? opts.limit : -1\n    this.encoding = opts.encoding || batch.encoding\n    if (this.live && this.reverse) {\n      throw new Error('Cannot have both live and reverse enabled')\n    }\n  }\n\n  async open () {\n    await this.batch.getRoot(false) // does the update dance\n    this.gte = gte(this.options, this.batch.version)\n    this.lt = this.live ? Infinity : lt(this.options, this.batch.version)\n  }\n\n  async next () {\n    if (this.limit === 0) return null\n    if (this.limit > 0) this.limit--\n\n    if (this.gte >= this.lt) return null\n\n    if (this.reverse) {\n      if (this.lt <= 1) return null\n      return final(await this.batch.getBlock(--this.lt), this.encoding)\n    }\n\n    return final(await this.batch.getBlock(this.gte++), this.encoding)\n  }\n\n  close () {\n    return this.batch._closeSnapshot()\n  }\n}\n\nfunction final (node, encoding) {\n  const type = node.isDeletion() ? 'del' : 'put'\n  return { type, ...node.final(encoding) }\n}\n\nfunction gte (opts, version) {\n  if (opts.gt) return (opts.gt < 0 ? (opts.gt + version) : opts.gt) + 1\n  const gte = opts.gte || opts.since || 1\n  return gte < 0 ? gte + version : gte\n}\n\nfunction lt (opts, version) {\n  if (opts.lte === 0 || opts.lt === 0 || opts.end === 0) return 0\n  if (opts.lte) return (opts.lte < 0 ? (opts.lte + version) : opts.lte) + 1\n  const lt = opts.lt || opts.end || version\n  return lt < 0 ? lt + version : lt\n}\nconst b4a = require('b4a')\n\nmodule.exports = class RangeIterator {\n  constructor (batch, encoding, opts = {}) {\n    this.batch = batch\n    this.stack = []\n    this.opened = false\n    this.encoding = encoding || batch.encoding\n\n    this._limit = typeof opts.limit === 'number' ? opts.limit : -1\n    this._gIncl = !opts.gt\n    this._gKey = opts.gt || opts.gte || null\n    this._lIncl = !opts.lt\n    this._lKey = opts.lt || opts.lte || null\n    this._reverse = !!opts.reverse\n    this._version = 0\n    this._checkpoint = (opts.checkpoint && opts.checkpoint.length) ? opts.checkpoint : null\n    this._nexting = false\n  }\n\n  snapshot (version = this.batch.version) {\n    const checkpoint = []\n    for (const s of this.stack) {\n      let { node, i } = s\n      if (this._nexting && s === this.stack[this.stack.length - 1]) i = this._reverse ? i + 1 : i - 1\n      if (!node.block) continue\n      if (i < 0) continue\n      checkpoint.push(node.block.seq, node.offset, i)\n    }\n\n    return {\n      version,\n      gte: this._gIncl ? this._gKey : null,\n      gt: this._gIncl ? null : this._gKey,\n      lte: this._lIncl ? this._lKey : null,\n      lt: this._lIncl ? null : this._lKey,\n      limit: this._limit,\n      reverse: this._reverse,\n      ended: this.opened && !checkpoint.length,\n      checkpoint: this.opened ? checkpoint : []\n    }\n  }\n\n  async open () {\n    await this._open()\n    this.opened = true\n  }\n\n  async _open () {\n    if (this._checkpoint) {\n      for (let j = 0; j < this._checkpoint.length; j += 3) {\n        const seq = this._checkpoint[j]\n        const offset = this._checkpoint[j + 1]\n        const i = this._checkpoint[j + 2]\n        this.stack.push({\n          node: (await this.batch.getBlock(seq)).getTreeNode(offset),\n          i\n        })\n      }\n      return\n    }\n\n    this._nexting = true\n\n    let node = await this.batch.getRoot(false)\n    if (!node) {\n      this._nexting = false\n      return\n    }\n\n    const incl = this._reverse ? this._lIncl : this._gIncl\n    const start = this._reverse ? this._lKey : this._gKey\n\n    if (!start) {\n      this.stack.push({ node, i: this._reverse ? node.keys.length << 1 : 0 })\n      this._nexting = false\n      return\n    }\n\n    while (true) {\n      const entry = { node, i: this._reverse ? node.keys.length << 1 : 0 }\n\n      let s = 0\n      let e = node.keys.length\n      let c\n\n      while (s < e) {\n        const mid = (s + e) >> 1\n        c = b4a.compare(start, await node.getKey(mid))\n\n        if (c === 0) {\n          if (incl) entry.i = mid * 2 + 1\n          else entry.i = mid * 2 + (this._reverse ? 0 : 2)\n          this.stack.push(entry)\n          this._nexting = false\n          return\n        }\n\n        if (c < 0) e = mid\n        else s = mid + 1\n      }\n\n      const i = c < 0 ? e : s\n      entry.i = 2 * i + (this._reverse ? -1 : 1)\n\n      if (entry.i >= 0 && entry.i <= (node.keys.length << 1)) this.stack.push(entry)\n      if (!node.children.length) {\n        this._nexting = false\n        return\n      }\n\n      node = await node.getChildNode(i)\n    }\n  }\n\n  async next () {\n    // TODO: this nexting flag is only needed if someone asks for a snapshot during\n    // a lookup (ie the extension, pretty important...).\n    // A better solution would be to refactor this so top.i is incremented eagerly\n    // to get the current block instead of the way it is done now (++i vs i++)\n    this._nexting = true\n\n    const end = this._reverse ? this._gKey : this._lKey\n    const incl = this._reverse ? this._gIncl : this._lIncl\n\n    while (this.stack.length && (this._limit === -1 || this._limit > 0)) {\n      const top = this.stack[this.stack.length - 1]\n      const isKey = (top.i & 1) === 1\n      const n = this._reverse\n        ? (top.i < 0 ? top.node.keys.length : top.i-- >> 1)\n        : top.i++ >> 1\n\n      if (!isKey) {\n        if (!top.node.children.length) continue\n        const node = await top.node.getChildNode(n)\n        if (top.node.block.seq < this.batch.core.length) {\n          top.node.children[n].value = null // unlink it to save memory\n        }\n        this.stack.push({ i: this._reverse ? node.keys.length << 1 : 0, node })\n        continue\n      }\n\n      if (n >= top.node.keys.length) {\n        this.stack.pop()\n        continue\n      }\n\n      const key = top.node.keys[n]\n      const block = await this.batch.getBlock(key.seq)\n      if (end) {\n        const c = b4a.compare(block.key, end)\n        if (c === 0 ? !incl : (this._reverse ? c < 0 : c > 0)) {\n          this._limit = 0\n          break\n        }\n      }\n      if (this._limit > 0) this._limit--\n      this._nexting = false\n      return block.final(this.encoding)\n    }\n\n    this._nexting = false\n    return null\n  }\n\n  close () {\n    return this.batch._closeSnapshot()\n  }\n}\nconst { Extension } = require('./messages')\n\n// const MAX_ACTIVE = 32\nconst FLUSH_BATCH = 128\nconst MAX_PASSIVE_BATCH = 2048\nconst MAX_ACTIVE_BATCH = MAX_PASSIVE_BATCH + FLUSH_BATCH\n\nclass Batch {\n  constructor (outgoing, from) {\n    this.blocks = []\n    this.start = 0\n    this.end = 0\n    this.outgoing = outgoing\n    this.from = from\n  }\n\n  push (seq) {\n    const len = this.blocks.push(seq)\n    if (len === 1 || seq < this.start) this.start = seq\n    if (len === 1 || seq >= this.end) this.end = seq + 1\n    if (len >= FLUSH_BATCH) {\n      this.send()\n      this.clear()\n    }\n  }\n\n  send () {\n    if (!this.blocks.length) return\n    this.outgoing.send(Extension.encode({ cache: { blocks: this.blocks, start: this.start, end: this.end } }), this.from)\n  }\n\n  clear () {\n    this.start = this.end = 0\n    this.blocks = []\n  }\n}\n\nclass HyperbeeExtension {\n  constructor (db) {\n    this.encoding = null\n    this.outgoing = null\n    this.db = db\n    this.active = 0\n  }\n\n  get (version, key) {\n    this.outgoing.broadcast(Extension.encode({ get: { version, key } }))\n  }\n\n  iterator (snapshot) {\n    if (snapshot.ended) return\n    if (snapshot.limit === 0) return\n    if (snapshot.limit === -1) snapshot.limit = 0\n    this.outgoing.broadcast(Extension.encode({ iterator: snapshot }))\n  }\n\n  onmessage (buf, from) {\n    // TODO: handle max active extension messages\n    // this.active++\n\n    const message = decode(buf)\n    if (!message) return\n\n    if (message.cache) this.oncache(message.cache, from)\n    if (message.get) this.onget(message.get, from)\n    if (message.iterator) this.oniterator(message.iterator, from)\n  }\n\n  oncache (message, from) {\n    if (!message.blocks.length) return\n    this.db.core.download(message)\n  }\n\n  onget (message, from) {\n    if (!message.version || message.version > this.db.version) return\n\n    const b = new Batch(this.outgoing, from)\n    const db = this.db.checkout(message.version)\n\n    db.get(message.key, { extension: false, wait: false, update: false, onseq }).then(done, done)\n\n    function done () {\n      db.close().catch(noop)\n      b.send()\n    }\n\n    function onseq (seq) {\n      b.push(seq)\n    }\n  }\n\n  async oniterator (message, from) {\n    if (!message.version || message.version > this.db.version) return\n\n    const b = new Batch(this.outgoing, from)\n    const seqs = new Set()\n\n    let skip = message.checkpoint.length\n    let work = 0\n\n    const db = this.db.checkout(message.version)\n    const ite = db.createRangeIterator({\n      ...message,\n      wait: false,\n      extension: false,\n      update: false,\n      limit: message.limit === 0 ? -1 : message.limit,\n      onseq (seq) {\n        if (skip && skip--) return\n        if (seqs.has(seq)) return\n        work++\n        seqs.add(seq)\n        b.push(seq)\n      }\n    })\n\n    try {\n      await ite.open()\n      // eslint-disable-next-line no-unmodified-loop-condition\n      while (work < MAX_ACTIVE_BATCH) {\n        if (!(await ite.next())) break\n      }\n    } catch (_) {\n      // do nothing\n    } finally {\n      ite.close().catch(noop)\n      db.close().catch(noop)\n      b.send()\n    }\n  }\n\n  static register (db) {\n    const e = new this(db)\n    e.outgoing = db.core.registerExtension('hyperbee', e)\n    return e\n  }\n}\n\nHyperbeeExtension.BATCH_SIZE = MAX_PASSIVE_BATCH\n\nmodule.exports = HyperbeeExtension\n\nfunction decode (buf) {\n  try {\n    return Extension.decode(buf)\n  } catch (err) {\n    return null\n  }\n}\n\nfunction noop () {}\n// This file is auto generated by the protocol-buffers compiler\n\n/* eslint-disable quotes */\n/* eslint-disable indent */\n/* eslint-disable no-redeclare */\n/* eslint-disable camelcase */\n/* eslint-disable no-var */\n\n// Remember to `npm install --save protocol-buffers-encodings`\nvar encodings = require('protocol-buffers-encodings')\nvar b4a = require('b4a')\nvar varint = encodings.varint\nvar skip = encodings.skip\n\nvar YoloIndex = exports.YoloIndex = {\n  buffer: true,\n  encodingLength: null,\n  encode: null,\n  decode: null\n}\n\nvar Header = exports.Header = {\n  buffer: true,\n  encodingLength: null,\n  encode: null,\n  decode: null\n}\n\nvar Node = exports.Node = {\n  buffer: true,\n  encodingLength: null,\n  encode: null,\n  decode: null\n}\n\nvar Extension = exports.Extension = {\n  buffer: true,\n  encodingLength: null,\n  encode: null,\n  decode: null\n}\n\ndefineYoloIndex()\ndefineHeader()\ndefineNode()\ndefineExtension()\n\nfunction defineYoloIndex () {\n  var Level = YoloIndex.Level = {\n    buffer: true,\n    encodingLength: null,\n    encode: null,\n    decode: null\n  }\n\n  defineLevel()\n\n  function defineLevel () {\n    Level.encodingLength = encodingLength\n    Level.encode = encode\n    Level.decode = decode\n\n    function encodingLength (obj) {\n      var length = 0\n      if (defined(obj.keys)) {\n        var packedLen = 0\n        for (var i = 0; i < obj.keys.length; i++) {\n          if (!defined(obj.keys[i])) continue\n          var len = encodings.varint.encodingLength(obj.keys[i])\n          packedLen += len\n        }\n        if (packedLen) {\n          length += 1 + packedLen + varint.encodingLength(packedLen)\n        }\n      }\n      if (defined(obj.children)) {\n        var packedLen = 0\n        for (var i = 0; i < obj.children.length; i++) {\n          if (!defined(obj.children[i])) continue\n          var len = encodings.varint.encodingLength(obj.children[i])\n          packedLen += len\n        }\n        if (packedLen) {\n          length += 1 + packedLen + varint.encodingLength(packedLen)\n        }\n      }\n      return length\n    }\n\n    function encode (obj, buf, offset) {\n      if (!offset) offset = 0\n      if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))\n      var oldOffset = offset\n      if (defined(obj.keys)) {\n        var packedLen = 0\n        for (var i = 0; i < obj.keys.length; i++) {\n          if (!defined(obj.keys[i])) continue\n          packedLen += encodings.varint.encodingLength(obj.keys[i])\n        }\n        if (packedLen) {\n          buf[offset++] = 10\n          varint.encode(packedLen, buf, offset)\n          offset += varint.encode.bytes\n        }\n        for (var i = 0; i < obj.keys.length; i++) {\n          if (!defined(obj.keys[i])) continue\n          encodings.varint.encode(obj.keys[i], buf, offset)\n          offset += encodings.varint.encode.bytes\n        }\n      }\n      if (defined(obj.children)) {\n        var packedLen = 0\n        for (var i = 0; i < obj.children.length; i++) {\n          if (!defined(obj.children[i])) continue\n          packedLen += encodings.varint.encodingLength(obj.children[i])\n        }\n        if (packedLen) {\n          buf[offset++] = 18\n          varint.encode(packedLen, buf, offset)\n          offset += varint.encode.bytes\n        }\n        for (var i = 0; i < obj.children.length; i++) {\n          if (!defined(obj.children[i])) continue\n          encodings.varint.encode(obj.children[i], buf, offset)\n          offset += encodings.varint.encode.bytes\n        }\n      }\n      encode.bytes = offset - oldOffset\n      return buf\n    }\n\n    function decode (buf, offset, end) {\n      if (!offset) offset = 0\n      if (!end) end = buf.length\n      if (!(end <= buf.length && offset <= buf.length)) throw new Error(\"Decoded message is not valid\")\n      var oldOffset = offset\n      var obj = {\n        keys: [],\n        children: []\n      }\n      while (true) {\n        if (end <= offset) {\n          decode.bytes = offset - oldOffset\n          return obj\n        }\n        var prefix = varint.decode(buf, offset)\n        offset += varint.decode.bytes\n        var tag = prefix >> 3\n        switch (tag) {\n          case 1:\n          var packedEnd = varint.decode(buf, offset)\n          offset += varint.decode.bytes\n          packedEnd += offset\n          while (offset < packedEnd) {\n            obj.keys.push(encodings.varint.decode(buf, offset))\n            offset += encodings.varint.decode.bytes\n          }\n          break\n          case 2:\n          var packedEnd = varint.decode(buf, offset)\n          offset += varint.decode.bytes\n          packedEnd += offset\n          while (offset < packedEnd) {\n            obj.children.push(encodings.varint.decode(buf, offset))\n            offset += encodings.varint.decode.bytes\n          }\n          break\n          default:\n          offset = skip(prefix & 7, buf, offset)\n        }\n      }\n    }\n  }\n\n  YoloIndex.encodingLength = encodingLength\n  YoloIndex.encode = encode\n  YoloIndex.decode = decode\n\n  function encodingLength (obj) {\n    var length = 0\n    if (defined(obj.levels)) {\n      for (var i = 0; i < obj.levels.length; i++) {\n        if (!defined(obj.levels[i])) continue\n        var len = Level.encodingLength(obj.levels[i])\n        length += varint.encodingLength(len)\n        length += 1 + len\n      }\n    }\n    return length\n  }\n\n  function encode (obj, buf, offset) {\n    if (!offset) offset = 0\n    if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))\n    var oldOffset = offset\n    if (defined(obj.levels)) {\n      for (var i = 0; i < obj.levels.length; i++) {\n        if (!defined(obj.levels[i])) continue\n        buf[offset++] = 10\n        varint.encode(Level.encodingLength(obj.levels[i]), buf, offset)\n        offset += varint.encode.bytes\n        Level.encode(obj.levels[i], buf, offset)\n        offset += Level.encode.bytes\n      }\n    }\n    encode.bytes = offset - oldOffset\n    return buf\n  }\n\n  function decode (buf, offset, end) {\n    if (!offset) offset = 0\n    if (!end) end = buf.length\n    if (!(end <= buf.length && offset <= buf.length)) throw new Error(\"Decoded message is not valid\")\n    var oldOffset = offset\n    var obj = {\n      levels: []\n    }\n    while (true) {\n      if (end <= offset) {\n        decode.bytes = offset - oldOffset\n        return obj\n      }\n      var prefix = varint.decode(buf, offset)\n      offset += varint.decode.bytes\n      var tag = prefix >> 3\n      switch (tag) {\n        case 1:\n        var len = varint.decode(buf, offset)\n        offset += varint.decode.bytes\n        obj.levels.push(Level.decode(buf, offset, offset + len))\n        offset += Level.decode.bytes\n        break\n        default:\n        offset = skip(prefix & 7, buf, offset)\n      }\n    }\n  }\n}\n\nfunction defineHeader () {\n  var Metadata = Header.Metadata = {\n    buffer: true,\n    encodingLength: null,\n    encode: null,\n    decode: null\n  }\n\n  defineMetadata()\n\n  function defineMetadata () {\n    Metadata.encodingLength = encodingLength\n    Metadata.encode = encode\n    Metadata.decode = decode\n\n    function encodingLength (obj) {\n      var length = 0\n      if (defined(obj.contentFeed)) {\n        var len = encodings.bytes.encodingLength(obj.contentFeed)\n        length += 1 + len\n      }\n      if (defined(obj.userData)) {\n        var len = encodings.bytes.encodingLength(obj.userData)\n        length += 1 + len\n      }\n      return length\n    }\n\n    function encode (obj, buf, offset) {\n      if (!offset) offset = 0\n      if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))\n      var oldOffset = offset\n      if (defined(obj.contentFeed)) {\n        buf[offset++] = 10\n        encodings.bytes.encode(obj.contentFeed, buf, offset)\n        offset += encodings.bytes.encode.bytes\n      }\n      if (defined(obj.userData)) {\n        buf[offset++] = 18\n        encodings.bytes.encode(obj.userData, buf, offset)\n        offset += encodings.bytes.encode.bytes\n      }\n      encode.bytes = offset - oldOffset\n      return buf\n    }\n\n    function decode (buf, offset, end) {\n      if (!offset) offset = 0\n      if (!end) end = buf.length\n      if (!(end <= buf.length && offset <= buf.length)) throw new Error(\"Decoded message is not valid\")\n      var oldOffset = offset\n      var obj = {\n        contentFeed: null,\n        userData: null\n      }\n      while (true) {\n        if (end <= offset) {\n          decode.bytes = offset - oldOffset\n          return obj\n        }\n        var prefix = varint.decode(buf, offset)\n        offset += varint.decode.bytes\n        var tag = prefix >> 3\n        switch (tag) {\n          case 1:\n          obj.contentFeed = encodings.bytes.decode(buf, offset)\n          offset += encodings.bytes.decode.bytes\n          break\n          case 2:\n          obj.userData = encodings.bytes.decode(buf, offset)\n          offset += encodings.bytes.decode.bytes\n          break\n          default:\n          offset = skip(prefix & 7, buf, offset)\n        }\n      }\n    }\n  }\n\n  Header.encodingLength = encodingLength\n  Header.encode = encode\n  Header.decode = decode\n\n  function encodingLength (obj) {\n    var length = 0\n    if (!defined(obj.protocol)) throw new Error(\"protocol is required\")\n    var len = encodings.string.encodingLength(obj.protocol)\n    length += 1 + len\n    if (defined(obj.metadata)) {\n      var len = Metadata.encodingLength(obj.metadata)\n      length += varint.encodingLength(len)\n      length += 1 + len\n    }\n    return length\n  }\n\n  function encode (obj, buf, offset) {\n    if (!offset) offset = 0\n    if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))\n    var oldOffset = offset\n    if (!defined(obj.protocol)) throw new Error(\"protocol is required\")\n    buf[offset++] = 10\n    encodings.string.encode(obj.protocol, buf, offset)\n    offset += encodings.string.encode.bytes\n    if (defined(obj.metadata)) {\n      buf[offset++] = 18\n      varint.encode(Metadata.encodingLength(obj.metadata), buf, offset)\n      offset += varint.encode.bytes\n      Metadata.encode(obj.metadata, buf, offset)\n      offset += Metadata.encode.bytes\n    }\n    encode.bytes = offset - oldOffset\n    return buf\n  }\n\n  function decode (buf, offset, end) {\n    if (!offset) offset = 0\n    if (!end) end = buf.length\n    if (!(end <= buf.length && offset <= buf.length)) throw new Error(\"Decoded message is not valid\")\n    var oldOffset = offset\n    var obj = {\n      protocol: \"\",\n      metadata: null\n    }\n    var found0 = false\n    while (true) {\n      if (end <= offset) {\n        if (!found0) throw new Error(\"Decoded message is not valid\")\n        decode.bytes = offset - oldOffset\n        return obj\n      }\n      var prefix = varint.decode(buf, offset)\n      offset += varint.decode.bytes\n      var tag = prefix >> 3\n      switch (tag) {\n        case 1:\n        obj.protocol = encodings.string.decode(buf, offset)\n        offset += encodings.string.decode.bytes\n        found0 = true\n        break\n        case 2:\n        var len = varint.decode(buf, offset)\n        offset += varint.decode.bytes\n        obj.metadata = Metadata.decode(buf, offset, offset + len)\n        offset += Metadata.decode.bytes\n        break\n        default:\n        offset = skip(prefix & 7, buf, offset)\n      }\n    }\n  }\n}\n\nfunction defineNode () {\n  Node.encodingLength = encodingLength\n  Node.encode = encode\n  Node.decode = decode\n\n  function encodingLength (obj) {\n    var length = 0\n    if (!defined(obj.index)) throw new Error(\"index is required\")\n    var len = encodings.bytes.encodingLength(obj.index)\n    length += 1 + len\n    if (!defined(obj.key)) throw new Error(\"key is required\")\n    var len = encodings.bytes.encodingLength(obj.key)\n    length += 1 + len\n    if (defined(obj.value)) {\n      var len = encodings.bytes.encodingLength(obj.value)\n      length += 1 + len\n    }\n    return length\n  }\n\n  function encode (obj, buf, offset) {\n    if (!offset) offset = 0\n    if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))\n    var oldOffset = offset\n    if (!defined(obj.index)) throw new Error(\"index is required\")\n    buf[offset++] = 10\n    encodings.bytes.encode(obj.index, buf, offset)\n    offset += encodings.bytes.encode.bytes\n    if (!defined(obj.key)) throw new Error(\"key is required\")\n    buf[offset++] = 18\n    encodings.bytes.encode(obj.key, buf, offset)\n    offset += encodings.bytes.encode.bytes\n    if (defined(obj.value)) {\n      buf[offset++] = 26\n      encodings.bytes.encode(obj.value, buf, offset)\n      offset += encodings.bytes.encode.bytes\n    }\n    encode.bytes = offset - oldOffset\n    return buf\n  }\n\n  function decode (buf, offset, end) {\n    if (!offset) offset = 0\n    if (!end) end = buf.length\n    if (!(end <= buf.length && offset <= buf.length)) throw new Error(\"Decoded message is not valid\")\n    var oldOffset = offset\n    var obj = {\n      index: null,\n      key: null,\n      value: null\n    }\n    var found0 = false\n    var found1 = false\n    while (true) {\n      if (end <= offset) {\n        if (!found0 || !found1) throw new Error(\"Decoded message is not valid\")\n        decode.bytes = offset - oldOffset\n        return obj\n      }\n      var prefix = varint.decode(buf, offset)\n      offset += varint.decode.bytes\n      var tag = prefix >> 3\n      switch (tag) {\n        case 1:\n        obj.index = encodings.bytes.decode(buf, offset)\n        offset += encodings.bytes.decode.bytes\n        found0 = true\n        break\n        case 2:\n        obj.key = encodings.bytes.decode(buf, offset)\n        offset += encodings.bytes.decode.bytes\n        found1 = true\n        break\n        case 3:\n        obj.value = encodings.bytes.decode(buf, offset)\n        offset += encodings.bytes.decode.bytes\n        break\n        default:\n        offset = skip(prefix & 7, buf, offset)\n      }\n    }\n  }\n}\n\nfunction defineExtension () {\n  var Get = Extension.Get = {\n    buffer: true,\n    encodingLength: null,\n    encode: null,\n    decode: null\n  }\n\n  var Iterator = Extension.Iterator = {\n    buffer: true,\n    encodingLength: null,\n    encode: null,\n    decode: null\n  }\n\n  var Cache = Extension.Cache = {\n    buffer: true,\n    encodingLength: null,\n    encode: null,\n    decode: null\n  }\n\n  defineGet()\n  defineIterator()\n  defineCache()\n\n  function defineGet () {\n    Get.encodingLength = encodingLength\n    Get.encode = encode\n    Get.decode = decode\n\n    function encodingLength (obj) {\n      var length = 0\n      if (defined(obj.version)) {\n        var len = encodings.varint.encodingLength(obj.version)\n        length += 1 + len\n      }\n      if (defined(obj.key)) {\n        var len = encodings.bytes.encodingLength(obj.key)\n        length += 1 + len\n      }\n      return length\n    }\n\n    function encode (obj, buf, offset) {\n      if (!offset) offset = 0\n      if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))\n      var oldOffset = offset\n      if (defined(obj.version)) {\n        buf[offset++] = 8\n        encodings.varint.encode(obj.version, buf, offset)\n        offset += encodings.varint.encode.bytes\n      }\n      if (defined(obj.key)) {\n        buf[offset++] = 18\n        encodings.bytes.encode(obj.key, buf, offset)\n        offset += encodings.bytes.encode.bytes\n      }\n      encode.bytes = offset - oldOffset\n      return buf\n    }\n\n    function decode (buf, offset, end) {\n      if (!offset) offset = 0\n      if (!end) end = buf.length\n      if (!(end <= buf.length && offset <= buf.length)) throw new Error(\"Decoded message is not valid\")\n      var oldOffset = offset\n      var obj = {\n        version: 0,\n        key: null\n      }\n      while (true) {\n        if (end <= offset) {\n          decode.bytes = offset - oldOffset\n          return obj\n        }\n        var prefix = varint.decode(buf, offset)\n        offset += varint.decode.bytes\n        var tag = prefix >> 3\n        switch (tag) {\n          case 1:\n          obj.version = encodings.varint.decode(buf, offset)\n          offset += encodings.varint.decode.bytes\n          break\n          case 2:\n          obj.key = encodings.bytes.decode(buf, offset)\n          offset += encodings.bytes.decode.bytes\n          break\n          default:\n          offset = skip(prefix & 7, buf, offset)\n        }\n      }\n    }\n  }\n\n  function defineIterator () {\n    Iterator.encodingLength = encodingLength\n    Iterator.encode = encode\n    Iterator.decode = decode\n\n    function encodingLength (obj) {\n      var length = 0\n      if (defined(obj.version)) {\n        var len = encodings.varint.encodingLength(obj.version)\n        length += 1 + len\n      }\n      if (defined(obj.gte)) {\n        var len = encodings.bytes.encodingLength(obj.gte)\n        length += 1 + len\n      }\n      if (defined(obj.gt)) {\n        var len = encodings.bytes.encodingLength(obj.gt)\n        length += 1 + len\n      }\n      if (defined(obj.lte)) {\n        var len = encodings.bytes.encodingLength(obj.lte)\n        length += 1 + len\n      }\n      if (defined(obj.lt)) {\n        var len = encodings.bytes.encodingLength(obj.lt)\n        length += 1 + len\n      }\n      if (defined(obj.limit)) {\n        var len = encodings.varint.encodingLength(obj.limit)\n        length += 1 + len\n      }\n      if (defined(obj.reverse)) {\n        var len = encodings.bool.encodingLength(obj.reverse)\n        length += 1 + len\n      }\n      if (defined(obj.checkpoint)) {\n        var packedLen = 0\n        for (var i = 0; i < obj.checkpoint.length; i++) {\n          if (!defined(obj.checkpoint[i])) continue\n          var len = encodings.varint.encodingLength(obj.checkpoint[i])\n          packedLen += len\n        }\n        if (packedLen) {\n          length += 1 + packedLen + varint.encodingLength(packedLen)\n        }\n      }\n      return length\n    }\n\n    function encode (obj, buf, offset) {\n      if (!offset) offset = 0\n      if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))\n      var oldOffset = offset\n      if (defined(obj.version)) {\n        buf[offset++] = 8\n        encodings.varint.encode(obj.version, buf, offset)\n        offset += encodings.varint.encode.bytes\n      }\n      if (defined(obj.gte)) {\n        buf[offset++] = 18\n        encodings.bytes.encode(obj.gte, buf, offset)\n        offset += encodings.bytes.encode.bytes\n      }\n      if (defined(obj.gt)) {\n        buf[offset++] = 26\n        encodings.bytes.encode(obj.gt, buf, offset)\n        offset += encodings.bytes.encode.bytes\n      }\n      if (defined(obj.lte)) {\n        buf[offset++] = 34\n        encodings.bytes.encode(obj.lte, buf, offset)\n        offset += encodings.bytes.encode.bytes\n      }\n      if (defined(obj.lt)) {\n        buf[offset++] = 42\n        encodings.bytes.encode(obj.lt, buf, offset)\n        offset += encodings.bytes.encode.bytes\n      }\n      if (defined(obj.limit)) {\n        buf[offset++] = 48\n        encodings.varint.encode(obj.limit, buf, offset)\n        offset += encodings.varint.encode.bytes\n      }\n      if (defined(obj.reverse)) {\n        buf[offset++] = 56\n        encodings.bool.encode(obj.reverse, buf, offset)\n        offset += encodings.bool.encode.bytes\n      }\n      if (defined(obj.checkpoint)) {\n        var packedLen = 0\n        for (var i = 0; i < obj.checkpoint.length; i++) {\n          if (!defined(obj.checkpoint[i])) continue\n          packedLen += encodings.varint.encodingLength(obj.checkpoint[i])\n        }\n        if (packedLen) {\n          buf[offset++] = 66\n          varint.encode(packedLen, buf, offset)\n          offset += varint.encode.bytes\n        }\n        for (var i = 0; i < obj.checkpoint.length; i++) {\n          if (!defined(obj.checkpoint[i])) continue\n          encodings.varint.encode(obj.checkpoint[i], buf, offset)\n          offset += encodings.varint.encode.bytes\n        }\n      }\n      encode.bytes = offset - oldOffset\n      return buf\n    }\n\n    function decode (buf, offset, end) {\n      if (!offset) offset = 0\n      if (!end) end = buf.length\n      if (!(end <= buf.length && offset <= buf.length)) throw new Error(\"Decoded message is not valid\")\n      var oldOffset = offset\n      var obj = {\n        version: 0,\n        gte: null,\n        gt: null,\n        lte: null,\n        lt: null,\n        limit: 0,\n        reverse: false,\n        checkpoint: []\n      }\n      while (true) {\n        if (end <= offset) {\n          decode.bytes = offset - oldOffset\n          return obj\n        }\n        var prefix = varint.decode(buf, offset)\n        offset += varint.decode.bytes\n        var tag = prefix >> 3\n        switch (tag) {\n          case 1:\n          obj.version = encodings.varint.decode(buf, offset)\n          offset += encodings.varint.decode.bytes\n          break\n          case 2:\n          obj.gte = encodings.bytes.decode(buf, offset)\n          offset += encodings.bytes.decode.bytes\n          break\n          case 3:\n          obj.gt = encodings.bytes.decode(buf, offset)\n          offset += encodings.bytes.decode.bytes\n          break\n          case 4:\n          obj.lte = encodings.bytes.decode(buf, offset)\n          offset += encodings.bytes.decode.bytes\n          break\n          case 5:\n          obj.lt = encodings.bytes.decode(buf, offset)\n          offset += encodings.bytes.decode.bytes\n          break\n          case 6:\n          obj.limit = encodings.varint.decode(buf, offset)\n          offset += encodings.varint.decode.bytes\n          break\n          case 7:\n          obj.reverse = encodings.bool.decode(buf, offset)\n          offset += encodings.bool.decode.bytes\n          break\n          case 8:\n          var packedEnd = varint.decode(buf, offset)\n          offset += varint.decode.bytes\n          packedEnd += offset\n          while (offset < packedEnd) {\n            obj.checkpoint.push(encodings.varint.decode(buf, offset))\n            offset += encodings.varint.decode.bytes\n          }\n          break\n          default:\n          offset = skip(prefix & 7, buf, offset)\n        }\n      }\n    }\n  }\n\n  function defineCache () {\n    Cache.encodingLength = encodingLength\n    Cache.encode = encode\n    Cache.decode = decode\n\n    function encodingLength (obj) {\n      var length = 0\n      if (!defined(obj.start)) throw new Error(\"start is required\")\n      var len = encodings.varint.encodingLength(obj.start)\n      length += 1 + len\n      if (!defined(obj.end)) throw new Error(\"end is required\")\n      var len = encodings.varint.encodingLength(obj.end)\n      length += 1 + len\n      if (defined(obj.blocks)) {\n        var packedLen = 0\n        for (var i = 0; i < obj.blocks.length; i++) {\n          if (!defined(obj.blocks[i])) continue\n          var len = encodings.varint.encodingLength(obj.blocks[i])\n          packedLen += len\n        }\n        if (packedLen) {\n          length += 1 + packedLen + varint.encodingLength(packedLen)\n        }\n      }\n      return length\n    }\n\n    function encode (obj, buf, offset) {\n      if (!offset) offset = 0\n      if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))\n      var oldOffset = offset\n      if (!defined(obj.start)) throw new Error(\"start is required\")\n      buf[offset++] = 8\n      encodings.varint.encode(obj.start, buf, offset)\n      offset += encodings.varint.encode.bytes\n      if (!defined(obj.end)) throw new Error(\"end is required\")\n      buf[offset++] = 16\n      encodings.varint.encode(obj.end, buf, offset)\n      offset += encodings.varint.encode.bytes\n      if (defined(obj.blocks)) {\n        var packedLen = 0\n        for (var i = 0; i < obj.blocks.length; i++) {\n          if (!defined(obj.blocks[i])) continue\n          packedLen += encodings.varint.encodingLength(obj.blocks[i])\n        }\n        if (packedLen) {\n          buf[offset++] = 26\n          varint.encode(packedLen, buf, offset)\n          offset += varint.encode.bytes\n        }\n        for (var i = 0; i < obj.blocks.length; i++) {\n          if (!defined(obj.blocks[i])) continue\n          encodings.varint.encode(obj.blocks[i], buf, offset)\n          offset += encodings.varint.encode.bytes\n        }\n      }\n      encode.bytes = offset - oldOffset\n      return buf\n    }\n\n    function decode (buf, offset, end) {\n      if (!offset) offset = 0\n      if (!end) end = buf.length\n      if (!(end <= buf.length && offset <= buf.length)) throw new Error(\"Decoded message is not valid\")\n      var oldOffset = offset\n      var obj = {\n        start: 0,\n        end: 0,\n        blocks: []\n      }\n      var found0 = false\n      var found1 = false\n      while (true) {\n        if (end <= offset) {\n          if (!found0 || !found1) throw new Error(\"Decoded message is not valid\")\n          decode.bytes = offset - oldOffset\n          return obj\n        }\n        var prefix = varint.decode(buf, offset)\n        offset += varint.decode.bytes\n        var tag = prefix >> 3\n        switch (tag) {\n          case 1:\n          obj.start = encodings.varint.decode(buf, offset)\n          offset += encodings.varint.decode.bytes\n          found0 = true\n          break\n          case 2:\n          obj.end = encodings.varint.decode(buf, offset)\n          offset += encodings.varint.decode.bytes\n          found1 = true\n          break\n          case 3:\n          var packedEnd = varint.decode(buf, offset)\n          offset += varint.decode.bytes\n          packedEnd += offset\n          while (offset < packedEnd) {\n            obj.blocks.push(encodings.varint.decode(buf, offset))\n            offset += encodings.varint.decode.bytes\n          }\n          break\n          default:\n          offset = skip(prefix & 7, buf, offset)\n        }\n      }\n    }\n  }\n\n  Extension.encodingLength = encodingLength\n  Extension.encode = encode\n  Extension.decode = decode\n\n  function encodingLength (obj) {\n    var length = 0\n    if (defined(obj.cache)) {\n      var len = Cache.encodingLength(obj.cache)\n      length += varint.encodingLength(len)\n      length += 1 + len\n    }\n    if (defined(obj.get)) {\n      var len = Get.encodingLength(obj.get)\n      length += varint.encodingLength(len)\n      length += 1 + len\n    }\n    if (defined(obj.iterator)) {\n      var len = Iterator.encodingLength(obj.iterator)\n      length += varint.encodingLength(len)\n      length += 1 + len\n    }\n    return length\n  }\n\n  function encode (obj, buf, offset) {\n    if (!offset) offset = 0\n    if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))\n    var oldOffset = offset\n    if (defined(obj.cache)) {\n      buf[offset++] = 10\n      varint.encode(Cache.encodingLength(obj.cache), buf, offset)\n      offset += varint.encode.bytes\n      Cache.encode(obj.cache, buf, offset)\n      offset += Cache.encode.bytes\n    }\n    if (defined(obj.get)) {\n      buf[offset++] = 18\n      varint.encode(Get.encodingLength(obj.get), buf, offset)\n      offset += varint.encode.bytes\n      Get.encode(obj.get, buf, offset)\n      offset += Get.encode.bytes\n    }\n    if (defined(obj.iterator)) {\n      buf[offset++] = 26\n      varint.encode(Iterator.encodingLength(obj.iterator), buf, offset)\n      offset += varint.encode.bytes\n      Iterator.encode(obj.iterator, buf, offset)\n      offset += Iterator.encode.bytes\n    }\n    encode.bytes = offset - oldOffset\n    return buf\n  }\n\n  function decode (buf, offset, end) {\n    if (!offset) offset = 0\n    if (!end) end = buf.length\n    if (!(end <= buf.length && offset <= buf.length)) throw new Error(\"Decoded message is not valid\")\n    var oldOffset = offset\n    var obj = {\n      cache: null,\n      get: null,\n      iterator: null\n    }\n    while (true) {\n      if (end <= offset) {\n        decode.bytes = offset - oldOffset\n        return obj\n      }\n      var prefix = varint.decode(buf, offset)\n      offset += varint.decode.bytes\n      var tag = prefix >> 3\n      switch (tag) {\n        case 1:\n        var len = varint.decode(buf, offset)\n        offset += varint.decode.bytes\n        obj.cache = Cache.decode(buf, offset, offset + len)\n        offset += Cache.decode.bytes\n        break\n        case 2:\n        var len = varint.decode(buf, offset)\n        offset += varint.decode.bytes\n        obj.get = Get.decode(buf, offset, offset + len)\n        offset += Get.decode.bytes\n        break\n        case 3:\n        var len = varint.decode(buf, offset)\n        offset += varint.decode.bytes\n        obj.iterator = Iterator.decode(buf, offset, offset + len)\n        offset += Iterator.decode.bytes\n        break\n        default:\n        offset = skip(prefix & 7, buf, offset)\n      }\n    }\n  }\n}\n\nfunction defined (val) {\n  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))\n}\n{\n  \"name\": \"hyperbee\",\n  \"version\": \"2.23.1\",\n  \"description\": \"An append-only B-tree running on a Hypercore.\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"lib/**.js\",\n    \"iterators/**.js\"\n  ],\n  \"dependencies\": {\n    \"b4a\": \"^1.6.0\",\n    \"codecs\": \"^3.0.0\",\n    \"debounceify\": \"^1.0.0\",\n    \"hypercore-errors\": \"^1.0.0\",\n    \"mutexify\": \"^1.4.0\",\n    \"protocol-buffers-encodings\": \"^1.2.0\",\n    \"rache\": \"^1.0.0\",\n    \"ready-resource\": \"^1.0.0\",\n    \"safety-catch\": \"^1.0.2\",\n    \"streamx\": \"^2.12.4\",\n    \"unslab\": \"^1.2.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.0\",\n    \"hypercore\": \"^11.0.0\",\n    \"protocol-buffers\": \"^4.2.0\",\n    \"standard\": \"^17.0.0\",\n    \"sub-encoder\": \"^1.0.6\",\n    \"tree-to-string\": \"^1.1.1\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test/*.js\",\n    \"protobuf\": \"protocol-buffers schema.proto -o ./lib/messages.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/holepunchto/hyperbee.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/hyperbee/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/hyperbee\"\n}\nconst mutexify = require('mutexify')\nconst b4a = require('b4a')\n\nconst { BlobReadStream, BlobWriteStream } = require('./lib/streams')\nconst Monitor = require('./lib/monitor')\n\nconst DEFAULT_BLOCK_SIZE = 2 ** 16\n\nclass HyperBlobsBatch {\n  constructor (blobs) {\n    this.blobs = blobs\n    this.blocks = []\n    this.bytes = 0\n  }\n\n  ready () {\n    return this.blobs.ready()\n  }\n\n  async put (buffer) {\n    if (!this.blobs.core.opened) await this.blobs.core.ready()\n\n    const blockSize = this.blobs.blockSize\n    const result = {\n      blockOffset: this.blobs.core.length + this.blocks.length,\n      blockLength: 0,\n      byteOffset: this.blobs.core.byteLength + this.bytes,\n      byteLength: 0\n    }\n\n    let offset = 0\n    while (offset < buffer.byteLength) {\n      const blk = buffer.subarray(offset, offset + blockSize)\n      offset += blockSize\n\n      result.blockLength++\n      result.byteLength += blk.byteLength\n      this.bytes += blk.byteLength\n      this.blocks.push(blk)\n    }\n\n    return result\n  }\n\n  async get (id) {\n    if (id.blockOffset < this.blobs.core.length) {\n      return this.blobs.get(id)\n    }\n\n    const bufs = []\n\n    for (let i = id.blockOffset - this.blobs.core.length; i < id.blockOffset + id.blockLength; i++) {\n      if (i >= this.blocks.length) return null\n      bufs.push(this.blocks[i])\n    }\n\n    return bufs.length === 1 ? bufs[0] : b4a.concat(bufs)\n  }\n\n  async flush () {\n    await this.blobs.core.append(this.blocks)\n    this.blocks = []\n    this.bytes = 0\n  }\n\n  close () {\n    // noop, atm nothing to unlink\n  }\n}\n\nclass Hyperblobs {\n  constructor (core, opts = {}) {\n    this.core = core\n    this.blockSize = opts.blockSize || DEFAULT_BLOCK_SIZE\n\n    this._lock = mutexify()\n    this._monitors = new Set()\n\n    this._boundUpdatePeers = this._updatePeers.bind(this)\n    this._boundOnUpload = this._onUpload.bind(this)\n    this._boundOnDownload = this._onDownload.bind(this)\n  }\n\n  get key () {\n    return this.core.key\n  }\n\n  get discoveryKey () {\n    return this.core.discoveryKey\n  }\n\n  get feed () {\n    return this.core\n  }\n\n  get locked () {\n    return this._lock.locked\n  }\n\n  replicate (isInitiator, opts) {\n    return this.core.replicate(isInitiator, opts)\n  }\n\n  ready () {\n    return this.core.ready()\n  }\n\n  close () {\n    return this.core.close()\n  }\n\n  batch () {\n    return new HyperBlobsBatch(this)\n  }\n\n  snapshot () {\n    return new Hyperblobs(this.core.snapshot())\n  }\n\n  async put (blob, opts) {\n    if (!b4a.isBuffer(blob)) blob = b4a.from(blob)\n    const blockSize = (opts && opts.blockSize) || this.blockSize\n\n    const stream = this.createWriteStream(opts)\n    for (let i = 0; i < blob.length; i += blockSize) {\n      stream.write(blob.subarray(i, i + blockSize))\n    }\n    stream.end()\n\n    return new Promise((resolve, reject) => {\n      stream.once('error', reject)\n      stream.once('close', () => resolve(stream.id))\n    })\n  }\n\n  async _getAll (id, opts) {\n    if (id.blockLength === 1) return this.core.get(id.blockOffset, opts)\n\n    const promises = new Array(id.blockLength)\n    for (let i = 0; i < id.blockLength; i++) {\n      promises[i] = this.core.get(id.blockOffset + i, opts)\n    }\n\n    const blocks = await Promise.all(promises)\n    for (let i = 0; i < id.blockLength; i++) {\n      if (blocks[i] === null) return null\n    }\n    return b4a.concat(blocks)\n  }\n\n  async get (id, opts) {\n    const all = !opts || (!opts.start && opts.length === undefined && opts.end === undefined && !opts.core)\n    if (all) return this._getAll(id, opts)\n\n    const res = []\n    try {\n      for await (const block of this.createReadStream(id, opts)) {\n        res.push(block)\n      }\n    } catch (error) {\n      if (error.code === 'BLOCK_NOT_AVAILABLE') return null\n      throw error\n    }\n\n    if (res.length === 1) return res[0]\n    return b4a.concat(res)\n  }\n\n  async clear (id, opts) {\n    return this.core.clear(id.blockOffset, id.blockOffset + id.blockLength, opts)\n  }\n\n  createReadStream (id, opts) {\n    const core = (opts && opts.core) ? opts.core : this.core\n    return new BlobReadStream(core, id, opts)\n  }\n\n  createWriteStream (opts) {\n    const core = (opts && opts.core) ? opts.core : this.core\n    return new BlobWriteStream(core, this._lock, opts)\n  }\n\n  monitor (id) {\n    const monitor = new Monitor(this, id)\n    if (this._monitors.size === 0) this._startListening()\n    this._monitors.add(monitor)\n    return monitor\n  }\n\n  _removeMonitor (mon) {\n    this._monitors.delete(mon)\n    if (this._monitors.size === 0) this._stopListening()\n  }\n\n  _updatePeers () {\n    for (const m of this._monitors) m._updatePeers()\n  }\n\n  _onUpload (index, bytes, from) {\n    for (const m of this._monitors) m._onUpload(index, bytes, from)\n  }\n\n  _onDownload (index, bytes, from) {\n    for (const m of this._monitors) m._onDownload(index, bytes, from)\n  }\n\n  _startListening () {\n    this.core.on('peer-add', this._boundUpdatePeers)\n    this.core.on('peer-remove', this._boundUpdatePeers)\n    this.core.on('upload', this._boundOnUpload)\n    this.core.on('download', this._boundOnDownload)\n  }\n\n  _stopListening () {\n    this.core.off('peer-add', this._boundUpdatePeers)\n    this.core.off('peer-remove', this._boundUpdatePeers)\n    this.core.off('upload', this._boundOnUpload)\n    this.core.off('download', this._boundOnDownload)\n  }\n}\n\nmodule.exports = Hyperblobs\nconst EventEmitter = require('events')\nconst speedometer = require('speedometer')\n\nmodule.exports = class Monitor extends EventEmitter {\n  constructor (blobs, id) {\n    super()\n\n    if (!id) throw new Error('id is required')\n\n    this.blobs = blobs\n    this.id = id\n    this.peers = 0\n    this.uploadSpeedometer = null\n    this.downloadSpeedometer = null\n\n    const stats = {\n      startTime: 0,\n      percentage: 0,\n      peers: 0,\n      speed: 0,\n      blocks: 0,\n      totalBytes: 0, // local + bytes loaded during monitoring\n      monitoringBytes: 0, // bytes loaded during monitoring\n      targetBytes: 0,\n      targetBlocks: 0\n    }\n\n    this.uploadStats = { ...stats }\n    this.downloadStats = { ...stats }\n    this.uploadStats.targetBytes = this.downloadStats.targetBytes = this.id.byteLength\n    this.uploadStats.targetBlocks = this.downloadStats.targetBlocks = this.id.blockLength\n    this.uploadStats.peers = this.downloadStats.peers = this.peers = this.blobs.core.peers.length\n\n    this.uploadSpeedometer = speedometer()\n    this.downloadSpeedometer = speedometer()\n\n    // Handlers\n  }\n\n  // just an alias\n  destroy () {\n    return this.close()\n  }\n\n  close () {\n    this.blobs._removeMonitor(this)\n  }\n\n  _onUpload (index, bytes, from) {\n    this._updateStats(this.uploadSpeedometer, this.uploadStats, index, bytes, from)\n  }\n\n  _onDownload (index, bytes, from) {\n    this._updateStats(this.downloadSpeedometer, this.downloadStats, index, bytes, from)\n  }\n\n  _updatePeers () {\n    this.uploadStats.peers = this.downloadStats.peers = this.peers = this.blobs.core.peers.length\n    this.emit('update')\n  }\n\n  _updateStats (speed, stats, index, bytes) {\n    if (this.closing) return\n    if (!isWithinRange(index, this.id)) return\n\n    if (!stats.startTime) stats.startTime = Date.now()\n\n    stats.speed = speed(bytes)\n    stats.blocks++\n    stats.totalBytes += bytes\n    stats.monitoringBytes += bytes\n    stats.percentage = toFixed(stats.blocks / stats.targetBlocks * 100)\n\n    this.emit('update')\n  }\n\n  downloadSpeed () {\n    return this.downloadSpeedometer ? this.downloadSpeedometer() : 0\n  }\n\n  uploadSpeed () {\n    return this.uploadSpeedometer ? this.uploadSpeedometer() : 0\n  }\n}\n\nfunction isWithinRange (index, { blockOffset, blockLength }) {\n  return index >= blockOffset && index < blockOffset + blockLength\n}\n\nfunction toFixed (n) {\n  return Math.round(n * 100) / 100\n}\n// should move to hypercore itself\n\nconst MAX_READAHEAD_TARGET = 0.05 // aim to buffer 5% always\n\nmodule.exports = class Prefetcher {\n  constructor (core, { max = 64, start = 0, end = core.length, linear = true } = {}) {\n    this.core = core\n    this.max = max\n    this.range = null\n    this.startBound = start\n    this.endBound = end\n    this.maxReadAhead = Math.max(max * 2, Math.floor((end - start) * MAX_READAHEAD_TARGET))\n\n    this.start = start\n    this.end = start\n    this.linear = linear\n    this.missing = 0\n\n    this._ondownloadBound = this._ondownload.bind(this)\n    this.core.on('download', this._ondownloadBound)\n  }\n\n  _ondownload (index) {\n    if (this.range && index < this.end && this.start <= index) {\n      this.missing--\n      this._update()\n    }\n  }\n\n  destroy () {\n    this.core.off('download', this._ondownloadBound)\n    if (this.range) this.range.destroy()\n    this.range = null\n    this.max = 0\n  }\n\n  update (position) {\n    this.start = position\n    if (!this.range) this._update()\n  }\n\n  _update () {\n    if (this.missing >= this.max) return\n    if (this.range) this.range.destroy()\n\n    let end = this.end\n\n    while (end < this.endBound && this.missing < this.max) {\n      end = this.core.core.bitfield.firstUnset(end) + 1\n      if (end >= this.endBound) break\n      this.missing++\n    }\n\n    if (end > this.start + this.maxReadAhead) end = this.start + this.maxReadAhead\n    if (end >= this.endBound) end = this.endBound\n\n    this.end = end\n\n    if (this.start >= this.end) return\n\n    this.range = this.core.download({\n      start: this.start,\n      end: this.end,\n      linear: this.linear\n    })\n  }\n}\nconst { Readable, Writable } = require('streamx')\nconst { BLOCK_NOT_AVAILABLE } = require('hypercore-errors')\nconst Prefetcher = require('./prefetcher')\n\nclass BlobWriteStream extends Writable {\n  constructor (core, lock, opts) {\n    super(opts)\n    this.id = {}\n    this.core = core\n    this._lock = lock\n    this._release = null\n    this._batch = []\n  }\n\n  _open (cb) {\n    this.core.ready().then(() => {\n      this._lock(release => {\n        this._release = release\n        this.id.byteOffset = this.core.byteLength\n        this.id.blockOffset = this.core.length\n        return cb(null)\n      })\n    }, err => cb(err))\n  }\n\n  _final (cb) {\n    this._append(err => {\n      if (err) return cb(err)\n      this.id.blockLength = this.core.length - this.id.blockOffset\n      this.id.byteLength = this.core.byteLength - this.id.byteOffset\n      return cb(null)\n    })\n  }\n\n  _destroy (cb) {\n    if (this._release) this._release()\n    cb(null)\n  }\n\n  _append (cb) {\n    if (!this._batch.length) return cb(null)\n    return this.core.append(this._batch).then(() => {\n      this._batch = []\n      return cb(null)\n    }, err => {\n      this._batch = []\n      return cb(err)\n    })\n  }\n\n  _write (data, cb) {\n    this._batch.push(data)\n    if (this._batch.length >= 16) return this._append(cb)\n    return cb(null)\n  }\n}\n\nclass BlobReadStream extends Readable {\n  constructor (core, id, opts = {}) {\n    super(opts)\n    this.id = id\n    this.core = core.session({ wait: opts.wait, timeout: opts.timeout })\n\n    const start = id.blockOffset\n    const end = id.blockOffset + id.blockLength\n    const noPrefetch = opts.wait === false || opts.prefetch === false || !core.core\n\n    this._prefetch = noPrefetch ? null : new Prefetcher(this.core, { max: opts.prefetch, start, end })\n    this._lastPrefetch = null\n\n    this._pos = opts.start !== undefined ? id.byteOffset + opts.start : id.byteOffset\n\n    if (opts.length !== undefined) this._end = this._pos + opts.length\n    else if (opts.end !== undefined) this._end = id.byteOffset + opts.end + 1\n    else this._end = id.byteOffset + id.byteLength\n\n    this._index = 0\n    this._relativeOffset = 0\n    this._bytesRead = 0\n  }\n\n  _open (cb) {\n    if (this._pos === this.id.byteOffset) {\n      this._index = this.id.blockOffset\n      this._relativeOffset = 0\n      return cb(null)\n    }\n\n    this.core.seek(this._pos, {\n      start: this.id.blockOffset,\n      end: this.id.blockOffset + this.id.blockLength\n    }).then(result => {\n      if (!result) return cb(BLOCK_NOT_AVAILABLE())\n\n      this._index = result[0]\n      this._relativeOffset = result[1]\n      return cb(null)\n    }, err => cb(err))\n  }\n\n  _predestroy () {\n    if (this._prefetch) this._prefetch.destroy()\n    this.core.close().then(noop, noop)\n  }\n\n  _destroy (cb) {\n    if (this._prefetch) this._prefetch.destroy()\n    this.core.close().then(cb, cb)\n  }\n\n  _read (cb) {\n    if (this._pos >= this._end) {\n      this.push(null)\n      return cb(null)\n    }\n\n    if (this._prefetch) this._prefetch.update(this._index)\n\n    this.core.get(this._index).then(block => {\n      if (!block) return cb(BLOCK_NOT_AVAILABLE())\n\n      const remainder = this._end - this._pos\n      if (this._relativeOffset || (remainder < block.length)) {\n        block = block.subarray(this._relativeOffset, this._relativeOffset + remainder)\n      }\n\n      this._index++\n      this._relativeOffset = 0\n      this._pos += block.length\n      this._bytesRead += block.length\n\n      this.push(block)\n      return cb(null)\n    }, err => cb(err))\n  }\n}\n\nmodule.exports = {\n  BlobReadStream,\n  BlobWriteStream\n}\n\nfunction noop () {}\n{\n  \"name\": \"hyperblobs\",\n  \"version\": \"2.8.0\",\n  \"description\": \"A blob store for Hypercore\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"standard && brittle test/*.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/hyperblobs.git\"\n  },\n  \"keywords\": [\n    \"hypercore\",\n    \"blob\",\n    \"store\"\n  ],\n  \"author\": \"Andrew Osheroff <andrewosh@gmail.com>\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/hyperblobs/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/hyperblobs#readme\",\n  \"files\": [\n    \"index.js\",\n    \"lib/**.js\"\n  ],\n  \"imports\": {\n    \"events\": {\n      \"bare\": \"bare-events\",\n      \"default\": \"events\"\n    }\n  },\n  \"dependencies\": {\n    \"b4a\": \"^1.6.1\",\n    \"bare-events\": \"^2.5.0\",\n    \"hypercore-errors\": \"^1.1.1\",\n    \"mutexify\": \"^1.4.0\",\n    \"speedometer\": \"^1.1.0\",\n    \"streamx\": \"^2.13.2\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.0\",\n    \"hypercore\": \"^10.18.0\",\n    \"random-access-memory\": \"^6.0.0\",\n    \"standard\": \"^17.0.0\"\n  }\n}\nconst sodium = require('sodium-universal')\nconst c = require('compact-encoding')\nconst b4a = require('b4a')\n\n// https://en.wikipedia.org/wiki/Merkle_tree#Second_preimage_attack\nconst LEAF_TYPE = b4a.from([0])\nconst PARENT_TYPE = b4a.from([1])\nconst ROOT_TYPE = b4a.from([2])\n\nconst HYPERCORE = b4a.from('hypercore')\n\nexports.keyPair = function (seed) {\n  // key pairs might stay around for a while, so better not to use a default slab to avoid retaining it completely\n  const slab = b4a.allocUnsafeSlow(sodium.crypto_sign_PUBLICKEYBYTES + sodium.crypto_sign_SECRETKEYBYTES)\n  const publicKey = slab.subarray(0, sodium.crypto_sign_PUBLICKEYBYTES)\n  const secretKey = slab.subarray(sodium.crypto_sign_PUBLICKEYBYTES)\n\n  if (seed) sodium.crypto_sign_seed_keypair(publicKey, secretKey, seed)\n  else sodium.crypto_sign_keypair(publicKey, secretKey)\n\n  return {\n    publicKey,\n    secretKey\n  }\n}\n\nexports.validateKeyPair = function (keyPair) {\n  const pk = b4a.allocUnsafe(sodium.crypto_sign_PUBLICKEYBYTES)\n  sodium.crypto_sign_ed25519_sk_to_pk(pk, keyPair.secretKey)\n  return b4a.equals(pk, keyPair.publicKey)\n}\n\nexports.sign = function (message, secretKey) {\n  // Dedicated slab for the signature, to avoid retaining unneeded mem and for security\n  const signature = b4a.allocUnsafeSlow(sodium.crypto_sign_BYTES)\n  sodium.crypto_sign_detached(signature, message, secretKey)\n  return signature\n}\n\nexports.verify = function (message, signature, publicKey) {\n  return sodium.crypto_sign_verify_detached(signature, message, publicKey)\n}\n\nexports.encrypt = function (message, publicKey) {\n  const ciphertext = b4a.alloc(message.byteLength + sodium.crypto_box_SEALBYTES)\n  sodium.crypto_box_seal(ciphertext, message, publicKey)\n  return ciphertext\n}\n\nexports.decrypt = function (ciphertext, keyPair) {\n  if (ciphertext.byteLength < sodium.crypto_box_SEALBYTES) return null\n\n  const plaintext = b4a.alloc(ciphertext.byteLength - sodium.crypto_box_SEALBYTES)\n\n  if (!sodium.crypto_box_seal_open(plaintext, ciphertext, keyPair.publicKey, keyPair.secretKey)) {\n    return null\n  }\n\n  return plaintext\n}\n\nexports.encryptionKeyPair = function (seed) {\n  const publicKey = b4a.alloc(sodium.crypto_box_PUBLICKEYBYTES)\n  const secretKey = b4a.alloc(sodium.crypto_box_SECRETKEYBYTES)\n\n  if (seed) {\n    sodium.crypto_box_seed_keypair(publicKey, secretKey, seed)\n  } else {\n    sodium.crypto_box_keypair(publicKey, secretKey)\n  }\n\n  return {\n    publicKey,\n    secretKey\n  }\n}\n\nexports.data = function (data) {\n  const out = b4a.allocUnsafe(32)\n\n  sodium.crypto_generichash_batch(out, [\n    LEAF_TYPE,\n    c.encode(c.uint64, data.byteLength),\n    data\n  ])\n\n  return out\n}\n\nexports.parent = function (a, b) {\n  if (a.index > b.index) {\n    const tmp = a\n    a = b\n    b = tmp\n  }\n\n  const out = b4a.allocUnsafe(32)\n\n  sodium.crypto_generichash_batch(out, [\n    PARENT_TYPE,\n    c.encode(c.uint64, a.size + b.size),\n    a.hash,\n    b.hash\n  ])\n\n  return out\n}\n\nexports.tree = function (roots, out) {\n  const buffers = new Array(3 * roots.length + 1)\n  let j = 0\n\n  buffers[j++] = ROOT_TYPE\n\n  for (let i = 0; i < roots.length; i++) {\n    const r = roots[i]\n    buffers[j++] = r.hash\n    buffers[j++] = c.encode(c.uint64, r.index)\n    buffers[j++] = c.encode(c.uint64, r.size)\n  }\n\n  if (!out) out = b4a.allocUnsafe(32)\n  sodium.crypto_generichash_batch(out, buffers)\n  return out\n}\n\nexports.hash = function (data, out) {\n  if (!out) out = b4a.allocUnsafe(32)\n  if (!Array.isArray(data)) data = [data]\n\n  sodium.crypto_generichash_batch(out, data)\n\n  return out\n}\n\nexports.randomBytes = function (n) {\n  const buf = b4a.allocUnsafe(n)\n  sodium.randombytes_buf(buf)\n  return buf\n}\n\nexports.discoveryKey = function (publicKey) {\n  // Discovery keys might stay around for a while, so better not to use slab memory (for better gc)\n  const digest = b4a.allocUnsafeSlow(32)\n  sodium.crypto_generichash(digest, HYPERCORE, publicKey)\n  return digest\n}\n\nif (sodium.sodium_free) {\n  exports.free = function (secureBuf) {\n    if (secureBuf.secure) sodium.sodium_free(secureBuf)\n  }\n} else {\n  exports.free = function () {}\n}\n\nexports.namespace = function (name, count) {\n  const ids = typeof count === 'number' ? range(count) : count\n\n  // Namespaces are long-lived, so better to use a dedicated slab\n  const buf = b4a.allocUnsafeSlow(32 * ids.length)\n\n  const list = new Array(ids.length)\n\n  // ns is emhemeral, so default slab\n  const ns = b4a.allocUnsafe(33)\n  sodium.crypto_generichash(ns.subarray(0, 32), typeof name === 'string' ? b4a.from(name) : name)\n\n  for (let i = 0; i < list.length; i++) {\n    list[i] = buf.subarray(32 * i, 32 * i + 32)\n    ns[32] = ids[i]\n    sodium.crypto_generichash(list[i], ns)\n  }\n\n  return list\n}\n\nfunction range (count) {\n  const arr = new Array(count)\n  for (let i = 0; i < count; i++) arr[i] = i\n  return arr\n}\n{\n  \"name\": \"hypercore-crypto\",\n  \"version\": \"3.5.0\",\n  \"description\": \"The crypto primitives used in hypercore, extracted into a separate module\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"b4a\": \"^1.6.6\",\n    \"compact-encoding\": \"^2.15.0\",\n    \"sodium-universal\": \"^4.0.1\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.5.0\",\n    \"standard\": \"^17.1.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/hypercore-crypto.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/hypercore-crypto/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/hypercore-crypto\"\n}\nconst sodium = require('sodium-universal')\nconst crypto = require('hypercore-crypto')\nconst ReadyResource = require('ready-resource')\nconst c = require('compact-encoding')\nconst b4a = require('b4a')\n\nconst [NS_BLOCK_KEY] = crypto.namespace('hypercore-encryption', 1)\n\nconst TYPES = {\n  LEGACY: 0,\n  BLOCK: 1\n}\n\nconst nonce = b4a.allocUnsafe(sodium.crypto_stream_NONCEBYTES)\n\nclass LegacyProvider {\n  static version = TYPES.LEGACY\n  static padding = 8\n\n  constructor (blockKey) {\n    this.blockKey = blockKey\n    this.blindingKey = b4a.allocUnsafe(sodium.crypto_stream_KEYBYTES)\n\n    this.seekable = true\n    this.padding = LegacyProvider.padding\n    this.version = LegacyProvider.version\n\n    sodium.crypto_generichash(this.blindingKey, this.blockKey)\n  }\n\n  ready () {\n    // api compat\n  }\n\n  encrypt (index, block, fork) {\n    return LegacyProvider.encrypt(index, block, fork, this.blockKey, this.blindingKey)\n  }\n\n  decrypt (index, block) {\n    return LegacyProvider.decrypt(index, block, this.blockKey)\n  }\n\n  static encrypt (index, block, fork, key, blindingKey) {\n    const padding = block.subarray(0, this.padding)\n    block = block.subarray(this.padding)\n\n    c.uint64.encode({ start: 0, end: 8, buffer: padding }, fork)\n    c.uint64.encode({ start: 0, end: 8, buffer: nonce }, index)\n\n    // Zero out any previous padding\n    nonce.fill(0, 8)\n\n    if (!blindingKey) blindingKey = crypto.hash(key)\n\n    // Blind the fork ID, possibly risking reusing the nonce on a reorg of the\n    // Hypercore. This is fine as the blinding is best-effort and the latest\n    // fork ID shared on replication anyway\n    encrypt(padding, nonce, blindingKey)\n\n    nonce.set(padding, 8, 8 + padding.byteLength)\n\n    // The combination of a (blinded) fork ID and a block index is unique for a\n    // given Hypercore and is therefore a valid nonce for encrypting the block\n    encrypt(block, nonce, key)\n  }\n\n  static decrypt (index, block, key) {\n    const padding = block.subarray(0, this.padding)\n    block = block.subarray(this.padding)\n\n    setNonce(index)\n\n    nonce.set(padding, 8)\n    nonce.fill(0, 8 + padding.byteLength)\n\n    // Decrypt the block using the blinded fork ID\n    decrypt(block, nonce, key)\n  }\n}\n\nclass BlockProvider {\n  static version = TYPES.BLOCK\n  static padding = 16\n\n  static encrypt (index, block, fork, keyInfo, blindingKey, id) {\n    const padding = block.subarray(0, this.padding)\n    block = block.subarray(this.padding)\n\n    // Unkeyed hash of block as we blind it later\n    sodium.crypto_generichash(padding, block)\n\n    // Encode padding\n    c.uint32.encode({ start: 0, end: 4, buffer: padding }, keyInfo.id)\n    c.uint32.encode({ start: 4, end: 8, buffer: padding }, fork)\n\n    setNonce(index)\n\n    // Blind key id, fork id and block hash\n    encrypt(padding, nonce, blindingKey)\n\n    nonce.set(padding, 8)\n\n    // The combination of index, key id, fork id and block hash is very likely\n    // to be unique for a given Hypercore and therefore our nonce is suitable\n    encrypt(block, nonce, keyInfo.key)\n  }\n\n  static decrypt (index, block, key, paddingBytes) {\n    if (paddingBytes !== this.padding) throw new Error('Unsupported padding')\n\n    const padding = block.subarray(0, this.padding)\n    block = block.subarray(this.padding)\n\n    setNonce(index)\n\n    nonce.set(padding, 8)\n\n    // Decrypt the block using the full nonce\n    decrypt(block, nonce, key)\n  }\n}\n\nclass HypercoreEncryption extends ReadyResource {\n  static KEYBYTES = sodium.crypto_stream_KEYBYTES\n\n  constructor (blindingKey, getBlockKey, opts = {}) {\n    super()\n\n    this.blindingKey = blindingKey\n    this.getBlockKey = getBlockKey // hook\n\n    const id = opts.id === undefined ? -1 : opts.id\n    this.current = { id, version: -1, key: null, padding: -1 }\n\n    this.keys = new Map()\n  }\n\n  get padding () {\n    return this.current ? this.current.padding : -1\n  }\n\n  get seekable () {\n    return this.padding !== 0\n  }\n\n  get id () {\n    return this.current ? this.current.id : -1\n  }\n\n  get version () {\n    return this.current ? this.current.version : -1\n  }\n\n  async _open () {\n    if (this.current !== null) return this.load(this.current.id)\n  }\n\n  async _get (id) {\n    if (this.keys.has(id)) return this.keys.get(id)\n\n    const info = await this.getBlockKey(id)\n    if (!info) throw new Error('Unrecognised encryption id')\n\n    this.keys.set(id, info)\n\n    return info\n  }\n\n  async load (id) {\n    const info = await this._get(id)\n\n    this.current = {\n      id,\n      version: info.version,\n      key: info.key,\n      padding: info.padding\n    }\n  }\n\n  _parseId (index, block) {\n    const id = b4a.alloc(4)\n    id.set(block.subarray(0, 4))\n\n    c.uint64.encode({ start: 0, end: 8, buffer: nonce }, index)\n    nonce.fill(0, 8)\n\n    encrypt(id, nonce, this.blindingKey)\n\n    return c.uint32.decode({ start: 0, end: 4, buffer: id })\n  }\n\n  async encrypt (index, block, fork) {\n    if (!this.opened) await this.ready()\n\n    if (this.current === -1) {\n      throw new Error('Encryption provider has not been loaded')\n    }\n\n    switch (this.current.version) {\n      case LegacyProvider.version:\n        return LegacyProvider.encrypt(index, block, fork, this.current.key, this.blindingKey)\n\n      case BlockProvider.version: {\n        return BlockProvider.encrypt(index, block, fork, this.current, this.blindingKey)\n      }\n    }\n\n    throw new Error('Unknown encryption scheme')\n  }\n\n  async decrypt (index, block) {\n    if (!this.opened) await this.ready()\n\n    const id = this._parseId(index, block)\n    const info = await this._get(id)\n\n    const { version, key, padding } = info\n\n    switch (version) {\n      case LegacyProvider.version:\n        return LegacyProvider.decrypt(index, block, key)\n\n      case BlockProvider.version:\n        return BlockProvider.decrypt(index, block, key, padding)\n\n      default:\n        throw new Error('Unrecognised version')\n    }\n  }\n\n  static isHypercoreEncryption (enc) {\n    if (enc instanceof HypercoreEncryption) return true\n    if (enc instanceof LegacyProvider) return true\n    return false\n  }\n\n  static getBlockKey (hypercoreKey, encryptionKey) {\n    return getBlockKey(hypercoreKey, encryptionKey)\n  }\n\n  static createLegacyProvider (blockKey) {\n    return new LegacyProvider(blockKey)\n  }\n}\n\nmodule.exports = HypercoreEncryption\n\nfunction getBlockKey (hypercoreKey, encryptionKey) {\n  const key = b4a.allocUnsafe(sodium.crypto_stream_KEYBYTES)\n  sodium.crypto_generichash_batch(key, [NS_BLOCK_KEY, hypercoreKey, encryptionKey])\n  return key\n}\n\nfunction setNonce (index) {\n  c.uint64.encode({ start: 0, end: 8, buffer: nonce }, index)\n\n  // Zero out any previous padding.\n  nonce.fill(0, 8)\n}\n\nfunction encrypt (block, nonce, key) {\n  sodium.crypto_stream_xor(\n    block,\n    block,\n    nonce,\n    key\n  )\n}\n\nfunction decrypt (block, nonce, key) {\n  return encrypt(block, nonce, key) // symmetric\n}\n{\n  \"name\": \"hypercore-encryption\",\n  \"version\": \"1.0.1\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"keywords\": [],\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"description\": \"Block encryption provider for hypercore\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+ssh://git@github.com/holepunchto/hypercore-block-encryption.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/hypercore-block-encryption/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/hypercore-block-encryption#readme\",\n  \"devDependencies\": {\n    \"brittle\": \"^3.12.1\",\n    \"standard\": \"^17.1.2\"\n  },\n  \"dependencies\": {\n    \"b4a\": \"^1.6.7\",\n    \"compact-encoding\": \"^2.16.0\",\n    \"hypercore-crypto\": \"^3.5.0\",\n    \"ready-resource\": \"^1.1.2\",\n    \"sodium-native\": \"^4.3.3\"\n  }\n}\nmodule.exports = class HypercoreError extends Error {\n  constructor (msg, code, fn = HypercoreError) {\n    super(`${code}: ${msg}`)\n    this.code = code\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, fn)\n    }\n  }\n\n  get name () {\n    return 'HypercoreError'\n  }\n\n  static ASSERTION (msg) { // ERR_ASSERTION is picked up by safety-catch also\n    return new HypercoreError(msg, 'ERR_ASSERTION', HypercoreError.ASSERT)\n  }\n\n  static BAD_ARGUMENT (msg) {\n    return new HypercoreError(msg, 'BAD_ARGUMENT', HypercoreError.BAD_ARGUMENT)\n  }\n\n  static STORAGE_EMPTY (msg) {\n    return new HypercoreError(msg, 'STORAGE_EMPTY', HypercoreError.STORAGE_EMPTY)\n  }\n\n  static STORAGE_CONFLICT (msg) {\n    return new HypercoreError(msg, 'STORAGE_CONFLICT', HypercoreError.STORAGE_CONFLICT)\n  }\n\n  static INVALID_SIGNATURE (msg) {\n    return new HypercoreError(msg, 'INVALID_SIGNATURE', HypercoreError.INVALID_SIGNATURE)\n  }\n\n  static INVALID_CAPABILITY (msg) {\n    return new HypercoreError(msg, 'INVALID_CAPABILITY', HypercoreError.INVALID_CAPABILITY)\n  }\n\n  static INVALID_CHECKSUM (msg = 'Invalid checksum') {\n    return new HypercoreError(msg, 'INVALID_CHECKSUM', HypercoreError.INVALID_CHECKSUM)\n  }\n\n  static INVALID_OPERATION (msg) {\n    return new HypercoreError(msg, 'INVALID_OPERATION', HypercoreError.INVALID_OPERATION)\n  }\n\n  static INVALID_PROOF (msg = 'Proof not verifiable') {\n    return new HypercoreError(msg, 'INVALID_PROOF', HypercoreError.INVALID_PROOF)\n  }\n\n  static BLOCK_NOT_AVAILABLE (msg = 'Block is not available') {\n    return new HypercoreError(msg, 'BLOCK_NOT_AVAILABLE', HypercoreError.BLOCK_NOT_AVAILABLE)\n  }\n\n  static SNAPSHOT_NOT_AVAILABLE (msg = 'Snapshot is not available') {\n    return new HypercoreError(msg, 'SNAPSHOT_NOT_AVAILABLE', HypercoreError.SNAPSHOT_NOT_AVAILABLE)\n  }\n\n  static REQUEST_CANCELLED (msg = 'Request was cancelled') {\n    return new HypercoreError(msg, 'REQUEST_CANCELLED', HypercoreError.REQUEST_CANCELLED)\n  }\n\n  static REQUEST_TIMEOUT (msg = 'Request timed out') {\n    return new HypercoreError(msg, 'REQUEST_TIMEOUT', HypercoreError.REQUEST_TIMEOUT)\n  }\n\n  static SESSION_NOT_WRITABLE (msg = 'Session is not writable') {\n    return new HypercoreError(msg, 'SESSION_NOT_WRITABLE', HypercoreError.SESSION_NOT_WRITABLE)\n  }\n\n  static SESSION_CLOSED (msg = 'Session is closed') {\n    return new HypercoreError(msg, 'SESSION_CLOSED', HypercoreError.SESSION_CLOSED)\n  }\n\n  static BATCH_UNFLUSHED (msg = 'Batch not yet flushed') {\n    return new HypercoreError(msg, 'BATCH_UNFLUSHED', HypercoreError.BATCH_UNFLUSHED)\n  }\n\n  static BATCH_ALREADY_EXISTS (msg = 'Batch already exists') {\n    return new HypercoreError(msg, 'BATCH_ALREADY_EXISTS', HypercoreError.BATCH_ALREADY_EXISTS)\n  }\n\n  static BATCH_ALREADY_FLUSHED (msg = 'Batch has already been flushed') {\n    return new HypercoreError(msg, 'BATCH_ALREADY_FLUSHED', HypercoreError.BATCH_ALREADY_FLUSHED)\n  }\n\n  static OPLOG_CORRUPT (msg = 'Oplog file appears corrupt or out of date') {\n    return new HypercoreError(msg, 'OPLOG_CORRUPT', HypercoreError.OPLOG_CORRUPT)\n  }\n\n  static OPLOG_HEADER_OVERFLOW (msg = 'Oplog header exceeds page size') {\n    return new HypercoreError(msg, 'OPLOG_HEADER_OVERFLOW', HypercoreError.OPLOG_HEADER_OVERFLOW)\n  }\n\n  static INVALID_OPLOG_VERSION (msg = 'Invalid header version') {\n    return new HypercoreError(msg, 'INVALID_OPLOG_VERSION', HypercoreError.INVALID_OPLOG_VERSION)\n  }\n\n  static WRITE_FAILED (msg = 'Write to storage failed') {\n    return new HypercoreError(msg, 'WRITE_FAILED', HypercoreError.WRITE_FAILED)\n  }\n\n  static DECODING_ERROR (msg = 'Decoding error') {\n    return new HypercoreError(msg, 'DECODING_ERROR', HypercoreError.DECODING_ERROR)\n  }\n\n  static SESSION_MOVED (msg = 'Session moved') {\n    return new HypercoreError(msg, 'SESSION_MOVED', HypercoreError.SESSION_MOVED)\n  }\n}\n{\n  \"name\": \"hypercore-errors\",\n  \"version\": \"1.4.0\",\n  \"description\": \"Hypercore errors\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/holepunchto/hypercore-errors.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/hypercore-errors/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/hypercore-errors#readme\",\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.3\",\n    \"standard\": \"^17.0.0\"\n  }\n}\nconst z32 = require('z32')\nconst b4a = require('b4a')\n\nmodule.exports = {\n  encode,\n  decode,\n  normalize,\n  isValid\n}\n\nfunction encode (key) {\n  if (!b4a.isBuffer(key)) throw new Error('Key must be a Buffer')\n  if (key.byteLength !== 32) throw new Error('Key must be 32-bytes long')\n  return z32.encode(key)\n}\n\nfunction decode (id) {\n  if (b4a.isBuffer(id)) {\n    if (id.byteLength !== 32) throw new Error('ID must be 32-bytes long')\n    return id\n  }\n  if (typeof id === 'string') {\n    if (id.startsWith('pear://')) id = id.slice(7).split('/')[0]\n    if (id.length === 52) return z32.decode(id)\n    if (id.length === 64) {\n      const buf = b4a.from(id, 'hex')\n      if (buf.byteLength === 32) return buf\n    }\n  }\n  throw new Error('Invalid Hypercore key')\n}\n\nfunction normalize (any) {\n  return encode(decode(any))\n}\n\nfunction isValid (any) {\n  try {\n    decode(any)\n    return true\n  } catch {\n    return false\n  }\n}\n{\n  \"name\": \"hypercore-id-encoding\",\n  \"version\": \"1.3.0\",\n  \"description\": \"Convert Hypercore keys to/from z-base32 or hex\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"b4a\": \"^1.5.3\",\n    \"z32\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.1\",\n    \"hypercore\": \"^10.0.0\",\n    \"random-access-memory\": \"^6.0.0\",\n    \"standard\": \"^17.1.0\"\n  },\n  \"license\": \"Apache-2.0\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/hypercore-id-encoding.git\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/hypercore-id-encoding/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/hypercore-id-encoding#readme\"\n}\nconst RocksDB = require('rocksdb-native')\nconst rrp = require('resolve-reject-promise')\nconst ScopeLock = require('scope-lock')\nconst DeviceFile = require('device-file')\nconst path = require('path')\nconst fs = require('fs')\nconst View = require('./lib/view.js')\n\nconst VERSION = 1\nconst COLUMN_FAMILY = 'corestore'\n\nconst { store, core } = require('./lib/keys.js')\n\nconst {\n  CorestoreRX,\n  CorestoreTX,\n  CoreTX,\n  CoreRX\n} = require('./lib/tx.js')\n\nconst {\n  createCoreStream,\n  createAliasStream,\n  createBlockStream,\n  createBitfieldStream,\n  createUserDataStream,\n  createTreeNodeStream,\n  createLocalStream\n} = require('./lib/streams.js')\n\nconst EMPTY = new View()\n\nclass Atom {\n  constructor (db) {\n    this.db = db\n    this.view = new View()\n    this.flushedPromise = null\n    this.flushing = false\n    this.flushes = []\n  }\n\n  onflush (fn) {\n    this.flushes.push(fn)\n  }\n\n  flushed () {\n    if (!this.flushing) return Promise.resolve()\n    if (this.flushedPromise !== null) return this.flushedPromise.promise\n    this.flushedPromise = rrp()\n    return this.flushedPromise.promise\n  }\n\n  _resolve () {\n    const f = this.flushedPromise\n    this.flushedPromise = null\n    f.resolve()\n  }\n\n  async flush () {\n    if (this.flushing) throw new Error('Atom already flushing')\n    this.flushing = true\n\n    try {\n      await View.flush(this.view.changes, this.db)\n      this.view.reset()\n\n      const promises = []\n      const len = this.flushes.length // in case of reentry\n      for (let i = 0; i < len; i++) promises.push(this.flushes[i]())\n\n      await Promise.all(promises)\n    } finally {\n      this.flushing = false\n      if (this.flushedPromise !== null) this._resolve()\n    }\n  }\n}\n\nclass HypercoreStorage {\n  constructor (store, db, core, view, atom) {\n    this.store = store\n    this.db = db\n    this.core = core\n    this.view = view\n    this.atom = atom\n\n    this.view.readStart()\n  }\n\n  get dependencies () {\n    return this.core.dependencies\n  }\n\n  getDependencyLength () {\n    return this.core.dependencies.length\n      ? this.core.dependencies[this.core.dependencies.length - 1].length\n      : -1\n  }\n\n  getDependency (length) {\n    for (let i = this.core.dependencies.length - 1; i >= 0; i--) {\n      const dep = this.core.dependencies[i]\n      if (dep.length < length) return dep\n    }\n\n    return null\n  }\n\n  setDependencyHead (dep) {\n    const deps = this.core.dependencies\n\n    for (let i = deps.length - 1; i >= 0; i--) {\n      const d = deps[i]\n\n      if (d.dataPointer !== dep.dataPointer) continue\n\n      // check if nothing changed\n      if (d.length === dep.length && i === deps.length - 1) return\n\n      this.core = {\n        corePointer: this.core.corePointer,\n        dataPointer: this.core.dataPointer,\n        dependencies: deps.slice(0, i + 1)\n      }\n\n      this.core.dependencies[i] = {\n        dataPointer: dep.dataPointer,\n        length: dep.length\n      }\n    }\n\n    this.core.dependencies = [{\n      dataPointer: dep.dataPointer,\n      length: dep.length\n    }]\n  }\n\n  // TODO: this might have to be async if the dependents have changed, but prop ok for now\n  updateDependencyLength (length, truncated) {\n    const deps = this.core.dependencies\n\n    const i = this.findDependencyIndex(length, truncated)\n    if (i === -1) throw new Error('Dependency not found')\n\n    this.core = {\n      corePointer: this.core.corePointer,\n      dataPointer: this.core.dataPointer,\n      dependencies: deps.slice(0, i + 1)\n    }\n\n    if (this.core.dependencies[i].length !== length) {\n      this.core.dependencies[i] = {\n        dataPointer: deps[i].dataPointer,\n        length\n      }\n    }\n  }\n\n  findDependencyIndex (length, truncated) {\n    const deps = this.core.dependencies\n\n    if (truncated) {\n      for (let i = 0; i < deps.length; i++) {\n        if (deps[i].length >= length) return i\n      }\n\n      return -1\n    }\n\n    for (let i = deps.length - 1; i >= 0; i--) {\n      if (deps[i].length <= length) return i\n    }\n\n    return -1\n  }\n\n  get snapshotted () {\n    return this.db._snapshot !== null\n  }\n\n  snapshot () {\n    return new HypercoreStorage(this.store, this.db.snapshot(), this.core, this.view.snapshot(), this.atom)\n  }\n\n  atomize (atom) {\n    if (this.atom && this.atom !== atom) throw new Error('Cannot atomize and atomized session with a new atom')\n    return new HypercoreStorage(this.store, this.db.session(), this.core, atom.view, atom)\n  }\n\n  createAtom () {\n    return this.store.createAtom()\n  }\n\n  createBlockStream (opts) {\n    return createBlockStream(this.core, this.db, this.view, opts)\n  }\n\n  createTreeNodeStream (opts) {\n    return createTreeNodeStream(this.core, this.db, this.view, opts)\n  }\n\n  createBitfieldStream (opts) {\n    return createBitfieldStream(this.core, this.db, this.view, opts)\n  }\n\n  createUserDataStream (opts) {\n    return createUserDataStream(this.core, this.db, this.view, opts)\n  }\n\n  createLocalStream (opts) {\n    return createLocalStream(this.core, this.db, this.view, opts)\n  }\n\n  async resumeSession (name) {\n    const rx = this.read()\n    const existingSessionsPromise = rx.getSessions()\n\n    rx.tryFlush()\n    const existingSessions = await existingSessionsPromise\n\n    const sessions = existingSessions || []\n    const session = getBatch(sessions, name, false)\n\n    if (session === null) return null\n\n    const core = {\n      corePointer: this.core.corePointer,\n      dataPointer: session.dataPointer,\n      dependencies: []\n    }\n\n    const coreRx = new CoreRX(core, this.db, this.view)\n\n    const dependencyPromise = coreRx.getDependency()\n    coreRx.tryFlush()\n\n    const dependency = await dependencyPromise\n    if (dependency) core.dependencies = this._addDependency(dependency)\n\n    return new HypercoreStorage(this.store, this.db.session(), core, this.atom ? this.view : new View(), this.atom)\n  }\n\n  async createSession (name, head) {\n    const rx = this.read()\n\n    const existingSessionsPromise = rx.getSessions()\n    const existingHeadPromise = rx.getHead()\n\n    rx.tryFlush()\n\n    const [existingSessions, existingHead] = await Promise.all([existingSessionsPromise, existingHeadPromise])\n    if (head === null) head = existingHead\n\n    if (existingHead !== null && head.length > existingHead.length) {\n      throw new Error('Invalid head passed, ahead of core')\n    }\n\n    const sessions = existingSessions || []\n    const session = getBatch(sessions, name, true)\n    const fresh = session.dataPointer === -1\n\n    if (fresh) {\n      session.dataPointer = await this.store._allocData()\n    }\n\n    const tx = this.write()\n\n    tx.setSessions(sessions)\n\n    const length = head === null ? 0 : head.length\n    const core = {\n      corePointer: this.core.corePointer,\n      dataPointer: session.dataPointer,\n      dependencies: this._addDependency({ dataPointer: this.core.dataPointer, length })\n    }\n\n    const coreTx = new CoreTX(core, this.db, tx.view, tx.changes)\n\n    if (length > 0) coreTx.setHead(head)\n    coreTx.setDependency(core.dependencies[core.dependencies.length - 1])\n\n    if (!fresh) {\n      // nuke all existing state...\n      coreTx.deleteBlockRange(0, -1)\n      coreTx.deleteTreeNodeRange(0, -1)\n      coreTx.deleteBitfieldPageRange(0, -1)\n    }\n\n    await tx.flush()\n\n    return new HypercoreStorage(this.store, this.db.session(), core, this.atom ? this.view : new View(), this.atom)\n  }\n\n  async createAtomicSession (atom, head) {\n    const length = head === null ? 0 : head.length\n    const core = {\n      corePointer: this.core.corePointer,\n      dataPointer: this.core.dataPointer,\n      dependencies: this._addDependency(null)\n    }\n\n    const coreTx = new CoreTX(core, this.db, atom.view, [])\n\n    if (length > 0) coreTx.setHead(head)\n\n    await coreTx.flush()\n\n    return this.atomize(atom)\n  }\n\n  _addDependency (dep) {\n    const deps = []\n\n    for (let i = 0; i < this.core.dependencies.length; i++) {\n      const d = this.core.dependencies[i]\n\n      if (dep !== null && d.length > dep.length) {\n        if (d.dataPointer !== dep.dataPointer) {\n          deps.push({ dataPointer: d.dataPointer, length: dep.length })\n        }\n        return deps\n      }\n\n      deps.push(d)\n    }\n\n    if (dep !== null && (deps.length === 0 || deps[deps.length - 1].dataPointer !== dep.dataPointer)) {\n      deps.push(dep)\n    }\n    return deps\n  }\n\n  read () {\n    return new CoreRX(this.core, this.db, this.view)\n  }\n\n  write () {\n    return new CoreTX(this.core, this.db, this.atom ? this.view : null, [])\n  }\n\n  close () {\n    if (this.view !== null) {\n      this.view.readStop()\n      this.view = null\n    }\n\n    return this.db.close()\n  }\n}\n\nclass CorestoreStorage {\n  constructor (db, opts = {}) {\n    const storage = typeof db === 'string' ? db : null\n\n    this.bootstrap = storage !== null\n    this.path = storage !== null ? storage : path.join(db.path, '..')\n    this.readOnly = !!opts.readOnly\n\n    // tmp sync fix for simplicty since not super deployed yet\n    if (this.bootstrap && !this.readOnly) tmpFixStorage(this.path)\n\n    this.rocks = storage === null ? db : new RocksDB(path.join(this.path, 'db'), opts)\n    this.db = createColumnFamily(this.rocks, opts)\n    this.id = opts.id || null\n    this.view = null\n    this.enters = 0\n    this.lock = new ScopeLock()\n    this.flushing = null\n    this.version = 0\n    this.migrating = null\n  }\n\n  get opened () {\n    return this.db.opened\n  }\n\n  get closed () {\n    return this.db.closed\n  }\n\n  async ready () {\n    if (this.version === 0) await this._migrateStore()\n    return this.db.ready()\n  }\n\n  async deleteCore (ptr) {\n    const rx = new CoreRX(ptr, this.db, EMPTY)\n\n    const authPromise = rx.getAuth()\n    const sessionsPromise = rx.getSessions()\n\n    rx.tryFlush()\n\n    const auth = await authPromise\n    const sessions = await sessionsPromise\n\n    // no core stored here\n    if (!auth) return\n\n    const tx = this.db.write({ autoDestroy: true })\n\n    tx.tryDelete(store.core(auth.discoveryKey))\n\n    // clear core\n    const start = core.core(ptr.corePointer)\n    const end = core.core(ptr.corePointer + 1)\n    tx.tryDeleteRange(start, end)\n\n    if (sessions) {\n      for (const { dataPointer } of sessions) {\n        const start = core.data(dataPointer)\n        const end = core.data(dataPointer + 1)\n        tx.tryDeleteRange(start, end)\n      }\n    }\n\n    return tx.flush()\n  }\n\n  static isCoreStorage (db) {\n    return isCorestoreStorage(db)\n  }\n\n  static from (db) {\n    if (isCorestoreStorage(db)) return db\n    return new this(db)\n  }\n\n  async _flush () {\n    while (this.enters > 0) {\n      await this.lock.lock()\n      await this.lock.unlock()\n    }\n  }\n\n  // runs pre any other mutation and read\n  async _migrateStore () {\n    const view = await this._enter()\n\n    try {\n      if (this.version === VERSION) return\n\n      await this.db.ready()\n\n      if (this.bootstrap && !this.readOnly) {\n        const corestoreFile = path.join(this.path, 'CORESTORE')\n\n        if (!(await DeviceFile.resume(corestoreFile, { id: this.id }))) {\n          await DeviceFile.create(corestoreFile, { id: this.id })\n        }\n      }\n\n      const rx = new CorestoreRX(this.db, view)\n      const headPromise = rx.getHead()\n\n      rx.tryFlush()\n      const head = await headPromise\n\n      const version = head === null ? 0 : head.version\n      if (version === VERSION) {\n        this.version = VERSION\n        return\n      }\n\n      const target = { version: VERSION, dryRun: false }\n\n      switch (version) {\n        case 0: {\n          await require('./migrations/0').store(this, target)\n          break\n        }\n        default: {\n          throw new Error('Unsupported version: ' + version + ' - you should probably upgrade your dependencies')\n        }\n      }\n\n      this.version = VERSION\n    } finally {\n      await this._exit()\n    }\n  }\n\n  // runs pre the core is returned to the user\n  async _migrateCore (core, discoveryKey, version, locked) {\n    const view = locked ? this.view : await this._enter()\n    try {\n      if (version === VERSION) return\n\n      const target = { version: VERSION, dryRun: false }\n\n      switch (version) {\n        case 0: {\n          await require('./migrations/0').core(core, target)\n          break\n        }\n        default: {\n          throw new Error('Unsupported version: ' + version + ' - you should probably upgrade your dependencies')\n        }\n      }\n\n      if (locked === false) return\n\n      // if its locked, then move the core state into the memview\n      // in case the core is reopened from the memview, pre flush\n\n      const rx = new CorestoreRX(this.db, EMPTY)\n      const tx = new CorestoreTX(view)\n\n      const corePromise = rx.getCore(discoveryKey)\n      rx.tryFlush()\n\n      tx.putCore(discoveryKey, await corePromise)\n      tx.apply()\n    } finally {\n      if (!locked) await this._exit()\n    }\n  }\n\n  async _enter () {\n    this.enters++\n    await this.lock.lock()\n    if (this.view === null) this.view = new View()\n    return this.view\n  }\n\n  async _exit () {\n    this.enters--\n\n    if (this.flushing === null) this.flushing = rrp()\n    const flushed = this.flushing.promise\n\n    if (this.enters === 0 || this.view.size() > 128) {\n      try {\n        await View.flush(this.view.changes, this.db)\n        this.flushing.resolve()\n      } catch (err) {\n        this.flushing.reject(err)\n      } finally {\n        this.flushing = null\n        this.view = null\n      }\n    }\n\n    this.lock.unlock()\n    return flushed\n  }\n\n  // when used with core catches this isnt transactional for simplicity, HOWEVER, its just a number\n  // so worth the tradeoff\n  async _allocData () {\n    let dataPointer = 0\n\n    const view = await this._enter()\n    const tx = new CorestoreTX(view)\n\n    try {\n      const head = await this._getHead(view)\n\n      dataPointer = head.allocated.datas++\n\n      tx.setHead(head)\n      tx.apply()\n    } finally {\n      await this._exit()\n    }\n\n    return dataPointer\n  }\n\n  // exposes here so migrations can easily access the head in an init state\n  async _getHead (view) {\n    const rx = new CorestoreRX(this.db, view)\n    const headPromise = rx.getHead()\n    rx.tryFlush()\n\n    const head = await headPromise\n    return head === null ? initStoreHead() : head\n  }\n\n  createAtom () {\n    return new Atom(this.db)\n  }\n\n  async flush () {\n    await this.rocks.flush()\n  }\n\n  async close () {\n    if (this.db.closed) return\n    await this._flush()\n    await this.db.close()\n    await this.rocks.close()\n  }\n\n  async clear () {\n    if (this.version === 0) await this._migrateStore()\n\n    const view = await this._enter()\n    const tx = new CorestoreTX(view)\n\n    tx.clear()\n    tx.apply()\n\n    await this._exit()\n  }\n\n  createCoreStream () {\n    // TODO: be nice to run the mgiration here also, but too much plumbing atm\n    return createCoreStream(this.db, EMPTY)\n  }\n\n  createAliasStream (namespace) {\n    // TODO: be nice to run the mgiration here also, but too much plumbing atm\n    return createAliasStream(this.db, EMPTY, namespace)\n  }\n\n  async getAlias (alias) {\n    if (this.version === 0) await this._migrateStore()\n\n    const rx = new CorestoreRX(this.db, EMPTY)\n    const discoveryKeyPromise = rx.getCoreByAlias(alias)\n    rx.tryFlush()\n    return discoveryKeyPromise\n  }\n\n  async getSeed () {\n    if (this.version === 0) await this._migrateStore()\n\n    const rx = new CorestoreRX(this.db, EMPTY)\n    const headPromise = rx.getHead()\n\n    rx.tryFlush()\n\n    const head = await headPromise\n    return head === null ? null : head.seed\n  }\n\n  async setSeed (seed, { overwrite = true } = {}) {\n    if (this.version === 0) await this._migrateStore()\n\n    const view = await this._enter()\n    const tx = new CorestoreTX(view)\n\n    try {\n      const rx = new CorestoreRX(this.db, view)\n      const headPromise = rx.getHead()\n\n      rx.tryFlush()\n\n      const head = (await headPromise) || initStoreHead()\n\n      if (head.seed === null || overwrite) head.seed = seed\n      tx.setHead(head)\n      tx.apply()\n\n      return head.seed\n    } finally {\n      await this._exit()\n    }\n  }\n\n  async getDefaultDiscoveryKey () {\n    if (this.version === 0) await this._migrateStore()\n\n    const rx = new CorestoreRX(this.db, EMPTY)\n    const headPromise = rx.getHead()\n\n    rx.tryFlush()\n\n    const head = await headPromise\n    return head === null ? null : head.defaultDiscoveryKey\n  }\n\n  async setDefaultDiscoveryKey (discoveryKey, { overwrite = true } = {}) {\n    if (this.version === 0) await this._migrateStore()\n\n    const view = await this._enter()\n    const tx = new CorestoreTX(view)\n\n    try {\n      const rx = new CorestoreRX(this.db, view)\n      const headPromise = rx.getHead()\n\n      rx.tryFlush()\n\n      const head = (await headPromise) || initStoreHead()\n\n      if (head.defaultDiscoveryKey === null || overwrite) head.defaultDiscoveryKey = discoveryKey\n      tx.setHead(head)\n      tx.apply()\n\n      return head.defaultDiscoveryKey\n    } finally {\n      await this._exit()\n    }\n  }\n\n  async has (discoveryKey, { ifMigrated = false } = {}) {\n    if (this.version === 0) await this._migrateStore()\n\n    const rx = new CorestoreRX(this.db, EMPTY)\n    const promise = rx.getCore(discoveryKey)\n\n    rx.tryFlush()\n\n    const core = await promise\n\n    if (core === null) return false\n    if (core.version !== VERSION && ifMigrated) return false\n\n    return true\n  }\n\n  async getAuth (discoveryKey) {\n    if (this.version === 0) await this._migrateStore()\n\n    const rx = new CorestoreRX(this.db, EMPTY)\n    const corePromise = rx.getCore(discoveryKey)\n\n    rx.tryFlush()\n\n    const core = await corePromise\n    if (core === null) return null\n\n    const coreRx = new CoreRX(core, this.db, EMPTY)\n    const authPromise = coreRx.getAuth()\n\n    coreRx.tryFlush()\n\n    return authPromise\n  }\n\n  async resume (discoveryKey) {\n    if (this.version === 0) await this._migrateStore()\n\n    if (!discoveryKey) {\n      discoveryKey = await this.getDefaultDiscoveryKey()\n      if (!discoveryKey) return null\n    }\n\n    const rx = new CorestoreRX(this.db, EMPTY)\n    const corePromise = rx.getCore(discoveryKey)\n\n    rx.tryFlush()\n    const core = await corePromise\n\n    if (core === null) return null\n    return this._resumeFromPointers(EMPTY, discoveryKey, false, core)\n  }\n\n  async _resumeFromPointers (view, discoveryKey, create, { version, corePointer, dataPointer }) {\n    const core = { corePointer, dataPointer, dependencies: [] }\n\n    while (true) {\n      const rx = new CoreRX({ dataPointer, corePointer: 0, dependencies: [] }, this.db, view)\n      const dependencyPromise = rx.getDependency()\n      rx.tryFlush()\n      const dependency = await dependencyPromise\n      if (!dependency) break\n      core.dependencies.push(dependency)\n      dataPointer = dependency.dataPointer\n    }\n\n    const result = new HypercoreStorage(this, this.db.session(), core, EMPTY, null)\n\n    if (version < VERSION) await this._migrateCore(result, discoveryKey, version, create)\n    return result\n  }\n\n  // not allowed to throw validation errors as its a shared tx!\n  async _create (view, { key, manifest, keyPair, encryptionKey, discoveryKey, alias, userData }) {\n    const rx = new CorestoreRX(this.db, view)\n    const tx = new CorestoreTX(view)\n\n    const corePromise = rx.getCore(discoveryKey)\n    const headPromise = rx.getHead()\n\n    rx.tryFlush()\n\n    let [core, head] = await Promise.all([corePromise, headPromise])\n    if (core) return this._resumeFromPointers(view, discoveryKey, true, core)\n\n    if (head === null) head = initStoreHead()\n    if (head.defaultDiscoveryKey === null) head.defaultDiscoveryKey = discoveryKey\n\n    const corePointer = head.allocated.cores++\n    const dataPointer = head.allocated.datas++\n\n    core = { version: VERSION, corePointer, dataPointer, alias }\n\n    tx.setHead(head)\n    tx.putCore(discoveryKey, core)\n    if (alias) tx.putCoreByAlias(alias, discoveryKey)\n\n    const ptr = { corePointer, dataPointer, dependencies: [] }\n    const ctx = new CoreTX(ptr, this.db, view, tx.changes)\n\n    ctx.setAuth({\n      key,\n      discoveryKey,\n      manifest,\n      keyPair,\n      encryptionKey\n    })\n\n    if (userData) {\n      for (const { key, value } of userData) {\n        ctx.putUserData(key, value)\n      }\n    }\n\n    tx.apply()\n\n    return new HypercoreStorage(this, this.db.session(), ptr, EMPTY, null)\n  }\n\n  async create (data) {\n    if (this.version === 0) await this._migrateStore()\n\n    const view = await this._enter()\n\n    try {\n      return await this._create(view, data)\n    } finally {\n      await this._exit()\n    }\n  }\n}\n\nmodule.exports = CorestoreStorage\n\nfunction initStoreHead () {\n  return {\n    version: 0, // cause we wanna run the migration\n    allocated: {\n      datas: 0,\n      cores: 0\n    },\n    seed: null,\n    defaultDiscoveryKey: null\n  }\n}\n\nfunction getBatch (sessions, name, alloc) {\n  for (let i = 0; i < sessions.length; i++) {\n    if (sessions[i].name === name) return sessions[i]\n  }\n\n  if (!alloc) return null\n\n  const result = { name, dataPointer: -1 }\n  sessions.push(result)\n  return result\n}\n\nfunction isCorestoreStorage (s) {\n  return typeof s === 'object' && !!s && typeof s.setDefaultDiscoveryKey === 'function'\n}\n\nfunction createColumnFamily (db, opts = {}) {\n  const {\n    tableCacheIndexAndFilterBlocks = true,\n    blockCache = true,\n    optimizeFiltersForMemory = false\n  } = opts\n\n  const col = new RocksDB.ColumnFamily(COLUMN_FAMILY, {\n    enableBlobFiles: true,\n    minBlobSize: 4096,\n    blobFileSize: 256 * 1024 * 1024,\n    enableBlobGarbageCollection: true,\n    tableBlockSize: 8192,\n    tableCacheIndexAndFilterBlocks,\n    tableFormatVersion: 6,\n    optimizeFiltersForMemory,\n    blockCache\n  })\n\n  return db.columnFamily(col)\n}\n\n// TODO: remove in like 3-6 mo\nfunction tmpFixStorage (p) {\n  // if CORESTORE file is written, new format\n  if (fs.existsSync(path.join(p, 'CORESTORE'))) return\n\n  let files = []\n\n  try {\n    files = fs.readdirSync(p)\n  } catch {}\n\n  const notRocks = new Set(['CORESTORE', 'primary-key', 'cores', 'app-preferences', 'cache', 'preferences.json', 'db', 'clone', 'core', 'notifications'])\n\n  for (const f of files) {\n    if (notRocks.has(f)) continue\n\n    try {\n      fs.mkdirSync(path.join(p, 'db'))\n    } catch {}\n\n    fs.renameSync(path.join(p, f), path.join(p, 'db', f))\n  }\n}\nconst { Readable, getStreamError } = require('streamx')\nconst { core } = require('./keys')\n\nmodule.exports = class BlockStream extends Readable {\n  constructor (core, db, updates, start, end, reverse) {\n    super()\n\n    this.core = core\n    this.db = db\n    this.updates = updates\n    this.start = start\n    this.end = end\n    this.reverse = reverse === true\n\n    this._drained = true\n    this._consumed = 0\n    this._stream = null\n    this._oncloseBound = this._onclose.bind(this)\n    this._maybeDrainBound = this._maybeDrain.bind(this)\n\n    this._update()\n  }\n\n  _update () {\n    if (this._consumed > this.core.dependencies.length) return\n\n    const deps = this.core.dependencies\n    const index = this._findDependencyIndex(deps)\n\n    const curr = index < deps.length ? deps[index] : null\n    const prev = (index > 0 && index - 1 < deps.length) ? deps[index - 1] : null\n\n    const start = (prev && prev.length > this.start) ? prev.length : this.start\n    const end = (curr && (this.end === -1 || curr.length < this.end)) ? curr.length : this.end\n\n    const ptr = curr ? curr.dataPointer : this.core.dataPointer\n\n    this._makeStream(core.block(ptr, start), core.block(ptr, end))\n  }\n\n  _findDependencyIndex (deps) {\n    if (!this.reverse) return this._consumed++\n\n    let i = deps.length - this._consumed++\n    while (i > 0) {\n      if (deps[i - 1].length <= this.end) return i\n      i--\n      this._consumed++\n    }\n\n    return 0\n  }\n\n  _predestroy () {\n    if (this._stream !== null) this._stream.destroy()\n  }\n\n  _read (cb) {\n    this._drained = this._onreadable()\n    cb(null)\n  }\n\n  _maybeDrain () {\n    if (this._drained === true) return\n    this._drained = this._onreadable()\n  }\n\n  _onreadable () {\n    if (this._stream === null) {\n      this.push(null)\n      return true\n    }\n\n    let data = this._stream.read()\n\n    if (data === null) return false\n\n    do {\n      this.push(data)\n      data = this._stream.read()\n    } while (data !== null)\n\n    return true\n  }\n\n  _onclose () {\n    if (this.destroying) return\n\n    const err = getStreamError(this._stream)\n\n    if (err !== null) {\n      this.destroy(err)\n      return\n    }\n\n    // empty the current stream\n    if (this._onreadable() === true) this._drained = true\n\n    this._stream = null\n\n    this._update()\n    this._maybeDrain()\n  }\n\n  _makeStream (start, end) {\n    this._stream = this.updates.iterator(this.db, start, end, this.reverse)\n    this._stream.on('readable', this._maybeDrainBound)\n    this._stream.on('error', noop)\n    this._stream.on('close', this._oncloseBound)\n  }\n}\n\nfunction noop () {}\nconst { Readable } = require('streamx')\n\n// used for returned a stream that just errors (during read during teardown)\n\nmodule.exports = class CloseErrorStream extends Readable {\n  constructor (err) {\n    super()\n    this.error = err\n  }\n\n  _open (cb) {\n    cb(this.error)\n  }\n}\nconst { UINT, STRING } = require('index-encoder')\nconst c = require('compact-encoding')\nconst b4a = require('b4a')\n\nconst TL_HEAD = 0\nconst TL_CORE_BY_DKEY = 1\nconst TL_CORE_BY_ALIAS = 2\nconst TL_CORE = 3\nconst TL_DATA = 4\n\nconst TL_END = TL_DATA + 1\n\nconst CORE_AUTH = 0\nconst CORE_SESSIONS = 1\n\nconst DATA_HEAD = 0\nconst DATA_DEPENDENCY = 1\nconst DATA_HINTS = 2\nconst DATA_BLOCK = 3\nconst DATA_TREE = 4\nconst DATA_BITFIELD = 5\nconst DATA_USER_DATA = 6\nconst DATA_LOCAL = 7\n\nconst slab = { buffer: b4a.allocUnsafe(65536), start: 0, end: 0 }\n\nconst store = {}\nconst core = {}\n\nstore.clear = function () {\n  const state = alloc()\n  let start = state.start\n  UINT.encode(state, 0)\n  const a = state.buffer.subarray(start, state.start)\n  start = state.start\n  UINT.encode(state, TL_END)\n  const b = state.buffer.subarray(start, state.start)\n  return [a, b]\n}\n\nstore.head = function () {\n  const state = alloc()\n  const start = state.start\n  UINT.encode(state, TL_HEAD)\n  return state.buffer.subarray(start, state.start)\n}\n\nstore.core = function (discoveryKey) {\n  const state = alloc()\n  const start = state.start\n  UINT.encode(state, TL_CORE_BY_DKEY)\n  c.fixed32.encode(state, discoveryKey)\n  return state.buffer.subarray(start, state.start)\n}\n\nstore.coreStart = function () {\n  const state = alloc()\n  const start = state.start\n  UINT.encode(state, TL_CORE_BY_DKEY)\n  return state.buffer.subarray(start, state.start)\n}\n\nstore.coreEnd = function () {\n  const state = alloc()\n  const start = state.start\n  UINT.encode(state, TL_CORE_BY_DKEY + 1)\n  return state.buffer.subarray(start, state.start)\n}\n\nstore.coreByAlias = function ({ namespace, name }) {\n  const state = alloc()\n  const start = state.start\n  UINT.encode(state, TL_CORE_BY_ALIAS)\n  c.fixed32.encode(state, namespace)\n  STRING.encode(state, name)\n  return state.buffer.subarray(start, state.start)\n}\n\nstore.coreByAliasStart = function (namespace) {\n  const state = alloc()\n  const start = state.start\n  UINT.encode(state, TL_CORE_BY_ALIAS)\n  if (namespace) c.fixed32.encode(state, namespace)\n  return state.buffer.subarray(start, state.start)\n}\n\nstore.coreByAliasEnd = function (namespace) {\n  const state = alloc()\n  const start = state.start\n\n  if (namespace) {\n    UINT.encode(state, TL_CORE_BY_ALIAS)\n    c.fixed32.encode(state, namespace)\n    state.buffer[state.start++] = 0xff\n  } else {\n    UINT.encode(state, TL_CORE_BY_ALIAS + 1)\n  }\n\n  return state.buffer.subarray(start, state.start)\n}\n\nstore.alias = function (buffer) {\n  const state = { buffer, start: 0, end: buffer.byteLength }\n  UINT.decode(state) // ns\n  const namespace = c.fixed32.decode(state)\n  const name = STRING.decode(state)\n  return { namespace, name }\n}\n\nstore.discoveryKey = function (buffer) {\n  const state = { buffer, start: 0, end: buffer.byteLength }\n  UINT.decode(state) // ns\n  return c.fixed32.decode(state)\n}\n\ncore.core = function (ptr) {\n  const state = alloc()\n  const start = state.start\n  UINT.encode(state, TL_CORE)\n  UINT.encode(state, ptr)\n  return state.buffer.subarray(start, state.start)\n}\n\ncore.data = function (ptr) {\n  const state = alloc()\n  const start = state.start\n  UINT.encode(state, TL_DATA)\n  UINT.encode(state, ptr)\n  return state.buffer.subarray(start, state.start)\n}\n\ncore.auth = function (ptr) {\n  const state = alloc()\n  const start = state.start\n  UINT.encode(state, TL_CORE)\n  UINT.encode(state, ptr)\n  UINT.encode(state, CORE_AUTH)\n  return state.buffer.subarray(start, state.start)\n}\n\ncore.sessions = function (ptr) {\n  const state = alloc()\n  const start = state.start\n  UINT.encode(state, TL_CORE)\n  UINT.encode(state, ptr)\n  UINT.encode(state, CORE_SESSIONS)\n  return state.buffer.subarray(start, state.start)\n}\n\ncore.head = function (ptr) {\n  const state = alloc()\n  const start = state.start\n  UINT.encode(state, TL_DATA)\n  UINT.encode(state, ptr)\n  UINT.encode(state, DATA_HEAD)\n  return state.buffer.subarray(start, state.start)\n}\n\ncore.dependency = function (ptr) {\n  const state = alloc()\n  const start = state.start\n  UINT.encode(state, TL_DATA)\n  UINT.encode(state, ptr)\n  UINT.encode(state, DATA_DEPENDENCY)\n  return state.buffer.subarray(start, state.start)\n}\n\ncore.hints = function (ptr) {\n  const state = alloc()\n  const start = state.start\n  UINT.encode(state, TL_DATA)\n  UINT.encode(state, ptr)\n  UINT.encode(state, DATA_HINTS)\n  return state.buffer.subarray(start, state.start)\n}\n\ncore.block = function (ptr, index) {\n  const state = alloc()\n  const start = state.start\n  UINT.encode(state, TL_DATA)\n  UINT.encode(state, ptr)\n  UINT.encode(state, DATA_BLOCK)\n  UINT.encode(state, index)\n  return state.buffer.subarray(start, state.start)\n}\n\ncore.tree = function (ptr, index) {\n  const state = alloc()\n  const start = state.start\n  UINT.encode(state, TL_DATA)\n  UINT.encode(state, ptr)\n  UINT.encode(state, DATA_TREE)\n  UINT.encode(state, index)\n  return state.buffer.subarray(start, state.start)\n}\n\ncore.bitfield = function (ptr, index, type) {\n  const state = alloc()\n  const start = state.start\n  UINT.encode(state, TL_DATA)\n  UINT.encode(state, ptr)\n  UINT.encode(state, DATA_BITFIELD)\n  UINT.encode(state, index)\n  UINT.encode(state, type)\n  return state.buffer.subarray(start, state.start)\n}\n\ncore.userData = function (ptr, key) {\n  const state = alloc()\n  const start = state.start\n  UINT.encode(state, TL_DATA)\n  UINT.encode(state, ptr)\n  UINT.encode(state, DATA_USER_DATA)\n  STRING.encode(state, key)\n  return state.buffer.subarray(start, state.start)\n}\n\ncore.userDataEnd = function (ptr) {\n  const state = alloc()\n  const start = state.start\n  UINT.encode(state, TL_DATA)\n  UINT.encode(state, ptr)\n  UINT.encode(state, DATA_USER_DATA + 1)\n  return state.buffer.subarray(start, state.start)\n}\n\ncore.local = function (ptr, key) {\n  if (key.byteLength > 2048) {\n    throw new Error('local keys has an upper limit of 2048 bytes atm')\n  }\n\n  const state = alloc()\n  const start = state.start\n  UINT.encode(state, TL_DATA)\n  UINT.encode(state, ptr)\n  UINT.encode(state, DATA_LOCAL)\n\n  state.buffer.set(key, state.start)\n  state.start += key.byteLength\n  return state.buffer.subarray(start, state.start)\n}\n\ncore.localEnd = function (ptr) {\n  const state = alloc()\n  const start = state.start\n  UINT.encode(state, TL_DATA)\n  UINT.encode(state, ptr)\n  UINT.encode(state, DATA_LOCAL + 1)\n  return state.buffer.subarray(start, state.start)\n}\n\ncore.blockIndex = function (buffer) {\n  const state = { buffer, start: 0, end: buffer.byteLength }\n  UINT.decode(state) // ns\n  UINT.decode(state) // ptr\n  UINT.decode(state) // type\n  return UINT.decode(state)\n}\n\ncore.bitfieldIndexAndType = function (buffer) {\n  const state = { buffer, start: 0, end: buffer.byteLength }\n  UINT.decode(state) // ns\n  UINT.decode(state) // ptr\n  UINT.decode(state) // type\n  return [UINT.decode(state), UINT.decode(state)]\n}\n\ncore.userDataKey = function (buffer) {\n  const state = { buffer, start: 0, end: buffer.byteLength }\n  UINT.decode(state) // ns\n  UINT.decode(state) // ptr\n  UINT.decode(state) // type\n  return STRING.decode(state)\n}\n\ncore.localKey = function (buffer) {\n  const state = { buffer, start: 0, end: buffer.byteLength }\n  UINT.decode(state) // ns\n  UINT.decode(state) // ptr\n  UINT.decode(state) // type\n  return state.buffer.subarray(state.start, state.end)\n}\n\nmodule.exports = { store, core }\n\nfunction alloc () {\n  if (slab.buffer.byteLength - slab.start < 4096) {\n    slab.buffer = b4a.allocUnsafe(slab.buffer.byteLength)\n    slab.start = 0\n  }\n  return slab\n}\nconst b4a = require('b4a')\nconst BlockDependencyStream = require('./block-dependency-stream.js')\nconst { core, store } = require('./keys.js')\nconst schema = require('../spec/hyperschema')\n\nconst CORESTORE_CORE = schema.getEncoding('@corestore/core')\nconst CORE_TREE_NODE = schema.getEncoding('@core/tree-node')\nconst EMPTY = b4a.alloc(0)\n\nmodule.exports = {\n  createBlockStream,\n  createBitfieldStream,\n  createUserDataStream,\n  createCoreStream,\n  createAliasStream,\n  createTreeNodeStream,\n  createLocalStream\n}\n\nfunction createCoreStream (db, view) {\n  const start = store.coreStart()\n  const end = store.coreEnd()\n\n  const ite = view.iterator(db, start, end, false)\n\n  ite._readableState.map = mapCore\n  return ite\n}\n\nfunction createAliasStream (db, view, namespace) {\n  const start = store.coreByAliasStart(namespace)\n  const end = store.coreByAliasEnd(namespace)\n\n  const ite = view.iterator(db, start, end, false)\n\n  ite._readableState.map = mapAlias\n  return ite\n}\n\nfunction createBlockIterator (ptr, db, view, start, end, reverse) {\n  if (ptr.dependencies.length > 0) {\n    return new BlockDependencyStream(ptr, db, view, start, end, reverse)\n  }\n\n  const s = core.block(ptr.dataPointer, start)\n  const e = core.block(ptr.dataPointer, end === -1 ? Infinity : end)\n  return view.iterator(db, s, e, reverse)\n}\n\nfunction createBlockStream (ptr, db, view, { gt = -1, gte = gt + 1, lte = -1, lt = lte === -1 ? -1 : lte + 1, reverse = false } = {}) {\n  const ite = createBlockIterator(ptr, db, view, gte, lt, reverse)\n\n  ite._readableState.map = mapBlock\n  return ite\n}\n\nfunction createBitfieldStream (ptr, db, view, { gt = -1, gte = gt + 1, lte = -1, lt = lte === -1 ? -1 : lte + 1, reverse = false } = {}) {\n  const s = core.bitfield(ptr.dataPointer, gte, 0)\n  const e = core.bitfield(ptr.dataPointer, lt === -1 ? Infinity : lt, 0)\n  const ite = view.iterator(db, s, e, false)\n\n  ite._readableState.map = mapBitfield\n  return ite\n}\n\n// NOTE: this does not do dependency lookups atm\nfunction createTreeNodeStream (ptr, db, view, { gt = -1, gte = gt + 1, lte = -1, lt = lte === -1 ? -1 : lte + 1, reverse = false } = {}) {\n  const s = core.tree(ptr.dataPointer, gte, 0)\n  const e = core.tree(ptr.dataPointer, lt === -1 ? Infinity : lt, 0)\n  const ite = view.iterator(db, s, e, false)\n\n  ite._readableState.map = mapTreeNode\n  return ite\n}\n\nfunction createUserDataStream (ptr, db, view, { gt = null, gte = '', lte = null, lt = null, reverse = false } = {}) {\n  if (gt !== null || lte !== null) throw new Error('gt and lte not yet supported for user data streams')\n\n  const s = core.userData(ptr.dataPointer, gte)\n  const e = lt === null ? core.userDataEnd(ptr.dataPointer) : core.userData(ptr.dataPointer, lt)\n  const ite = view.iterator(db, s, e, false)\n\n  ite._readableState.map = mapUserData\n  return ite\n}\n\nfunction createLocalStream (ptr, db, view, { gt = null, gte = EMPTY, lte = null, lt = null, reverse = false } = {}) {\n  if (gt !== null || lte !== null) throw new Error('gt and lte not yet supported for local streams')\n\n  const s = core.local(ptr.dataPointer, gte)\n  const e = lt === null ? core.localEnd(ptr.dataPointer) : core.local(ptr.dataPointer, lt)\n  const ite = view.iterator(db, s, e, false)\n\n  ite._readableState.map = mapLocal\n  return ite\n}\n\nfunction mapBitfield (data) {\n  const [index, type] = core.bitfieldIndexAndType(data.key)\n  if (type !== 0) return null // ignore for now\n  return { index, page: data.value }\n}\n\nfunction mapLocal (data) {\n  const key = core.localKey(data.key)\n  return { key, value: data.value }\n}\n\nfunction mapUserData (data) {\n  const key = core.userDataKey(data.key)\n  return { key, value: data.value }\n}\n\nfunction mapCore (data) {\n  const discoveryKey = store.discoveryKey(data.key)\n  const core = CORESTORE_CORE.decode({ start: 0, end: data.value.byteLength, buffer: data.value })\n  return { discoveryKey, core }\n}\n\nfunction mapAlias (data) {\n  const alias = store.alias(data.key)\n  return { alias, discoveryKey: data.value }\n}\n\nfunction mapBlock (data) {\n  return { index: core.blockIndex(data.key), value: data.value }\n}\n\nfunction mapTreeNode (data) {\n  return CORE_TREE_NODE.decode({ start: 0, end: data.value.byteLength, buffer: data.value })\n}\nconst schema = require('../spec/hyperschema')\nconst { store, core } = require('./keys.js')\nconst View = require('./view.js')\nconst b4a = require('b4a')\nconst flat = require('flat-tree')\n\nconst CORESTORE_HEAD = schema.getEncoding('@corestore/head')\nconst CORESTORE_CORE = schema.getEncoding('@corestore/core')\n\nconst CORE_AUTH = schema.getEncoding('@core/auth')\nconst CORE_SESSIONS = schema.getEncoding('@core/sessions')\nconst CORE_HEAD = schema.getEncoding('@core/head')\nconst CORE_TREE_NODE = schema.getEncoding('@core/tree-node')\nconst CORE_DEPENDENCY = schema.getEncoding('@core/dependency')\nconst CORE_HINTS = schema.getEncoding('@core/hints')\n\nclass CoreTX {\n  constructor (core, db, view, changes) {\n    if (db.snapshotted) throw new Error('Cannot open core tx on snapshot')\n    this.core = core\n    this.db = db\n    this.view = view\n    this.changes = changes\n  }\n\n  setAuth (auth) {\n    this.changes.push([core.auth(this.core.corePointer), encode(CORE_AUTH, auth), null])\n  }\n\n  setSessions (sessions) {\n    this.changes.push([core.sessions(this.core.corePointer), encode(CORE_SESSIONS, sessions), null])\n  }\n\n  setHead (head) {\n    this.changes.push([core.head(this.core.dataPointer), encode(CORE_HEAD, head), null])\n  }\n\n  setDependency (dep) {\n    this.changes.push([core.dependency(this.core.dataPointer), encode(CORE_DEPENDENCY, dep), null])\n  }\n\n  setHints (hints) {\n    this.changes.push([core.hints(this.core.dataPointer), encode(CORE_HINTS, hints), null])\n  }\n\n  putBlock (index, data) {\n    this.changes.push([core.block(this.core.dataPointer, index), data, null])\n  }\n\n  deleteBlock (index) {\n    this.changes.push([core.block(this.core.dataPointer, index), null, null])\n  }\n\n  deleteBlockRange (start, end) {\n    this.changes.push([\n      core.block(this.core.dataPointer, start),\n      null,\n      core.block(this.core.dataPointer, end === -1 ? Infinity : end)\n    ])\n  }\n\n  putBitfieldPage (index, data) {\n    this.changes.push([core.bitfield(this.core.dataPointer, index, 0), data, null])\n  }\n\n  deleteBitfieldPage (index) {\n    this.changes.push([core.bitfield(this.core.dataPointer, index, 0), null, null])\n  }\n\n  deleteBitfieldPageRange (start, end) {\n    this.changes.push([\n      core.bitfield(this.core.dataPointer, start, 0),\n      null,\n      core.bitfield(this.core.dataPointer, end === -1 ? Infinity : end, 0)\n    ])\n  }\n\n  putTreeNode (node) {\n    this.changes.push([core.tree(this.core.dataPointer, node.index), encode(CORE_TREE_NODE, node), null])\n  }\n\n  deleteTreeNode (index) {\n    this.changes.push([core.tree(this.core.dataPointer, index), null, null])\n  }\n\n  deleteTreeNodeRange (start, end) {\n    this.changes.push([\n      core.tree(this.core.dataPointer, start),\n      null,\n      core.tree(this.core.dataPointer, end === -1 ? Infinity : end)\n    ])\n  }\n\n  putUserData (key, value) {\n    const buffer = typeof value === 'string' ? b4a.from(value) : value\n    this.changes.push([core.userData(this.core.dataPointer, key), buffer, null])\n  }\n\n  deleteUserData (key) {\n    this.changes.push([core.userData(this.core.dataPointer, key), null, null])\n  }\n\n  putLocal (key, value) {\n    this.changes.push([core.local(this.core.dataPointer, key), value, null])\n  }\n\n  deleteLocal (key) {\n    this.changes.push([core.local(this.core.dataPointer, key), null, null])\n  }\n\n  deleteLocalRange (start, end) {\n    this.changes.push([\n      core.local(this.core.dataPointer, start),\n      null,\n      end === null ? core.localEnd(this.core.dataPointer) : core.local(this.core.dataPointer, end)\n    ])\n  }\n\n  flush () {\n    const changes = this.changes\n    if (changes === null) return Promise.resolve(!this.view)\n\n    this.changes = null\n\n    if (this.view) {\n      this.view.apply(changes)\n      return Promise.resolve(false)\n    }\n\n    return View.flush(changes, this.db)\n  }\n}\n\nclass CoreRX {\n  constructor (core, db, view) {\n    this.core = core\n    this.read = db.read({ autoDestroy: true })\n    this.view = view\n\n    view.readStart()\n  }\n\n  async getAuth () {\n    return await decode(CORE_AUTH, await this.view.get(this.read, core.auth(this.core.corePointer)))\n  }\n\n  async getSessions () {\n    return await decode(CORE_SESSIONS, await this.view.get(this.read, core.sessions(this.core.corePointer)))\n  }\n\n  async getHead () {\n    return await decode(CORE_HEAD, await this.view.get(this.read, core.head(this.core.dataPointer)))\n  }\n\n  async getDependency () {\n    return await decode(CORE_DEPENDENCY, await this.view.get(this.read, core.dependency(this.core.dataPointer)))\n  }\n\n  async getHints () {\n    return await decode(CORE_HINTS, await this.view.get(this.read, core.hints(this.core.dataPointer)))\n  }\n\n  getBlock (index) {\n    const dep = findBlockDependency(this.core.dependencies, index)\n    const data = dep === null ? this.core.dataPointer : dep.dataPointer\n    return this.view.get(this.read, core.block(data, index))\n  }\n\n  getBitfieldPage (index) {\n    return this.view.get(this.read, core.bitfield(this.core.dataPointer, index, 0))\n  }\n\n  async getTreeNode (index) {\n    const dep = findTreeDependency(this.core.dependencies, index)\n    const data = dep === null ? this.core.dataPointer : dep.dataPointer\n    return decode(CORE_TREE_NODE, await this.view.get(this.read, core.tree(data, index)))\n  }\n\n  async hasTreeNode (index) {\n    return (await this.getTreeNode(index)) !== null\n  }\n\n  getUserData (key) {\n    return this.view.get(this.read, core.userData(this.core.dataPointer, key))\n  }\n\n  getLocal (key) {\n    return this.view.get(this.read, core.local(this.core.dataPointer, key))\n  }\n\n  tryFlush () {\n    this.read.tryFlush()\n    this._free()\n  }\n\n  destroy () {\n    this.read.destroy()\n    this._free()\n  }\n\n  _free () {\n    if (this.view === null) return\n    this.view.readStop()\n    this.view = null\n  }\n}\n\nclass CorestoreTX {\n  constructor (view) {\n    this.view = view\n    this.changes = []\n  }\n\n  setHead (head) {\n    this.changes.push([store.head(), encode(CORESTORE_HEAD, head), null])\n  }\n\n  putCore (discoveryKey, ptr) {\n    this.changes.push([store.core(discoveryKey), encode(CORESTORE_CORE, ptr), null])\n  }\n\n  putCoreByAlias (alias, discoveryKey) {\n    this.changes.push([store.coreByAlias(alias), discoveryKey, null])\n  }\n\n  clear () {\n    const [start, end] = store.clear()\n    this.changes.push([start, null, end])\n  }\n\n  apply () {\n    if (this.changes === null) return\n    this.view.apply(this.changes)\n    this.changes = null\n  }\n}\n\nclass CorestoreRX {\n  constructor (db, view) {\n    this.read = db.read({ autoDestroy: true })\n    this.view = view\n\n    view.readStart()\n  }\n\n  async getHead () {\n    return decode(CORESTORE_HEAD, await this.view.get(this.read, store.head()))\n  }\n\n  async getCore (discoveryKey) {\n    return decode(CORESTORE_CORE, await this.view.get(this.read, store.core(discoveryKey)))\n  }\n\n  getCoreByAlias (alias) {\n    return this.view.get(this.read, store.coreByAlias(alias))\n  }\n\n  tryFlush () {\n    this.read.tryFlush()\n    this._free()\n  }\n\n  destroy () {\n    this.read.destroy()\n    this._free()\n  }\n\n  _free () {\n    if (this.view === null) return\n    this.view.readStop()\n    this.view = null\n  }\n}\n\nmodule.exports = { CorestoreTX, CorestoreRX, CoreTX, CoreRX }\n\nfunction findBlockDependency (dependencies, index) {\n  for (let i = 0; i < dependencies.length; i++) {\n    const dep = dependencies[i]\n    if (index < dep.length) return dep\n  }\n\n  return null\n}\n\nfunction findTreeDependency (dependencies, index) {\n  for (let i = 0; i < dependencies.length; i++) {\n    const dep = dependencies[i]\n    if (flat.rightSpan(index) <= (dep.length - 1) * 2) return dep\n  }\n\n  return null\n}\n\nfunction decode (enc, buffer) {\n  if (buffer === null) return null\n  return enc.decode({ start: 0, end: buffer.byteLength, buffer })\n}\n\nfunction encode (enc, m) {\n  // TODO: use fancy slab for small messages\n  const state = { start: 0, end: 0, buffer: null }\n  enc.preencode(state, m)\n  state.buffer = b4a.allocUnsafe(state.end)\n  enc.encode(state, m)\n  return state.buffer\n}\nconst { Readable, getStreamError } = require('streamx')\nconst CloseErrorStream = require('./close-error-stream.js')\nconst b4a = require('b4a')\n\nclass OverlayStream extends Readable {\n  constructor (stream, start, end, reverse, changes, cleared) {\n    super()\n\n    this.start = start\n    this.end = end\n    this.reverse = reverse\n    this.changes = changes\n    this.cleared = cleared\n    this.change = 0\n    this.range = 0\n\n    this._stream = stream\n    this._drained = false\n\n    this._stream.on('readable', this._drainMaybe.bind(this))\n    this._stream.on('error', noop)\n    this._stream.on('close', this._onclose.bind(this))\n  }\n\n  _drainMaybe () {\n    if (this._drained === true) return\n    this._drained = this._onreadable()\n  }\n\n  _onclose () {\n    if (this.destroying) return\n\n    const err = getStreamError(this._stream)\n\n    if (err !== null) {\n      this.destroy(err)\n      return\n    }\n\n    while (this.change < this.changes.length) {\n      const c = this.changes[this.change++]\n      const key = c[0]\n      const value = c[1]\n\n      if (value !== null && this._inRange(key)) this.push({ key, value })\n    }\n\n    this.push(null)\n    this._stream = null\n  }\n\n  _onreadable () {\n    let data = this._stream.read()\n    if (data === null) return false\n\n    let drained = false\n\n    do {\n      if (this._push(data) === true) drained = true\n      data = this._stream.read()\n    } while (data !== null)\n\n    return drained\n  }\n\n  _read (cb) {\n    this._drained = this._onreadable()\n    cb(null)\n  }\n\n  _predestroy () {\n    this.stream.destroy()\n  }\n\n  _push (entry) {\n    const key = entry.key\n\n    while (this.range < this.cleared.length) {\n      const c = this.cleared[this.range]\n\n      // we moved past the range\n      if (this.reverse ? b4a.compare(key, c[0]) < 0 : b4a.compare(c[2], key) <= 0) {\n        this.range++\n        continue\n      }\n\n      // we didnt move past and are in, drop\n      if (b4a.compare(c[0], key) <= 0 && b4a.compare(key, c[2]) < 0) {\n        return false\n      }\n\n      break\n    }\n\n    let updated = false\n\n    while (this.change < this.changes.length) {\n      const c = this.changes[this.change]\n      const key = c[0]\n      const value = typeof c[1] === 'string' ? b4a.from(c[1]) : c[1]\n      const cmp = b4a.compare(key, entry.key)\n\n      // same value, if not deleted, return new one\n      if (cmp === 0) {\n        this.change++\n        if (value === null || this._inRange(key) === false) return updated\n        this.push({ key, value })\n        return true\n      }\n\n      // we moved past the change, push it\n      if (this.reverse ? cmp > 0 : cmp < 0) {\n        this.change++\n        if (value === null || this._inRange(key) === false) continue\n        this.push({ key, value })\n        updated = true\n        continue\n      }\n\n      this.push(entry)\n      return true\n    }\n\n    this.push(entry)\n    return true\n  }\n\n  _inRange (key) {\n    return b4a.compare(this.start, key) <= 0 && b4a.compare(key, this.end) < 0\n  }\n}\n\nclass Overlay {\n  constructor () {\n    this.indexed = 0\n    this.changes = null\n    this.cleared = null\n    this.reverse = false\n  }\n\n  update (view, reverse) {\n    if (view.indexed === this.indexed) return\n\n    const changes = view.map === null ? [] : [...view.map.values()]\n    const cleared = view.cleared === null ? [] : view.cleared.slice(0)\n\n    const cmp = reverse ? cmpChangeReverse : cmpChange\n\n    changes.sort(cmp)\n    cleared.sort(cmp)\n\n    this.indexed = view.indexed\n    this.changes = changes\n    this.cleared = cleared\n    this.reverse = reverse\n  }\n\n  createStream (stream, start, end, reverse) {\n    return new OverlayStream(\n      stream,\n      start,\n      end,\n      reverse,\n      this.reverse === reverse ? this.changes : reverseArray(this.changes),\n      this.reverse === reverse ? this.cleared : reverseArray(this.cleared)\n    )\n  }\n}\n\nclass View {\n  constructor () {\n    this.map = null\n    this.indexed = 0\n    this.changes = null\n    this.cleared = null\n    this.overlay = null\n    this.snap = null\n    this.readers = 0\n  }\n\n  snapshot () {\n    if (this._attached()) return this.snap.snapshot()\n\n    const snap = new View()\n\n    snap.map = this.map\n    snap.indexed = this.indexed\n    snap.changes = this.changes\n    snap.cleared = this.cleared\n\n    if (this._frozen()) return snap\n\n    this.readers++\n    snap.snap = this\n\n    return snap\n  }\n\n  readStart () {\n    if (this.snap !== null) this.readers++\n  }\n\n  readStop () {\n    if (this.snap !== null && --this.readers === 0) this.snap.readers--\n  }\n\n  size () {\n    return this.changes === null ? 0 : this.changes.length\n  }\n\n  updated () {\n    return this.changes === null\n  }\n\n  get (read, key) {\n    return this.changes === null ? read.get(key) : this._indexAndGet(read, key)\n  }\n\n  reset () {\n    this.indexed = 0\n    this.snap = this.map = this.changes = this.cleared = this.overlay = null\n  }\n\n  iterator (db, start, end, reverse) {\n    if (dbClosing(db)) return new CloseErrorStream(new Error('RocksDB session is closed'))\n\n    const stream = db.iterator({ gte: start, lt: end, reverse })\n    if (this.changes === null) return stream\n\n    this._index()\n\n    if (this.overlay === null) this.overlay = new Overlay()\n    this.overlay.update(this, reverse)\n    return this.overlay.createStream(stream, start, end, reverse)\n  }\n\n  _indexAndGet (read, key) {\n    this._index()\n    const change = this.map.get(b4a.toString(key, 'hex'))\n\n    if (change === undefined) {\n      return this.cleared === null\n        ? read.get(key)\n        : this._readAndMaybeDrop(read, key)\n    }\n\n    return Promise.resolve(change[1])\n  }\n\n  async _readAndMaybeDrop (read, key) {\n    const cleared = this.cleared // in case its cleared\n    const value = await read.get(key)\n    if (value === null) return null\n\n    for (let i = 0; i < cleared.length; i++) {\n      const c = cleared[i]\n      // check if in range\n      if (b4a.compare(c[0], key) <= 0 && b4a.compare(key, c[2]) < 0) return null\n    }\n\n    return value\n  }\n\n  _attached () {\n    return this.snap !== null && this.changes === this.snap.changes\n  }\n\n  _frozen () {\n    return this.changes === null || (this.snap !== null && this.changes !== this.snap.changes)\n  }\n\n  _index () {\n    // if we are a snap and we are still attached (ie no mutations), simply copy the refs\n    if (this._attached()) {\n      this.snap._index()\n      this.map = this.snap.map\n      this.cleared = this.snap.cleared\n      this.indexed = this.snap.indexed\n      return\n    }\n\n    if (this.map === null) this.map = new Map()\n    if (this.changes.length === this.indexed) return\n\n    while (this.indexed < this.changes.length) {\n      const c = this.changes[this.indexed++]\n\n      if (c[2] === null) this.map.set(b4a.toString(c[0], 'hex'), c)\n      else this._indexRange(c)\n    }\n  }\n\n  _indexRange (range) {\n    const s = b4a.toString(range[0], 'hex')\n    const e = b4a.toString(range[2], 'hex')\n\n    for (const [key, c] of this.map) {\n      if (s <= key && key < e) this.map.set(key, [c[0], null, null])\n    }\n\n    if (this.cleared === null) this.cleared = []\n    this.cleared.push(range)\n  }\n\n  apply (changes) {\n    if (this.snap !== null) throw new Error('Illegal to push changes to a snapshot')\n\n    if (this.readers !== 0 && this.changes !== null) {\n      this.changes = this.changes.slice(0)\n      this.cleared = this.cleared === null ? null : this.cleared.slice(0)\n      this.map = this.map === null ? null : new Map([...this.map])\n    }\n\n    if (this.changes === null) {\n      this.changes = changes\n      return\n    }\n\n    for (let i = 0; i < changes.length; i++) {\n      this.changes.push(changes[i])\n    }\n  }\n\n  static async flush (changes, db) {\n    if (changes === null) return true\n\n    const w = db.write({ autoDestroy: true })\n\n    for (const [start, value, end] of changes) {\n      if (end !== null) w.tryDeleteRange(start, end)\n      else if (value !== null) w.tryPut(start, value)\n      else w.tryDelete(start)\n    }\n\n    await w.flush()\n\n    return true\n  }\n}\n\nmodule.exports = View\n\nfunction cmpChange (a, b) {\n  const c = b4a.compare(a[0], b[0])\n  return c === 0 ? b4a.compare(a[2], b[2]) : c\n}\n\nfunction cmpChangeReverse (a, b) {\n  return cmpChange(b, a)\n}\n\nfunction noop () {}\n\nfunction reverseArray (list) {\n  const r = new Array(list.length)\n  for (let i = 0; i < list.length; i++) r[r.length - 1 - i] = list[i]\n  return r\n}\n\n// TODO: expose from rocks instead\nfunction dbClosing (db) {\n  return db._state.closing || db._index === -1\n}\nconst fs = require('fs')\nconst path = require('path')\nconst { Readable } = require('streamx')\nconst b4a = require('b4a')\nconst flat = require('flat-tree')\nconst crypto = require('hypercore-crypto')\nconst c = require('compact-encoding')\nconst m = require('./messages.js')\nconst View = require('../../lib/view.js')\nconst { CorestoreTX, CoreTX, CorestoreRX } = require('../../lib/tx.js')\n\nconst EMPTY_NODE = b4a.alloc(40)\nconst EMPTY_PAGE = b4a.alloc(4096)\n\nlet TREE_01_SKIP = null\nlet TREE_04_SKIP = null\nlet TREE_16_SKIP = null\n\nclass CoreListStream extends Readable {\n  constructor (storage) {\n    super()\n\n    this.storage = storage\n    this.stack = []\n  }\n\n  async _open (cb) {\n    for (const a of await readdir(path.join(this.storage, 'cores'))) {\n      for (const b of await readdir(path.join(this.storage, 'cores', a))) {\n        for (const dkey of await readdir(path.join(this.storage, 'cores', a, b))) {\n          this.stack.push(path.join(this.storage, 'cores', a, b, dkey))\n        }\n      }\n    }\n\n    cb(null)\n  }\n\n  async _read (cb) {\n    while (true) {\n      const next = this.stack.pop()\n      if (!next) {\n        this.push(null)\n        break\n      }\n\n      const oplog = path.join(next, 'oplog')\n      const result = await readOplog(oplog)\n      if (!result) continue\n\n      this.push(result)\n      break\n    }\n\n    cb(null)\n  }\n}\n\nfunction decodeOplogHeader (state) {\n  c.uint32.decode(state) // cksum, ignore for now\n\n  const l = c.uint32.decode(state)\n  const length = l >> 2\n  const headerBit = l & 1\n  const partialBit = l & 2\n\n  if (state.end - state.start < length) return null\n\n  const end = state.start + length\n  const result = { header: headerBit, partial: partialBit !== 0, byteLength: length + 8, message: null }\n\n  try {\n    result.message = m.oplog.header.decode({ start: state.start, end, buffer: state.buffer })\n  } catch {\n    return null\n  }\n\n  state.start = end\n  return result\n}\n\nfunction decodeOplogEntry (state) {\n  if (state.end - state.start < 8) return null\n\n  c.uint32.decode(state) // cksum, ignore for now\n\n  const l = c.uint32.decode(state)\n  const length = l >>> 2\n  const headerBit = l & 1\n  const partialBit = l & 2\n\n  if (state.end - state.start < length) return null\n\n  const end = state.start + length\n\n  const result = { header: headerBit, partial: partialBit !== 0, byteLength: length + 8, message: null }\n\n  try {\n    result.message = m.oplog.entry.decode({ start: state.start, end, buffer: state.buffer })\n  } catch {\n    return null\n  }\n\n  state.start = end\n\n  return result\n}\n\nmodule.exports = { store, core }\n\nasync function store (storage, { version, dryRun = true, gc = true }) {\n  const stream = new CoreListStream(storage.path)\n  const view = new View()\n\n  const tx = new CorestoreTX(view)\n  const head = await storage._getHead(view)\n  const primaryKeyFile = path.join(storage.path, 'primary-key')\n\n  const primaryKey = await readFile(primaryKeyFile)\n\n  if (!head.seed) head.seed = primaryKey\n\n  for await (const data of stream) {\n    const key = data.header.key\n    const discoveryKey = crypto.discoveryKey(data.header.key)\n    const files = getFiles(data.path)\n\n    if (head.defaultDiscoveryKey === null) head.defaultDiscoveryKey = discoveryKey\n\n    const core = {\n      version: 0, // need later migration\n      corePointer: head.allocated.cores++,\n      dataPointer: head.allocated.datas++,\n      alias: null\n    }\n\n    const ptr = { version: 0, corePointer: core.corePointer, dataPointer: core.dataPointer, dependencies: [] }\n    const ctx = new CoreTX(ptr, storage.db, view, [])\n    const userData = new Map()\n    const treeNodes = new Map()\n\n    const auth = {\n      key,\n      discoveryKey,\n      manifest: data.header.manifest,\n      keyPair: data.header.keyPair,\n      encryptionKey: null\n    }\n\n    const tree = {\n      length: 0,\n      fork: 0,\n      rootHash: null,\n      signature: null\n    }\n\n    if (data.header.tree && data.header.tree.length) {\n      tree.length = data.header.tree.length\n      tree.fork = data.header.tree.fork\n      tree.rootHash = data.header.tree.rootHash\n      tree.signature = data.header.tree.signature\n    }\n\n    for (const { key, value } of data.header.userData) {\n      userData.set(key, value)\n    }\n\n    for (const e of data.entries) {\n      if (e.userData) userData.set(e.userData.key, e.userData.value)\n\n      if (e.treeNodes) {\n        for (const node of e.treeNodes) {\n          treeNodes.set(node.index, node)\n          ctx.putTreeNode(node)\n        }\n      }\n\n      if (e.treeUpgrade) {\n        if (e.treeUpgrade.ancestors !== tree.length) {\n          throw new Error('Unflushed truncations not migrate-able atm')\n        }\n\n        tree.length = e.treeUpgrade.length\n        tree.fork = e.treeUpgrade.fork\n        tree.rootHash = null\n        tree.signature = e.treeUpgrade.signature\n      }\n    }\n\n    if (userData.has('corestore/name') && userData.has('corestore/namespace')) {\n      core.alias = {\n        name: b4a.toString(userData.get('corestore/name')),\n        namespace: userData.get('corestore/namespace')\n      }\n      userData.delete('corestore/name')\n      userData.delete('corestore/namespace')\n    }\n\n    for (const [key, value] of userData) {\n      ctx.putUserData(key, value)\n    }\n\n    ctx.setAuth(auth)\n\n    const getTreeNode = (index) => (treeNodes.get(index) || getTreeNodeFromFile(files.tree, index))\n\n    if (tree.length) {\n      if (tree.rootHash === null) tree.rootHash = crypto.tree(await getRoots(tree.length, getTreeNode))\n      ctx.setHead(tree)\n    }\n\n    tx.putCore(discoveryKey, core)\n    if (core.alias) tx.putCoreByAlias(core.alias, discoveryKey)\n\n    await ctx.flush()\n  }\n\n  head.version = version\n  tx.setHead(head)\n  tx.apply()\n\n  if (dryRun) return\n\n  await View.flush(view.changes, storage.db)\n\n  if (gc) await rm(primaryKeyFile)\n}\n\nclass BlockSlicer {\n  constructor (filename) {\n    this.stream = fs.createReadStream(filename)\n    this.closed = new Promise(resolve => this.stream.once('close', resolve))\n    this.offset = 0\n    this.overflow = null\n  }\n\n  async take (offset, size) {\n    let buffer = null\n    if (offset < this.offset) throw new Error('overread')\n\n    while (true) {\n      let data = null\n\n      if (this.overflow) {\n        data = this.overflow\n        this.overflow = null\n      } else {\n        data = this.stream.read()\n\n        if (!data) {\n          await new Promise(resolve => this.stream.once('readable', resolve))\n          continue\n        }\n      }\n\n      let chunk = null\n\n      if (this.offset === offset || buffer) {\n        chunk = data\n      } else if (this.offset + data.byteLength > offset) {\n        chunk = data.subarray(offset - this.offset)\n      }\n\n      this.offset += data.byteLength\n      if (!chunk) continue\n\n      if (buffer) buffer = b4a.concat([buffer, chunk])\n      else buffer = chunk\n\n      if (buffer.byteLength < size) continue\n\n      const result = buffer.subarray(0, size)\n      this.overflow = size === buffer.byteLength ? null : buffer.subarray(result.byteLength)\n      this.offset -= (this.overflow ? this.overflow.byteLength : 0)\n      return result\n    }\n  }\n\n  close () {\n    this.stream.on('error', noop)\n    this.stream.destroy()\n    return this.closed\n  }\n}\n\nclass TreeSlicer {\n  constructor () {\n    this.buffer = null\n    this.offset = 0\n  }\n\n  get size () {\n    return this.buffer === null ? 0 : this.buffer.byteLength\n  }\n\n  push (data) {\n    if (this.buffer === null) this.buffer = data\n    else this.buffer = b4a.concat([this.buffer, data])\n    this.offset += data.byteLength\n  }\n\n  skip () {\n    let skipped = 0\n\n    if (TREE_01_SKIP === null) {\n      TREE_16_SKIP = b4a.alloc(16 * 40 * 100)\n      TREE_04_SKIP = TREE_16_SKIP.subarray(0, 4 * 40 * 100)\n      TREE_01_SKIP = TREE_16_SKIP.subarray(0, 1 * 40 * 100)\n    }\n\n    while (true) {\n      if (this.buffer.byteLength >= TREE_16_SKIP.byteLength) {\n        if (b4a.equals(this.buffer.subarray(0, TREE_16_SKIP.byteLength), TREE_16_SKIP)) {\n          this.buffer = this.buffer.subarray(TREE_16_SKIP.byteLength)\n          skipped += 1600\n          continue\n        }\n      }\n\n      if (this.buffer.byteLength >= TREE_04_SKIP.byteLength) {\n        if (b4a.equals(this.buffer.subarray(0, TREE_04_SKIP.byteLength), TREE_04_SKIP)) {\n          this.buffer = this.buffer.subarray(TREE_04_SKIP.byteLength)\n          skipped += 400\n          continue\n        }\n      }\n\n      if (this.buffer.byteLength >= TREE_01_SKIP.byteLength) {\n        if (b4a.equals(this.buffer.subarray(0, TREE_01_SKIP.byteLength), TREE_01_SKIP)) {\n          this.buffer = this.buffer.subarray(TREE_01_SKIP.byteLength)\n          skipped += 100\n          continue\n        }\n      }\n      break\n    }\n\n    return skipped\n  }\n\n  take () {\n    const len = 40\n\n    if (len <= this.size) {\n      const chunk = this.buffer.subarray(0, len)\n      this.buffer = this.buffer.subarray(len)\n      return chunk\n    }\n\n    return null\n  }\n}\n\nasync function core (core, { version, dryRun = true, gc = true }) {\n  if (dryRun) return // dryRun mode not supported atm\n\n  const rx = core.read()\n\n  const promises = [rx.getAuth(), rx.getHead()]\n  rx.tryFlush()\n\n  const [auth, head] = await Promise.all(promises)\n\n  if (!auth) return\n\n  const dk = b4a.toString(auth.discoveryKey, 'hex')\n  const files = getFiles(path.join(core.store.path, 'cores', dk.slice(0, 2), dk.slice(2, 4), dk))\n\n  if (head === null || head.length === 0) {\n    await commitCoreMigration(auth, core, version)\n    if (gc) await runGC()\n    return // no data\n  }\n\n  const oplog = await readOplog(files.oplog)\n  if (!oplog) throw new Error('No oplog available for ' + files.oplog + ', length = ' + (head ? head.length : 0) + ', writable = ' + (!!auth.keyPair))\n\n  const treeData = new TreeSlicer()\n\n  let treeIndex = 0\n\n  if (await exists(files.tree)) {\n    for await (const data of fs.createReadStream(files.tree)) {\n      treeData.push(data)\n\n      let write = null\n\n      while (true) {\n        const skip = treeData.skip()\n        treeIndex += skip\n\n        const buf = treeData.take()\n        if (buf === null) break\n\n        const index = treeIndex++\n        if (b4a.equals(buf, EMPTY_NODE)) continue\n\n        if (write === null) write = core.write()\n        write.putTreeNode(decodeTreeNode(index, buf))\n      }\n\n      if (write !== null) await write.flush()\n    }\n  }\n\n  const buf = []\n  if (await exists(files.bitfield)) {\n    for await (const data of fs.createReadStream(files.bitfield)) {\n      buf.push(data)\n    }\n  }\n\n  let bitfield = b4a.concat(buf)\n  if (bitfield.byteLength & 4095) bitfield = b4a.concat([bitfield, b4a.alloc(4096 - (bitfield.byteLength & 4095))])\n\n  const pages = new Map()\n  const headerBits = new Map()\n\n  const roots = await getRootsFromStorage(core, head.length)\n\n  for (const e of oplog.entries) {\n    if (!e.bitfield) continue\n\n    for (let i = 0; i < e.bitfield.length; i++) {\n      headerBits.set(i + e.bitfield.start, !e.bitfield.drop)\n    }\n  }\n\n  let batch = []\n\n  const cache = new Map()\n  const blocks = new BlockSlicer(files.data)\n\n  for (const index of allBits(bitfield)) {\n    if (headerBits.get(index) === false) continue\n    if (index >= head.length) continue\n\n    setBitInPage(index)\n\n    batch.push(index)\n    if (batch.length < 1024) continue\n\n    await writeBlocksBatch()\n    continue\n  }\n\n  if (batch.length) await writeBlocksBatch()\n\n  await blocks.close()\n\n  const w = core.write()\n\n  for (const [index, bit] of headerBits) {\n    if (!bit) continue\n    if (index >= head.length) continue\n\n    setBitInPage(index)\n\n    const blk = await getBlockFromFile(files.data, core, index, roots, cache)\n    w.putBlock(index, blk)\n  }\n\n  for (const [index, page] of pages) {\n    w.putBitfieldPage(index, b4a.from(page.buffer, page.byteOffset, page.byteLength))\n  }\n\n  await w.flush()\n\n  let contiguousLength = 0\n  for await (const data of core.createBlockStream()) {\n    if (data.index === contiguousLength) contiguousLength++\n    else break\n  }\n\n  if (contiguousLength) {\n    const w = core.write()\n    w.setHints({ contiguousLength })\n    await w.flush()\n  }\n\n  await commitCoreMigration(auth, core, version)\n\n  if (gc) await runGC()\n\n  async function runGC () {\n    await rm(files.path)\n    await rmdir(path.join(files.path, '..'))\n    await rmdir(path.join(files.path, '../..'))\n    await rmdir(path.join(core.store.path, 'cores'))\n  }\n\n  function setBitInPage (index) {\n    const n = index & 32767\n    const p = (index - n) / 32768\n\n    let page = pages.get(p)\n\n    if (!page) {\n      page = new Uint32Array(1024)\n      pages.set(p, page)\n    }\n\n    const o = n & 31\n    const b = (n - o) / 32\n    const v = 1 << o\n\n    page[b] |= v\n  }\n\n  async function writeBlocksBatch () {\n    const read = core.read()\n    const promises = []\n    for (const index of batch) promises.push(getByteRangeFromStorage(read, 2 * index, roots, cache))\n    read.tryFlush()\n\n    const r = await Promise.all(promises)\n    const tx = core.write()\n\n    for (let i = 0; i < r.length; i++) {\n      const index = batch[i]\n      const [offset, size] = r[i]\n\n      const blk = await blocks.take(offset, size)\n      tx.putBlock(index, blk)\n    }\n\n    batch = []\n    if (cache.size > 16384) cache.clear()\n\n    await tx.flush()\n  }\n}\n\nasync function commitCoreMigration (auth, core, version) {\n  const view = new View()\n  const rx = new CorestoreRX(core.db, view)\n\n  const storeCorePromise = rx.getCore(auth.discoveryKey)\n  rx.tryFlush()\n\n  const storeCore = await storeCorePromise\n\n  storeCore.version = version\n\n  const tx = new CorestoreTX(view)\n\n  tx.putCore(auth.discoveryKey, storeCore)\n  tx.apply()\n\n  await View.flush(view.changes, core.db)\n}\n\nasync function getBlockFromFile (file, core, index, roots, cache) {\n  const rx = core.read()\n  const promise = getByteRangeFromStorage(rx, 2 * index, roots, cache)\n  rx.tryFlush()\n  const [offset, size] = await promise\n\n  return new Promise(function (resolve) {\n    readAll(file, size, offset, function (err, buf) {\n      if (err) return resolve(null)\n      resolve(buf)\n    })\n  })\n}\n\nfunction getFiles (dir) {\n  return {\n    path: dir,\n    oplog: path.join(dir, 'oplog'),\n    data: path.join(dir, 'data'),\n    tree: path.join(dir, 'tree'),\n    bitfield: path.join(dir, 'bitfield')\n  }\n}\n\nasync function getRootsFromStorage (core, length) {\n  const all = []\n  const rx = core.read()\n  for (const index of flat.fullRoots(2 * length)) {\n    all.push(rx.getTreeNode(index))\n  }\n  rx.tryFlush()\n  return Promise.all(all)\n}\n\nasync function getRoots (length, getTreeNode) {\n  const all = []\n  for (const index of flat.fullRoots(2 * length)) {\n    all.push(await getTreeNode(index))\n  }\n  return all\n}\n\nfunction getCached (read, cache, index) {\n  if (cache.has(index)) return cache.get(index)\n  const p = read.getTreeNode(index)\n  cache.set(index, p)\n  return p\n}\n\nasync function getByteRangeFromStorage (read, index, roots, cache) {\n  const promises = [getCached(read, cache, index), getByteOffsetFromStorage(read, index, roots, cache)]\n  const [node, offset] = await Promise.all(promises)\n  return [offset, node.size]\n}\n\nasync function getByteOffsetFromStorage (rx, index, roots, cache) {\n  if (index === 0) return 0\n  if ((index & 1) === 1) index = flat.leftSpan(index)\n\n  let head = 0\n  let offset = 0\n\n  for (const node of roots) { // all async ticks happen once we find the root so safe\n    head += 2 * ((node.index - head) + 1)\n\n    if (index >= head) {\n      offset += node.size\n      continue\n    }\n\n    const ite = flat.iterator(node.index)\n    const promises = []\n\n    while (ite.index !== index) {\n      if (index < ite.index) {\n        ite.leftChild()\n      } else {\n        promises.push(getCached(rx, cache, ite.leftChild()))\n        ite.sibling()\n      }\n    }\n\n    const nodes = await Promise.all(promises)\n    for (const node of nodes) offset += node.size\n\n    return offset\n  }\n\n  throw new Error('Failed to find offset')\n}\n\nfunction decodeTreeNode (index, buf) {\n  return { index, size: c.decode(c.uint64, buf), hash: buf.subarray(8) }\n}\n\nasync function getTreeNodeFromFile (file, index) {\n  return new Promise(function (resolve) {\n    readAll(file, 40, index * 40, function (err, buf) {\n      if (err) return resolve(null)\n      resolve(decodeTreeNode(index, buf))\n    })\n  })\n}\n\nfunction readAll (filename, length, pos, cb) {\n  const buf = b4a.alloc(length)\n\n  fs.open(filename, 'r', function (err, fd) {\n    if (err) return cb(err)\n\n    let offset = 0\n\n    fs.read(fd, buf, offset, buf.byteLength, pos, function loop (err, read) {\n      if (err) return done(err)\n      if (read === 0) return done(new Error('Partial read'))\n      offset += read\n      if (offset === buf.byteLength) return done(null, buf)\n      fs.read(fd, offset, buf.byteLength - offset, buf, pos + offset, loop)\n    })\n\n    function done (err, value) {\n      fs.close(fd, () => cb(err, value))\n    }\n  })\n}\n\nasync function readdir (dir) {\n  try {\n    return await fs.promises.readdir(dir)\n  } catch {\n    return []\n  }\n}\n\nasync function exists (file) {\n  try {\n    await fs.promises.stat(file)\n    return true\n  } catch {\n    return false\n  }\n}\n\nasync function readFile (file) {\n  try {\n    return await fs.promises.readFile(file)\n  } catch {\n    return null\n  }\n}\n\nasync function rm (dir) {\n  try {\n    await fs.promises.rm(dir, { recursive: true })\n  } catch {}\n}\n\nasync function rmdir (dir) {\n  try {\n    await fs.promises.rmdir(dir)\n  } catch {}\n}\n\nfunction * allBits (buffer) {\n  for (let i = 0; i < buffer.byteLength; i += EMPTY_PAGE.byteLength) {\n    const page = buffer.subarray(i, i + EMPTY_NODE.byteLength)\n    if (b4a.equals(page, EMPTY_PAGE)) continue\n\n    const view = new Uint32Array(page.buffer, page.byteOffset, EMPTY_PAGE.byteLength / 4)\n\n    for (let j = 0; j < view.length; j++) {\n      const n = view[j]\n      if (n === 0) continue\n\n      for (let k = 0; k < 32; k++) {\n        const m = 1 << k\n        if (n & m) yield i * 8 + j * 32 + k\n      }\n    }\n  }\n}\n\nfunction readOplog (oplog) {\n  return new Promise(function (resolve) {\n    fs.readFile(oplog, function (err, buffer) {\n      if (err) return resolve(null)\n\n      const state = { start: 0, end: buffer.byteLength, buffer }\n      const headers = [1, 0]\n\n      const h1 = decodeOplogHeader(state)\n      state.start = 4096\n\n      const h2 = decodeOplogHeader(state)\n      state.start = 4096 * 2\n\n      if (!h1 && !h2) return resolve(null)\n\n      if (h1 && !h2) {\n        headers[0] = h1.header\n        headers[1] = h1.header\n      } else if (!h1 && h2) {\n        headers[0] = (h2.header + 1) & 1\n        headers[1] = h2.header\n      } else {\n        headers[0] = h1.header\n        headers[1] = h2.header\n      }\n\n      const header = (headers[0] + headers[1]) & 1\n      const result = { path: path.dirname(oplog), header: null, entries: [] }\n      const decoded = []\n\n      result.header = header ? h2.message : h1.message\n\n      if (result.header.external) {\n        fs.readFile(path.join(oplog, '../header'), function (err, buffer) {\n          if (err) return resolve(null)\n          const start = result.header.external.start\n          const end = start + result.header.external.length\n          result.header = m.oplog.header.decode({ buffer, start, end })\n          finish()\n        })\n        return\n      }\n\n      finish()\n\n      function finish () {\n        while (true) {\n          const entry = decodeOplogEntry(state)\n          if (!entry) break\n          if (entry.header !== header) break\n\n          decoded.push(entry)\n        }\n\n        while (decoded.length > 0 && decoded[decoded.length - 1].partial) decoded.pop()\n\n        for (const e of decoded) {\n          result.entries.push(e.message)\n        }\n\n        resolve(result)\n      }\n    })\n  })\n}\n\nfunction noop () {}\n// needed here for compat, copied from old hypercore, do not change this\n\nconst c = require('compact-encoding')\nconst b4a = require('b4a')\n\nconst EMPTY = b4a.alloc(0)\nconst DEFAULT_NAMESPACE = b4a.from('4144eea531e483d54e0c14f4ca68e0644f355343ff6fcb0f005200e12cd747cb', 'hex')\n\nconst hashes = {\n  preencode (state, m) {\n    state.end++ // small uint\n  },\n  encode (state, m) {\n    if (m === 'blake2b') {\n      c.uint.encode(state, 0)\n      return\n    }\n\n    throw new Error('Unknown hash: ' + m)\n  },\n  decode (state) {\n    const n = c.uint.decode(state)\n    if (n === 0) return 'blake2b'\n    throw new Error('Unknown hash id: ' + n)\n  }\n}\n\nconst signatures = {\n  preencode (state, m) {\n    state.end++ // small uint\n  },\n  encode (state, m) {\n    if (m === 'ed25519') {\n      c.uint.encode(state, 0)\n      return\n    }\n\n    throw new Error('Unknown signature: ' + m)\n  },\n  decode (state) {\n    const n = c.uint.decode(state)\n    if (n === 0) return 'ed25519'\n    throw new Error('Unknown signature id: ' + n)\n  }\n}\n\nconst signer = {\n  preencode (state, m) {\n    signatures.preencode(state, m.signature)\n    c.fixed32.preencode(state, m.namespace)\n    c.fixed32.preencode(state, m.publicKey)\n  },\n  encode (state, m) {\n    signatures.encode(state, m.signature)\n    c.fixed32.encode(state, m.namespace)\n    c.fixed32.encode(state, m.publicKey)\n  },\n  decode (state) {\n    return {\n      signature: signatures.decode(state),\n      namespace: c.fixed32.decode(state),\n      publicKey: c.fixed32.decode(state)\n    }\n  }\n}\n\nconst signerArray = c.array(signer)\n\nconst prologue = {\n  preencode (state, p) {\n    c.fixed32.preencode(state, p.hash)\n    c.uint.preencode(state, p.length)\n  },\n  encode (state, p) {\n    c.fixed32.encode(state, p.hash)\n    c.uint.encode(state, p.length)\n  },\n  decode (state) {\n    return {\n      hash: c.fixed32.decode(state),\n      length: c.uint.decode(state)\n    }\n  }\n}\n\nconst manifestv0 = {\n  preencode (state, m) {\n    hashes.preencode(state, m.hash)\n    state.end++ // type\n\n    if (m.prologue && m.signers.length === 0) {\n      c.fixed32.preencode(state, m.prologue.hash)\n      return\n    }\n\n    if (m.quorum === 1 && m.signers.length === 1 && !m.allowPatch) {\n      signer.preencode(state, m.signers[0])\n    } else {\n      state.end++ // flags\n      c.uint.preencode(state, m.quorum)\n      signerArray.preencode(state, m.signers)\n    }\n  },\n  encode (state, m) {\n    hashes.encode(state, m.hash)\n\n    if (m.prologue && m.signers.length === 0) {\n      c.uint.encode(state, 0)\n      c.fixed32.encode(state, m.prologue.hash)\n      return\n    }\n\n    if (m.quorum === 1 && m.signers.length === 1 && !m.allowPatch) {\n      c.uint.encode(state, 1)\n      signer.encode(state, m.signers[0])\n    } else {\n      c.uint.encode(state, 2)\n      c.uint.encode(state, m.allowPatch ? 1 : 0)\n      c.uint.encode(state, m.quorum)\n      signerArray.encode(state, m.signers)\n    }\n  },\n  decode (state) {\n    const hash = hashes.decode(state)\n    const type = c.uint.decode(state)\n\n    if (type > 2) throw new Error('Unknown type: ' + type)\n\n    if (type === 0) {\n      return {\n        version: 0,\n        hash,\n        allowPatch: false,\n        quorum: 0,\n        signers: [],\n        prologue: {\n          hash: c.fixed32.decode(state),\n          length: 0\n        }\n      }\n    }\n\n    if (type === 1) {\n      return {\n        version: 0,\n        hash,\n        allowPatch: false,\n        quorum: 1,\n        signers: [signer.decode(state)],\n        prologue: null\n      }\n    }\n\n    const flags = c.uint.decode(state)\n\n    return {\n      version: 0,\n      hash,\n      allowPatch: (flags & 1) !== 0,\n      quorum: c.uint.decode(state),\n      signers: signerArray.decode(state),\n      prologue: null\n    }\n  }\n}\n\nconst manifest = exports.manifest = {\n  preencode (state, m) {\n    state.end++ // version\n    if (m.version === 0) return manifestv0.preencode(state, m)\n\n    state.end++ // flags\n    hashes.preencode(state, m.hash)\n\n    c.uint.preencode(state, m.quorum)\n    signerArray.preencode(state, m.signers)\n    if (m.prologue) prologue.preencode(state, m.prologue)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.version)\n    if (m.version === 0) return manifestv0.encode(state, m)\n\n    c.uint.encode(state, (m.allowPatch ? 1 : 0) | (m.prologue ? 2 : 0) | (m.unencrypted ? 4 : 0))\n    hashes.encode(state, m.hash)\n\n    c.uint.encode(state, m.quorum)\n    signerArray.encode(state, m.signers)\n    if (m.prologue) prologue.encode(state, m.prologue)\n  },\n  decode (state) {\n    const v = c.uint.decode(state)\n    if (v === 0) return manifestv0.decode(state)\n    if (v !== 1) throw new Error('Unknown version: ' + v)\n\n    const flags = c.uint.decode(state)\n    const hash = hashes.decode(state)\n    const quorum = c.uint.decode(state)\n    const signers = signerArray.decode(state)\n    const unencrypted = (flags & 4) !== 0\n\n    return {\n      version: 1,\n      hash,\n      allowPatch: (flags & 1) !== 0,\n      quorum,\n      signers,\n      prologue: (flags & 2) === 0 ? null : prologue.decode(state),\n      unencrypted\n    }\n  }\n}\n\nconst node = {\n  preencode (state, n) {\n    c.uint.preencode(state, n.index)\n    c.uint.preencode(state, n.size)\n    c.fixed32.preencode(state, n.hash)\n  },\n  encode (state, n) {\n    c.uint.encode(state, n.index)\n    c.uint.encode(state, n.size)\n    c.fixed32.encode(state, n.hash)\n  },\n  decode (state) {\n    return {\n      index: c.uint.decode(state),\n      size: c.uint.decode(state),\n      hash: c.fixed32.decode(state)\n    }\n  }\n}\n\nconst nodeArray = c.array(node)\n\nconst wire = exports.wire = {}\n\nwire.handshake = {\n  preencode (state, m) {\n    c.uint.preencode(state, 1)\n    c.fixed32.preencode(state, m.capability)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.seeks ? 1 : 0)\n    c.fixed32.encode(state, m.capability)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n    return {\n      seeks: (flags & 1) !== 0,\n      capability: c.fixed32.decode(state)\n    }\n  }\n}\n\nconst requestBlock = {\n  preencode (state, b) {\n    c.uint.preencode(state, b.index)\n    c.uint.preencode(state, b.nodes)\n  },\n  encode (state, b) {\n    c.uint.encode(state, b.index)\n    c.uint.encode(state, b.nodes)\n  },\n  decode (state) {\n    return {\n      index: c.uint.decode(state),\n      nodes: c.uint.decode(state)\n    }\n  }\n}\n\nconst requestSeek = {\n  preencode (state, s) {\n    c.uint.preencode(state, s.bytes)\n    c.uint.preencode(state, s.padding)\n  },\n  encode (state, s) {\n    c.uint.encode(state, s.bytes)\n    c.uint.encode(state, s.padding)\n  },\n  decode (state) {\n    return {\n      bytes: c.uint.decode(state),\n      padding: c.uint.decode(state)\n    }\n  }\n}\n\nconst requestUpgrade = {\n  preencode (state, u) {\n    c.uint.preencode(state, u.start)\n    c.uint.preencode(state, u.length)\n  },\n  encode (state, u) {\n    c.uint.encode(state, u.start)\n    c.uint.encode(state, u.length)\n  },\n  decode (state) {\n    return {\n      start: c.uint.decode(state),\n      length: c.uint.decode(state)\n    }\n  }\n}\n\nwire.request = {\n  preencode (state, m) {\n    state.end++ // flags\n    c.uint.preencode(state, m.id)\n    c.uint.preencode(state, m.fork)\n\n    if (m.block) requestBlock.preencode(state, m.block)\n    if (m.hash) requestBlock.preencode(state, m.hash)\n    if (m.seek) requestSeek.preencode(state, m.seek)\n    if (m.upgrade) requestUpgrade.preencode(state, m.upgrade)\n    if (m.priority) c.uint.preencode(state, m.priority)\n  },\n  encode (state, m) {\n    const flags = (m.block ? 1 : 0) | (m.hash ? 2 : 0) | (m.seek ? 4 : 0) | (m.upgrade ? 8 : 0) | (m.manifest ? 16 : 0) | (m.priority ? 32 : 0)\n\n    c.uint.encode(state, flags)\n    c.uint.encode(state, m.id)\n    c.uint.encode(state, m.fork)\n\n    if (m.block) requestBlock.encode(state, m.block)\n    if (m.hash) requestBlock.encode(state, m.hash)\n    if (m.seek) requestSeek.encode(state, m.seek)\n    if (m.upgrade) requestUpgrade.encode(state, m.upgrade)\n    if (m.priority) c.uint.encode(state, m.priority)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n\n    return {\n      id: c.uint.decode(state),\n      fork: c.uint.decode(state),\n      block: flags & 1 ? requestBlock.decode(state) : null,\n      hash: flags & 2 ? requestBlock.decode(state) : null,\n      seek: flags & 4 ? requestSeek.decode(state) : null,\n      upgrade: flags & 8 ? requestUpgrade.decode(state) : null,\n      manifest: (flags & 16) !== 0,\n      priority: flags & 32 ? c.uint.decode(state) : 0\n    }\n  }\n}\n\nwire.cancel = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.request)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.request)\n  },\n  decode (state, m) {\n    return {\n      request: c.uint.decode(state)\n    }\n  }\n}\n\nconst dataUpgrade = {\n  preencode (state, u) {\n    c.uint.preencode(state, u.start)\n    c.uint.preencode(state, u.length)\n    nodeArray.preencode(state, u.nodes)\n    nodeArray.preencode(state, u.additionalNodes)\n    c.buffer.preencode(state, u.signature)\n  },\n  encode (state, u) {\n    c.uint.encode(state, u.start)\n    c.uint.encode(state, u.length)\n    nodeArray.encode(state, u.nodes)\n    nodeArray.encode(state, u.additionalNodes)\n    c.buffer.encode(state, u.signature)\n  },\n  decode (state) {\n    return {\n      start: c.uint.decode(state),\n      length: c.uint.decode(state),\n      nodes: nodeArray.decode(state),\n      additionalNodes: nodeArray.decode(state),\n      signature: c.buffer.decode(state)\n    }\n  }\n}\n\nconst dataSeek = {\n  preencode (state, s) {\n    c.uint.preencode(state, s.bytes)\n    nodeArray.preencode(state, s.nodes)\n  },\n  encode (state, s) {\n    c.uint.encode(state, s.bytes)\n    nodeArray.encode(state, s.nodes)\n  },\n  decode (state) {\n    return {\n      bytes: c.uint.decode(state),\n      nodes: nodeArray.decode(state)\n    }\n  }\n}\n\nconst dataBlock = {\n  preencode (state, b) {\n    c.uint.preencode(state, b.index)\n    c.buffer.preencode(state, b.value)\n    nodeArray.preencode(state, b.nodes)\n  },\n  encode (state, b) {\n    c.uint.encode(state, b.index)\n    c.buffer.encode(state, b.value)\n    nodeArray.encode(state, b.nodes)\n  },\n  decode (state) {\n    return {\n      index: c.uint.decode(state),\n      value: c.buffer.decode(state) || EMPTY,\n      nodes: nodeArray.decode(state)\n    }\n  }\n}\n\nconst dataHash = {\n  preencode (state, b) {\n    c.uint.preencode(state, b.index)\n    nodeArray.preencode(state, b.nodes)\n  },\n  encode (state, b) {\n    c.uint.encode(state, b.index)\n    nodeArray.encode(state, b.nodes)\n  },\n  decode (state) {\n    return {\n      index: c.uint.decode(state),\n      nodes: nodeArray.decode(state)\n    }\n  }\n}\n\nwire.data = {\n  preencode (state, m) {\n    state.end++ // flags\n    c.uint.preencode(state, m.request)\n    c.uint.preencode(state, m.fork)\n\n    if (m.block) dataBlock.preencode(state, m.block)\n    if (m.hash) dataHash.preencode(state, m.hash)\n    if (m.seek) dataSeek.preencode(state, m.seek)\n    if (m.upgrade) dataUpgrade.preencode(state, m.upgrade)\n    if (m.manifest) manifest.preencode(state, m.manifest)\n  },\n  encode (state, m) {\n    const flags = (m.block ? 1 : 0) | (m.hash ? 2 : 0) | (m.seek ? 4 : 0) | (m.upgrade ? 8 : 0) | (m.manifest ? 16 : 0)\n\n    c.uint.encode(state, flags)\n    c.uint.encode(state, m.request)\n    c.uint.encode(state, m.fork)\n\n    if (m.block) dataBlock.encode(state, m.block)\n    if (m.hash) dataHash.encode(state, m.hash)\n    if (m.seek) dataSeek.encode(state, m.seek)\n    if (m.upgrade) dataUpgrade.encode(state, m.upgrade)\n    if (m.manifest) manifest.encode(state, m.manifest)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n\n    return {\n      request: c.uint.decode(state),\n      fork: c.uint.decode(state),\n      block: flags & 1 ? dataBlock.decode(state) : null,\n      hash: flags & 2 ? dataHash.decode(state) : null,\n      seek: flags & 4 ? dataSeek.decode(state) : null,\n      upgrade: flags & 8 ? dataUpgrade.decode(state) : null,\n      manifest: flags & 16 ? manifest.decode(state) : null\n    }\n  }\n}\n\nwire.noData = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.request)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.request)\n  },\n  decode (state, m) {\n    return {\n      request: c.uint.decode(state)\n    }\n  }\n}\n\nwire.want = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.start)\n    c.uint.preencode(state, m.length)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.start)\n    c.uint.encode(state, m.length)\n  },\n  decode (state) {\n    return {\n      start: c.uint.decode(state),\n      length: c.uint.decode(state)\n    }\n  }\n}\n\nwire.unwant = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.start)\n    c.uint.preencode(state, m.length)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.start)\n    c.uint.encode(state, m.length)\n  },\n  decode (state, m) {\n    return {\n      start: c.uint.decode(state),\n      length: c.uint.decode(state)\n    }\n  }\n}\n\nwire.range = {\n  preencode (state, m) {\n    state.end++ // flags\n    c.uint.preencode(state, m.start)\n    if (m.length !== 1) c.uint.preencode(state, m.length)\n  },\n  encode (state, m) {\n    c.uint.encode(state, (m.drop ? 1 : 0) | (m.length === 1 ? 2 : 0))\n    c.uint.encode(state, m.start)\n    if (m.length !== 1) c.uint.encode(state, m.length)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n\n    return {\n      drop: (flags & 1) !== 0,\n      start: c.uint.decode(state),\n      length: (flags & 2) !== 0 ? 1 : c.uint.decode(state)\n    }\n  }\n}\n\nwire.bitfield = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.start)\n    c.uint32array.preencode(state, m.bitfield)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.start)\n    c.uint32array.encode(state, m.bitfield)\n  },\n  decode (state, m) {\n    return {\n      start: c.uint.decode(state),\n      bitfield: c.uint32array.decode(state)\n    }\n  }\n}\n\nwire.sync = {\n  preencode (state, m) {\n    state.end++ // flags\n    c.uint.preencode(state, m.fork)\n    c.uint.preencode(state, m.length)\n    c.uint.preencode(state, m.remoteLength)\n  },\n  encode (state, m) {\n    c.uint.encode(state, (m.canUpgrade ? 1 : 0) | (m.uploading ? 2 : 0) | (m.downloading ? 4 : 0) | (m.hasManifest ? 8 : 0))\n    c.uint.encode(state, m.fork)\n    c.uint.encode(state, m.length)\n    c.uint.encode(state, m.remoteLength)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n\n    return {\n      fork: c.uint.decode(state),\n      length: c.uint.decode(state),\n      remoteLength: c.uint.decode(state),\n      canUpgrade: (flags & 1) !== 0,\n      uploading: (flags & 2) !== 0,\n      downloading: (flags & 4) !== 0,\n      hasManifest: (flags & 8) !== 0\n    }\n  }\n}\n\nwire.reorgHint = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.from)\n    c.uint.preencode(state, m.to)\n    c.uint.preencode(state, m.ancestors)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.from)\n    c.uint.encode(state, m.to)\n    c.uint.encode(state, m.ancestors)\n  },\n  decode (state) {\n    return {\n      from: c.uint.encode(state),\n      to: c.uint.encode(state),\n      ancestors: c.uint.encode(state)\n    }\n  }\n}\n\nwire.extension = {\n  preencode (state, m) {\n    c.string.preencode(state, m.name)\n    c.raw.preencode(state, m.message)\n  },\n  encode (state, m) {\n    c.string.encode(state, m.name)\n    c.raw.encode(state, m.message)\n  },\n  decode (state) {\n    return {\n      name: c.string.decode(state),\n      message: c.raw.decode(state)\n    }\n  }\n}\n\nconst keyValue = {\n  preencode (state, p) {\n    c.string.preencode(state, p.key)\n    c.buffer.preencode(state, p.value)\n  },\n  encode (state, p) {\n    c.string.encode(state, p.key)\n    c.buffer.encode(state, p.value)\n  },\n  decode (state) {\n    return {\n      key: c.string.decode(state),\n      value: c.buffer.decode(state)\n    }\n  }\n}\n\nconst treeUpgrade = {\n  preencode (state, u) {\n    c.uint.preencode(state, u.fork)\n    c.uint.preencode(state, u.ancestors)\n    c.uint.preencode(state, u.length)\n    c.buffer.preencode(state, u.signature)\n  },\n  encode (state, u) {\n    c.uint.encode(state, u.fork)\n    c.uint.encode(state, u.ancestors)\n    c.uint.encode(state, u.length)\n    c.buffer.encode(state, u.signature)\n  },\n  decode (state) {\n    return {\n      fork: c.uint.decode(state),\n      ancestors: c.uint.decode(state),\n      length: c.uint.decode(state),\n      signature: c.buffer.decode(state)\n    }\n  }\n}\n\nconst bitfieldUpdate = { // TODO: can maybe be folded into a HAVE later on with the most recent spec\n  preencode (state, b) {\n    state.end++ // flags\n    c.uint.preencode(state, b.start)\n    c.uint.preencode(state, b.length)\n  },\n  encode (state, b) {\n    state.buffer[state.start++] = b.drop ? 1 : 0\n    c.uint.encode(state, b.start)\n    c.uint.encode(state, b.length)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n    return {\n      drop: (flags & 1) !== 0,\n      start: c.uint.decode(state),\n      length: c.uint.decode(state)\n    }\n  }\n}\n\nconst oplog = exports.oplog = {}\n\noplog.entry = {\n  preencode (state, m) {\n    state.end++ // flags\n    if (m.userData) keyValue.preencode(state, m.userData)\n    if (m.treeNodes) nodeArray.preencode(state, m.treeNodes)\n    if (m.treeUpgrade) treeUpgrade.preencode(state, m.treeUpgrade)\n    if (m.bitfield) bitfieldUpdate.preencode(state, m.bitfield)\n  },\n  encode (state, m) {\n    const s = state.start++\n    let flags = 0\n\n    if (m.userData) {\n      flags |= 1\n      keyValue.encode(state, m.userData)\n    }\n    if (m.treeNodes) {\n      flags |= 2\n      nodeArray.encode(state, m.treeNodes)\n    }\n    if (m.treeUpgrade) {\n      flags |= 4\n      treeUpgrade.encode(state, m.treeUpgrade)\n    }\n    if (m.bitfield) {\n      flags |= 8\n      bitfieldUpdate.encode(state, m.bitfield)\n    }\n\n    state.buffer[s] = flags\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n    return {\n      userData: (flags & 1) !== 0 ? keyValue.decode(state) : null,\n      treeNodes: (flags & 2) !== 0 ? nodeArray.decode(state) : null,\n      treeUpgrade: (flags & 4) !== 0 ? treeUpgrade.decode(state) : null,\n      bitfield: (flags & 8) !== 0 ? bitfieldUpdate.decode(state) : null\n    }\n  }\n}\n\nconst keyPair = {\n  preencode (state, kp) {\n    c.buffer.preencode(state, kp.publicKey)\n    c.buffer.preencode(state, kp.secretKey)\n  },\n  encode (state, kp) {\n    c.buffer.encode(state, kp.publicKey)\n    c.buffer.encode(state, kp.secretKey)\n  },\n  decode (state) {\n    return {\n      publicKey: c.buffer.decode(state),\n      secretKey: c.buffer.decode(state)\n    }\n  }\n}\n\nconst reorgHint = {\n  preencode (state, r) {\n    c.uint.preencode(state, r.from)\n    c.uint.preencode(state, r.to)\n    c.uint.preencode(state, r.ancestors)\n  },\n  encode (state, r) {\n    c.uint.encode(state, r.from)\n    c.uint.encode(state, r.to)\n    c.uint.encode(state, r.ancestors)\n  },\n  decode (state) {\n    return {\n      from: c.uint.decode(state),\n      to: c.uint.decode(state),\n      ancestors: c.uint.decode(state)\n    }\n  }\n}\n\nconst reorgHintArray = c.array(reorgHint)\n\nconst hints = {\n  preencode (state, h) {\n    reorgHintArray.preencode(state, h.reorgs)\n    c.uint.preencode(state, h.contiguousLength)\n  },\n  encode (state, h) {\n    reorgHintArray.encode(state, h.reorgs)\n    c.uint.encode(state, h.contiguousLength)\n  },\n  decode (state) {\n    return {\n      reorgs: reorgHintArray.decode(state),\n      contiguousLength: state.start < state.end ? c.uint.decode(state) : 0\n    }\n  }\n}\n\nconst treeHeader = {\n  preencode (state, t) {\n    c.uint.preencode(state, t.fork)\n    c.uint.preencode(state, t.length)\n    c.buffer.preencode(state, t.rootHash)\n    c.buffer.preencode(state, t.signature)\n  },\n  encode (state, t) {\n    c.uint.encode(state, t.fork)\n    c.uint.encode(state, t.length)\n    c.buffer.encode(state, t.rootHash)\n    c.buffer.encode(state, t.signature)\n  },\n  decode (state) {\n    return {\n      fork: c.uint.decode(state),\n      length: c.uint.decode(state),\n      rootHash: c.buffer.decode(state),\n      signature: c.buffer.decode(state)\n    }\n  }\n}\n\nconst types = {\n  preencode (state, t) {\n    c.string.preencode(state, t.tree)\n    c.string.preencode(state, t.bitfield)\n    c.string.preencode(state, t.signer)\n  },\n  encode (state, t) {\n    c.string.encode(state, t.tree)\n    c.string.encode(state, t.bitfield)\n    c.string.encode(state, t.signer)\n  },\n  decode (state) {\n    return {\n      tree: c.string.decode(state),\n      bitfield: c.string.decode(state),\n      signer: c.string.decode(state)\n    }\n  }\n}\n\nconst externalHeader = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.start)\n    c.uint.preencode(state, m.length)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.start)\n    c.uint.encode(state, m.length)\n  },\n  decode (state) {\n    return {\n      start: c.uint.decode(state),\n      length: c.uint.decode(state)\n    }\n  }\n}\n\nconst keyValueArray = c.array(keyValue)\n\noplog.header = {\n  preencode (state, h) {\n    state.end += 2 // version + flags\n    if (h.external) {\n      externalHeader.preencode(state, h.external)\n      return\n    }\n    c.fixed32.preencode(state, h.key)\n    if (h.manifest) manifest.preencode(state, h.manifest)\n    if (h.keyPair) keyPair.preencode(state, h.keyPair)\n    keyValueArray.preencode(state, h.userData)\n    treeHeader.preencode(state, h.tree)\n    hints.preencode(state, h.hints)\n  },\n  encode (state, h) {\n    c.uint.encode(state, 1)\n    if (h.external) {\n      c.uint.encode(state, 1) // ONLY set the first big for clarity\n      externalHeader.encode(state, h.external)\n      return\n    }\n    c.uint.encode(state, (h.manifest ? 2 : 0) | (h.keyPair ? 4 : 0))\n    c.fixed32.encode(state, h.key)\n    if (h.manifest) manifest.encode(state, h.manifest)\n    if (h.keyPair) keyPair.encode(state, h.keyPair)\n    keyValueArray.encode(state, h.userData)\n    treeHeader.encode(state, h.tree)\n    hints.encode(state, h.hints)\n  },\n  decode (state) {\n    const version = c.uint.decode(state)\n\n    if (version > 1) {\n      throw new Error('Invalid header version. Expected <= 1, got ' + version)\n    }\n\n    if (version === 0) {\n      const old = {\n        types: types.decode(state),\n        userData: keyValueArray.decode(state),\n        tree: treeHeader.decode(state),\n        signer: keyPair.decode(state),\n        hints: hints.decode(state)\n      }\n\n      return {\n        external: null,\n        key: old.signer.publicKey,\n        manifest: {\n          version: 0,\n          hash: old.types.tree,\n          allowPatch: false,\n          quorum: 1,\n          signers: [{\n            signature: old.types.signer,\n            namespace: DEFAULT_NAMESPACE,\n            publicKey: old.signer.publicKey\n          }],\n          prologue: null\n        },\n        keyPair: old.signer.secretKey ? old.signer : null,\n        userData: old.userData,\n        tree: old.tree,\n        hints: old.hints\n      }\n    }\n\n    const flags = c.uint.decode(state)\n\n    if (flags & 1) {\n      return {\n        external: externalHeader.decode(state),\n        key: null,\n        manifest: null,\n        keyPair: null,\n        userData: null,\n        tree: null,\n        hints: null\n      }\n    }\n\n    return {\n      external: null,\n      key: c.fixed32.decode(state),\n      manifest: (flags & 2) !== 0 ? manifest.decode(state) : null,\n      keyPair: (flags & 4) !== 0 ? keyPair.decode(state) : null,\n      userData: keyValueArray.decode(state),\n      tree: treeHeader.decode(state),\n      hints: hints.decode(state)\n    }\n  }\n}\n\nconst uintArray = c.array(c.uint)\n\nconst multisigInput = {\n  preencode (state, inp) {\n    c.uint.preencode(state, inp.signer)\n    c.fixed64.preencode(state, inp.signature)\n    c.uint.preencode(state, inp.patch)\n  },\n  encode (state, inp) {\n    c.uint.encode(state, inp.signer)\n    c.fixed64.encode(state, inp.signature)\n    c.uint.encode(state, inp.patch)\n  },\n  decode (state) {\n    return {\n      signer: c.uint.decode(state),\n      signature: c.fixed64.decode(state),\n      patch: c.uint.decode(state)\n    }\n  }\n}\n\nconst patchEncodingv0 = {\n  preencode (state, n) {\n    c.uint.preencode(state, n.start)\n    c.uint.preencode(state, n.length)\n    uintArray.preencode(state, n.nodes)\n  },\n  encode (state, n) {\n    c.uint.encode(state, n.start)\n    c.uint.encode(state, n.length)\n    uintArray.encode(state, n.nodes)\n  },\n  decode (state) {\n    return {\n      start: c.uint.decode(state),\n      length: c.uint.decode(state),\n      nodes: uintArray.decode(state)\n    }\n  }\n}\n\nconst multisigInputv0 = {\n  preencode (state, n) {\n    state.end++\n    c.uint.preencode(state, n.signer)\n    c.fixed64.preencode(state, n.signature)\n    if (n.patch) patchEncodingv0.preencode(state, n.patch)\n  },\n  encode (state, n) {\n    c.uint.encode(state, n.patch ? 1 : 0)\n    c.uint.encode(state, n.signer)\n    c.fixed64.encode(state, n.signature)\n    if (n.patch) patchEncodingv0.encode(state, n.patch)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n    return {\n      signer: c.uint.decode(state),\n      signature: c.fixed64.decode(state),\n      patch: (flags & 1) ? patchEncodingv0.decode(state) : null\n    }\n  }\n}\n\nconst multisigInputArrayv0 = c.array(multisigInputv0)\nconst multisigInputArray = c.array(multisigInput)\n\nconst compactNode = {\n  preencode (state, n) {\n    c.uint.preencode(state, n.index)\n    c.uint.preencode(state, n.size)\n    c.fixed32.preencode(state, n.hash)\n  },\n  encode (state, n) {\n    c.uint.encode(state, n.index)\n    c.uint.encode(state, n.size)\n    c.fixed32.encode(state, n.hash)\n  },\n  decode (state) {\n    return {\n      index: c.uint.decode(state),\n      size: c.uint.decode(state),\n      hash: c.fixed32.decode(state)\n    }\n  }\n}\n\nconst compactNodeArray = c.array(compactNode)\n\nexports.multiSignaturev0 = {\n  preencode (state, s) {\n    multisigInputArrayv0.preencode(state, s.proofs)\n    compactNodeArray.preencode(state, s.patch)\n  },\n  encode (state, s) {\n    multisigInputArrayv0.encode(state, s.proofs)\n    compactNodeArray.encode(state, s.patch)\n  },\n  decode (state) {\n    return {\n      proofs: multisigInputArrayv0.decode(state),\n      patch: compactNodeArray.decode(state)\n    }\n  }\n}\n\nexports.multiSignature = {\n  preencode (state, s) {\n    multisigInputArray.preencode(state, s.proofs)\n    compactNodeArray.preencode(state, s.patch)\n  },\n  encode (state, s) {\n    multisigInputArray.encode(state, s.proofs)\n    compactNodeArray.encode(state, s.patch)\n  },\n  decode (state) {\n    return {\n      proofs: multisigInputArray.decode(state),\n      patch: compactNodeArray.decode(state)\n    }\n  }\n}\n{\n  \"name\": \"hypercore-storage\",\n  \"version\": \"1.10.0\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"lib/*.js\",\n    \"spec/hyperschema/*.js\",\n    \"migrations/0/*.js\"\n  ],\n  \"scripts\": {\n    \"test\": \"standard && node test/all.js\",\n    \"test:bare\": \"bare test/all.js\",\n    \"test:generate\": \"brittle -r test/all.js test/*.js\"\n  },\n  \"author\": \"Holepunch Inc.\",\n  \"license\": \"Apache-2.0\",\n  \"description\": \"Storage engine for Hypercore\",\n  \"imports\": {\n    \"fs\": {\n      \"bare\": \"bare-fs\",\n      \"default\": \"fs\"\n    },\n    \"path\": {\n      \"bare\": \"bare-path\",\n      \"default\": \"path\"\n    }\n  },\n  \"dependencies\": {\n    \"b4a\": \"^1.6.7\",\n    \"bare-fs\": \"^4.0.1\",\n    \"bare-path\": \"^3.0.0\",\n    \"compact-encoding\": \"^2.16.0\",\n    \"device-file\": \"^1.2.2\",\n    \"flat-tree\": \"^1.12.1\",\n    \"hypercore-crypto\": \"^3.4.2\",\n    \"hyperschema\": \"^1.7.0\",\n    \"index-encoder\": \"^3.3.2\",\n    \"resolve-reject-promise\": \"^1.0.0\",\n    \"rocksdb-native\": \"^3.1.1\",\n    \"scope-lock\": \"^1.2.4\",\n    \"streamx\": \"^2.21.1\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.7.0\",\n    \"standard\": \"^17.1.2\",\n    \"test-tmp\": \"^1.3.1\"\n  }\n}\n// This file is autogenerated by the hyperschema compiler\n// Schema Version: 1\n/* eslint-disable camelcase */\n/* eslint-disable quotes */\n\nconst VERSION = 1\nconst { c } = require('hyperschema/runtime')\n\n// eslint-disable-next-line no-unused-vars\nlet version = VERSION\n\n// @corestore/allocated\nconst encoding0 = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.cores)\n    c.uint.preencode(state, m.datas)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.cores)\n    c.uint.encode(state, m.datas)\n  },\n  decode (state) {\n    const r0 = c.uint.decode(state)\n    const r1 = c.uint.decode(state)\n\n    return {\n      cores: r0,\n      datas: r1\n    }\n  }\n}\n\n// @corestore/head\nconst encoding1 = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.version)\n    state.end++ // max flag is 4 so always one byte\n\n    if (m.allocated) encoding0.preencode(state, m.allocated)\n    if (m.seed) c.fixed32.preencode(state, m.seed)\n    if (m.defaultDiscoveryKey) c.fixed32.preencode(state, m.defaultDiscoveryKey)\n  },\n  encode (state, m) {\n    const flags =\n      (m.allocated ? 1 : 0) |\n      (m.seed ? 2 : 0) |\n      (m.defaultDiscoveryKey ? 4 : 0)\n\n    c.uint.encode(state, m.version)\n    c.uint.encode(state, flags)\n\n    if (m.allocated) encoding0.encode(state, m.allocated)\n    if (m.seed) c.fixed32.encode(state, m.seed)\n    if (m.defaultDiscoveryKey) c.fixed32.encode(state, m.defaultDiscoveryKey)\n  },\n  decode (state) {\n    const r0 = c.uint.decode(state)\n    const flags = c.uint.decode(state)\n\n    return {\n      version: r0,\n      allocated: (flags & 1) !== 0 ? encoding0.decode(state) : null,\n      seed: (flags & 2) !== 0 ? c.fixed32.decode(state) : null,\n      defaultDiscoveryKey: (flags & 4) !== 0 ? c.fixed32.decode(state) : null\n    }\n  }\n}\n\n// @corestore/alias\nconst encoding2 = {\n  preencode (state, m) {\n    c.string.preencode(state, m.name)\n    c.fixed32.preencode(state, m.namespace)\n  },\n  encode (state, m) {\n    c.string.encode(state, m.name)\n    c.fixed32.encode(state, m.namespace)\n  },\n  decode (state) {\n    const r0 = c.string.decode(state)\n    const r1 = c.fixed32.decode(state)\n\n    return {\n      name: r0,\n      namespace: r1\n    }\n  }\n}\n\n// @corestore/core\nconst encoding3 = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.version)\n    c.uint.preencode(state, m.corePointer)\n    c.uint.preencode(state, m.dataPointer)\n    state.end++ // max flag is 1 so always one byte\n\n    if (m.alias) encoding2.preencode(state, m.alias)\n  },\n  encode (state, m) {\n    const flags = m.alias ? 1 : 0\n\n    c.uint.encode(state, m.version)\n    c.uint.encode(state, m.corePointer)\n    c.uint.encode(state, m.dataPointer)\n    c.uint.encode(state, flags)\n\n    if (m.alias) encoding2.encode(state, m.alias)\n  },\n  decode (state) {\n    const r0 = c.uint.decode(state)\n    const r1 = c.uint.decode(state)\n    const r2 = c.uint.decode(state)\n    const flags = c.uint.decode(state)\n\n    return {\n      version: r0,\n      corePointer: r1,\n      dataPointer: r2,\n      alias: (flags & 1) !== 0 ? encoding2.decode(state) : null\n    }\n  }\n}\n\nconst encoding4_enum = {\n  blake2b: 'blake2b'\n}\n\n// @core/hashes enum\nconst encoding4 = {\n  preencode (state, m) {\n    state.end++ // max enum is 0 so always one byte\n  },\n  encode (state, m) {\n    switch (m) {\n      case 'blake2b':\n        c.uint.encode(state, 0)\n        break\n      default: throw new Error('Unknown enum')\n    }\n  },\n  decode (state) {\n    switch (c.uint.decode(state)) {\n      case 0: return 'blake2b'\n      default: return null\n    }\n  }\n}\n\nconst encoding5_enum = {\n  ed25519: 'ed25519'\n}\n\n// @core/signatures enum\nconst encoding5 = {\n  preencode (state, m) {\n    state.end++ // max enum is 0 so always one byte\n  },\n  encode (state, m) {\n    switch (m) {\n      case 'ed25519':\n        c.uint.encode(state, 0)\n        break\n      default: throw new Error('Unknown enum')\n    }\n  },\n  decode (state) {\n    switch (c.uint.decode(state)) {\n      case 0: return 'ed25519'\n      default: return null\n    }\n  }\n}\n\n// @core/tree-node\nconst encoding6 = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.index)\n    c.uint.preencode(state, m.size)\n    c.fixed32.preencode(state, m.hash)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.index)\n    c.uint.encode(state, m.size)\n    c.fixed32.encode(state, m.hash)\n  },\n  decode (state) {\n    const r0 = c.uint.decode(state)\n    const r1 = c.uint.decode(state)\n    const r2 = c.fixed32.decode(state)\n\n    return {\n      index: r0,\n      size: r1,\n      hash: r2\n    }\n  }\n}\n\n// @core/signer\nconst encoding7 = {\n  preencode (state, m) {\n    encoding5.preencode(state, m.signature)\n    c.fixed32.preencode(state, m.namespace)\n    c.fixed32.preencode(state, m.publicKey)\n  },\n  encode (state, m) {\n    encoding5.encode(state, m.signature)\n    c.fixed32.encode(state, m.namespace)\n    c.fixed32.encode(state, m.publicKey)\n  },\n  decode (state) {\n    const r0 = encoding5.decode(state)\n    const r1 = c.fixed32.decode(state)\n    const r2 = c.fixed32.decode(state)\n\n    return {\n      signature: r0,\n      namespace: r1,\n      publicKey: r2\n    }\n  }\n}\n\n// @core/prologue\nconst encoding8 = {\n  preencode (state, m) {\n    c.fixed32.preencode(state, m.hash)\n    c.uint.preencode(state, m.length)\n  },\n  encode (state, m) {\n    c.fixed32.encode(state, m.hash)\n    c.uint.encode(state, m.length)\n  },\n  decode (state) {\n    const r0 = c.fixed32.decode(state)\n    const r1 = c.uint.decode(state)\n\n    return {\n      hash: r0,\n      length: r1\n    }\n  }\n}\n\n// @core/manifest.signers\nconst encoding9_4 = c.array(encoding7)\n// @core/manifest.linked\nconst encoding9_6 = c.array(c.fixed32)\n\n// @core/manifest\nconst encoding9 = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.version)\n    state.end++ // max flag is 4 so always one byte\n    encoding4.preencode(state, m.hash)\n    c.uint.preencode(state, m.quorum)\n    encoding9_4.preencode(state, m.signers)\n\n    if (m.prologue) encoding8.preencode(state, m.prologue)\n    if (m.linked) encoding9_6.preencode(state, m.linked)\n  },\n  encode (state, m) {\n    const flags =\n      (m.allowPatch ? 1 : 0) |\n      (m.prologue ? 2 : 0) |\n      (m.linked ? 4 : 0)\n\n    c.uint.encode(state, m.version)\n    c.uint.encode(state, flags)\n    encoding4.encode(state, m.hash)\n    c.uint.encode(state, m.quorum)\n    encoding9_4.encode(state, m.signers)\n\n    if (m.prologue) encoding8.encode(state, m.prologue)\n    if (m.linked) encoding9_6.encode(state, m.linked)\n  },\n  decode (state) {\n    const r0 = c.uint.decode(state)\n    const flags = c.uint.decode(state)\n\n    return {\n      version: r0,\n      hash: encoding4.decode(state),\n      quorum: c.uint.decode(state),\n      allowPatch: (flags & 1) !== 0,\n      signers: encoding9_4.decode(state),\n      prologue: (flags & 2) !== 0 ? encoding8.decode(state) : null,\n      linked: (flags & 4) !== 0 ? encoding9_6.decode(state) : null\n    }\n  }\n}\n\n// @core/keyPair\nconst encoding10 = {\n  preencode (state, m) {\n    c.buffer.preencode(state, m.publicKey)\n    c.buffer.preencode(state, m.secretKey)\n  },\n  encode (state, m) {\n    c.buffer.encode(state, m.publicKey)\n    c.buffer.encode(state, m.secretKey)\n  },\n  decode (state) {\n    const r0 = c.buffer.decode(state)\n    const r1 = c.buffer.decode(state)\n\n    return {\n      publicKey: r0,\n      secretKey: r1\n    }\n  }\n}\n\n// @core/auth.manifest\nconst encoding11_2 = c.frame(encoding9)\n\n// @core/auth\nconst encoding11 = {\n  preencode (state, m) {\n    c.fixed32.preencode(state, m.key)\n    c.fixed32.preencode(state, m.discoveryKey)\n    state.end++ // max flag is 4 so always one byte\n\n    if (m.manifest) encoding11_2.preencode(state, m.manifest)\n    if (m.keyPair) encoding10.preencode(state, m.keyPair)\n    if (m.encryptionKey) c.buffer.preencode(state, m.encryptionKey)\n  },\n  encode (state, m) {\n    const flags =\n      (m.manifest ? 1 : 0) |\n      (m.keyPair ? 2 : 0) |\n      (m.encryptionKey ? 4 : 0)\n\n    c.fixed32.encode(state, m.key)\n    c.fixed32.encode(state, m.discoveryKey)\n    c.uint.encode(state, flags)\n\n    if (m.manifest) encoding11_2.encode(state, m.manifest)\n    if (m.keyPair) encoding10.encode(state, m.keyPair)\n    if (m.encryptionKey) c.buffer.encode(state, m.encryptionKey)\n  },\n  decode (state) {\n    const r0 = c.fixed32.decode(state)\n    const r1 = c.fixed32.decode(state)\n    const flags = c.uint.decode(state)\n\n    return {\n      key: r0,\n      discoveryKey: r1,\n      manifest: (flags & 1) !== 0 ? encoding11_2.decode(state) : null,\n      keyPair: (flags & 2) !== 0 ? encoding10.decode(state) : null,\n      encryptionKey: (flags & 4) !== 0 ? c.buffer.decode(state) : null\n    }\n  }\n}\n\n// @core/head\nconst encoding12 = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.fork)\n    c.uint.preencode(state, m.length)\n    c.fixed32.preencode(state, m.rootHash)\n    c.buffer.preencode(state, m.signature)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.fork)\n    c.uint.encode(state, m.length)\n    c.fixed32.encode(state, m.rootHash)\n    c.buffer.encode(state, m.signature)\n  },\n  decode (state) {\n    const r0 = c.uint.decode(state)\n    const r1 = c.uint.decode(state)\n    const r2 = c.fixed32.decode(state)\n    const r3 = c.buffer.decode(state)\n\n    return {\n      fork: r0,\n      length: r1,\n      rootHash: r2,\n      signature: r3\n    }\n  }\n}\n\n// @core/hints\nconst encoding13 = {\n  preencode (state, m) {\n    state.end++ // max flag is 1 so always one byte\n\n    if (m.contiguousLength) c.uint.preencode(state, m.contiguousLength)\n  },\n  encode (state, m) {\n    const flags = m.contiguousLength ? 1 : 0\n\n    c.uint.encode(state, flags)\n\n    if (m.contiguousLength) c.uint.encode(state, m.contiguousLength)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n\n    return {\n      contiguousLength: (flags & 1) !== 0 ? c.uint.decode(state) : 0\n    }\n  }\n}\n\n// @core/session\nconst encoding14 = {\n  preencode (state, m) {\n    c.string.preencode(state, m.name)\n    c.uint.preencode(state, m.dataPointer)\n  },\n  encode (state, m) {\n    c.string.encode(state, m.name)\n    c.uint.encode(state, m.dataPointer)\n  },\n  decode (state) {\n    const r0 = c.string.decode(state)\n    const r1 = c.uint.decode(state)\n\n    return {\n      name: r0,\n      dataPointer: r1\n    }\n  }\n}\n\n// @core/sessions\nconst encoding15 = c.array(encoding14)\n\n// @core/dependency\nconst encoding16 = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.dataPointer)\n    c.uint.preencode(state, m.length)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.dataPointer)\n    c.uint.encode(state, m.length)\n  },\n  decode (state) {\n    const r0 = c.uint.decode(state)\n    const r1 = c.uint.decode(state)\n\n    return {\n      dataPointer: r0,\n      length: r1\n    }\n  }\n}\n\nfunction setVersion (v) {\n  version = v\n}\n\nfunction encode (name, value, v = VERSION) {\n  version = v\n  return c.encode(getEncoding(name), value)\n}\n\nfunction decode (name, buffer, v = VERSION) {\n  version = v\n  return c.decode(getEncoding(name), buffer)\n}\n\nfunction getEnum (name) {\n  switch (name) {\n    case '@core/hashes': return encoding4_enum\n    case '@core/signatures': return encoding5_enum\n    default: throw new Error('Enum not found ' + name)\n  }\n}\n\nfunction getEncoding (name) {\n  switch (name) {\n    case '@corestore/allocated': return encoding0\n    case '@corestore/head': return encoding1\n    case '@corestore/alias': return encoding2\n    case '@corestore/core': return encoding3\n    case '@core/hashes': return encoding4\n    case '@core/signatures': return encoding5\n    case '@core/tree-node': return encoding6\n    case '@core/signer': return encoding7\n    case '@core/prologue': return encoding8\n    case '@core/manifest': return encoding9\n    case '@core/keyPair': return encoding10\n    case '@core/auth': return encoding11\n    case '@core/head': return encoding12\n    case '@core/hints': return encoding13\n    case '@core/session': return encoding14\n    case '@core/sessions': return encoding15\n    case '@core/dependency': return encoding16\n    default: throw new Error('Encoder not found ' + name)\n  }\n}\n\nfunction getStruct (name, v = VERSION) {\n  const enc = getEncoding(name)\n  return {\n    preencode (state, m) {\n      version = v\n      enc.preencode(state, m)\n    },\n    encode (state, m) {\n      version = v\n      enc.encode(state, m)\n    },\n    decode (state) {\n      version = v\n      return enc.decode(state)\n    }\n  }\n}\n\nconst resolveStruct = getStruct // compat\n\nmodule.exports = { resolveStruct, getStruct, getEnum, getEncoding, encode, decode, setVersion, version }\nconst { EventEmitter } = require('events')\nconst isOptions = require('is-options')\nconst crypto = require('hypercore-crypto')\nconst CoreStorage = require('hypercore-storage')\nconst c = require('compact-encoding')\nconst sodium = require('sodium-universal')\nconst b4a = require('b4a')\nconst NoiseSecretStream = require('@hyperswarm/secret-stream')\nconst HypercoreEncryption = require('hypercore-encryption')\nconst Protomux = require('protomux')\nconst id = require('hypercore-id-encoding')\nconst safetyCatch = require('safety-catch')\nconst unslab = require('unslab')\n\nconst Core = require('./lib/core')\nconst Info = require('./lib/info')\nconst Download = require('./lib/download')\nconst caps = require('./lib/caps')\nconst { manifestHash, createManifest } = require('./lib/verifier')\nconst { ReadStream, WriteStream, ByteStream } = require('./lib/streams')\nconst { MerkleTree } = require('./lib/merkle-tree')\nconst {\n  ASSERTION,\n  BAD_ARGUMENT,\n  SESSION_CLOSED,\n  SESSION_MOVED,\n  SESSION_NOT_WRITABLE,\n  SNAPSHOT_NOT_AVAILABLE,\n  DECODING_ERROR\n} = require('hypercore-errors')\n\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\n\n// Hypercore actually does not have any notion of max/min block sizes\n// but we enforce 15mb to ensure smooth replication (each block is transmitted atomically)\nconst MAX_SUGGESTED_BLOCK_SIZE = 15 * 1024 * 1024\n\nclass Hypercore extends EventEmitter {\n  constructor (storage, key, opts) {\n    super()\n\n    if (isOptions(storage) && !storage.db) {\n      opts = storage\n      storage = null\n      key = opts.key || null\n    } else if (isOptions(key)) {\n      opts = key\n      key = opts.key || null\n    }\n\n    if (key && typeof key === 'string') key = id.decode(key)\n    if (!opts) opts = {}\n\n    if (!storage) storage = opts.storage\n\n    this.core = null\n    this.state = null\n    this.encryption = null\n    this.extensions = new Map()\n\n    this.valueEncoding = null\n    this.encodeBatch = null\n    this.activeRequests = []\n    this.sessions = null\n    this.ongc = null\n\n    this.keyPair = opts.keyPair || null\n    this.readable = true\n    this.writable = false\n    this.exclusive = false\n    this.opened = false\n    this.closed = false\n    this.weak = !!opts.weak\n    this.snapshotted = !!opts.snapshot\n    this.onwait = opts.onwait || null\n    this.wait = opts.wait !== false\n    this.timeout = opts.timeout || 0\n    this.preload = null\n    this.closing = null\n    this.opening = null\n\n    this._readonly = opts.writable === false\n    this._preappend = preappend.bind(this)\n    this._snapshot = null\n    this._findingPeers = 0\n    this._active = opts.weak ? !!opts.active : opts.active !== false\n\n    this._sessionIndex = -1\n    this._stateIndex = -1 // maintained by session state\n    this._monitorIndex = -1 // maintained by replication state\n\n    this.opening = this._open(storage, key, opts)\n    this.opening.catch(safetyCatch)\n\n    this.on('newListener', maybeAddMonitor)\n  }\n\n  [inspect] (depth, opts) {\n    let indent = ''\n    if (typeof opts.indentationLvl === 'number') {\n      while (indent.length < opts.indentationLvl) indent += ' '\n    }\n\n    let peers = ''\n    const min = Math.min(this.peers.length, 5)\n\n    for (let i = 0; i < min; i++) {\n      const peer = this.peers[i]\n\n      peers += indent + '    Peer(\\n'\n      peers += indent + '      remotePublicKey: ' + opts.stylize(toHex(peer.remotePublicKey), 'string') + '\\n'\n      peers += indent + '      remoteLength: ' + opts.stylize(peer.remoteLength, 'number') + '\\n'\n      peers += indent + '      remoteFork: ' + opts.stylize(peer.remoteFork, 'number') + '\\n'\n      peers += indent + '      remoteCanUpgrade: ' + opts.stylize(peer.remoteCanUpgrade, 'boolean') + '\\n'\n      peers += indent + '    )' + '\\n'\n    }\n\n    if (this.peers.length > 5) {\n      peers += indent + '  ... and ' + (this.peers.length - 5) + ' more\\n'\n    }\n\n    if (peers) peers = '[\\n' + peers + indent + '  ]'\n    else peers = '[ ' + opts.stylize(0, 'number') + ' ]'\n\n    return this.constructor.name + '(\\n' +\n      indent + '  id: ' + opts.stylize(this.id, 'string') + '\\n' +\n      indent + '  key: ' + opts.stylize(toHex(this.key), 'string') + '\\n' +\n      indent + '  discoveryKey: ' + opts.stylize(toHex(this.discoveryKey), 'string') + '\\n' +\n      indent + '  opened: ' + opts.stylize(this.opened, 'boolean') + '\\n' +\n      indent + '  closed: ' + opts.stylize(this.closed, 'boolean') + '\\n' +\n      indent + '  snapshotted: ' + opts.stylize(this.snapshotted, 'boolean') + '\\n' +\n      indent + '  writable: ' + opts.stylize(this.writable, 'boolean') + '\\n' +\n      indent + '  length: ' + opts.stylize(this.length, 'number') + '\\n' +\n      indent + '  fork: ' + opts.stylize(this.fork, 'number') + '\\n' +\n      indent + '  sessions: [ ' + opts.stylize(this.sessions.length, 'number') + ' ]\\n' +\n      indent + '  activeRequests: [ ' + opts.stylize(this.activeRequests.length, 'number') + ' ]\\n' +\n      indent + '  peers: ' + peers + '\\n' +\n      indent + ')'\n  }\n\n  static MAX_SUGGESTED_BLOCK_SIZE = MAX_SUGGESTED_BLOCK_SIZE\n\n  static key (manifest, { compat, version, namespace } = {}) {\n    if (b4a.isBuffer(manifest)) manifest = { version, signers: [{ publicKey: manifest, namespace }] }\n    return compat ? manifest.signers[0].publicKey : manifestHash(createManifest(manifest))\n  }\n\n  static discoveryKey (key) {\n    return crypto.discoveryKey(key)\n  }\n\n  static blockEncryptionKey (key, encryptionKey) {\n    return HypercoreEncryption.blockEncryptionKey(key, encryptionKey)\n  }\n\n  static getProtocolMuxer (stream) {\n    return stream.noiseStream.userData\n  }\n\n  static createCore (storage, opts) {\n    return new Core(Hypercore.defaultStorage(storage), { autoClose: false, ...opts })\n  }\n\n  static createProtocolStream (isInitiator, opts = {}) {\n    let outerStream = Protomux.isProtomux(isInitiator)\n      ? isInitiator.stream\n      : isStream(isInitiator)\n        ? isInitiator\n        : opts.stream\n\n    let noiseStream = null\n\n    if (outerStream) {\n      noiseStream = outerStream.noiseStream\n    } else {\n      noiseStream = new NoiseSecretStream(isInitiator, null, opts)\n      outerStream = noiseStream.rawStream\n    }\n    if (!noiseStream) throw BAD_ARGUMENT('Invalid stream')\n\n    if (!noiseStream.userData) {\n      const protocol = Protomux.from(noiseStream)\n\n      if (opts.keepAlive !== false) {\n        noiseStream.setKeepAlive(5000)\n      }\n      noiseStream.userData = protocol\n    }\n\n    if (opts.ondiscoverykey) {\n      noiseStream.userData.pair({ protocol: 'hypercore/alpha' }, opts.ondiscoverykey)\n    }\n\n    return outerStream\n  }\n\n  static defaultStorage (storage, opts = {}) {\n    if (CoreStorage.isCoreStorage(storage)) return storage\n\n    const directory = storage\n    return new CoreStorage(directory, opts)\n  }\n\n  snapshot (opts) {\n    return this.session({ ...opts, snapshot: true })\n  }\n\n  session (opts = {}) {\n    if (this.closing) {\n      // This makes the closing logic a lot easier. If this turns out to be a problem\n      // in practice, open an issue and we'll try to make a solution for it.\n      throw SESSION_CLOSED('Cannot make sessions on a closing core')\n    }\n    if (opts.checkout !== undefined && !opts.name && !opts.atom) {\n      throw new Error('Checkouts are only supported on atoms or named sessions')\n    }\n\n    const wait = opts.wait === false ? false : this.wait\n    const writable = opts.writable === undefined ? !this._readonly : opts.writable === true\n    const onwait = opts.onwait === undefined ? this.onwait : opts.onwait\n    const timeout = opts.timeout === undefined ? this.timeout : opts.timeout\n    const weak = opts.weak === undefined ? this.weak : opts.weak\n    const Clz = opts.class || Hypercore\n    const s = new Clz(null, this.key, {\n      ...opts,\n      wait,\n      onwait,\n      timeout,\n      writable,\n      weak,\n      parent: this\n    })\n\n    return s\n  }\n\n  setEncryptionKey (encryptionKey, opts) {\n    const encryption = this._getLegacyEncryption(encryptionKey, !!(opts && opts.block))\n    return this.setEncryption(encryption, opts)\n  }\n\n  async setEncryption (encryption, opts) {\n    if (!this.opened) await this.opening\n\n    if (encryption === null) {\n      this.encryption = encryption\n      return\n    }\n\n    if (!HypercoreEncryption.isHypercoreEncryption(encryption)) {\n      throw new Error('Expected hypercore encryption provider')\n    }\n\n    this.encryption = encryption\n    if (!this.core.encryption) this.core.encryption = this.encryption\n  }\n\n  setKeyPair (keyPair) {\n    this.keyPair = keyPair\n  }\n\n  setActive (bool) {\n    const active = !!bool\n    if (active === this._active || this.closing) return\n    this._active = active\n    if (!this.opened) return\n    this.core.replicator.updateActivity(this._active ? 1 : -1)\n  }\n\n  async _open (storage, key, opts) {\n    const preload = opts.preload || (opts.parent && opts.parent.preload)\n\n    if (preload) {\n      this.sessions = [] // in case someone looks at it like with peers\n      this.preload = preload\n      opts = { ...opts, ...(await this.preload) }\n      this.preload = null\n    }\n\n    const parent = opts.parent || null\n    const core = opts.core || (parent && parent.core)\n    const sessions = opts.sessions || (parent && parent.sessions)\n    const ongc = opts.ongc || (parent && parent.ongc)\n\n    if (core) this.core = core\n    if (ongc) this.ongc = ongc\n    if (sessions) this.sessions = sessions\n\n    if (this.sessions === null) this.sessions = []\n    this._sessionIndex = this.sessions.push(this) - 1\n\n    if (this.core === null) initOnce(this, storage, key, opts)\n    if (this._monitorIndex === -2) this.core.addMonitor(this)\n\n    try {\n      await this._openSession(opts)\n    } catch (err) {\n      if (this.core.autoClose && this.core.hasSession() === false) await this.core.close()\n\n      if (this.exclusive) this.core.unlockExclusive()\n\n      this.core.removeMonitor(this)\n      this._removeSession()\n\n      if (this.state !== null) this.state.removeSession(this)\n\n      this.closed = true\n      this.emit('close')\n      throw err\n    }\n\n    this.emit('ready')\n\n    // if we are a weak session the core might have closed...\n    if (this.core.closing) this.close().catch(safetyCatch)\n  }\n\n  _removeSession () {\n    if (this._sessionIndex === -1) return\n    const head = this.sessions.pop()\n    if (head !== this) this.sessions[(head._sessionIndex = this._sessionIndex)] = head\n    this._sessionIndex = -1\n    if (this.ongc !== null) this.ongc(this)\n  }\n\n  async _openSession (opts) {\n    if (this.core.opened === false) await this.core.ready()\n\n    if (this.keyPair === null) this.keyPair = opts.keyPair || this.core.header.keyPair\n\n    if (!this.core.encryption) {\n      const e = getEncryptionOption(opts)\n\n      if (HypercoreEncryption.isHypercoreEncryption(e)) {\n        this.core.encryption = e\n      } else if (e) {\n        this.core.encryption = this._getLegacyEncryption(e.key, e.block)\n      }\n    }\n\n    const parent = opts.parent || null\n\n    if (this.core.encryption) this.encryption = this.core.encryption\n    else if (parent && parent.encryption) this.encryption = this.core.encryption = parent.encryption\n\n    this.writable = this._isWritable()\n\n    if (opts.valueEncoding) {\n      this.valueEncoding = c.from(opts.valueEncoding)\n    }\n    if (opts.encodeBatch) {\n      this.encodeBatch = opts.encodeBatch\n    }\n\n    if (parent) {\n      if (parent._stateIndex === -1) await parent.ready()\n      if (!this.keyPair) this.keyPair = parent.keyPair\n\n      const ps = parent.state\n\n      if (ps) {\n        const shouldSnapshot = this.snapshotted && !ps.isSnapshot()\n        this.state = shouldSnapshot ? await ps.snapshot() : ps.ref()\n      }\n\n      if (this.snapshotted && this.core && !this._snapshot) {\n        this._updateSnapshot()\n      }\n    }\n\n    if (opts.exclusive && opts.writable !== false) {\n      this.exclusive = true\n      await this.core.lockExclusive()\n    }\n\n    const parentState = parent ? parent.state : this.core.state\n    const checkout = opts.checkout === undefined ? -1 : opts.checkout\n    const state = this.state\n\n    if (opts.atom) {\n      this.state = await parentState.createSession(null, false, opts.atom)\n      if (state) state.unref()\n    } else if (opts.name) {\n      // todo: need to make named sessions safe before ready\n      // atm we always copy the state in passCapabilities\n      this.state = await parentState.createSession(opts.name, !!opts.overwrite, null)\n      if (state) state.unref() // ref'ed above in setup session\n    }\n\n    if (this.state && checkout !== -1) {\n      if (!opts.name && !opts.atom) throw ASSERTION('Checkouts must be named or atomized')\n      if (checkout > this.state.length) throw ASSERTION('Invalid checkout ' + checkout + ' for ' + opts.name + ', length is ' + this.state.length)\n      if (this.state.prologue && checkout < this.state.prologue.length) {\n        throw ASSERTION('Invalid checkout ' + checkout + ' for ' + opts.name + ', prologue length is ' + this.state.prologue.length)\n      }\n      if (checkout < this.state.length) await this.state.truncate(checkout, this.fork)\n    }\n\n    if (this.state === null) {\n      this.state = this.core.state.ref()\n    }\n\n    this.writable = this._isWritable()\n\n    if (this.snapshotted && this.core) this._updateSnapshot()\n\n    this.state.addSession(this)\n    // TODO: we need to rework the core reference flow, as the state and session do not always agree now due to moveTo\n    this.core = this.state.core // in case it was wrong...\n\n    if (opts.userData) {\n      const tx = this.state.storage.write()\n      for (const [key, value] of Object.entries(opts.userData)) {\n        tx.putUserData(key, value)\n      }\n      await tx.flush()\n    }\n\n    if (opts.manifest && !this.core.header.manifest) {\n      await this.core.setManifest(opts.manifest)\n    }\n\n    this.core.replicator.updateActivity(this._active ? 1 : 0)\n\n    this.opened = true\n  }\n\n  get replicator () {\n    return this.core === null ? null : this.core.replicator\n  }\n\n  _getSnapshot () {\n    return {\n      length: this.state.length,\n      byteLength: this.state.byteLength,\n      fork: this.state.fork\n    }\n  }\n\n  _updateSnapshot () {\n    const prev = this._snapshot\n    const next = this._snapshot = this._getSnapshot()\n\n    if (!prev) return true\n    return prev.length !== next.length || prev.fork !== next.fork\n  }\n\n  _isWritable () {\n    if (this._readonly) return false\n    if (this.state && !this.state.isDefault()) return true\n    return !!(this.keyPair && this.keyPair.secretKey)\n  }\n\n  close ({ error } = {}) {\n    if (this.closing) return this.closing\n\n    this.closing = this._close(error || null)\n    return this.closing\n  }\n\n  async _close (error) {\n    if (this.opened === false) {\n      try {\n        await this.opening\n      } catch (err) {\n        if (!this.closed) throw err\n      }\n    }\n\n    if (this.closed === true) return\n\n    this.core.removeMonitor(this)\n    this.state.removeSession(this)\n    this._removeSession()\n\n    this.readable = false\n    this.writable = false\n    this.opened = false\n\n    const gc = []\n    for (const ext of this.extensions.values()) {\n      if (ext.session === this) gc.push(ext)\n    }\n    for (const ext of gc) ext.destroy()\n\n    this.core.replicator.findingPeers -= this._findingPeers\n    this.core.replicator.clearRequests(this.activeRequests, error)\n    this.core.replicator.updateActivity(this._active ? -1 : 0)\n\n    this._findingPeers = 0\n\n    this.state.unref()\n\n    if (this.exclusive) this.core.unlockExclusive()\n\n    if (this.core.hasSession()) {\n      // emit \"fake\" close as this is a session\n      this.closed = true\n      this.emit('close')\n      return\n    }\n\n    if (this.core.autoClose) await this.core.close()\n\n    this.closed = true\n    this.emit('close')\n  }\n\n  async commit (session, opts) {\n    await this.ready()\n    await session.ready()\n\n    return this.state.commit(session.state, { keyPair: this.keyPair, ...opts })\n  }\n\n  replicate (isInitiator, opts = {}) {\n    // Only limitation here is that ondiscoverykey doesn't work atm when passing a muxer directly,\n    // because it doesn't really make a lot of sense.\n    if (Protomux.isProtomux(isInitiator)) return this._attachToMuxer(isInitiator, opts)\n\n    // if same stream is passed twice, ignore the 2nd one before we make sessions etc\n    if (isStream(isInitiator) && this._isAttached(isInitiator)) return isInitiator\n\n    const protocolStream = Hypercore.createProtocolStream(isInitiator, opts)\n    const noiseStream = protocolStream.noiseStream\n    const protocol = noiseStream.userData\n\n    this._attachToMuxer(protocol)\n\n    return protocolStream\n  }\n\n  _isAttached (stream) {\n    return stream.userData && this.core && this.core.replicator && this.core.replicator.attached(stream.userData)\n  }\n\n  _attachToMuxer (mux) {\n    if (this.opened) {\n      this.core.replicator.attachTo(mux)\n    } else {\n      this.opening.then(() => this.core.replicator.attachTo(mux), mux.destroy.bind(mux))\n    }\n\n    return mux\n  }\n\n  get id () {\n    return this.core === null ? null : this.core.id\n  }\n\n  get key () {\n    return this.core === null ? null : this.core.key\n  }\n\n  get discoveryKey () {\n    return this.core === null ? null : this.core.discoveryKey\n  }\n\n  get manifest () {\n    return this.core === null ? null : this.core.manifest\n  }\n\n  get length () {\n    if (this._snapshot) return this._snapshot.length\n    return this.opened === false ? 0 : this.state.length\n  }\n\n  get signedLength () {\n    return this.opened === false ? 0 : this.state.signedLength()\n  }\n\n  /**\n   * Deprecated. Use `const { byteLength } = await core.info()`.\n   */\n  get byteLength () {\n    if (this.opened === false) return 0\n    if (this._snapshot) return this._snapshot.byteLength\n    return this.state.byteLength - (this.state.length * this.padding)\n  }\n\n  get contiguousLength () {\n    if (this.opened === false) return 0\n    return Math.min(this.core.state.length, this.core.header.hints.contiguousLength)\n  }\n\n  get contiguousByteLength () {\n    return 0\n  }\n\n  get fork () {\n    if (this.opened === false) return 0\n    return this.state.fork\n  }\n\n  get peers () {\n    return this.opened === false ? [] : this.core.replicator.peers\n  }\n\n  get padding () {\n    return this.encryption === null ? 0 : this.encryption.padding\n  }\n\n  get globalCache () {\n    return this.opened === false ? null : this.core.globalCache\n  }\n\n  ready () {\n    return this.opening\n  }\n\n  async setUserData (key, value) {\n    if (this.opened === false) await this.opening\n    await this.state.setUserData(key, value)\n  }\n\n  async getUserData (key) {\n    if (this.opened === false) await this.opening\n    const batch = this.state.storage.read()\n    const p = batch.getUserData(key)\n    batch.tryFlush()\n    return p\n  }\n\n  transferSession (core) {\n    // todo: validate we can move\n\n    if (this.weak === false) {\n      this.core.activeSessions--\n      core.activeSessions++\n    }\n\n    if (this._monitorIndex >= 0) {\n      this.core.removeMonitor(this)\n      core.addMonitor(this)\n    }\n\n    const old = this.core\n\n    this.core = core\n\n    old.replicator.clearRequests(this.activeRequests, SESSION_MOVED())\n\n    this.emit('migrate', this.key)\n  }\n\n  findingPeers () {\n    this._findingPeers++\n    if (this.core !== null && !this.closing) this.core.replicator.findingPeers++\n\n    let once = true\n\n    return () => {\n      if (this.closing || !once) return\n      once = false\n      this._findingPeers--\n      if (this.core !== null && --this.core.replicator.findingPeers === 0) {\n        this.core.replicator.updateAll()\n      }\n    }\n  }\n\n  async info (opts) {\n    if (this.opened === false) await this.opening\n\n    return Info.from(this, opts)\n  }\n\n  async update (opts) {\n    if (this.opened === false) await this.opening\n    if (this.closing !== null) return false\n    if (this.snapshotted) return false\n\n    if (this.writable && (!opts || opts.force !== true)) return false\n\n    const remoteWait = this._shouldWait(opts, this.core.replicator.findingPeers > 0)\n\n    let upgraded = false\n\n    if (await this.core.replicator.applyPendingReorg()) {\n      upgraded = true\n    }\n\n    if (!upgraded && remoteWait) {\n      const activeRequests = (opts && opts.activeRequests) || this.activeRequests\n      const req = this.core.replicator.addUpgrade(activeRequests)\n\n      try {\n        upgraded = await req.promise\n      } catch (err) {\n        if (isSessionMoved(err)) return this.update(opts)\n        throw err\n      }\n    }\n\n    if (!upgraded) return false\n    return true\n  }\n\n  async seek (bytes, opts) {\n    if (this.opened === false) await this.opening\n    if (!isValidIndex(bytes)) throw ASSERTION('seek is invalid')\n\n    const s = MerkleTree.seek(this.state, bytes, this.padding)\n\n    const offset = await s.update()\n    if (offset) return offset\n\n    if (this.closing !== null) throw SESSION_CLOSED()\n\n    if (!this._shouldWait(opts, this.wait)) return null\n\n    const activeRequests = (opts && opts.activeRequests) || this.activeRequests\n    const req = this.core.replicator.addSeek(activeRequests, s)\n\n    const timeout = opts && opts.timeout !== undefined ? opts.timeout : this.timeout\n    if (timeout) req.context.setTimeout(req, timeout)\n\n    try {\n      return await req.promise\n    } catch (err) {\n      if (isSessionMoved(err)) return this.seek(bytes, opts)\n      throw err\n    }\n  }\n\n  async has (start, end = start + 1) {\n    if (this.opened === false) await this.opening\n    if (!isValidIndex(start) || !isValidIndex(end)) throw ASSERTION('has range is invalid')\n\n    if (this.state.isDefault()) {\n      if (end === start + 1) return this.core.bitfield.get(start)\n\n      const i = this.core.bitfield.firstUnset(start)\n      return i === -1 || i >= end\n    }\n\n    if (end === start + 1) {\n      const rx = this.state.storage.read()\n      const block = rx.getBlock(start)\n      rx.tryFlush()\n\n      return (await block) !== null\n    }\n\n    let count = 0\n\n    const stream = this.state.storage.createBlockStream({ gte: start, lt: end })\n    for await (const block of stream) {\n      if (block === null) return false\n      count++\n    }\n\n    return count === (end - start)\n  }\n\n  async get (index, opts) {\n    if (this.opened === false) await this.opening\n    if (!isValidIndex(index)) throw ASSERTION('block index is invalid')\n\n    if (this.closing !== null) throw SESSION_CLOSED()\n\n    const encoding = (opts && opts.valueEncoding && c.from(opts.valueEncoding)) || this.valueEncoding\n\n    const req = this._get(index, opts)\n\n    let block = await req\n    if (!block) return null\n\n    if (opts && opts.raw) return block\n\n    if (this.encryption && (!opts || opts.decrypt !== false)) {\n      // Copy the block as it might be shared with other sessions.\n      block = b4a.from(block)\n\n      if (this.encryption.compat !== this.core.compat) this._updateEncryption()\n\n      await this.encryption.decrypt(index, block)\n    }\n\n    return this._decode(encoding, block)\n  }\n\n  async clear (start, end = start + 1, opts) {\n    if (this.opened === false) await this.opening\n    if (this.closing !== null) throw SESSION_CLOSED()\n\n    if (typeof end === 'object') {\n      opts = end\n      end = start + 1\n    }\n\n    if (!isValidIndex(start) || !isValidIndex(end)) throw ASSERTION('clear range is invalid')\n\n    const cleared = (opts && opts.diff) ? { blocks: 0 } : null\n\n    if (start >= end) return cleared\n    if (start >= this.length) return cleared\n\n    await this.state.clear(start, end, cleared)\n\n    return cleared\n  }\n\n  async purge () {\n    await this._closeAllSessions(null)\n    await this.core.purge()\n  }\n\n  async _get (index, opts) {\n    const block = await readBlock(this.state.storage.read(), index)\n\n    if (block !== null) return block\n\n    if (this.closing !== null) throw SESSION_CLOSED()\n\n    // snapshot should check if core has block\n    if (this._snapshot !== null) {\n      checkSnapshot(this, index)\n      const coreBlock = await readBlock(this.core.state.storage.read(), index)\n\n      checkSnapshot(this, index)\n      if (coreBlock !== null) return coreBlock\n    }\n\n    // lets check the bitfield to see if we got it during the above async calls\n    // this is the last resort before replication, so always safe.\n    if (this.core.bitfield.get(index)) {\n      const coreBlock = await readBlock(this.state.storage.read(), index)\n      // TODO: this should not be needed, only needed atm in case we are doing a moveTo during this (we should fix)\n      if (coreBlock !== null) return coreBlock\n    }\n\n    if (!this._shouldWait(opts, this.wait)) return null\n\n    if (opts && opts.onwait) opts.onwait(index, this)\n    if (this.onwait) this.onwait(index, this)\n\n    const activeRequests = (opts && opts.activeRequests) || this.activeRequests\n\n    const req = this.core.replicator.addBlock(activeRequests, index)\n    req.snapshot = index < this.length\n\n    const timeout = opts && opts.timeout !== undefined ? opts.timeout : this.timeout\n    if (timeout) req.context.setTimeout(req, timeout)\n\n    let replicatedBlock = null\n\n    try {\n      replicatedBlock = await req.promise\n    } catch (err) {\n      if (isSessionMoved(err)) return this._get(index, opts)\n      throw err\n    }\n\n    if (this._snapshot !== null) checkSnapshot(this, index)\n    return maybeUnslab(replicatedBlock)\n  }\n\n  _shouldWait (opts, defaultValue) {\n    if (opts) {\n      if (opts.wait === false) return false\n      if (opts.wait === true) return true\n    }\n    return defaultValue\n  }\n\n  createReadStream (opts) {\n    return new ReadStream(this, opts)\n  }\n\n  createWriteStream (opts) {\n    return new WriteStream(this, opts)\n  }\n\n  createByteStream (opts) {\n    return new ByteStream(this, opts)\n  }\n\n  download (range) {\n    return new Download(this, range)\n  }\n\n  // TODO: get rid of this / deprecate it?\n  undownload (range) {\n    range.destroy(null)\n  }\n\n  // TODO: get rid of this / deprecate it?\n  cancel (request) {\n    // Do nothing for now\n  }\n\n  async truncate (newLength = 0, opts = {}) {\n    if (this.opened === false) await this.opening\n\n    const {\n      fork = this.state.fork + 1,\n      keyPair = this.keyPair,\n      signature = null\n    } = typeof opts === 'number' ? { fork: opts } : opts\n\n    const isDefault = this.state === this.core.state\n    const writable = !this._readonly && !!(signature || (keyPair && keyPair.secretKey))\n    if (isDefault && writable === false && (newLength > 0 || fork !== this.state.fork)) throw SESSION_NOT_WRITABLE()\n\n    await this.state.truncate(newLength, fork, { keyPair, signature })\n\n    // TODO: Should propagate from an event triggered by the oplog\n    if (this.state === this.core.state) this.core.replicator.updateAll()\n  }\n\n  async append (blocks, opts = {}) {\n    if (this.opened === false) await this.opening\n\n    const isDefault = this.state === this.core.state\n    const defaultKeyPair = this.state.name === null ? this.keyPair : null\n\n    const { keyPair = defaultKeyPair, signature = null } = opts\n    const writable = !isDefault || !!signature || !!(keyPair && keyPair.secretKey) || opts.writable === true\n\n    if (this._readonly || writable === false) throw SESSION_NOT_WRITABLE()\n\n    blocks = Array.isArray(blocks) ? blocks : [blocks]\n\n    const preappend = this.encryption && this._preappend\n    if (preappend) await this.encryption.ready()\n\n    const buffers = this.encodeBatch !== null ? this.encodeBatch(blocks) : new Array(blocks.length)\n\n    if (this.encodeBatch === null) {\n      for (let i = 0; i < blocks.length; i++) {\n        buffers[i] = this._encode(this.valueEncoding, blocks[i])\n      }\n    }\n    for (const b of buffers) {\n      if (b.byteLength > MAX_SUGGESTED_BLOCK_SIZE) {\n        throw BAD_ARGUMENT('Appended block exceeds the maximum suggested block size')\n      }\n    }\n\n    return this.state.append(buffers, { keyPair, signature, preappend })\n  }\n\n  async signable (length = -1, fork = -1) {\n    if (this.opened === false) await this.opening\n    if (length === -1) length = this.length\n    if (fork === -1) fork = this.fork\n\n    return caps.treeSignable(this.key, await this.treeHash(length), length, fork)\n  }\n\n  async treeHash (length = -1) {\n    if (this.opened === false) await this.opening\n    if (length === -1) length = this.length\n\n    const roots = await MerkleTree.getRoots(this.state, length)\n    return crypto.tree(roots)\n  }\n\n  async proof (opts) {\n    if (this.opened === false) await this.opening\n    const rx = this.state.storage.read()\n    const promise = MerkleTree.proof(this.state, rx, opts)\n    rx.tryFlush()\n    return promise\n  }\n\n  async verifyFullyRemote (proof) {\n    if (this.opened === false) await this.opening\n    const batch = await MerkleTree.verifyFullyRemote(this.state, proof)\n    await this.core._verifyBatchUpgrade(batch, proof.manifest)\n    return batch\n  }\n\n  registerExtension (name, handlers = {}) {\n    if (this.extensions.has(name)) {\n      const ext = this.extensions.get(name)\n      ext.handlers = handlers\n      ext.encoding = c.from(handlers.encoding || c.buffer)\n      ext.session = this\n      return ext\n    }\n\n    const ext = {\n      name,\n      handlers,\n      encoding: c.from(handlers.encoding || c.buffer),\n      session: this,\n      send (message, peer) {\n        const buffer = c.encode(this.encoding, message)\n        peer.extension(name, buffer)\n      },\n      broadcast (message) {\n        const buffer = c.encode(this.encoding, message)\n        for (const peer of this.session.peers) {\n          peer.extension(name, buffer)\n        }\n      },\n      destroy () {\n        for (const peer of this.session.peers) {\n          if (peer.extensions.get(name) === ext) peer.extensions.delete(name)\n        }\n        this.session.extensions.delete(name)\n      },\n      _onmessage (state, peer) {\n        const m = this.encoding.decode(state)\n        if (this.handlers.onmessage) this.handlers.onmessage(m, peer)\n      }\n    }\n\n    this.extensions.set(name, ext)\n\n    if (this.core === null) this._monitorIndex = -2\n    else this.core.addMonitor(this)\n\n    for (const peer of this.peers) {\n      peer.extensions.set(name, ext)\n    }\n\n    return ext\n  }\n\n  _encode (enc, val) {\n    const state = { start: this.padding, end: this.padding, buffer: null }\n\n    if (b4a.isBuffer(val)) {\n      if (state.start === 0) return val\n      state.end += val.byteLength\n    } else if (enc) {\n      enc.preencode(state, val)\n    } else {\n      val = b4a.from(val)\n      if (state.start === 0) return val\n      state.end += val.byteLength\n    }\n\n    state.buffer = b4a.allocUnsafe(state.end)\n\n    if (enc) enc.encode(state, val)\n    else state.buffer.set(val, state.start)\n\n    return state.buffer\n  }\n\n  _decode (enc, block) {\n    if (this.padding) block = block.subarray(this.padding)\n    try {\n      if (enc) return c.decode(enc, block)\n    } catch {\n      throw DECODING_ERROR()\n    }\n    return block\n  }\n\n  _updateEncryption () {\n    const e = this.encryption\n    if (HypercoreEncryption.isHypercoreEncryption(e)) return\n\n    this.encryption = this._getLegacyEncryption(e.key, e.block)\n\n    if (e === this.core.encryption) this.core.encryption = this.encryption\n  }\n\n  _getLegacyEncryption (encryptionKey, block) {\n    if (!encryptionKey) return null\n\n    const blockKey = block\n      ? encryptionKey\n      : getLegacyBlockKey(this.key, encryptionKey, this.core.compat)\n\n    return HypercoreEncryption.createLegacyProvider(blockKey)\n  }\n}\n\nmodule.exports = Hypercore\n\nfunction isStream (s) {\n  return typeof s === 'object' && s && typeof s.pipe === 'function'\n}\n\nfunction toHex (buf) {\n  return buf && b4a.toString(buf, 'hex')\n}\n\nasync function preappend (blocks) {\n  const offset = this.state.length\n  const fork = this.state.encryptionFork\n\n  if (this.encryption.compat !== this.core.compat) this._updateEncryption()\n\n  for (let i = 0; i < blocks.length; i++) {\n    await this.encryption.encrypt(offset + i, blocks[i], fork)\n  }\n}\n\nfunction isValidIndex (index) {\n  return index === 0 || index > 0\n}\n\nfunction maybeUnslab (block) {\n  // Unslab only when it takes up less then half the slab\n  return block !== null && 2 * block.byteLength < block.buffer.byteLength ? unslab(block) : block\n}\n\nfunction checkSnapshot (snapshot, index) {\n  if (index >= snapshot.state.snapshotCompatLength) throw SNAPSHOT_NOT_AVAILABLE()\n}\n\nfunction readBlock (rx, index) {\n  const promise = rx.getBlock(index)\n  rx.tryFlush()\n  return promise\n}\n\nfunction initOnce (session, storage, key, opts) {\n  if (storage === null) storage = opts.storage || null\n  if (key === null) key = opts.key || null\n\n  session.core = new Core(Hypercore.defaultStorage(storage), {\n    preopen: opts.preopen,\n    eagerUpgrade: true,\n    notDownloadingLinger: opts.notDownloadingLinger,\n    allowFork: opts.allowFork !== false,\n    inflightRange: opts.inflightRange,\n    compat: opts.compat === true,\n    force: opts.force,\n    createIfMissing: opts.createIfMissing,\n    discoveryKey: opts.discoveryKey,\n    overwrite: opts.overwrite,\n    key,\n    keyPair: opts.keyPair,\n    legacy: opts.legacy,\n    manifest: opts.manifest,\n    globalCache: opts.globalCache || null // session is a temp option, not to be relied on unless you know what you are doing (no semver guarantees)\n  })\n}\n\nfunction maybeAddMonitor (name) {\n  if (name === 'append' || name === 'truncate') return\n  if (this._monitorIndex >= 0 || this.closing) return\n\n  if (this.core === null) {\n    this._monitorIndex = -2\n  } else {\n    this.core.addMonitor(this)\n  }\n}\n\nfunction isSessionMoved (err) {\n  return err.code === 'SESSION_MOVED'\n}\n\nfunction getEncryptionOption (opts) {\n  // old style, supported for now but will go away\n  if (opts.encryptionKey) return { key: opts.encryptionKey, block: !!opts.isBlockKey }\n  if (!opts.encryption) return null\n  return b4a.isBuffer(opts.encryption) ? { key: opts.encryption } : opts.encryption\n}\n\nfunction getLegacyBlockKey (hypercoreKey, encryptionKey, compat) {\n  const key = b4a.alloc(HypercoreEncryption.KEYBYTES)\n\n  if (compat) sodium.crypto_generichash_batch(key, [encryptionKey], hypercoreKey)\n  else sodium.crypto_generichash_batch(key, [caps.LEGACY_BLOCK_ENCRYPTION, hypercoreKey, encryptionKey])\n\n  return key\n}\nconst crypto = require('hypercore-crypto')\nconst flat = require('flat-tree')\nconst b4a = require('b4a')\nconst { MerkleTree } = require('./merkle-tree')\n\nmodule.exports = async function auditCore (core, { tree = true, blocks = true, bitfield = true, dryRun = false } = {}) {\n  const length = core.state.length\n  const stats = { treeNodes: 0, blocks: 0, bits: 0, droppedTreeNodes: 0, droppedBlocks: 0, droppedBits: 0, corrupt: false }\n\n  // audit the tree\n  if (tree) {\n    let tx = null\n\n    const roots = await MerkleTree.getRootsFromStorage(core.state.storage, length)\n    const stack = []\n\n    for (const r of roots) {\n      if (r === null) {\n        if (!dryRun) {\n          const storage = core.state.storage\n          await storage.store.deleteCore(storage.core)\n          return null\n        }\n\n        stats.corrupt = true\n      }\n\n      stack.push(r)\n    }\n\n    stats.treeNodes += roots.length\n\n    while (stack.length > 0) {\n      const node = stack.pop()\n\n      if ((node.index & 1) === 0) continue\n\n      const [left, right] = flat.children(node.index)\n\n      const rx = core.state.storage.read()\n      const leftNodePromise = rx.getTreeNode(left)\n      const rightNodePromise = rx.getTreeNode(right)\n\n      rx.tryFlush()\n\n      const [leftNode, rightNode] = await Promise.all([leftNodePromise, rightNodePromise])\n\n      if (isBadTree(node, leftNode, rightNode)) {\n        if (!tx && !stats.corrupt) tx = core.state.storage.write()\n        const [l, r] = flat.spans(node.index)\n        tx.deleteTreeNodeRange(l, r + 1)\n        stats.droppedTreeNodes++\n        continue\n      }\n\n      if (!leftNode) continue\n\n      stats.treeNodes += 2\n      stack.push(leftNode, rightNode)\n    }\n\n    if (tx && !dryRun) await tx.flush()\n  }\n\n  // audit the blocks\n  if (blocks) {\n    let tx = null\n\n    for await (const block of core.state.storage.createBlockStream()) {\n      if (!core.bitfield.get(block.index)) {\n        if (!tx && !stats.corrupt) tx = core.state.storage.write()\n        tx.deleteBlock(block.index)\n        stats.droppedBlocks++\n      }\n\n      const rx = core.state.storage.read()\n      const treeNodePromise = rx.getTreeNode(2 * block.index)\n\n      rx.tryFlush()\n\n      const treeNode = await treeNodePromise\n\n      if (isBadBlock(treeNode, block.value)) {\n        if (!tx && !stats.corrupt) tx = core.state.storage.write()\n        tx.deleteBlock(block.index)\n        stats.droppedBlocks++\n        continue\n      }\n\n      stats.blocks++\n    }\n\n    if (tx && !dryRun) await tx.flush()\n  }\n\n  if (bitfield) {\n    let tx = null\n\n    for (const index of allBits(core.bitfield)) {\n      const rx = core.state.storage.read()\n      const blockPromise = rx.getBlock(index)\n\n      rx.tryFlush()\n\n      const block = await blockPromise\n      if (!block) {\n        stats.droppedBits++\n        if (dryRun) continue\n\n        if (!tx && !stats.corrupt) tx = core.state.storage.write()\n\n        core.bitfield.set(index, false)\n\n        const page = core.bitfield.getBitfield(index)\n        if (page.bitfield) tx.setBitfieldPage(page.index, page.bitfield)\n        else tx.deleteBitfieldPage(page.idnex)\n        continue\n      }\n\n      stats.bits++\n    }\n\n    if (tx && !dryRun) await tx.flush()\n  }\n\n  return stats\n}\n\nfunction isBadBlock (node, block) {\n  if (!node) return true\n  const hash = crypto.data(block)\n  return !b4a.equals(hash, node.hash) || node.size !== block.byteLength\n}\n\nfunction isBadTree (parent, left, right) {\n  if (!left && !right) return false\n  if (!left || !right) return true\n  const hash = crypto.parent(left, right)\n  return !b4a.equals(hash, parent.hash) || parent.size !== (left.size + right.size)\n}\n\nfunction * allBits (bitfield) {\n  let i = 0\n  if (bitfield.get(0)) yield 0\n  while (true) {\n    i = bitfield.findFirst(true, i + 1)\n    if (i === -1) break\n    yield i\n  }\n}\nconst b4a = require('b4a')\nconst quickbit = require('./compat').quickbit\n\nmodule.exports = class BitInterlude {\n  constructor () {\n    this.ranges = []\n  }\n\n  contiguousLength (from) {\n    for (const r of this.ranges) {\n      if (r.start > from) break\n      if (!r.value && r.start <= from) return r.start\n    }\n\n    // TODO: be smarter\n    while (this.get(from) === true) from++\n    return from\n  }\n\n  get (index) {\n    let start = 0\n    let end = this.ranges.length\n\n    while (start < end) {\n      const mid = (start + end) >> 1\n      const r = this.ranges[mid]\n\n      if (index < r.start) {\n        end = mid\n        continue\n      }\n\n      if (index >= r.end) {\n        if (mid === start) break\n        start = mid\n        continue\n      }\n\n      return r.value\n    }\n\n    return false\n  }\n\n  setRange (start, end, value) {\n    if (start === end) return\n\n    let r = null\n\n    for (let i = 0; i < this.ranges.length; i++) {\n      r = this.ranges[i]\n\n      // if already inside, stop\n      if (r.start <= start && end <= r.end) {\n        if (value === r.value) return\n\n        const ranges = mergeRanges(r, { start, end, value })\n        this.ranges.splice(i, 1, ...ranges)\n\n        return\n      }\n\n      // we wanna overun the interval\n      if (start > r.end) {\n        continue\n      }\n\n      // we overran but this interval is ending after us, move it back\n      if (end >= r.start && end <= r.end) {\n        r.start = r.value === value ? start : end\n        if (r.value !== value) this.ranges.splice(i, 0, { start, end, value })\n        return\n      }\n\n      // we overran but our start is contained in this interval, move start back\n      if (start >= r.start && start <= r.end) {\n        if (r.value !== value) {\n          this.ranges.splice(++i, 0, { start, end, value })\n          r.end = start\n          return\n        }\n\n        start = r.start\n      }\n\n      let remove = 0\n\n      for (let j = i; j < this.ranges.length; j++) {\n        const n = this.ranges[j]\n        if (n.start > end || n.value !== value) break\n        if (n.start <= end && n.end > end) end = n.end\n        remove++\n      }\n\n      this.ranges.splice(i, remove, { start, end, value })\n      return\n    }\n\n    if (r !== null) {\n      if (start <= r.end && end > r.end) {\n        r.end = end\n        return\n      }\n\n      // we never\n      if (r.end > start) return\n    }\n\n    this.ranges.push({ start, end, value })\n  }\n\n  flush (tx, bitfield) {\n    if (!this.ranges.length) return []\n\n    let index = this.ranges[0].start\n    const final = this.ranges[this.ranges.length - 1].end\n\n    let i = 0\n\n    while (index < final) {\n      const page = bitfield.getBitfield(index) // read only\n      const pageIndex = page ? page.index : bitfield.getPageIndex(index)\n\n      const buf = b4a.allocUnsafe(bitfield.getPageByteLength())\n\n      if (page) {\n        const src = page.bitfield // Uint32Array\n        buf.set(b4a.from(src.buffer, src.byteOffset, src.byteLength), 0)\n      } else {\n        b4a.fill(buf, 0)\n      }\n\n      const last = (pageIndex + 1) * (buf.byteLength << 3)\n      const offset = pageIndex * (buf.byteLength << 3)\n\n      let hasValue = false\n\n      while (i < this.ranges.length) {\n        const { start, end, value } = this.ranges[i]\n\n        if (!hasValue && value) hasValue = true\n\n        const from = start < index ? index : start\n        const to = end < last ? end : last\n\n        quickbit.fill(buf, value, from - offset, to - offset)\n\n        index = to\n\n        if (to === last) break\n\n        i++\n      }\n\n      if (page || hasValue) tx.putBitfieldPage(pageIndex, buf)\n    }\n\n    return this.ranges\n  }\n}\n\nfunction mergeRanges (a, b) {\n  const ranges = []\n  if (a.start < b.start) ranges.push({ start: a.start, end: b.start, value: a.value })\n  ranges.push({ start: b.start, end: b.end, value: b.value })\n  if (b.end < a.end) ranges.push({ start: b.end, end: a.end, value: a.value })\n\n  return ranges\n}\nconst BigSparseArray = require('big-sparse-array')\nconst b4a = require('b4a')\nconst quickbit = require('./compat').quickbit\n\nconst BITS_PER_PAGE = 32768\nconst BYTES_PER_PAGE = BITS_PER_PAGE / 8\nconst WORDS_PER_PAGE = BYTES_PER_PAGE / 4\nconst BITS_PER_SEGMENT = 2097152\nconst BYTES_PER_SEGMENT = BITS_PER_SEGMENT / 8\nconst WORDS_PER_SEGMENT = BYTES_PER_SEGMENT / 4\nconst INITIAL_WORDS_PER_SEGMENT = 1024\nconst PAGES_PER_SEGMENT = BITS_PER_SEGMENT / BITS_PER_PAGE\nconst SEGMENT_GROWTH_FACTOR = 4\n\nclass BitfieldPage {\n  constructor (index, segment) {\n    this.index = index\n    this.offset = index * BYTES_PER_PAGE - segment.offset\n    this.bitfield = null\n    this.segment = segment\n\n    segment.add(this)\n  }\n\n  get tree () {\n    return this.segment.tree\n  }\n\n  get (index, dirty) {\n    return quickbit.get(this.bitfield, index)\n  }\n\n  set (index, val) {\n    if (quickbit.set(this.bitfield, index, val)) {\n      this.tree.update(this.offset * 8 + index)\n    }\n  }\n\n  setRange (start, end, val) {\n    quickbit.fill(this.bitfield, val, start, end)\n\n    let i = Math.floor(start / 128)\n    const n = i + Math.ceil((end - start) / 128)\n\n    while (i <= n) this.tree.update(this.offset * 8 + i++ * 128)\n  }\n\n  findFirst (val, position) {\n    return quickbit.findFirst(this.bitfield, val, position)\n  }\n\n  findLast (val, position) {\n    return quickbit.findLast(this.bitfield, val, position)\n  }\n\n  count (start, length, val) {\n    const end = start + length\n\n    let i = start\n    let c = 0\n\n    while (length > 0) {\n      const l = this.findFirst(val, i)\n      if (l === -1 || l >= end) return c\n\n      const h = this.findFirst(!val, l + 1)\n      if (h === -1 || h >= end) return c + end - l\n\n      c += h - l\n      length -= h - i\n      i = h\n    }\n\n    return c\n  }\n}\n\nclass BitfieldSegment {\n  constructor (index, bitfield) {\n    this.index = index\n    this.offset = index * BYTES_PER_SEGMENT\n    this.tree = quickbit.Index.from(bitfield, BYTES_PER_SEGMENT)\n    this.pages = new Array(PAGES_PER_SEGMENT)\n  }\n\n  get bitfield () {\n    return this.tree.field\n  }\n\n  add (page) {\n    const i = page.index - this.index * PAGES_PER_SEGMENT\n    this.pages[i] = page\n\n    const start = i * WORDS_PER_PAGE\n    const end = start + WORDS_PER_PAGE\n\n    if (end >= this.bitfield.length) this.reallocate(end)\n\n    page.bitfield = this.bitfield.subarray(start, end)\n  }\n\n  reallocate (length) {\n    let target = this.bitfield.length\n    while (target < length) target *= SEGMENT_GROWTH_FACTOR\n\n    const bitfield = new Uint32Array(target)\n    bitfield.set(this.bitfield)\n\n    this.tree = quickbit.Index.from(bitfield, BYTES_PER_SEGMENT)\n\n    for (let i = 0; i < this.pages.length; i++) {\n      const page = this.pages[i]\n      if (!page) continue\n\n      const start = i * WORDS_PER_PAGE\n      const end = start + WORDS_PER_PAGE\n\n      page.bitfield = bitfield.subarray(start, end)\n    }\n  }\n\n  findFirst (val, position) {\n    position = this.tree.skipFirst(!val, position)\n\n    let j = position & (BITS_PER_PAGE - 1)\n    let i = (position - j) / BITS_PER_PAGE\n\n    if (i >= PAGES_PER_SEGMENT) return -1\n\n    while (i < this.pages.length) {\n      const p = this.pages[i]\n\n      let index = -1\n\n      if (p) index = p.findFirst(val, j)\n      else if (!val) index = j\n\n      if (index !== -1) return i * BITS_PER_PAGE + index\n\n      j = 0\n      i++\n    }\n\n    return -1\n  }\n\n  findLast (val, position) {\n    position = this.tree.skipLast(!val, position)\n\n    let j = position & (BITS_PER_PAGE - 1)\n    let i = (position - j) / BITS_PER_PAGE\n\n    if (i >= PAGES_PER_SEGMENT) return -1\n\n    while (i >= 0) {\n      const p = this.pages[i]\n\n      let index = -1\n\n      if (p) index = p.findLast(val, j)\n      else if (!val) index = j\n\n      if (index !== -1) return i * BITS_PER_PAGE + index\n\n      j = BITS_PER_PAGE - 1\n      i--\n    }\n\n    return -1\n  }\n}\n\nmodule.exports = class Bitfield {\n  static BITS_PER_PAGE = BITS_PER_PAGE\n  static BYTES_PER_PAGE = BYTES_PER_PAGE\n\n  constructor (buffer) {\n    this.resumed = !!(buffer && buffer.byteLength >= 0)\n\n    this._pages = new BigSparseArray()\n    this._segments = new BigSparseArray()\n\n    const view = this.resumed\n      ? new Uint32Array(\n        buffer.buffer,\n        buffer.byteOffset,\n        Math.floor(buffer.byteLength / 4)\n      )\n      : new Uint32Array(INITIAL_WORDS_PER_SEGMENT)\n\n    for (let i = 0; i < view.length; i += WORDS_PER_SEGMENT) {\n      let bitfield = view.subarray(i, i + (WORDS_PER_SEGMENT))\n      let length = WORDS_PER_SEGMENT\n\n      if (i === 0) {\n        length = INITIAL_WORDS_PER_SEGMENT\n        while (length < bitfield.length) length *= SEGMENT_GROWTH_FACTOR\n      }\n\n      if (bitfield.length !== length) {\n        const copy = new Uint32Array(length)\n        copy.set(bitfield, 0)\n        bitfield = copy\n      }\n\n      const segment = new BitfieldSegment(i / (WORDS_PER_SEGMENT), bitfield)\n      this._segments.set(segment.index, segment)\n\n      for (let j = 0; j < bitfield.length; j += WORDS_PER_PAGE) {\n        const page = new BitfieldPage((i + j) / WORDS_PER_PAGE, segment)\n        this._pages.set(page.index, page)\n      }\n    }\n  }\n\n  static from (bitfield) {\n    return new Bitfield(bitfield.toBuffer(bitfield._pages.maxLength * BITS_PER_PAGE))\n  }\n\n  toBuffer (length) {\n    const pages = Math.ceil(length / BITS_PER_PAGE)\n    const buffer = b4a.allocUnsafe(pages * BYTES_PER_PAGE)\n\n    for (let i = 0; i < pages; i++) {\n      const page = this._pages.get(i)\n      const offset = i * BYTES_PER_PAGE\n\n      if (page) {\n        const buf = b4a.from(\n          page.bitfield.buffer,\n          page.bitfield.byteOffset,\n          page.bitfield.byteLength\n        )\n\n        buffer.set(buf, offset)\n      } else {\n        buffer.fill(0, offset, offset + BYTES_PER_PAGE)\n      }\n    }\n\n    return buffer\n  }\n\n  getBitfield (index) {\n    const i = this.getPageIndex(index)\n\n    const p = this._pages.get(i)\n    return p || null\n  }\n\n  merge (bitfield, length) {\n    let i = 0\n\n    while (i < length) {\n      const start = bitfield.firstSet(i)\n      if (start === -1) break\n\n      i = bitfield.firstUnset(start)\n\n      if (i === -1 || i > length) i = length\n\n      this.setRange(start, i, true)\n\n      if (i >= length) break\n    }\n  }\n\n  get (index) {\n    const j = index & (BITS_PER_PAGE - 1)\n    const i = (index - j) / BITS_PER_PAGE\n\n    const p = this._pages.get(i)\n\n    return p ? p.get(j) : false\n  }\n\n  getPageByteLength () {\n    return BYTES_PER_PAGE\n  }\n\n  getPageIndex (index) {\n    const j = index & (BITS_PER_PAGE - 1)\n    return (index - j) / BITS_PER_PAGE\n  }\n\n  getPage (index, create) {\n    const i = this.getPageIndex(index)\n\n    let p = this._pages.get(i)\n\n    if (p) return p\n\n    if (!create) return null\n\n    const k = Math.floor(i / PAGES_PER_SEGMENT)\n    const s = this._segments.get(k) || this._segments.set(k, new BitfieldSegment(k, new Uint32Array(k === 0 ? INITIAL_WORDS_PER_SEGMENT : WORDS_PER_SEGMENT)))\n\n    p = this._pages.set(i, new BitfieldPage(i, s))\n\n    return p\n  }\n\n  set (index, val) {\n    const j = index & (BITS_PER_PAGE - 1)\n    const i = (index - j) / BITS_PER_PAGE\n\n    let p = this._pages.get(i)\n\n    if (!p && val) {\n      const k = Math.floor(i / PAGES_PER_SEGMENT)\n      const s = this._segments.get(k) || this._segments.set(k, new BitfieldSegment(k, new Uint32Array(k === 0 ? INITIAL_WORDS_PER_SEGMENT : WORDS_PER_SEGMENT)))\n\n      p = this._pages.set(i, new BitfieldPage(i, s))\n    }\n\n    if (p) p.set(j, val)\n  }\n\n  setRange (start, end, val) {\n    let j = start & (BITS_PER_PAGE - 1)\n    let i = (start - j) / BITS_PER_PAGE\n\n    while (start < end) {\n      let p = this._pages.get(i)\n\n      if (!p && val) {\n        const k = Math.floor(i / PAGES_PER_SEGMENT)\n        const s = this._segments.get(k) || this._segments.set(k, new BitfieldSegment(k, new Uint32Array(k === 0 ? INITIAL_WORDS_PER_SEGMENT : WORDS_PER_SEGMENT)))\n\n        p = this._pages.set(i, new BitfieldPage(i, s))\n      }\n\n      const offset = p.index * BITS_PER_PAGE\n      const last = Math.min(end - offset, BITS_PER_PAGE)\n      const range = last - j\n\n      if (p) p.setRange(j, last, val)\n\n      j = 0\n      i++\n      start += range\n    }\n  }\n\n  findFirst (val, position) {\n    let j = position & (BITS_PER_SEGMENT - 1)\n    let i = (position - j) / BITS_PER_SEGMENT\n\n    while (i < this._segments.maxLength) {\n      const s = this._segments.get(i)\n\n      let index = -1\n\n      if (s) index = s.findFirst(val, j)\n      else if (!val) index = j\n\n      if (index !== -1) return i * BITS_PER_SEGMENT + index\n\n      j = 0\n      i++\n    }\n\n    return val ? -1 : this._segments.maxLength * BITS_PER_SEGMENT\n  }\n\n  firstSet (position) {\n    return this.findFirst(true, position)\n  }\n\n  firstUnset (position) {\n    return this.findFirst(false, position)\n  }\n\n  findLast (val, position) {\n    let j = position & (BITS_PER_SEGMENT - 1)\n    let i = (position - j) / BITS_PER_SEGMENT\n\n    while (i >= 0) {\n      const s = this._segments.get(i)\n\n      let index = -1\n\n      if (s) index = s.findLast(val, j)\n      else if (!val) index = j\n\n      if (index !== -1) return i * BITS_PER_SEGMENT + index\n\n      j = BITS_PER_SEGMENT - 1\n      i--\n    }\n\n    return -1\n  }\n\n  lastSet (position) {\n    return this.findLast(true, position)\n  }\n\n  lastUnset (position) {\n    return this.findLast(false, position)\n  }\n\n  count (start, length, val) {\n    let j = start & (BITS_PER_PAGE - 1)\n    let i = (start - j) / BITS_PER_PAGE\n    let c = 0\n\n    while (length > 0) {\n      const p = this._pages.get(i)\n\n      const end = Math.min(j + length, BITS_PER_PAGE)\n      const range = end - j\n\n      if (p) c += p.count(j, range, val)\n      else if (!val) c += range\n\n      j = 0\n      i++\n      length -= range\n    }\n\n    return c\n  }\n\n  countSet (start, length) {\n    return this.count(start, length, true)\n  }\n\n  countUnset (start, length) {\n    return this.count(start, length, false)\n  }\n\n  * want (start, length) {\n    const j = start & (BITS_PER_SEGMENT - 1)\n    let i = (start - j) / BITS_PER_SEGMENT\n\n    while (length > 0) {\n      const s = this._segments.get(i)\n\n      if (s) {\n        // We always send at least 4 KiB worth of bitfield in a want, rounding\n        // to the nearest 4 KiB.\n        const end = ceilTo(clamp(length / 8, 4096, BYTES_PER_SEGMENT), 4096)\n\n        yield {\n          start: i * BITS_PER_SEGMENT,\n          bitfield: s.bitfield.subarray(0, end / 4)\n        }\n      }\n\n      i++\n      length -= BITS_PER_SEGMENT\n    }\n  }\n\n  clear (tx) {\n    return tx.deleteBitfieldPageRange(0, -1)\n  }\n\n  onupdate (ranges) {\n    for (const { start, end, value } of ranges) {\n      this.setRange(start, end, value)\n    }\n  }\n\n  static async open (storage, length) {\n    if (length === 0) return new Bitfield(storage, null)\n\n    const pages = Math.ceil(length / BITS_PER_PAGE)\n    const buffer = b4a.alloc(pages * BYTES_PER_PAGE)\n    const stream = storage.createBitfieldStream()\n\n    for await (const { index, page } of stream) {\n      buffer.set(page, index * BYTES_PER_PAGE)\n    }\n\n    return new Bitfield(buffer)\n  }\n}\n\nfunction clamp (n, min, max) {\n  return Math.min(Math.max(n, min), max)\n}\n\nfunction ceilTo (n, multiple = 1) {\n  const remainder = n % multiple\n  if (remainder === 0) return n\n  return n + multiple - remainder\n}\nconst crypto = require('hypercore-crypto')\nconst sodium = require('sodium-universal')\nconst b4a = require('b4a')\nconst c = require('compact-encoding')\n\n// TODO: rename this to \"crypto\" and move everything hashing related etc in here\n// Also lets move the tree stuff from hypercore-crypto here\n\nconst [\n  TREE,\n  REPLICATE_INITIATOR,\n  REPLICATE_RESPONDER,\n  MANIFEST,\n  DEFAULT_NAMESPACE,\n  LEGACY_BLOCK_ENCRYPTION\n] = crypto.namespace('hypercore', 6)\n\nexports.MANIFEST = MANIFEST\nexports.DEFAULT_NAMESPACE = DEFAULT_NAMESPACE\nexports.LEGACY_BLOCK_ENCRYPTION = LEGACY_BLOCK_ENCRYPTION\n\nexports.replicate = function (isInitiator, key, handshakeHash) {\n  const out = b4a.allocUnsafe(32)\n  sodium.crypto_generichash_batch(out, [isInitiator ? REPLICATE_INITIATOR : REPLICATE_RESPONDER, key], handshakeHash)\n  return out\n}\n\nexports.treeSignable = function (manifestHash, treeHash, length, fork) {\n  const state = { start: 0, end: 112, buffer: b4a.allocUnsafe(112) }\n  c.fixed32.encode(state, TREE)\n  c.fixed32.encode(state, manifestHash)\n  c.fixed32.encode(state, treeHash)\n  c.uint64.encode(state, length)\n  c.uint64.encode(state, fork)\n  return state.buffer\n}\n\nexports.treeSignableCompat = function (hash, length, fork, noHeader) {\n  const end = noHeader ? 48 : 80\n  const state = { start: 0, end, buffer: b4a.allocUnsafe(end) }\n  if (!noHeader) c.fixed32.encode(state, TREE) // ultra legacy mode, kill in future major\n  c.fixed32.encode(state, hash)\n  c.uint64.encode(state, length)\n  c.uint64.encode(state, fork)\n  return state.buffer\n}\n// Export the appropriate version of `quickbit-universal` as the plain import\n// may resolve to an older version in some environments\nlet quickbit = require('quickbit-universal')\nif (\n  typeof quickbit.findFirst !== 'function' ||\n  typeof quickbit.findLast !== 'function' ||\n  typeof quickbit.clear !== 'function'\n) {\n  // This should always load the fallback from the locally installed version\n  quickbit = require('quickbit-universal/fallback')\n}\nexports.quickbit = quickbit\nconst crypto = require('hypercore-crypto')\nconst flat = require('flat-tree')\nconst b4a = require('b4a')\nconst quickbit = require('quickbit-universal')\nconst Bitfield = require('./bitfield')\n\nconst MAX_BATCH_USED = 4 * 1024 * 1024\nconst MIN_BATCH_USED = 512 * 1024\n\n// just in its own file as its a bit involved\n\nmodule.exports = copyPrologue\n\nasync function copyPrologue (src, dst) {\n  const prologue = dst.header.manifest.prologue\n\n  if (src.length < prologue.length || prologue.length === 0) return\n\n  const stack = []\n  const roots = flat.fullRoots(prologue.length * 2)\n  const batch = { roots, first: true, last: false, contig: 0, used: 0, tree: [], blocks: [] }\n\n  for (let i = 0; i < roots.length; i++) {\n    const node = roots[i]\n    batch.tree.push(node)\n    stack.push(node)\n  }\n\n  let lastPage = -1\n  let lastBlock = -1\n\n  for await (const data of src.storage.createBlockStream({ gte: 0, lt: prologue.length, reverse: true })) {\n    if (walkTree(stack, data.index * 2, batch) === false) {\n      throw new Error('Missing block or tree node for ' + data.index)\n    }\n\n    batch.contig = data.index + 1 === lastBlock ? batch.contig + 1 : 1\n    lastBlock = data.index\n\n    const page = getBitfieldPage(data.index)\n    batch.blocks.push(data)\n\n    if (lastPage !== page) batch.used += 4096\n    batch.used += Math.max(data.value.byteLength, 128) // 128 is just a sanity number to avoid mega batches\n\n    // always safe to partially flush so we do that ondemand to reduce memory usage...\n    if ((batch.used >= MIN_BATCH_USED && page !== lastPage) || (batch.used >= MAX_BATCH_USED)) {\n      await flushBatch(prologue, src, dst, batch)\n    }\n\n    lastPage = page\n  }\n\n  if (lastBlock !== 0) batch.contig = 0\n\n  batch.last = true\n  await flushBatch(prologue, src, dst, batch)\n}\n\nasync function flushBatch (prologue, src, dst, batch) {\n  const nodePromises = []\n\n  const srcReader = src.storage.read()\n  for (const index of batch.tree) {\n    nodePromises.push(srcReader.getTreeNode(index))\n  }\n  srcReader.tryFlush()\n\n  const nodes = await Promise.all(nodePromises)\n\n  const pagePromises = []\n  const dstReader = dst.storage.read()\n\n  const headPromise = batch.first ? dstReader.getHead() : null\n  if (headPromise) headPromise.catch(noop)\n\n  let lastPage = -1\n  for (const { index } of batch.blocks) {\n    const page = getBitfieldPage(index)\n    if (page === lastPage) continue\n    lastPage = page\n    pagePromises.push(dstReader.getBitfieldPage(page))\n  }\n\n  dstReader.tryFlush()\n\n  const pages = await Promise.all(pagePromises)\n  const head = headPromise === null ? null : await headPromise\n  const userData = []\n\n  // reads done!\n\n  if (batch.first) {\n    const roots = nodes.slice(0, batch.roots.length)\n\n    for (const node of roots) {\n      if (!node) throw new Error('Missing nodes for prologue hash')\n    }\n\n    const treeHash = crypto.tree(roots)\n    if (!b4a.equals(treeHash, prologue.hash)) throw new Error('Prologue does not match source')\n  }\n\n  if (batch.first) {\n    for await (const data of src.storage.createUserDataStream()) userData.push(data)\n  }\n\n  for (let i = 0; i < pages.length; i++) {\n    if (!pages[i]) pages[i] = b4a.alloc(4096)\n  }\n\n  const tx = dst.storage.write()\n\n  for (const node of nodes) tx.putTreeNode(node)\n\n  lastPage = -1\n  let pageIndex = -1\n\n  for (const { index, value } of batch.blocks) {\n    const page = getBitfieldPage(index)\n\n    if (page !== lastPage) {\n      lastPage = page\n      pageIndex++\n      // queue the page now, we mutate it below but its the same ref\n      tx.putBitfieldPage(pageIndex, pages[pageIndex])\n    }\n\n    const pageBuffer = pages[pageIndex]\n    quickbit.set(pageBuffer, getBitfieldOffset(index), true)\n    tx.putBlock(index, value)\n  }\n\n  for (const { key, value } of userData) {\n    tx.putUserData(key, value)\n  }\n\n  let upgraded = batch.first && !head\n  if (upgraded) {\n    tx.setHead(prologueToTree(prologue))\n  }\n\n  await tx.flush()\n\n  if (upgraded) {\n    const roots = nodes.slice(0, batch.roots.length)\n    dst.state.setRoots(roots)\n    dst.header.tree = prologueToTree(prologue)\n  }\n\n  if (userData.length > 0) {\n    dst.header.userData = userData.concat(dst.header.userData)\n  }\n\n  if (batch.contig) {\n    // TODO: we need to persist this somehow\n    dst.header.hints.contiguousLength = batch.contig\n  }\n\n  let start = 0\n  let length = 0\n\n  // update in memory bitfield\n  for (const { index } of batch.blocks) {\n    if (start === 0 || start - 1 === index) {\n      length++\n    } else {\n      if (length > 0) signalReplicator(dst, upgraded, start, length)\n      upgraded = false\n      length = 1\n    }\n\n    start = index\n    dst.bitfield.set(index, true)\n  }\n\n  if (length > 0) signalReplicator(dst, upgraded, start, length)\n\n  // unlink\n  batch.tree = []\n  batch.blocks = []\n  batch.first = false\n  batch.used = 0\n}\n\nfunction signalReplicator (core, upgraded, start, length) {\n  if (upgraded) {\n    core.replicator.cork()\n    core.replicator.onhave(start, length, false)\n    core.replicator.onupgrade()\n    core.replicator.uncork()\n  } else {\n    core.replicator.onhave(start, length, false)\n  }\n}\n\nfunction prologueToTree (prologue) {\n  return {\n    fork: 0,\n    length: prologue.length,\n    rootHash: prologue.hash,\n    signature: null\n  }\n}\n\nfunction getBitfieldPage (index) {\n  return Math.floor(index / Bitfield.BITS_PER_PAGE)\n}\n\nfunction getBitfieldOffset (index) {\n  return index & (Bitfield.BITS_PER_PAGE - 1)\n}\n\nfunction walkTree (stack, target, batch) {\n  while (stack.length > 0) {\n    const node = stack.pop()\n\n    if ((node & 1) === 0) {\n      if (node === target) return true\n      continue\n    }\n\n    const ite = flat.iterator(node)\n    if (!ite.contains(target)) continue\n\n    while ((ite.index & 1) !== 0) {\n      const left = ite.leftChild()\n      const right = ite.sibling() // is right child\n\n      batch.tree.push(left, right)\n\n      if (ite.contains(target)) stack.push(left)\n      else ite.sibling()\n    }\n\n    if (ite.index === target) return true\n  }\n\n  return false\n}\n\nfunction noop () {}\nconst crypto = require('hypercore-crypto')\nconst b4a = require('b4a')\nconst unslab = require('unslab')\nconst z32 = require('z32')\nconst Mutex = require('./mutex')\nconst { MerkleTree, ReorgBatch } = require('./merkle-tree')\nconst BitInterlude = require('./bit-interlude')\nconst Bitfield = require('./bitfield')\nconst RemoteBitfield = require('./remote-bitfield')\nconst { BAD_ARGUMENT, STORAGE_EMPTY, STORAGE_CONFLICT, INVALID_SIGNATURE, INVALID_CHECKSUM } = require('hypercore-errors')\nconst Verifier = require('./verifier')\nconst audit = require('./audit')\nconst copyPrologue = require('./copy-prologue')\nconst SessionState = require('./session-state')\nconst Replicator = require('./replicator')\n\nmodule.exports = class Core {\n  constructor (db, opts = {}) {\n    this.db = db\n    this.storage = null\n    this.replicator = new Replicator(this, opts)\n    this.sessionStates = []\n    this.monitors = []\n    this.activeSessions = 0\n    this.gc = 0 // corestore uses this to main a gc strike pool\n\n    this.id = opts.key ? z32.encode(opts.key) : null\n    this.key = opts.key || null\n    this.discoveryKey = opts.discoveryKey || (opts.key && crypto.discoveryKey(opts.key)) || null\n    this.manifest = null\n    this.opening = null\n    this.closing = null\n    this.exclusive = null\n\n    this.preupdate = null\n    this.header = null\n    this.compat = false\n    this.bitfield = null\n    this.verifier = null\n    this.truncating = 0\n    this.updating = false\n    this.skipBitfield = null\n    this.globalCache = opts.globalCache || null\n    this.autoClose = opts.autoClose !== false\n    this.encryption = null\n    this.onidle = noop\n\n    this.state = null\n    this.opened = false\n    this.destroyed = false\n    this.closed = false\n\n    this._manifestFlushed = false\n    this._bitfield = null\n    this._verifies = null\n    this._verifiesFlushed = null\n    this._legacy = !!opts.legacy\n\n    this.opening = this._open(opts)\n    this.opening.catch(noop)\n  }\n\n  ready () {\n    return this.opening\n  }\n\n  addMonitor (s) {\n    if (s._monitorIndex >= 0) return\n    s._monitorIndex = this.monitors.push(s) - 1\n  }\n\n  removeMonitor (s) {\n    if (s._monitorIndex < 0) return\n    const head = this.monitors.pop()\n    if (head !== s) this.monitors[(head._monitorIndex = s._monitorIndex)] = head\n    s._monitorIndex = -1\n  }\n\n  emitManifest () {\n    for (let i = this.monitors.length - 1; i >= 0; i--) {\n      this.monitors[i].emit('manifest')\n    }\n  }\n\n  createUserDataStream (opts, session = this.state) {\n    return session.storage.createUserDataStream(opts)\n  }\n\n  allSessions () {\n    const sessions = []\n    for (const state of this.sessionStates) {\n      if (state.sessions.length) sessions.push(...state.sessions)\n    }\n    return sessions\n  }\n\n  hasSession () {\n    return this.activeSessions !== 0\n  }\n\n  checkIfIdle () {\n    if (!this.opened || this.destroyed === true || this.hasSession() === true) return\n    if (this.replicator.idle() === false) return\n    if (this.state === null || this.state.mutex.idle() === false) return\n    this.onidle()\n  }\n\n  async lockExclusive () {\n    if (this.exclusive === null) this.exclusive = new Mutex()\n    await this.exclusive.lock()\n  }\n\n  unlockExclusive () {\n    if (this.exclusive !== null) this.exclusive.unlock()\n  }\n\n  async _open (opts) {\n    try {\n      await this._tryOpen(opts)\n    } catch (err) {\n      this.onidle()\n      throw err\n    }\n\n    this.opened = true\n  }\n\n  async _tryOpen (opts) {\n    if (opts.preopen) await opts.preopen // just a hook to allow exclusive access here...\n\n    let storage = await this.db.resume(this.discoveryKey)\n\n    let overwrite = opts.overwrite === true\n\n    const force = opts.force === true\n    const createIfMissing = opts.createIfMissing !== false\n    // kill this flag soon\n    const legacy = !!opts.legacy\n\n    // default to true for now if no manifest is provided\n    let compat = opts.compat === true || (opts.compat !== false && !opts.manifest)\n\n    let header = storage ? parseHeader(await getCoreInfo(storage)) : null\n\n    if (force && opts.key && header && !b4a.equals(header.key, opts.key)) {\n      overwrite = true\n    }\n\n    if (!header && (opts.discoveryKey && !(opts.key || opts.manifest))) {\n      throw STORAGE_EMPTY('No Hypercore is stored here')\n    }\n\n    if (!header || overwrite) {\n      if (!createIfMissing) {\n        throw STORAGE_EMPTY('No Hypercore is stored here')\n      }\n\n      if (compat) {\n        if (opts.key && opts.keyPair && !b4a.equals(opts.key, opts.keyPair.publicKey)) {\n          throw BAD_ARGUMENT('Key must match publicKey when in compat mode')\n        }\n      }\n\n      const keyPair = opts.keyPair || (opts.key ? null : crypto.keyPair())\n\n      const defaultManifest = !opts.manifest && (!!opts.compat || !opts.key || !!(keyPair && b4a.equals(opts.key, keyPair.publicKey)))\n      const manifest = defaultManifest ? Verifier.defaultSignerManifest(opts.key || keyPair.publicKey) : Verifier.createManifest(opts.manifest)\n\n      header = {\n        key: opts.key || (compat ? manifest.signers[0].publicKey : Verifier.manifestHash(manifest)),\n        manifest,\n        keyPair: keyPair ? { publicKey: keyPair.publicKey, secretKey: keyPair.secretKey || null } : null,\n        frozen: false,\n        userData: [],\n        tree: {\n          fork: 0,\n          length: 0,\n          rootHash: null,\n          signature: null\n        },\n        hints: {\n          reorgs: [],\n          contiguousLength: 0\n        }\n      }\n\n      const discoveryKey = opts.discoveryKey || crypto.discoveryKey(header.key)\n\n      storage = await this.db.create({\n        key: header.key,\n        manifest,\n        keyPair,\n        frozen: false,\n        discoveryKey,\n        userData: opts.userData || [],\n        alias: opts.alias || null\n      })\n    }\n\n    // unslab the long lived buffers to avoid keeping the slab alive\n    header.key = unslab(header.key)\n\n    if (header.tree) {\n      header.tree.rootHash = unslab(header.tree.rootHash)\n      header.tree.signature = unslab(header.tree.signature)\n    }\n\n    if (header.keyPair) {\n      header.keyPair.publicKey = unslab(header.keyPair.publicKey)\n      header.keyPair.secretKey = unslab(header.keyPair.secretKey)\n    }\n\n    if (header.keyPair) {\n      header.keyPair.publicKey = unslab(header.keyPair.publicKey)\n      header.keyPair.secretKey = unslab(header.keyPair.secretKey)\n    }\n\n    if (opts.manifest) {\n      // if we provide a manifest and no key, verify that the stored key is the same\n      if (!opts.key && !Verifier.isValidManifest(header.key, Verifier.createManifest(opts.manifest))) {\n        throw STORAGE_CONFLICT('Manifest does not hash to provided key')\n      }\n\n      if (!header.manifest) header.manifest = opts.manifest\n    }\n\n    if (opts.key && !b4a.equals(header.key, opts.key)) {\n      throw STORAGE_CONFLICT('Another Hypercore is stored here')\n    }\n\n    // if we signalled compat, but already now this core isn't disable it\n    if (compat && header.manifest && !Verifier.isCompat(header.key, header.manifest)) {\n      compat = false\n    } else if (!compat && header.manifest && Verifier.isCompat(header.key, header.manifest)) {\n      compat = true\n    }\n\n    const prologue = header.manifest ? header.manifest.prologue : null\n\n    const bitfield = await Bitfield.open(storage, header.tree.length)\n\n    const treeInfo = {\n      fork: header.tree.fork,\n      length: header.tree.length,\n      signature: header.tree.signature,\n      roots: header.tree.length ? await MerkleTree.getRootsFromStorage(storage, header.tree.length) : [],\n      prologue\n    }\n\n    if (overwrite) {\n      const tx = storage.write()\n      tx.deleteTreeNodeRange(0, -1)\n      tx.deleteBlockRange(0, -1)\n      bitfield.clear(tx)\n      await tx.flush()\n    }\n\n    for await (const { key, value } of storage.createUserDataStream()) {\n      header.userData.push({ key, value: unslab(value) })\n    }\n\n    const len = bitfield.findFirst(false, header.hints.contiguousLength)\n    if (header.hints.contiguousLength !== len) {\n      header.hints.contiguousLength = len\n      const tx = storage.write()\n      tx.setHints({ contiguousLength: len })\n      await tx.flush()\n    }\n\n    // to unslab\n    if (header.manifest) {\n      header.manifest = Verifier.createManifest(header.manifest)\n    }\n\n    const verifier = header.manifest ? new Verifier(header.key, header.manifest, { crypto, legacy }) : null\n\n    this.storage = storage\n    this.header = header\n    this.compat = compat\n    this.bitfield = bitfield\n    this.verifier = verifier\n    this.state = new SessionState(this, null, storage, treeInfo, null)\n\n    if (this.key === null) this.key = this.header.key\n    if (this.discoveryKey === null) this.discoveryKey = crypto.discoveryKey(this.key)\n    if (this.id === null) this.id = z32.encode(this.key)\n    if (this.manifest === null) this.manifest = this.header.manifest\n\n    this._manifestFlushed = !!header.manifest\n  }\n\n  async audit (opts) {\n    await this.state.mutex.lock()\n\n    try {\n      return await audit(this, opts)\n    } finally {\n      this.state._unlock()\n    }\n  }\n\n  async setManifest (manifest) {\n    await this.state.mutex.lock()\n\n    try {\n      if (manifest && this.header.manifest === null) {\n        if (!Verifier.isValidManifest(this.header.key, manifest)) throw INVALID_CHECKSUM('Manifest hash does not match')\n\n        const tx = this.state.createWriteBatch()\n        this._setManifest(tx, Verifier.createManifest(manifest), null)\n        await this.state.flush()\n      }\n    } finally {\n      this.state._unlock()\n    }\n  }\n\n  _setManifest (tx, manifest, keyPair) {\n    if (!manifest && b4a.equals(keyPair.publicKey, this.header.key)) manifest = Verifier.defaultSignerManifest(this.header.key)\n    if (!manifest) return\n\n    const verifier = new Verifier(this.header.key, manifest, { legacy: this._legacy })\n\n    if (verifier.prologue) this.state.prologue = Object.assign({}, verifier.prologue)\n\n    this.manifest = this.header.manifest = manifest\n\n    tx.setAuth({\n      key: this.header.key,\n      discoveryKey: this.discoveryKey,\n      manifest,\n      keyPair: this.header.keyPair\n      // TODO: encryptionKey?\n    })\n\n    this.compat = verifier.compat\n    this.verifier = verifier\n    this._manifestFlushed = false\n\n    this.replicator.onupgrade()\n    this.emitManifest()\n  }\n\n  async copyPrologue (src) {\n    await this.state.mutex.lock()\n\n    try {\n      await src.mutex.lock()\n    } catch (err) {\n      this.state.mutex.unlock()\n      throw err\n    }\n\n    try {\n      await copyPrologue(src, this)\n    } finally {\n      src.mutex.unlock()\n      this.state.mutex.unlock()\n      this.checkIfIdle()\n    }\n  }\n\n  flushed () {\n    return this.state.flushed()\n  }\n\n  async _validateCommit (state, treeLength) {\n    if (this.state.length > state.length) {\n      return false // TODO: partial commit and truncation possible in the future\n    }\n\n    if (this.state.length > treeLength) {\n      for (const root of this.state.roots) {\n        const batchRoot = await MerkleTree.get(state, root.index)\n        if (batchRoot.size !== root.size || !b4a.equals(batchRoot.hash, root.hash)) {\n          return false\n        }\n      }\n    }\n\n    if (this.verifier === null) {\n      return false // easier to assert than upsert\n    }\n\n    return true\n  }\n\n  _verifyBatchUpgrade (batch, manifest) {\n    if (!this.header.manifest) {\n      // compat, drop at some point\n      if (!manifest) manifest = Verifier.defaultSignerManifest(this.header.key)\n\n      if (!manifest || !(Verifier.isValidManifest(this.header.key, manifest) || Verifier.isCompat(this.header.key, manifest))) {\n        throw INVALID_SIGNATURE('Proof contains an invalid manifest') // TODO: proper error type\n      }\n    }\n\n    const verifier = this.verifier || new Verifier(this.header.key, Verifier.createManifest(manifest), { legacy: this._legacy })\n    if (!verifier.verify(batch, batch.signature)) {\n      throw INVALID_SIGNATURE('Proof contains an invalid signature')\n    }\n\n    return manifest\n  }\n\n  async _verifyExclusive ({ batch, bitfield, value, manifest }) {\n    manifest = this._verifyBatchUpgrade(batch, manifest)\n\n    if (!batch.commitable()) return false\n\n    if (this.preupdate !== null) await this.preupdate(batch, this.header.key)\n\n    if (!(await this.state._verifyBlock(batch, bitfield, value, this.header.manifest ? null : manifest))) {\n      return false\n    }\n\n    if (!batch.upgraded && bitfield) {\n      this.replicator.onhave(bitfield.start, bitfield.length, bitfield.drop)\n    }\n\n    return true\n  }\n\n  async _verifyShared () {\n    if (!this._verifies.length) return false\n\n    await this.state.mutex.lock()\n\n    const tx = this.state.createWriteBatch()\n\n    const verifies = this._verifies\n    this._verifies = null\n    this._verified = null\n\n    try {\n      for (const { batch, bitfield, value } of verifies) {\n        if (!batch.commitable()) continue\n\n        if (bitfield) {\n          tx.putBlock(bitfield.start, value)\n        }\n      }\n\n      const bits = new BitInterlude()\n\n      for (let i = 0; i < verifies.length; i++) {\n        const { batch, bitfield, manifest } = verifies[i]\n\n        if (!batch.commitable()) {\n          verifies[i] = null // signal that we cannot commit this one\n          continue\n        }\n\n        if (bitfield) {\n          bits.setRange(bitfield.start, bitfield.start + 1, true)\n        }\n\n        // if we got a manifest AND its strictly a non compat one, lets store it\n        if (manifest && this.header.manifest === null) {\n          if (!Verifier.isValidManifest(this.header.key, manifest)) throw INVALID_CHECKSUM('Manifest hash does not match')\n          this._setManifest(tx, manifest, null)\n        }\n\n        if (batch.commitable()) batch.commit(tx)\n      }\n\n      const ranges = bits.flush(tx, this.bitfield)\n\n      await this.state.flush()\n\n      for (const { start, end, value } of ranges) {\n        this._setBitfieldRanges(start, end, value)\n      }\n\n      for (let i = 0; i < verifies.length; i++) {\n        const bitfield = verifies[i] && verifies[i].bitfield\n        if (bitfield) {\n          this.replicator.onhave(bitfield.start, bitfield.length, bitfield.drop)\n          this.updateContiguousLength(bitfield)\n        }\n      }\n    } finally {\n      this.state._clearActiveBatch()\n      this.state.mutex.unlock()\n    }\n\n    return verifies[0] !== null\n  }\n\n  async checkConflict (proof, from) {\n    if (this.state.length < proof.upgrade.length || proof.fork !== this.state.fork) {\n      // out of date this proof - ignore for now\n      return false\n    }\n\n    // sanity check -> no manifest, no way to verify\n    if (!this.header.manifest) {\n      return false\n    }\n\n    const batch = MerkleTree.verifyFullyRemote(this.state, proof)\n\n    try {\n      this._verifyBatchUpgrade(batch, proof.manifest)\n    } catch {\n      return true\n    }\n\n    const roots = await MerkleTree.getRootsFromStorage(this.storage, proof.upgrade.length)\n    const remoteTreeHash = crypto.tree(proof.upgrade.nodes)\n    const localTreeHash = crypto.tree(roots)\n\n    try {\n      const rx = this.state.storage.read()\n      const treeProofPromise = MerkleTree.proof(this.state, rx, {\n        block: null,\n        hash: null,\n        seek: null,\n        upgrade: {\n          start: 0,\n          length: proof.upgrade.length\n        }\n      })\n\n      rx.tryFlush()\n\n      const treeProof = await treeProofPromise\n\n      const verifyBatch = MerkleTree.verifyFullyRemote(this.state, await treeProof.settle())\n      this._verifyBatchUpgrade(verifyBatch, this.header.manifest)\n    } catch {\n      return true\n    }\n\n    // both proofs are valid, now check if they forked\n    if (b4a.equals(localTreeHash, remoteTreeHash)) return false\n\n    await this.state.mutex.lock()\n\n    try {\n      const tx = this.state.createWriteBatch()\n\n      this.header.frozen = true\n\n      tx.setAuth({\n        key: this.header.key,\n        discoveryKey: this.discoveryKey,\n        manifest: this.header.manifest,\n        keyPair: this.header.keyPair,\n        frozen: true\n      })\n\n      await this.state.flush()\n    } finally {\n      this.state.mutex.unlock()\n    }\n\n    // tmp log so we can see these\n    const id = b4a.toString(this.discoveryKey, 'hex')\n    console.log('[hypercore] conflict detected in ' + id + ' (writable=' + !!this.header.keyPair + ',quorum=' + this.header.manifest.quorum + ')')\n    await this._onconflict(proof)\n    return true\n  }\n\n  async verifyReorg (proof) {\n    const batch = new ReorgBatch(this.state)\n    await MerkleTree.reorg(this.state, proof, batch)\n    const manifest = this._verifyBatchUpgrade(batch, proof.manifest)\n\n    if (manifest && !this.header.manifest) {\n      await this.state.mutex.lock()\n      try {\n        if (manifest && this.header.manifest === null) {\n          const tx = this.state.createWriteBatch()\n          this._setManifest(tx, Verifier.createManifest(manifest), null)\n          await this.state.flush()\n        }\n      } finally {\n        this.state._unlock()\n      }\n    }\n\n    return batch\n  }\n\n  async verify (proof, from) {\n    // We cannot apply \"other forks\" atm.\n    // We should probably still try and they are likely super similar for non upgrades\n    // but this is easy atm (and the above layer will just retry)\n    if (proof.fork !== this.state.fork) return false\n\n    const batch = await MerkleTree.verify(this.state, proof)\n    if (!batch.commitable()) return false\n\n    const value = (proof.block && proof.block.value) || null\n    const op = {\n      batch,\n      bitfield: value && { drop: false, start: proof.block.index, length: 1 },\n      value,\n      manifest: proof.manifest,\n      from\n    }\n\n    if (batch.upgraded) {\n      return this._verifyExclusive(op)\n    }\n\n    if (this._verifies !== null) {\n      const verifies = this._verifies\n      const i = verifies.push(op)\n      await this._verified\n      return verifies[i] !== null\n    }\n\n    this._verifies = [op]\n    this._verified = this._verifyShared()\n\n    return this._verified\n  }\n\n  async reorg (batch) {\n    if (!batch.commitable()) return false\n\n    this.truncating++\n\n    try {\n      await this.state.reorg(batch)\n    } finally {\n      this.truncating--\n    }\n\n    return true\n  }\n\n  openSkipBitfield () {\n    if (this.skipBitfield !== null) return this.skipBitfield\n    this.skipBitfield = new RemoteBitfield()\n    const buf = this.bitfield.toBuffer(this.state.length)\n    const bitfield = new Uint32Array(buf.buffer, buf.byteOffset, buf.byteLength / 4)\n    this.skipBitfield.insert(0, bitfield)\n    return this.skipBitfield\n  }\n\n  _setBitfieldRanges (start, end, value) {\n    this.bitfield.setRange(start, end, value)\n    if (this.skipBitfield !== null) this.skipBitfield.setRange(start, end, value)\n  }\n\n  close () {\n    if (!this.closing) this.closing = this._close()\n    return this.closing\n  }\n\n  updateContiguousLength (bitfield) {\n    const contig = updateContigBatch(this.header.hints.contiguousLength, bitfield, this.bitfield)\n\n    if (contig.length !== -1 && contig.length !== this.header.hints.contiguousLength) {\n      this.header.hints.contiguousLength = contig.length\n    }\n  }\n\n  onappend (tree, bitfield) {\n    this.header.tree = tree\n\n    if (!bitfield) {\n      this.replicator.onupgrade()\n      return\n    }\n\n    this.replicator.cork()\n\n    const { start, length, drop } = bitfield\n\n    this._setBitfieldRanges(start, start + length, true)\n    this.updateContiguousLength({ start, length, drop: false })\n\n    this.replicator.onupgrade()\n    this.replicator.onhave(start, length, drop)\n    this.replicator.uncork()\n  }\n\n  ontruncate (tree, { start, length }) {\n    if (tree) this.header.tree = tree\n\n    this.replicator.cork()\n\n    this.replicator.ontruncate(start, length)\n    this.replicator.onhave(start, length, true)\n    this.replicator.onupgrade()\n    this.replicator.uncork()\n\n    for (const sessionState of this.sessionStates) {\n      if (start < sessionState.snapshotCompatLength) sessionState.snapshotCompatLength = start\n    }\n\n    this._setBitfieldRanges(start, start + length, false)\n    this.updateContiguousLength({ start, length, drop: true })\n  }\n\n  async _onconflict (proof) {\n    await this.replicator.onconflict()\n\n    for (let i = this.monitors.length - 1; i >= 0; i--) {\n      const s = this.monitors[i]\n      s.emit('conflict', proof.upgrade.length, proof.fork, proof)\n    }\n\n    const err = new Error('Two conflicting signatures exist for length ' + proof.upgrade.length)\n    await this.closeAllSessions(err)\n  }\n\n  async closeAllSessions (err) {\n    // this.sessions modifies itself when a session closes\n    // This way we ensure we indeed iterate over all sessions\n    const sessions = this.allSessions()\n\n    const all = []\n    for (const s of sessions) all.push(s.close({ error: err, force: false })) // force false or else infinite recursion\n    await Promise.allSettled(all)\n  }\n\n  async destroy () {\n    if (this.destroyed === true) return\n    this.destroyed = true\n\n    if (this.hasSession() === true) throw new Error('Cannot destroy while sessions are open')\n\n    const weakSessions = this.allSessions()\n\n    if (this.replicator) this.replicator.destroy()\n    if (this.state) await this.state.close()\n\n    // close all pending weak sessions...\n    for (const s of weakSessions) s.close().catch(noop)\n  }\n\n  async _close () {\n    if (this.opened === false) await this.opening\n    if (this.hasSession() === true) throw new Error('Cannot close while sessions are open')\n\n    if (this.replicator) await this.replicator.close()\n\n    await this.destroy()\n    if (this.autoClose) await this.storage.store.close()\n\n    this.closed = true\n  }\n}\n\nfunction updateContigBatch (start, upd, bitfield) {\n  const end = upd.start + upd.length\n\n  let c = start\n\n  if (upd.drop) {\n    // If we dropped a block in the current contig range, \"downgrade\" it\n    if (c > upd.start) {\n      c = upd.start\n    }\n  } else {\n    if (c <= end && c >= upd.start) {\n      c = end\n      while (bitfield.get(c)) c++\n    }\n  }\n\n  if (c === start) {\n    return {\n      length: -1\n    }\n  }\n\n  if (c > start) {\n    return {\n      length: c\n    }\n  }\n\n  return {\n    length: c\n  }\n}\n\nfunction getDefaultTree () {\n  return {\n    fork: 0,\n    length: 0,\n    rootHash: null,\n    signature: null\n  }\n}\n\nfunction parseHeader (info) {\n  if (!info) return null\n\n  return {\n    key: info.key,\n    manifest: info.manifest,\n    external: null,\n    keyPair: info.keyPair,\n    userData: [],\n    tree: info.head || getDefaultTree(),\n    hints: {\n      reorgs: [],\n      contiguousLength: info.hints ? info.hints.contiguousLength : 0\n    }\n  }\n}\n\nfunction noop () {}\n\nasync function getCoreInfo (storage) {\n  const r = storage.read()\n\n  const auth = r.getAuth()\n  const head = r.getHead()\n  const hints = r.getHints()\n\n  r.tryFlush()\n\n  return {\n    ...await auth,\n    head: await head,\n    hints: await hints\n  }\n}\nmodule.exports = class Download {\n  constructor (session, range) {\n    this.session = session\n    this.range = range\n    this.request = null\n    this.opened = false\n    this.opening = this._open()\n    this.opening.catch(noop)\n  }\n\n  ready () {\n    return this.opening\n  }\n\n  async _open () {\n    if (this.session.opened === false) await this.session.opening\n    this._download()\n    this.opened = true\n  }\n\n  async done () {\n    await this.ready()\n\n    try {\n      return await this.request.promise\n    } catch (err) {\n      if (isSessionMoved(err)) return this._download()\n      throw err\n    }\n  }\n\n  _download () {\n    const activeRequests = (this.range && this.range.activeRequests) || this.session.activeRequests\n    this.request = this.session.core.replicator.addRange(activeRequests, this.range)\n    this.request.promise.catch(noop)\n    return this.request.promise\n  }\n\n  /**\n   * Deprecated. Use `range.done()`.\n   */\n  downloaded () {\n    return this.done()\n  }\n\n  destroy () {\n    this._destroyBackground().catch(noop)\n  }\n\n  async _destroyBackground () {\n    if (this.opened === false) await this.ready()\n    if (this.request.context) this.request.context.detach(this.request)\n  }\n}\n\nfunction noop () {}\n\nfunction isSessionMoved (err) {\n  return err.code === 'SESSION_MOVED'\n}\nconst TICKS = 16\n\nmodule.exports = class HotswapQueue {\n  constructor () {\n    this.priorities = [[], [], []]\n  }\n\n  * pick (peer) {\n    for (let i = 0; i < this.priorities.length; i++) {\n      // try first one more than second one etc etc\n      let ticks = (this.priorities.length - i) * TICKS\n      const queue = this.priorities[i]\n\n      for (let j = 0; j < queue.length; j++) {\n        const r = j + Math.floor(Math.random() * queue.length - j)\n        const a = queue[j]\n        const b = queue[r]\n\n        if (r !== j) {\n          queue[(b.hotswap.index = j)] = b\n          queue[(a.hotswap.index = r)] = a\n        }\n\n        if (hasInflight(b, peer)) continue\n\n        yield b\n\n        if (--ticks <= 0) break\n      }\n    }\n  }\n\n  add (block) {\n    if (block.hotswap !== null) this.remove(block)\n    if (block.inflight.length === 0 || block.inflight.length >= 3) return\n\n    // TODO: also use other stuff to determine queue prio\n    const queue = this.priorities[block.inflight.length - 1]\n\n    const index = queue.push(block) - 1\n    block.hotswap = { ref: this, queue, index }\n  }\n\n  remove (block) {\n    const hotswap = block.hotswap\n    if (hotswap === null) return\n\n    block.hotswap = null\n    const head = hotswap.queue.pop()\n    if (head === block) return\n    hotswap.queue[(head.hotswap.index = hotswap.index)] = head\n  }\n}\n\nfunction hasInflight (block, peer) {\n  for (let j = 0; j < block.inflight.length; j++) {\n    if (block.inflight[j].peer === peer) return true\n  }\n  return false\n}\nmodule.exports = class Info {\n  constructor (opts = {}) {\n    this.key = opts.key\n    this.discoveryKey = opts.discoveryKey\n    this.length = opts.length || 0\n    this.contiguousLength = opts.contiguousLength || 0\n    this.byteLength = opts.byteLength || 0\n    this.fork = opts.fork || 0\n    this.padding = opts.padding || 0\n    this.storage = opts.storage || null\n  }\n\n  static async from (session, opts = {}) {\n    return new Info({\n      key: session.key,\n      discoveryKey: session.discoveryKey,\n      length: session.length,\n      contiguousLength: session.contiguousLength,\n      byteLength: session.byteLength,\n      fork: session.fork,\n      padding: session.padding,\n      storage: opts.storage ? await this.storage(session) : null\n    })\n  }\n\n  static async storage (session) {\n    const { oplog, tree, blocks, bitfield } = session.core\n    try {\n      return {\n        oplog: await Info.bytesUsed(oplog.storage),\n        tree: await Info.bytesUsed(tree.storage),\n        blocks: await Info.bytesUsed(blocks.storage),\n        bitfield: await Info.bytesUsed(bitfield.storage)\n      }\n    } catch {\n      return null\n    }\n  }\n\n  static bytesUsed (file) {\n    return new Promise((resolve, reject) => {\n      file.stat((err, st) => {\n        if (err) {\n          resolve(0) // prob just file not found (TODO, improve)\n        } else if (typeof st.blocks !== 'number') {\n          reject(new Error('cannot determine bytes used'))\n        } else {\n          resolve(st.blocks * 512)\n        }\n      })\n    })\n  }\n}\nconst flat = require('flat-tree')\nconst crypto = require('hypercore-crypto')\nconst b4a = require('b4a')\nconst unslab = require('unslab')\nconst caps = require('./caps')\nconst { INVALID_PROOF, INVALID_CHECKSUM, INVALID_OPERATION, BAD_ARGUMENT, ASSERTION } = require('hypercore-errors')\n\nclass NodeQueue {\n  constructor (nodes, extra = null) {\n    this.i = 0\n    this.nodes = nodes\n    this.extra = extra\n    this.length = nodes.length + (this.extra === null ? 0 : 1)\n  }\n\n  shift (index) {\n    if (this.extra !== null && this.extra.index === index) {\n      const node = this.extra\n      this.extra = null\n      this.length--\n      return node\n    }\n\n    if (this.i >= this.nodes.length) {\n      throw INVALID_OPERATION('Expected node ' + index + ', got (nil)')\n    }\n\n    const node = this.nodes[this.i++]\n    if (node.index !== index) {\n      throw INVALID_OPERATION('Expected node ' + index + ', got node ' + node.index)\n    }\n\n    this.length--\n    return node\n  }\n}\n\nclass MerkleTreeBatch {\n  constructor (session) {\n    this.fork = session.fork\n    this.roots = [...session.roots]\n    this.length = session.length\n    this.signature = session.signature\n    this.ancestors = session.length\n    this.byteLength = session.byteLength\n    this.prologue = session.prologue\n    this.hashCached = null\n\n    this.committed = false\n    this.truncated = false\n    this.treeLength = session.length\n    this.treeFork = session.fork\n    this.storage = session.storage\n    this.session = session\n    this.nodes = []\n    this.upgraded = false\n  }\n\n  checkout (length, additionalRoots) {\n    const roots = []\n    let r = 0\n\n    const head = 2 * length - 2\n    const gaps = new Set()\n    const all = new Map()\n\n    // additional roots is so the original roots can be passed (we mutate the array in appendRoot)\n    if (additionalRoots) {\n      for (const node of additionalRoots) all.set(node.index, node)\n    }\n\n    for (const node of this.nodes) all.set(node.index, node)\n\n    for (const index of flat.fullRoots(head + 2)) {\n      const left = flat.leftSpan(index)\n      if (left !== 0) gaps.add(left - 1)\n\n      if (r < this.roots.length && this.roots[r].index === index) {\n        roots.push(this.roots[r++])\n        continue\n      }\n      const node = all.get(index)\n      if (!node) throw new BAD_ARGUMENT('root missing for given length')\n      roots.push(node)\n    }\n\n    this.roots = roots\n    this.length = length\n    this.byteLength = totalSize(roots)\n    this.hashCached = null\n    this.signature = null\n\n    for (let i = 0; i < this.nodes.length; i++) {\n      const index = this.nodes[i].index\n      if (index <= head && !gaps.has(index)) continue\n      const last = this.nodes.pop()\n      if (i < this.nodes.length) this.nodes[i--] = last\n    }\n  }\n\n  prune (length) {\n    if (length === 0) return\n\n    const head = 2 * length - 2\n    const gaps = new Set()\n\n    // TODO: make a function for this in flat-tree\n    for (const index of flat.fullRoots(head + 2)) {\n      const left = flat.leftSpan(index)\n      if (left !== 0) gaps.add(left - 1)\n    }\n\n    for (let i = 0; i < this.nodes.length; i++) {\n      const index = this.nodes[i].index\n      if (index > head || gaps.has(index)) continue\n      const last = this.nodes.pop()\n      if (i < this.nodes.length) this.nodes[i--] = last\n    }\n  }\n\n  clone () {\n    const b = new MerkleTreeBatch(this.session)\n\n    b.fork = this.fork\n    b.roots = [...this.roots]\n    b.length = this.length\n    b.byteLength = this.byteLength\n    b.signature = this.signature\n    b.treeLength = this.treeLength\n    b.treeFork = this.treeFork\n    b.tree = this.tree\n    b.nodes = [...this.nodes]\n    b.upgraded = this.upgraded\n\n    return b\n  }\n\n  hash () {\n    if (this.hashCached === null) this.hashCached = unslab(crypto.tree(this.roots))\n    return this.hashCached\n  }\n\n  signable (manifestHash) {\n    return caps.treeSignable(manifestHash, this.hash(), this.length, this.fork)\n  }\n\n  signableCompat (noHeader) {\n    return caps.treeSignableCompat(this.hash(), this.length, this.fork, noHeader)\n  }\n\n  get (index) {\n    if (index >= this.length * 2) {\n      return null\n    }\n\n    for (const n of this.nodes) {\n      if (n.index === index) return n\n    }\n\n    return getTreeNodeFromStorage(this.session.storage, index)\n  }\n\n  // deprecated, use sssion proof instead\n  proof (batch, { block, hash, seek, upgrade }) {\n    return generateProof(this.session, batch, block, hash, seek, upgrade)\n  }\n\n  verifyUpgrade (proof) {\n    const unverified = verifyTree(proof, this.nodes)\n\n    if (!proof.upgrade) throw INVALID_OPERATION('Expected upgrade proof')\n\n    return verifyUpgrade(proof, unverified, this)\n  }\n\n  addNodesUnsafe (nodes) {\n    for (let i = 0; i < nodes.length; i++) {\n      this.nodes.push(nodes[i])\n    }\n  }\n\n  append (buf) {\n    const head = this.length * 2\n    const ite = flat.iterator(head)\n    const node = blockNode(head, buf)\n\n    this.appendRoot(node, ite)\n  }\n\n  appendRoot (node, ite) {\n    node = unslabNode(node)\n    this.hashCached = null\n    this.upgraded = true\n    this.length += ite.factor / 2\n    this.byteLength += node.size\n    this.roots.push(node)\n    this.nodes.push(node)\n\n    while (this.roots.length > 1) {\n      const a = this.roots[this.roots.length - 1]\n      const b = this.roots[this.roots.length - 2]\n\n      // TODO: just have a peek sibling instead? (pretty sure it's always the left sib as well)\n      if (ite.sibling() !== b.index) {\n        ite.sibling() // unset so it always points to last root\n        break\n      }\n\n      const node = unslabNode(parentNode(ite.parent(), a, b))\n      this.nodes.push(node)\n      this.roots.pop()\n      this.roots.pop()\n      this.roots.push(node)\n    }\n  }\n\n  commitable () {\n    return this.treeFork === this.session.fork && (\n      this.upgraded\n        ? this.treeLength === this.session.length\n        : this.treeLength <= this.session.length\n    )\n  }\n\n  commit (tx) {\n    if (tx === undefined) throw INVALID_OPERATION('No database batch was passed')\n    if (!this.commitable()) throw INVALID_OPERATION('Tree was modified during batch, refusing to commit')\n\n    if (this.upgraded) this._commitUpgrade(tx)\n\n    for (let i = 0; i < this.nodes.length; i++) {\n      const node = this.nodes[i]\n      tx.putTreeNode(node)\n    }\n\n    this.committed = true\n\n    return this\n  }\n\n  _commitUpgrade (tx) {\n    // TODO: If easy to detect, we should refuse an trunc+append here without a fork id\n    // change. Will only happen on user error so mostly to prevent that.\n\n    if (this.ancestors < this.treeLength) {\n      tx.deleteTreeNodeRange(this.ancestors * 2, this.treeLength * 2)\n\n      if (this.ancestors > 0) {\n        const head = this.ancestors * 2\n        const ite = flat.iterator(head - 2)\n\n        while (true) {\n          if (ite.contains(head) && ite.index < head) {\n            tx.deleteTreeNode(ite.index)\n          }\n          if (ite.offset === 0) break\n          ite.parent()\n        }\n\n        this.truncated = true\n      }\n    }\n  }\n\n  seek (bytes, padding) {\n    return new ByteSeeker(this, this, bytes, padding)\n  }\n\n  byteRange (index) {\n    const rx = this.storage.read()\n    const range = getByteRange(this, index, rx)\n    rx.tryFlush()\n\n    return range\n  }\n\n  byteOffset (index) {\n    if (index === 2 * this.length) return this.byteLength\n\n    const rx = this.storage.read()\n    const offset = getByteOffset(this, index, rx)\n    rx.tryFlush()\n\n    return offset\n  }\n\n  async restore (length) {\n    if (length === this.length) return this\n\n    const roots = unslabNodes(await MerkleTree.getRootsFromStorage(this.storage, length))\n\n    this.roots = roots\n    this.length = length\n    this.byteLength = totalSize(roots)\n    this.ancestors = length\n\n    for (const node of roots) this.byteLength += node.size\n\n    return this\n  }\n}\n\nclass ReorgBatch extends MerkleTreeBatch {\n  constructor (session) {\n    super(session)\n\n    this.roots = []\n    this.length = 0\n    this.byteLength = 0\n    this.diff = null\n    this.ancestors = 0\n    // We set upgraded because reorgs are signed so hit will\n    // hit the same code paths (like the treeLength check in commit)\n    this.upgraded = true\n    this.want = {\n      nodes: 0,\n      start: 0,\n      end: 0\n    }\n  }\n\n  get finished () {\n    return this.want === null\n  }\n\n  update (proof) {\n    if (this.want === null) return true\n\n    const nodes = []\n    const root = verifyTree(proof, nodes)\n\n    if (root === null || !b4a.equals(root.hash, this.diff.hash)) return false\n\n    this.nodes.push(...nodes)\n    return this._update(nodes)\n  }\n\n  async _update (nodes) {\n    const n = new Map()\n    for (const node of nodes) n.set(node.index, node)\n\n    let diff = null\n    const ite = flat.iterator(this.diff.index)\n    const startingDiff = this.diff\n\n    while ((ite.index & 1) !== 0) {\n      const left = n.get(ite.leftChild())\n      if (!left) break\n\n      const existing = await getTreeNodeFromStorage(this.session.storage, left.index)\n      if (!existing || !b4a.equals(existing.hash, left.hash)) {\n        diff = left\n      } else {\n        diff = n.get(ite.sibling())\n      }\n    }\n\n    if ((this.diff.index & 1) === 0) return true\n    if (diff === null) return false\n    if (startingDiff !== this.diff) return false\n\n    return this._updateDiffRoot(diff)\n  }\n\n  _updateDiffRoot (diff) {\n    if (this.want === null) return true\n\n    const spans = flat.spans(diff.index)\n    const start = spans[0] / 2\n    const end = Math.min(this.treeLength, spans[1] / 2 + 1)\n    const len = end - start\n\n    this.ancestors = start\n    this.diff = diff\n\n    if ((diff.index & 1) === 0 || this.want.start >= this.treeLength || len <= 0) {\n      this.want = null\n      return true\n    }\n\n    this.want.start = start\n    this.want.end = end\n    this.want.nodes = log2(spans[1] - spans[0] + 2) - 1\n\n    return false\n  }\n}\n\nclass ByteSeeker {\n  constructor (session, bytes, padding = 0) {\n    this.session = session\n    this.bytes = bytes\n    this.padding = padding\n\n    const size = session.byteLength - (session.length * padding)\n\n    this.start = bytes >= size ? session.length : 0\n    this.end = bytes < size ? session.length : 0\n  }\n\n  async _seek (bytes) {\n    if (!bytes) return [0, 0]\n\n    for (const node of this.session.roots) { // all async ticks happen once we find the root so safe\n      const size = getUnpaddedSize(node, this.padding, null)\n\n      if (bytes === size) return [flat.rightSpan(node.index) + 2, 0]\n      if (bytes > size) {\n        bytes -= size\n        continue\n      }\n\n      const ite = flat.iterator(node.index)\n\n      while ((ite.index & 1) !== 0) {\n        const l = await getTreeNodeFromStorage(this.session.storage, ite.leftChild())\n\n        if (l) {\n          const size = getUnpaddedSize(l, this.padding, ite)\n\n          if (size === bytes) return [ite.rightSpan() + 2, 0]\n          if (size > bytes) continue\n          bytes -= size\n          ite.sibling()\n        } else {\n          ite.parent()\n          return [ite.index, bytes]\n        }\n      }\n\n      return [ite.index, bytes]\n    }\n\n    return null\n  }\n\n  async update () { // TODO: combine _seek and this, much simpler\n    const res = await this._seek(this.bytes)\n    if (!res) return null\n    if ((res[0] & 1) === 0) return [res[0] / 2, res[1]]\n\n    const span = flat.spans(res[0])\n    this.start = span[0] / 2\n    this.end = span[1] / 2 + 1\n\n    return null\n  }\n}\n\nclass TreeProof {\n  constructor (session, block, hash, seek, upgrade) {\n    this.fork = session.fork\n    this.signature = session.signature\n\n    this.block = block\n    this.hash = hash\n    this.seek = seek\n    this.upgrade = upgrade\n\n    this.pending = {\n      node: null,\n      seek: null,\n      upgrade: null,\n      additionalUpgrade: null\n    }\n  }\n\n  async settle () {\n    const result = { fork: this.fork, block: null, hash: null, seek: null, upgrade: null, manifest: null }\n\n    const [pNode, pSeek, pUpgrade, pAdditional] = await settleProof(this.pending)\n\n    if (this.block) {\n      if (pNode === null) throw INVALID_OPERATION('Invalid block request')\n      result.block = {\n        index: this.block.index,\n        value: null, // populated upstream, alloc it here for simplicity\n        nodes: pNode\n      }\n    } else if (this.hash) {\n      if (pNode === null) throw INVALID_OPERATION('Invalid block request')\n      result.hash = {\n        index: this.hash.index,\n        nodes: pNode\n      }\n    }\n\n    if (this.seek && pSeek !== null) {\n      result.seek = {\n        bytes: this.seek.bytes,\n        nodes: pSeek\n      }\n    }\n\n    if (this.upgrade) {\n      result.upgrade = {\n        start: this.upgrade.start,\n        length: this.upgrade.length,\n        nodes: pUpgrade,\n        additionalNodes: pAdditional || [],\n        signature: this.signature\n      }\n    }\n\n    return result\n  }\n}\n\nclass MerkleTree {\n  static hash (s) {\n    return unslab(crypto.tree(s.roots))\n  }\n\n  static signable (s, namespace) {\n    return caps.treeSignable(namespace, MerkleTree.hash(s), s.length, s.fork)\n  }\n\n  static size (roots) {\n    return totalSize(roots)\n  }\n\n  static span (roots) {\n    return totalSpan(roots)\n  }\n\n  static getRoots (session, length) {\n    return MerkleTree.getRootsFromStorage(session.storage, length)\n  }\n\n  static getRootsFromStorage (storage, length) {\n    const indexes = flat.fullRoots(2 * length)\n    const roots = new Array(indexes.length)\n    const rx = storage.read()\n\n    for (let i = 0; i < indexes.length; i++) {\n      roots[i] = getTreeNodeOrError(rx, indexes[i])\n    }\n\n    rx.tryFlush()\n\n    return Promise.all(roots)\n  }\n\n  static async upgradeable (session, length) {\n    const indexes = flat.fullRoots(2 * length)\n    const roots = new Array(indexes.length)\n    const rx = session.storage.read()\n\n    for (let i = 0; i < indexes.length; i++) {\n      roots[i] = rx.getTreeNode(indexes[i])\n    }\n\n    rx.tryFlush()\n\n    for (const node of await Promise.all(roots)) {\n      if (node === null) return false\n    }\n\n    return true\n  }\n\n  static seek (session, bytes, padding) {\n    return new ByteSeeker(session, bytes, padding)\n  }\n\n  static get (session, index) {\n    return getTreeNodeFromStorage(session.storage, index)\n  }\n\n  static async truncate (session, length, batch, fork = batch.fork) {\n    const head = length * 2\n    const fullRoots = flat.fullRoots(head)\n\n    for (let i = 0; i < fullRoots.length; i++) {\n      const root = fullRoots[i]\n      if (i < batch.roots.length && batch.roots[i].index === root) continue\n\n      while (batch.roots.length > i) batch.roots.pop()\n      batch.roots.push(unslabNode(await getTreeNodeFromStorageOrError(session.storage, root)))\n    }\n\n    while (batch.roots.length > fullRoots.length) {\n      batch.roots.pop()\n    }\n\n    batch.fork = fork\n    batch.length = length\n    batch.ancestors = length\n    batch.byteLength = totalSize(batch.roots)\n    batch.upgraded = true\n\n    return batch\n  }\n\n  static async reorg (session, proof, batch) {\n    let unverified = null\n\n    if (proof.block || proof.hash || proof.seek) {\n      unverified = verifyTree(proof, batch.nodes)\n    }\n\n    if (!verifyUpgrade(proof, unverified, batch)) {\n      throw INVALID_PROOF('Fork proof not verifiable')\n    }\n\n    for (const root of batch.roots) {\n      const existing = await getTreeNodeFromStorage(session.storage, root.index)\n      if (existing && b4a.equals(existing.hash, root.hash)) continue\n      batch._updateDiffRoot(root)\n      break\n    }\n\n    if (batch.diff !== null) {\n      await batch._update(batch.nodes)\n    } else {\n      batch.want = null\n      batch.ancestors = batch.length\n    }\n\n    return batch\n  }\n\n  static verifyFullyRemote (session, proof) {\n    // TODO: impl this less hackishly\n    const batch = new MerkleTreeBatch(session)\n\n    batch.fork = proof.fork\n    batch.roots = []\n    batch.length = 0\n    batch.ancestors = 0\n    batch.byteLength = 0\n\n    let unverified = verifyTree(proof, batch.nodes)\n\n    if (proof.upgrade) {\n      if (verifyUpgrade(proof, unverified, batch)) {\n        unverified = null\n      }\n    }\n\n    return batch\n  }\n\n  static async verify (session, proof) {\n    const batch = new MerkleTreeBatch(session)\n\n    let unverified = verifyTree(proof, batch.nodes)\n\n    if (proof.upgrade) {\n      if (verifyUpgrade(proof, unverified, batch)) {\n        unverified = null\n      }\n    }\n\n    if (unverified) {\n      const verified = await getTreeNodeFromStorageOrError(session.storage, unverified.index)\n      if (!b4a.equals(verified.hash, unverified.hash)) {\n        throw INVALID_CHECKSUM('Invalid checksum at node ' + unverified.index)\n      }\n    }\n\n    return batch\n  }\n\n  static proof (session, rx, { block, hash, seek, upgrade }) {\n    return generateProof(session, rx, block, hash, seek, upgrade)\n  }\n\n  static async missingNodes (session, index, length) {\n    const head = 2 * length\n    const ite = flat.iterator(index)\n\n    // See iterator.rightSpan()\n    const iteRightSpan = ite.index + ite.factor / 2 - 1\n    // If the index is not in the current tree, we do not know how many missing nodes there are...\n    if (iteRightSpan >= head) return 0\n\n    let cnt = 0\n    // TODO: we could prop use a read batch here and do this in blocks of X for perf\n    while (!ite.contains(head) && !(await hasTreeNode(session.storage, ite.index))) {\n      cnt++\n      ite.parent()\n    }\n\n    return cnt\n  }\n\n  static byteOffset (session, index) {\n    return getByteOffsetSession(session, index, null)\n  }\n\n  static byteRange (session, index) {\n    const rx = session.storage.read()\n    const offset = getByteOffsetSession(session, index, rx)\n    const size = getNodeSize(index, rx)\n    rx.tryFlush()\n    return Promise.all([offset, size])\n  }\n}\n\nmodule.exports = {\n  MerkleTreeBatch,\n  ReorgBatch,\n  MerkleTree\n}\n\nasync function getNodeSize (index, rx) {\n  return (await getTreeNodeOrError(rx, index)).size\n}\n\nasync function getByteOffsetSession (session, index, rx) {\n  if (index === 2 * session.length) return session.byteLength\n\n  const treeNodes = rx === null\n    ? await getByteOffsetBatchFlush(session.roots, index, session.storage.read())\n    : await getByteOffsetBatch(session.roots, index, rx)\n\n  let offset = 0\n  for (const node of treeNodes) offset += node.size\n\n  return offset\n}\n\nasync function getByteOffset (tree, index, rx) {\n  if (index === 2 * tree.length) return tree.byteLength\n\n  const treeNodes = await getByteOffsetBatch(tree.roots, index, rx)\n\n  let offset = 0\n  for (const node of treeNodes) offset += node.size\n\n  return offset\n}\n\nfunction getByteOffsetBatchFlush (roots, index, rx) {\n  const treeNodes = getByteOffsetBatch(roots, index, rx)\n  rx.tryFlush()\n  return treeNodes\n}\n\nfunction getByteOffsetBatch (roots, index, rx) {\n  if ((index & 1) === 1) index = flat.leftSpan(index)\n\n  let head = 0\n\n  const promises = []\n\n  for (const node of roots) { // all async ticks happen once we find the root so safe\n    head += 2 * ((node.index - head) + 1)\n\n    if (index >= head) {\n      promises.push(node.size)\n      continue\n    }\n\n    const ite = flat.iterator(node.index)\n\n    while (ite.index !== index) {\n      if (index < ite.index) {\n        ite.leftChild()\n      } else {\n        promises.push(getTreeNodeOrError(rx, ite.leftChild()))\n        ite.sibling()\n      }\n    }\n\n    return Promise.all(promises)\n  }\n\n  throw ASSERTION('Failed to find offset')\n}\n\nfunction getByteRange (tree, index, rx) {\n  const head = 2 * tree.length\n  if (((index & 1) === 0 ? index : flat.rightSpan(index)) >= head) {\n    throw BAD_ARGUMENT('Index is out of bounds')\n  }\n\n  const offset = getByteOffset(tree, index, rx)\n  const size = getNodeSize(index, rx)\n\n  return Promise.all([offset, size])\n}\n\n// All the methods needed for proof verification\n\nfunction verifyTree ({ block, hash, seek }, nodes) {\n  const untrustedNode = block\n    ? { index: 2 * block.index, value: block.value, nodes: block.nodes }\n    : hash\n      ? { index: hash.index, value: null, nodes: hash.nodes }\n      : null\n\n  if (untrustedNode === null && (!seek || !seek.nodes.length)) return null\n\n  let root = null\n\n  if (seek && seek.nodes.length) {\n    const ite = flat.iterator(seek.nodes[0].index)\n    const q = new NodeQueue(seek.nodes)\n\n    root = q.shift(ite.index)\n    nodes.push(root)\n\n    while (q.length > 0) {\n      const node = q.shift(ite.sibling())\n\n      root = parentNode(ite.parent(), root, node)\n      nodes.push(node)\n      nodes.push(root)\n    }\n  }\n\n  if (untrustedNode === null) return root\n\n  const ite = flat.iterator(untrustedNode.index)\n  const blockHash = untrustedNode.value && blockNode(ite.index, untrustedNode.value)\n\n  const q = new NodeQueue(untrustedNode.nodes, root)\n\n  root = blockHash || q.shift(ite.index)\n  nodes.push(root)\n\n  while (q.length > 0) {\n    const node = q.shift(ite.sibling())\n\n    root = parentNode(ite.parent(), root, node)\n    nodes.push(node)\n    nodes.push(root)\n  }\n\n  return root\n}\n\nfunction verifyUpgrade ({ fork, upgrade }, blockRoot, batch) {\n  const prologue = batch.prologue\n\n  if (prologue) {\n    const { start, length } = upgrade\n    if (start < prologue.length && (start !== 0 || length < prologue.length)) {\n      throw INVALID_PROOF('Upgrade does not satisfy prologue')\n    }\n  }\n\n  const q = new NodeQueue(upgrade.nodes, blockRoot)\n\n  let grow = batch.roots.length > 0\n  let i = 0\n\n  const to = 2 * (upgrade.start + upgrade.length)\n  const ite = flat.iterator(0)\n\n  for (; ite.fullRoot(to); ite.nextTree()) {\n    if (i < batch.roots.length && batch.roots[i].index === ite.index) {\n      i++\n      continue\n    }\n\n    if (grow) {\n      grow = false\n      const root = ite.index\n      if (i < batch.roots.length) {\n        ite.seek(batch.roots[batch.roots.length - 1].index)\n        while (ite.index !== root) {\n          batch.appendRoot(q.shift(ite.sibling()), ite)\n        }\n        continue\n      }\n    }\n\n    batch.appendRoot(q.shift(ite.index), ite)\n  }\n\n  if (prologue && batch.length === prologue.length) {\n    if (!b4a.equals(prologue.hash, batch.hash())) {\n      throw INVALID_PROOF('Invalid hash')\n    }\n  }\n\n  const extra = upgrade.additionalNodes\n\n  ite.seek(batch.roots[batch.roots.length - 1].index)\n  i = 0\n\n  while (i < extra.length && extra[i].index === ite.sibling()) {\n    batch.appendRoot(extra[i++], ite)\n  }\n\n  while (i < extra.length) {\n    const node = extra[i++]\n\n    while (node.index !== ite.index) {\n      if (ite.factor === 2) throw INVALID_OPERATION('Unexpected node: ' + node.index)\n      ite.leftChild()\n    }\n\n    batch.appendRoot(node, ite)\n    ite.sibling()\n  }\n\n  batch.signature = unslab(upgrade.signature)\n  batch.fork = fork\n\n  return q.extra === null\n}\n\nasync function seekFromHead (session, head, bytes, padding) {\n  const roots = flat.fullRoots(head)\n\n  for (let i = 0; i < roots.length; i++) {\n    const root = roots[i]\n    const node = await getTreeNodeFromStorage(session.storage, root)\n    const size = getUnpaddedSize(node, padding, null)\n\n    if (bytes === size) return root\n    if (bytes > size) {\n      bytes -= size\n      continue\n    }\n\n    return seekTrustedTree(session, root, bytes, padding)\n  }\n\n  return head\n}\n\n// trust that bytes are within the root tree and find the block at bytes\n\nasync function seekTrustedTree (session, root, bytes, padding) {\n  if (!bytes) return root\n\n  const ite = flat.iterator(root)\n\n  while ((ite.index & 1) !== 0) {\n    const l = await getTreeNodeFromStorage(session.storage, ite.leftChild())\n\n    if (l) {\n      const size = getUnpaddedSize(l, padding, ite)\n      if (size === bytes) return ite.index\n      if (size > bytes) continue\n      bytes -= size\n      ite.sibling()\n    } else {\n      ite.parent()\n      return ite.index\n    }\n  }\n\n  return ite.index\n}\n\n// try to find the block at bytes without trusting that is *is* within the root passed\n\nasync function seekUntrustedTree (session, root, bytes, padding) {\n  const offset = await getByteOffsetSession(session, root, null) - (padding ? padding * flat.leftSpan(root) / 2 : 0)\n\n  if (offset > bytes) throw INVALID_OPERATION('Invalid seek')\n  if (offset === bytes) return root\n\n  bytes -= offset\n\n  const node = await getTreeNodeFromStorageOrError(session.storage, root)\n\n  if (getUnpaddedSize(node, padding, null) <= bytes) throw INVALID_OPERATION('Invalid seek')\n\n  return seekTrustedTree(session, root, bytes, padding)\n}\n\n// Below is proof production, ie, construct proofs to verify a request\n// Note, that all these methods are sync as we can statically infer which nodes\n// are needed for the remote to verify given they arguments they passed us\n\nfunction seekProof (session, rx, seekRoot, root, p) {\n  const ite = flat.iterator(seekRoot)\n\n  p.seek = []\n  p.seek.push(getTreeNodeOrError(rx, ite.index))\n\n  while (ite.index !== root) {\n    ite.sibling()\n    p.seek.push(getTreeNodeOrError(rx, ite.index))\n    ite.parent()\n  }\n}\n\nfunction blockAndSeekProof (session, rx, node, seek, seekRoot, root, p) {\n  if (!node) return seekProof(session, rx, seekRoot, root, p)\n\n  const ite = flat.iterator(node.index)\n\n  p.node = []\n  if (!node.value) p.node.push(getTreeNodeOrError(rx, ite.index))\n\n  while (ite.index !== root) {\n    ite.sibling()\n\n    if (seek && ite.contains(seekRoot) && ite.index !== seekRoot) {\n      seekProof(session, rx, seekRoot, ite.index, p)\n    } else {\n      p.node.push(getTreeNodeOrError(rx, ite.index))\n    }\n\n    ite.parent()\n  }\n}\n\nfunction upgradeProof (session, rx, node, seek, from, to, subTree, p) {\n  if (from === 0) p.upgrade = []\n\n  for (const ite = flat.iterator(0); ite.fullRoot(to); ite.nextTree()) {\n    // check if they already have the node\n    if (ite.index + ite.factor / 2 < from) continue\n\n    // connect existing tree\n    if (p.upgrade === null && ite.contains(from - 2)) {\n      p.upgrade = []\n\n      const root = ite.index\n      const target = from - 2\n\n      ite.seek(target)\n\n      while (ite.index !== root) {\n        ite.sibling()\n        if (ite.index > target) {\n          if (p.node === null && p.seek === null && ite.contains(subTree)) {\n            blockAndSeekProof(session, rx, node, seek, subTree, ite.index, p)\n          } else {\n            p.upgrade.push(getTreeNodeOrError(rx, ite.index))\n          }\n        }\n        ite.parent()\n      }\n\n      continue\n    }\n\n    if (p.upgrade === null) {\n      p.upgrade = []\n    }\n\n    // if the subtree included is a child of this tree, include that one\n    // instead of a dup node\n    if (p.node === null && p.seek === null && ite.contains(subTree)) {\n      blockAndSeekProof(session, rx, node, seek, subTree, ite.index, p)\n      continue\n    }\n\n    // add root (can be optimised since the root might be in tree.roots)\n    p.upgrade.push(getTreeNodeOrError(rx, ite.index))\n  }\n}\n\nfunction additionalUpgradeProof (session, rx, from, to, p) {\n  if (from === 0) p.additionalUpgrade = []\n\n  for (const ite = flat.iterator(0); ite.fullRoot(to); ite.nextTree()) {\n    // check if they already have the node\n    if (ite.index + ite.factor / 2 < from) continue\n\n    // connect existing tree\n    if (p.additionalUpgrade === null && ite.contains(from - 2)) {\n      p.additionalUpgrade = []\n\n      const root = ite.index\n      const target = from - 2\n\n      ite.seek(target)\n\n      while (ite.index !== root) {\n        ite.sibling()\n        if (ite.index > target) {\n          p.additionalUpgrade.push(getTreeNodeOrError(rx, ite.index))\n        }\n        ite.parent()\n      }\n\n      continue\n    }\n\n    if (p.additionalUpgrade === null) {\n      p.additionalUpgrade = []\n    }\n\n    // add root (can be optimised since the root is in tree.roots)\n    p.additionalUpgrade.push(getTreeNodeOrError(rx, ite.index))\n  }\n}\n\nfunction nodesToRoot (index, nodes, head) {\n  const ite = flat.iterator(index)\n\n  for (let i = 0; i < nodes; i++) {\n    ite.parent()\n    if (ite.contains(head)) throw BAD_ARGUMENT('Nodes is out of bounds')\n  }\n\n  return ite.index\n}\n\nfunction totalSize (nodes) {\n  let s = 0\n  for (const node of nodes) s += node.size\n  return s\n}\n\nfunction totalSpan (nodes) {\n  let s = 0\n  for (const node of nodes) s += 2 * ((node.index - s) + 1)\n  return s\n}\n\nfunction blockNode (index, value) {\n  return { index, size: value.byteLength, hash: crypto.data(value) }\n}\n\nfunction parentNode (index, a, b) {\n  return { index, size: a.size + b.size, hash: crypto.parent(a, b) }\n}\n\nfunction log2 (n) {\n  let res = 1\n\n  while (n > 2) {\n    n /= 2\n    res++\n  }\n\n  return res\n}\n\nfunction normalizeIndexed (block, hash) {\n  if (block) return { value: true, index: block.index * 2, nodes: block.nodes, lastIndex: block.index }\n  if (hash) return { value: false, index: hash.index, nodes: hash.nodes, lastIndex: flat.rightSpan(hash.index) / 2 }\n  return null\n}\n\nasync function getTreeNodeOrError (rx, index) {\n  const node = await rx.getTreeNode(index)\n  if (node === null) throw INVALID_OPERATION('Expected tree node ' + index + ' from storage, got (nil)')\n  return node\n}\n\nfunction getTreeNodeFromStorageOrError (storage, index) {\n  const rx = storage.read()\n  const p = getTreeNodeOrError(rx, index)\n  rx.tryFlush()\n  return p\n}\n\nfunction getTreeNodeFromStorage (storage, index) {\n  const rx = storage.read()\n  const node = rx.getTreeNode(index)\n  rx.tryFlush()\n  return node\n}\n\nfunction hasTreeNode (storage, index) {\n  const rx = storage.read()\n  const has = rx.hasTreeNode(index)\n  rx.tryFlush()\n  return has\n}\n\nasync function settleProof (p) {\n  const result = [\n    p.node && Promise.all(p.node),\n    p.seek && Promise.all(p.seek),\n    p.upgrade && Promise.all(p.upgrade),\n    p.additionalUpgrade && Promise.all(p.additionalUpgrade)\n  ]\n\n  try {\n    return await Promise.all(result)\n  } catch (err) {\n    if (p.node) await Promise.allSettled(p.node)\n    if (p.seek) await Promise.allSettled(p.seek)\n    if (p.upgrade) await Promise.allSettled(p.upgrade)\n    if (p.additionalUpgrade) await Promise.allSettled(p.additionalUpgrade)\n    throw err\n  }\n}\n\n// tree can be either the merkle tree or a merkle tree batch\nasync function generateProof (session, rx, block, hash, seek, upgrade) {\n  // Important that this does not throw inbetween making the promise arrays\n  // and finalise being called, otherwise there will be lingering promises in the background\n\n  if (session.prologue && upgrade) {\n    upgrade.start = upgrade.start < session.prologue.length ? 0 : upgrade.start\n    upgrade.length = upgrade.start < session.prologue.length ? session.prologue.length : upgrade.length\n  }\n\n  const head = 2 * session.length\n  const from = upgrade ? upgrade.start * 2 : 0\n  const to = upgrade ? from + upgrade.length * 2 : head\n  const node = normalizeIndexed(block, hash)\n\n  // can't do anything as we have no data...\n  if (head === 0) return new TreeProof(session, null, null, null, null)\n\n  if (from >= to || to > head) {\n    throw INVALID_OPERATION('Invalid upgrade')\n  }\n  if (seek && upgrade && node !== null && node.index >= from) {\n    throw INVALID_OPERATION('Cannot both do a seek and block/hash request when upgrading')\n  }\n\n  let subTree = head\n\n  const p = new TreeProof(session, block, hash, seek, upgrade)\n\n  if (node !== null && (!upgrade || node.lastIndex < upgrade.start)) {\n    subTree = nodesToRoot(node.index, node.nodes, to)\n    const seekRoot = seek ? await seekUntrustedTree(session, subTree, seek.bytes, seek.padding) : head\n    blockAndSeekProof(session, rx, node, seek, seekRoot, subTree, p.pending)\n  } else if ((node || seek) && upgrade) {\n    subTree = seek ? await seekFromHead(session, to, seek.bytes, seek.padding) : node.index\n  }\n\n  if (upgrade) {\n    upgradeProof(session, rx, node, seek, from, to, subTree, p.pending)\n    if (head > to) additionalUpgradeProof(session, rx, to, head, p.pending)\n  }\n\n  return p\n}\n\nfunction getUnpaddedSize (node, padding, ite) {\n  return padding === 0 ? node.size : node.size - padding * (ite ? ite.countLeaves() : flat.countLeaves(node.index))\n}\n\nfunction unslabNodes (nodes) {\n  for (const node of nodes) unslabNode(node)\n  return nodes\n}\n\nfunction unslabNode (node) {\n  if (node === null) return node\n  node.hash = unslab(node.hash)\n  return node\n}\nconst c = require('compact-encoding')\nconst b4a = require('b4a')\nconst { DEFAULT_NAMESPACE } = require('./caps')\nconst { INVALID_OPLOG_VERSION } = require('hypercore-errors')\nconst unslab = require('unslab')\n\nconst EMPTY = b4a.alloc(0)\n\nconst MANIFEST_PATCH = 0b00000001\nconst MANIFEST_PROLOGUE = 0b00000010\nconst MANIFEST_LINKED = 0b00000100\n\nconst hashes = {\n  preencode (state, m) {\n    state.end++ // small uint\n  },\n  encode (state, m) {\n    if (m === 'blake2b') {\n      c.uint.encode(state, 0)\n      return\n    }\n\n    throw new Error('Unknown hash: ' + m)\n  },\n  decode (state) {\n    const n = c.uint.decode(state)\n    if (n === 0) return 'blake2b'\n    throw new Error('Unknown hash id: ' + n)\n  }\n}\n\nconst signatures = {\n  preencode (state, m) {\n    state.end++ // small uint\n  },\n  encode (state, m) {\n    if (m === 'ed25519') {\n      c.uint.encode(state, 0)\n      return\n    }\n\n    throw new Error('Unknown signature: ' + m)\n  },\n  decode (state) {\n    const n = c.uint.decode(state)\n    if (n === 0) return 'ed25519'\n    throw new Error('Unknown signature id: ' + n)\n  }\n}\n\nconst signer = {\n  preencode (state, m) {\n    signatures.preencode(state, m.signature)\n    c.fixed32.preencode(state, m.namespace)\n    c.fixed32.preencode(state, m.publicKey)\n  },\n  encode (state, m) {\n    signatures.encode(state, m.signature)\n    c.fixed32.encode(state, m.namespace)\n    c.fixed32.encode(state, m.publicKey)\n  },\n  decode (state) {\n    return {\n      signature: signatures.decode(state),\n      namespace: c.fixed32.decode(state),\n      publicKey: c.fixed32.decode(state)\n    }\n  }\n}\n\nconst signerArray = c.array(signer)\n\nconst prologue = {\n  preencode (state, p) {\n    c.fixed32.preencode(state, p.hash)\n    c.uint.preencode(state, p.length)\n  },\n  encode (state, p) {\n    c.fixed32.encode(state, p.hash)\n    c.uint.encode(state, p.length)\n  },\n  decode (state) {\n    return {\n      hash: c.fixed32.decode(state),\n      length: c.uint.decode(state)\n    }\n  }\n}\n\nconst manifestv0 = {\n  preencode (state, m) {\n    hashes.preencode(state, m.hash)\n    state.end++ // type\n\n    if (m.prologue && m.signers.length === 0) {\n      c.fixed32.preencode(state, m.prologue.hash)\n      return\n    }\n\n    if (m.quorum === 1 && m.signers.length === 1 && !m.allowPatch) {\n      signer.preencode(state, m.signers[0])\n    } else {\n      state.end++ // flags\n      c.uint.preencode(state, m.quorum)\n      signerArray.preencode(state, m.signers)\n    }\n  },\n  encode (state, m) {\n    hashes.encode(state, m.hash)\n\n    if (m.prologue && m.signers.length === 0) {\n      c.uint.encode(state, 0)\n      c.fixed32.encode(state, m.prologue.hash)\n      return\n    }\n\n    if (m.quorum === 1 && m.signers.length === 1 && !m.allowPatch) {\n      c.uint.encode(state, 1)\n      signer.encode(state, m.signers[0])\n    } else {\n      c.uint.encode(state, 2)\n      c.uint.encode(state, m.allowPatch ? 1 : 0)\n      c.uint.encode(state, m.quorum)\n      signerArray.encode(state, m.signers)\n    }\n  },\n  decode (state) {\n    const hash = hashes.decode(state)\n    const type = c.uint.decode(state)\n\n    if (type > 2) throw new Error('Unknown type: ' + type)\n\n    if (type === 0) {\n      return {\n        version: 0,\n        hash,\n        allowPatch: false,\n        quorum: 0,\n        signers: [],\n        prologue: {\n          hash: c.fixed32.decode(state),\n          length: 0\n        },\n        linked: []\n      }\n    }\n\n    if (type === 1) {\n      return {\n        version: 0,\n        hash,\n        allowPatch: false,\n        quorum: 1,\n        signers: [signer.decode(state)],\n        prologue: null,\n        linked: []\n      }\n    }\n\n    const flags = c.uint.decode(state)\n\n    return {\n      version: 0,\n      hash,\n      allowPatch: (flags & 1) !== 0,\n      quorum: c.uint.decode(state),\n      signers: signerArray.decode(state),\n      prologue: null,\n      linked: []\n    }\n  }\n}\n\nconst fixed32Array = c.array(c.fixed32)\n\nconst manifest = exports.manifest = {\n  preencode (state, m) {\n    state.end++ // version\n    if (m.version === 0) return manifestv0.preencode(state, m)\n\n    state.end++ // flags\n    hashes.preencode(state, m.hash)\n\n    c.uint.preencode(state, m.quorum)\n    signerArray.preencode(state, m.signers)\n    if (m.prologue) prologue.preencode(state, m.prologue)\n\n    if (m.linked) {\n      fixed32Array.preencode(state, m.linked)\n    }\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.version)\n    if (m.version === 0) return manifestv0.encode(state, m)\n\n    let flags = 0\n    if (m.allowPatch) flags |= MANIFEST_PATCH\n    if (m.prologue) flags |= MANIFEST_PROLOGUE\n    if (m.linked) flags |= MANIFEST_LINKED\n\n    c.uint.encode(state, flags)\n    hashes.encode(state, m.hash)\n\n    c.uint.encode(state, m.quorum)\n    signerArray.encode(state, m.signers)\n    if (m.prologue) prologue.encode(state, m.prologue)\n\n    if (m.linked) {\n      fixed32Array.encode(state, m.linked)\n    }\n  },\n  decode (state) {\n    const version = c.uint.decode(state)\n    if (version === 0) return manifestv0.decode(state)\n    if (version > 2) throw new Error('Unknown version: ' + version)\n\n    const flags = c.uint.decode(state)\n    const hash = hashes.decode(state)\n    const quorum = c.uint.decode(state)\n    const signers = signerArray.decode(state)\n\n    const hasPatch = (flags & MANIFEST_PATCH) !== 0\n    const hasPrologue = (flags & MANIFEST_PROLOGUE) !== 0\n    const hasLinked = (flags & MANIFEST_LINKED) !== 0\n\n    return {\n      version,\n      hash,\n      allowPatch: hasPatch,\n      quorum,\n      signers,\n      prologue: hasPrologue ? prologue.decode(state) : null,\n      linked: hasLinked ? fixed32Array.decode(state) : null\n    }\n  }\n}\n\nconst node = {\n  preencode (state, n) {\n    c.uint.preencode(state, n.index)\n    c.uint.preencode(state, n.size)\n    c.fixed32.preencode(state, n.hash)\n  },\n  encode (state, n) {\n    c.uint.encode(state, n.index)\n    c.uint.encode(state, n.size)\n    c.fixed32.encode(state, n.hash)\n  },\n  decode (state) {\n    return {\n      index: c.uint.decode(state),\n      size: c.uint.decode(state),\n      hash: c.fixed32.decode(state)\n    }\n  }\n}\n\nconst nodeArray = c.array(node)\n\nconst wire = exports.wire = {}\n\nwire.handshake = {\n  preencode (state, m) {\n    c.uint.preencode(state, 1)\n    c.fixed32.preencode(state, m.capability)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.seeks ? 1 : 0)\n    c.fixed32.encode(state, m.capability)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n    return {\n      seeks: (flags & 1) !== 0,\n      capability: unslab(c.fixed32.decode(state))\n    }\n  }\n}\n\nconst requestBlock = {\n  preencode (state, b) {\n    c.uint.preencode(state, b.index)\n    c.uint.preencode(state, b.nodes)\n  },\n  encode (state, b) {\n    c.uint.encode(state, b.index)\n    c.uint.encode(state, b.nodes)\n  },\n  decode (state) {\n    return {\n      index: c.uint.decode(state),\n      nodes: c.uint.decode(state)\n    }\n  }\n}\n\nconst requestSeek = {\n  preencode (state, s) {\n    c.uint.preencode(state, s.bytes)\n    c.uint.preencode(state, s.padding)\n  },\n  encode (state, s) {\n    c.uint.encode(state, s.bytes)\n    c.uint.encode(state, s.padding)\n  },\n  decode (state) {\n    return {\n      bytes: c.uint.decode(state),\n      padding: c.uint.decode(state)\n    }\n  }\n}\n\nconst requestUpgrade = {\n  preencode (state, u) {\n    c.uint.preencode(state, u.start)\n    c.uint.preencode(state, u.length)\n  },\n  encode (state, u) {\n    c.uint.encode(state, u.start)\n    c.uint.encode(state, u.length)\n  },\n  decode (state) {\n    return {\n      start: c.uint.decode(state),\n      length: c.uint.decode(state)\n    }\n  }\n}\n\nwire.request = {\n  preencode (state, m) {\n    state.end++ // flags\n    c.uint.preencode(state, m.id)\n    c.uint.preencode(state, m.fork)\n\n    if (m.block) requestBlock.preencode(state, m.block)\n    if (m.hash) requestBlock.preencode(state, m.hash)\n    if (m.seek) requestSeek.preencode(state, m.seek)\n    if (m.upgrade) requestUpgrade.preencode(state, m.upgrade)\n    if (m.priority) c.uint.preencode(state, m.priority)\n  },\n  encode (state, m) {\n    const flags = (m.block ? 1 : 0) | (m.hash ? 2 : 0) | (m.seek ? 4 : 0) | (m.upgrade ? 8 : 0) | (m.manifest ? 16 : 0) | (m.priority ? 32 : 0)\n\n    c.uint.encode(state, flags)\n    c.uint.encode(state, m.id)\n    c.uint.encode(state, m.fork)\n\n    if (m.block) requestBlock.encode(state, m.block)\n    if (m.hash) requestBlock.encode(state, m.hash)\n    if (m.seek) requestSeek.encode(state, m.seek)\n    if (m.upgrade) requestUpgrade.encode(state, m.upgrade)\n    if (m.priority) c.uint.encode(state, m.priority)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n\n    return {\n      id: c.uint.decode(state),\n      fork: c.uint.decode(state),\n      block: flags & 1 ? requestBlock.decode(state) : null,\n      hash: flags & 2 ? requestBlock.decode(state) : null,\n      seek: flags & 4 ? requestSeek.decode(state) : null,\n      upgrade: flags & 8 ? requestUpgrade.decode(state) : null,\n      manifest: (flags & 16) !== 0,\n      priority: flags & 32 ? c.uint.decode(state) : 0\n    }\n  }\n}\n\nwire.cancel = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.request)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.request)\n  },\n  decode (state, m) {\n    return {\n      request: c.uint.decode(state)\n    }\n  }\n}\n\nconst dataUpgrade = {\n  preencode (state, u) {\n    c.uint.preencode(state, u.start)\n    c.uint.preencode(state, u.length)\n    nodeArray.preencode(state, u.nodes)\n    nodeArray.preencode(state, u.additionalNodes)\n    c.buffer.preencode(state, u.signature)\n  },\n  encode (state, u) {\n    c.uint.encode(state, u.start)\n    c.uint.encode(state, u.length)\n    nodeArray.encode(state, u.nodes)\n    nodeArray.encode(state, u.additionalNodes)\n    c.buffer.encode(state, u.signature)\n  },\n  decode (state) {\n    return {\n      start: c.uint.decode(state),\n      length: c.uint.decode(state),\n      nodes: nodeArray.decode(state),\n      additionalNodes: nodeArray.decode(state),\n      signature: c.buffer.decode(state)\n    }\n  }\n}\n\nconst dataSeek = {\n  preencode (state, s) {\n    c.uint.preencode(state, s.bytes)\n    nodeArray.preencode(state, s.nodes)\n  },\n  encode (state, s) {\n    c.uint.encode(state, s.bytes)\n    nodeArray.encode(state, s.nodes)\n  },\n  decode (state) {\n    return {\n      bytes: c.uint.decode(state),\n      nodes: nodeArray.decode(state)\n    }\n  }\n}\n\nconst dataBlock = {\n  preencode (state, b) {\n    c.uint.preencode(state, b.index)\n    c.buffer.preencode(state, b.value)\n    nodeArray.preencode(state, b.nodes)\n  },\n  encode (state, b) {\n    c.uint.encode(state, b.index)\n    c.buffer.encode(state, b.value)\n    nodeArray.encode(state, b.nodes)\n  },\n  decode (state) {\n    return {\n      index: c.uint.decode(state),\n      value: c.buffer.decode(state) || EMPTY,\n      nodes: nodeArray.decode(state)\n    }\n  }\n}\n\nconst dataHash = {\n  preencode (state, b) {\n    c.uint.preencode(state, b.index)\n    nodeArray.preencode(state, b.nodes)\n  },\n  encode (state, b) {\n    c.uint.encode(state, b.index)\n    nodeArray.encode(state, b.nodes)\n  },\n  decode (state) {\n    return {\n      index: c.uint.decode(state),\n      nodes: nodeArray.decode(state)\n    }\n  }\n}\n\nwire.data = {\n  preencode (state, m) {\n    state.end++ // flags\n    c.uint.preencode(state, m.request)\n    c.uint.preencode(state, m.fork)\n\n    if (m.block) dataBlock.preencode(state, m.block)\n    if (m.hash) dataHash.preencode(state, m.hash)\n    if (m.seek) dataSeek.preencode(state, m.seek)\n    if (m.upgrade) dataUpgrade.preencode(state, m.upgrade)\n    if (m.manifest) manifest.preencode(state, m.manifest)\n  },\n  encode (state, m) {\n    const flags = (m.block ? 1 : 0) | (m.hash ? 2 : 0) | (m.seek ? 4 : 0) | (m.upgrade ? 8 : 0) | (m.manifest ? 16 : 0)\n\n    c.uint.encode(state, flags)\n    c.uint.encode(state, m.request)\n    c.uint.encode(state, m.fork)\n\n    if (m.block) dataBlock.encode(state, m.block)\n    if (m.hash) dataHash.encode(state, m.hash)\n    if (m.seek) dataSeek.encode(state, m.seek)\n    if (m.upgrade) dataUpgrade.encode(state, m.upgrade)\n    if (m.manifest) manifest.encode(state, m.manifest)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n\n    return {\n      request: c.uint.decode(state),\n      fork: c.uint.decode(state),\n      block: flags & 1 ? dataBlock.decode(state) : null,\n      hash: flags & 2 ? dataHash.decode(state) : null,\n      seek: flags & 4 ? dataSeek.decode(state) : null,\n      upgrade: flags & 8 ? dataUpgrade.decode(state) : null,\n      manifest: flags & 16 ? manifest.decode(state) : null\n    }\n  }\n}\n\nwire.noData = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.request)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.request)\n  },\n  decode (state, m) {\n    return {\n      request: c.uint.decode(state)\n    }\n  }\n}\n\nwire.want = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.start)\n    c.uint.preencode(state, m.length)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.start)\n    c.uint.encode(state, m.length)\n  },\n  decode (state) {\n    return {\n      start: c.uint.decode(state),\n      length: c.uint.decode(state)\n    }\n  }\n}\n\nwire.unwant = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.start)\n    c.uint.preencode(state, m.length)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.start)\n    c.uint.encode(state, m.length)\n  },\n  decode (state, m) {\n    return {\n      start: c.uint.decode(state),\n      length: c.uint.decode(state)\n    }\n  }\n}\n\nwire.range = {\n  preencode (state, m) {\n    state.end++ // flags\n    c.uint.preencode(state, m.start)\n    if (m.length !== 1) c.uint.preencode(state, m.length)\n  },\n  encode (state, m) {\n    c.uint.encode(state, (m.drop ? 1 : 0) | (m.length === 1 ? 2 : 0))\n    c.uint.encode(state, m.start)\n    if (m.length !== 1) c.uint.encode(state, m.length)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n\n    return {\n      drop: (flags & 1) !== 0,\n      start: c.uint.decode(state),\n      length: (flags & 2) !== 0 ? 1 : c.uint.decode(state)\n    }\n  }\n}\n\nwire.bitfield = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.start)\n    c.uint32array.preencode(state, m.bitfield)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.start)\n    c.uint32array.encode(state, m.bitfield)\n  },\n  decode (state, m) {\n    return {\n      start: c.uint.decode(state),\n      bitfield: c.uint32array.decode(state)\n    }\n  }\n}\n\nwire.sync = {\n  preencode (state, m) {\n    state.end++ // flags\n    c.uint.preencode(state, m.fork)\n    c.uint.preencode(state, m.length)\n    c.uint.preencode(state, m.remoteLength)\n  },\n  encode (state, m) {\n    c.uint.encode(state, (m.canUpgrade ? 1 : 0) | (m.uploading ? 2 : 0) | (m.downloading ? 4 : 0) | (m.hasManifest ? 8 : 0))\n    c.uint.encode(state, m.fork)\n    c.uint.encode(state, m.length)\n    c.uint.encode(state, m.remoteLength)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n\n    return {\n      fork: c.uint.decode(state),\n      length: c.uint.decode(state),\n      remoteLength: c.uint.decode(state),\n      canUpgrade: (flags & 1) !== 0,\n      uploading: (flags & 2) !== 0,\n      downloading: (flags & 4) !== 0,\n      hasManifest: (flags & 8) !== 0\n    }\n  }\n}\n\nwire.reorgHint = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.from)\n    c.uint.preencode(state, m.to)\n    c.uint.preencode(state, m.ancestors)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.from)\n    c.uint.encode(state, m.to)\n    c.uint.encode(state, m.ancestors)\n  },\n  decode (state) {\n    return {\n      from: c.uint.encode(state),\n      to: c.uint.encode(state),\n      ancestors: c.uint.encode(state)\n    }\n  }\n}\n\nwire.extension = {\n  preencode (state, m) {\n    c.string.preencode(state, m.name)\n    c.raw.preencode(state, m.message)\n  },\n  encode (state, m) {\n    c.string.encode(state, m.name)\n    c.raw.encode(state, m.message)\n  },\n  decode (state) {\n    return {\n      name: c.string.decode(state),\n      message: c.raw.decode(state)\n    }\n  }\n}\n\nconst keyValue = {\n  preencode (state, p) {\n    c.string.preencode(state, p.key)\n    c.buffer.preencode(state, p.value)\n  },\n  encode (state, p) {\n    c.string.encode(state, p.key)\n    c.buffer.encode(state, p.value)\n  },\n  decode (state) {\n    return {\n      key: c.string.decode(state),\n      value: c.buffer.decode(state)\n    }\n  }\n}\n\nconst treeUpgrade = {\n  preencode (state, u) {\n    c.uint.preencode(state, u.fork)\n    c.uint.preencode(state, u.ancestors)\n    c.uint.preencode(state, u.length)\n    c.buffer.preencode(state, u.signature)\n  },\n  encode (state, u) {\n    c.uint.encode(state, u.fork)\n    c.uint.encode(state, u.ancestors)\n    c.uint.encode(state, u.length)\n    c.buffer.encode(state, u.signature)\n  },\n  decode (state) {\n    return {\n      fork: c.uint.decode(state),\n      ancestors: c.uint.decode(state),\n      length: c.uint.decode(state),\n      signature: c.buffer.decode(state)\n    }\n  }\n}\n\nconst bitfieldUpdate = { // TODO: can maybe be folded into a HAVE later on with the most recent spec\n  preencode (state, b) {\n    state.end++ // flags\n    c.uint.preencode(state, b.start)\n    c.uint.preencode(state, b.length)\n  },\n  encode (state, b) {\n    state.buffer[state.start++] = b.drop ? 1 : 0\n    c.uint.encode(state, b.start)\n    c.uint.encode(state, b.length)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n    return {\n      drop: (flags & 1) !== 0,\n      start: c.uint.decode(state),\n      length: c.uint.decode(state)\n    }\n  }\n}\n\nconst oplog = exports.oplog = {}\n\noplog.entry = {\n  preencode (state, m) {\n    state.end++ // flags\n    if (m.userData) keyValue.preencode(state, m.userData)\n    if (m.treeNodes) nodeArray.preencode(state, m.treeNodes)\n    if (m.treeUpgrade) treeUpgrade.preencode(state, m.treeUpgrade)\n    if (m.bitfield) bitfieldUpdate.preencode(state, m.bitfield)\n  },\n  encode (state, m) {\n    const s = state.start++\n    let flags = 0\n\n    if (m.userData) {\n      flags |= 1\n      keyValue.encode(state, m.userData)\n    }\n    if (m.treeNodes) {\n      flags |= 2\n      nodeArray.encode(state, m.treeNodes)\n    }\n    if (m.treeUpgrade) {\n      flags |= 4\n      treeUpgrade.encode(state, m.treeUpgrade)\n    }\n    if (m.bitfield) {\n      flags |= 8\n      bitfieldUpdate.encode(state, m.bitfield)\n    }\n\n    state.buffer[s] = flags\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n    return {\n      userData: (flags & 1) !== 0 ? keyValue.decode(state) : null,\n      treeNodes: (flags & 2) !== 0 ? nodeArray.decode(state) : null,\n      treeUpgrade: (flags & 4) !== 0 ? treeUpgrade.decode(state) : null,\n      bitfield: (flags & 8) !== 0 ? bitfieldUpdate.decode(state) : null\n    }\n  }\n}\n\nconst keyPair = {\n  preencode (state, kp) {\n    c.buffer.preencode(state, kp.publicKey)\n    c.buffer.preencode(state, kp.secretKey)\n  },\n  encode (state, kp) {\n    c.buffer.encode(state, kp.publicKey)\n    c.buffer.encode(state, kp.secretKey)\n  },\n  decode (state) {\n    return {\n      publicKey: c.buffer.decode(state),\n      secretKey: c.buffer.decode(state)\n    }\n  }\n}\n\nconst reorgHint = {\n  preencode (state, r) {\n    c.uint.preencode(state, r.from)\n    c.uint.preencode(state, r.to)\n    c.uint.preencode(state, r.ancestors)\n  },\n  encode (state, r) {\n    c.uint.encode(state, r.from)\n    c.uint.encode(state, r.to)\n    c.uint.encode(state, r.ancestors)\n  },\n  decode (state) {\n    return {\n      from: c.uint.decode(state),\n      to: c.uint.decode(state),\n      ancestors: c.uint.decode(state)\n    }\n  }\n}\n\nconst reorgHintArray = c.array(reorgHint)\n\nconst hints = {\n  preencode (state, h) {\n    reorgHintArray.preencode(state, h.reorgs)\n    c.uint.preencode(state, h.contiguousLength)\n  },\n  encode (state, h) {\n    reorgHintArray.encode(state, h.reorgs)\n    c.uint.encode(state, h.contiguousLength)\n  },\n  decode (state) {\n    return {\n      reorgs: reorgHintArray.decode(state),\n      contiguousLength: state.start < state.end ? c.uint.decode(state) : 0\n    }\n  }\n}\n\nconst treeHeader = {\n  preencode (state, t) {\n    c.uint.preencode(state, t.fork)\n    c.uint.preencode(state, t.length)\n    c.buffer.preencode(state, t.rootHash)\n    c.buffer.preencode(state, t.signature)\n  },\n  encode (state, t) {\n    c.uint.encode(state, t.fork)\n    c.uint.encode(state, t.length)\n    c.buffer.encode(state, t.rootHash)\n    c.buffer.encode(state, t.signature)\n  },\n  decode (state) {\n    return {\n      fork: c.uint.decode(state),\n      length: c.uint.decode(state),\n      rootHash: c.buffer.decode(state),\n      signature: c.buffer.decode(state)\n    }\n  }\n}\n\nconst types = {\n  preencode (state, t) {\n    c.string.preencode(state, t.tree)\n    c.string.preencode(state, t.bitfield)\n    c.string.preencode(state, t.signer)\n  },\n  encode (state, t) {\n    c.string.encode(state, t.tree)\n    c.string.encode(state, t.bitfield)\n    c.string.encode(state, t.signer)\n  },\n  decode (state) {\n    return {\n      tree: c.string.decode(state),\n      bitfield: c.string.decode(state),\n      signer: c.string.decode(state)\n    }\n  }\n}\n\nconst externalHeader = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.start)\n    c.uint.preencode(state, m.length)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.start)\n    c.uint.encode(state, m.length)\n  },\n  decode (state) {\n    return {\n      start: c.uint.decode(state),\n      length: c.uint.decode(state)\n    }\n  }\n}\n\nconst keyValueArray = c.array(keyValue)\n\noplog.header = {\n  preencode (state, h) {\n    state.end += 2 // version + flags\n    if (h.external) {\n      externalHeader.preencode(state, h.external)\n      return\n    }\n    c.fixed32.preencode(state, h.key)\n    if (h.manifest) manifest.preencode(state, h.manifest)\n    if (h.keyPair) keyPair.preencode(state, h.keyPair)\n    keyValueArray.preencode(state, h.userData)\n    treeHeader.preencode(state, h.tree)\n    hints.preencode(state, h.hints)\n  },\n  encode (state, h) {\n    c.uint.encode(state, 1)\n    if (h.external) {\n      c.uint.encode(state, 1) // ONLY set the first big for clarity\n      externalHeader.encode(state, h.external)\n      return\n    }\n    c.uint.encode(state, (h.manifest ? 2 : 0) | (h.keyPair ? 4 : 0))\n    c.fixed32.encode(state, h.key)\n    if (h.manifest) manifest.encode(state, h.manifest)\n    if (h.keyPair) keyPair.encode(state, h.keyPair)\n    keyValueArray.encode(state, h.userData)\n    treeHeader.encode(state, h.tree)\n    hints.encode(state, h.hints)\n  },\n  decode (state) {\n    const version = c.uint.decode(state)\n\n    if (version > 1) {\n      throw INVALID_OPLOG_VERSION('Invalid header version. Expected <= 1, got ' + version)\n    }\n\n    if (version === 0) {\n      const old = {\n        types: types.decode(state),\n        userData: keyValueArray.decode(state),\n        tree: treeHeader.decode(state),\n        signer: keyPair.decode(state),\n        hints: hints.decode(state)\n      }\n\n      return {\n        external: null,\n        key: old.signer.publicKey,\n        manifest: {\n          version: 0,\n          hash: old.types.tree,\n          allowPatch: false,\n          quorum: 1,\n          signers: [{\n            signature: old.types.signer,\n            namespace: DEFAULT_NAMESPACE,\n            publicKey: old.signer.publicKey\n          }],\n          prologue: null\n        },\n        keyPair: old.signer.secretKey ? old.signer : null,\n        userData: old.userData,\n        tree: old.tree,\n        hints: old.hints\n      }\n    }\n\n    const flags = c.uint.decode(state)\n\n    if (flags & 1) {\n      return {\n        external: externalHeader.decode(state),\n        key: null,\n        manifest: null,\n        keyPair: null,\n        userData: null,\n        tree: null,\n        hints: null\n      }\n    }\n\n    return {\n      external: null,\n      key: c.fixed32.decode(state),\n      manifest: (flags & 2) !== 0 ? manifest.decode(state) : null,\n      keyPair: (flags & 4) !== 0 ? keyPair.decode(state) : null,\n      userData: keyValueArray.decode(state),\n      tree: treeHeader.decode(state),\n      hints: hints.decode(state)\n    }\n  }\n}\n\nconst uintArray = c.array(c.uint)\n\nconst multisigInput = {\n  preencode (state, inp) {\n    c.uint.preencode(state, inp.signer)\n    c.fixed64.preencode(state, inp.signature)\n    c.uint.preencode(state, inp.patch)\n  },\n  encode (state, inp) {\n    c.uint.encode(state, inp.signer)\n    c.fixed64.encode(state, inp.signature)\n    c.uint.encode(state, inp.patch)\n  },\n  decode (state) {\n    return {\n      signer: c.uint.decode(state),\n      signature: c.fixed64.decode(state),\n      patch: c.uint.decode(state)\n    }\n  }\n}\n\nconst patchEncodingv0 = {\n  preencode (state, n) {\n    c.uint.preencode(state, n.start)\n    c.uint.preencode(state, n.length)\n    uintArray.preencode(state, n.nodes)\n  },\n  encode (state, n) {\n    c.uint.encode(state, n.start)\n    c.uint.encode(state, n.length)\n    uintArray.encode(state, n.nodes)\n  },\n  decode (state) {\n    return {\n      start: c.uint.decode(state),\n      length: c.uint.decode(state),\n      nodes: uintArray.decode(state)\n    }\n  }\n}\n\nconst multisigInputv0 = {\n  preencode (state, n) {\n    state.end++\n    c.uint.preencode(state, n.signer)\n    c.fixed64.preencode(state, n.signature)\n    if (n.patch) patchEncodingv0.preencode(state, n.patch)\n  },\n  encode (state, n) {\n    c.uint.encode(state, n.patch ? 1 : 0)\n    c.uint.encode(state, n.signer)\n    c.fixed64.encode(state, n.signature)\n    if (n.patch) patchEncodingv0.encode(state, n.patch)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n    return {\n      signer: c.uint.decode(state),\n      signature: c.fixed64.decode(state),\n      patch: (flags & 1) ? patchEncodingv0.decode(state) : null\n    }\n  }\n}\n\nconst multisigInputArrayv0 = c.array(multisigInputv0)\nconst multisigInputArray = c.array(multisigInput)\n\nconst compactNode = {\n  preencode (state, n) {\n    c.uint.preencode(state, n.index)\n    c.uint.preencode(state, n.size)\n    c.fixed32.preencode(state, n.hash)\n  },\n  encode (state, n) {\n    c.uint.encode(state, n.index)\n    c.uint.encode(state, n.size)\n    c.fixed32.encode(state, n.hash)\n  },\n  decode (state) {\n    return {\n      index: c.uint.decode(state),\n      size: c.uint.decode(state),\n      hash: c.fixed32.decode(state)\n    }\n  }\n}\n\nconst compactNodeArray = c.array(compactNode)\n\nexports.multiSignaturev0 = {\n  preencode (state, s) {\n    multisigInputArrayv0.preencode(state, s.proofs)\n    compactNodeArray.preencode(state, s.patch)\n  },\n  encode (state, s) {\n    multisigInputArrayv0.encode(state, s.proofs)\n    compactNodeArray.encode(state, s.patch)\n  },\n  decode (state) {\n    return {\n      proofs: multisigInputArrayv0.decode(state),\n      patch: compactNodeArray.decode(state)\n    }\n  }\n}\n\nexports.multiSignature = {\n  preencode (state, s) {\n    multisigInputArray.preencode(state, s.proofs)\n    compactNodeArray.preencode(state, s.patch)\n  },\n  encode (state, s) {\n    multisigInputArray.encode(state, s.proofs)\n    compactNodeArray.encode(state, s.patch)\n  },\n  decode (state) {\n    return {\n      proofs: multisigInputArray.decode(state),\n      patch: compactNodeArray.decode(state)\n    }\n  }\n}\nconst c = require('compact-encoding')\nconst b4a = require('b4a')\nconst flat = require('flat-tree')\nconst { MerkleTree } = require('./merkle-tree')\nconst { multiSignature, multiSignaturev0 } = require('./messages')\n\nmodule.exports = {\n  assemblev0,\n  assemble,\n  inflatev0,\n  inflate,\n  partialSignature,\n  signableLength\n}\n\nfunction inflatev0 (data) {\n  return c.decode(multiSignaturev0, data)\n}\n\nfunction inflate (data) {\n  return c.decode(multiSignature, data)\n}\n\nasync function partialSignature (core, signer, from, to = core.state.length, signature = core.state.signature) {\n  if (from > core.state.length) return null\n  const nodes = to <= from ? null : await upgradeNodes(core, from, to)\n\n  if (signature.byteLength !== 64) signature = c.decode(multiSignature, signature).proofs[0].signature\n\n  return {\n    signer,\n    signature,\n    patch: nodes ? to - from : 0,\n    nodes\n  }\n}\n\nasync function upgradeNodes (core, from, to) {\n  const rx = core.state.storage.read()\n  const p = await MerkleTree.proof(core.state, rx, { upgrade: { start: from, length: to - from } })\n  rx.tryFlush()\n  return (await p.settle()).upgrade.nodes\n}\n\nfunction signableLength (lengths, quorum) {\n  if (quorum <= 0) quorum = 1\n  if (quorum > lengths.length) return 0\n\n  return lengths.sort(cmp)[quorum - 1]\n}\n\nfunction cmp (a, b) {\n  return b - a\n}\n\nfunction assemblev0 (inputs) {\n  const proofs = []\n  const patch = []\n\n  for (const u of inputs) {\n    proofs.push(compressProof(u, patch))\n  }\n\n  return c.encode(multiSignaturev0, { proofs, patch })\n}\n\nfunction assemble (inputs) {\n  const proofs = []\n  const patch = []\n  const seen = new Set()\n\n  for (const u of inputs) {\n    if (u.nodes) {\n      for (const node of u.nodes) {\n        if (seen.has(node.index)) continue\n        seen.add(node.index)\n        patch.push(node)\n      }\n    }\n\n    proofs.push({\n      signer: u.signer,\n      signature: u.signature,\n      patch: u.patch\n    })\n  }\n\n  return c.encode(multiSignature, { proofs, patch })\n}\n\nfunction compareNode (a, b) {\n  if (a.index !== b.index) return false\n  if (a.size !== b.size) return false\n  return b4a.equals(a.hash, b.hash)\n}\n\nfunction compressProof (proof, nodes) {\n  return {\n    signer: proof.signer,\n    signature: proof.signature,\n    patch: proof.patch ? compressUpgrade(proof, nodes) : null\n  }\n}\n\nfunction compressUpgrade (p, nodes) {\n  const u = {\n    start: flat.rightSpan(p.nodes[p.nodes.length - 1].index) / 2 + 1,\n    length: p.patch,\n    nodes: []\n  }\n\n  for (const node of p.nodes) {\n    let present = false\n    for (let i = 0; i < nodes.length; i++) {\n      if (!compareNode(nodes[i], node)) continue\n\n      u.nodes.push(i)\n      present = true\n      break\n    }\n\n    if (present) continue\n    u.nodes.push(nodes.push(node) - 1)\n  }\n\n  return u\n}\nmodule.exports = class Mutex {\n  constructor () {\n    this.locked = false\n    this.destroyed = false\n\n    this._destroying = null\n    this._destroyError = null\n    this._queue = []\n    this._enqueue = (resolve, reject) => this._queue.push([resolve, reject])\n  }\n\n  idle () {\n    return this._queue.length === 0 && this.locked === false\n  }\n\n  lock () {\n    if (this.destroyed) return Promise.reject(this._destroyError || new Error('Mutex has been destroyed'))\n    if (this.locked) return new Promise(this._enqueue)\n    this.locked = true\n    return Promise.resolve()\n  }\n\n  unlock () {\n    if (!this._queue.length) {\n      this.locked = false\n      return\n    }\n    this._queue.shift()[0]()\n  }\n\n  destroy (err) {\n    if (!this._destroying) this._destroying = this.locked ? this.lock().catch(() => {}) : Promise.resolve()\n\n    this.destroyed = true\n    if (err) this._destroyError = err\n\n    if (err) {\n      while (this._queue.length) this._queue.shift()[1](err)\n    }\n\n    return this._destroying\n  }\n}\nconst FIFO = require('fast-fifo')\n\nmodule.exports = class ReceiverQueue {\n  constructor () {\n    this.queue = new FIFO()\n    this.priority = []\n    this.requests = new Map()\n    this.length = 0\n  }\n\n  push (req) {\n    // TODO: use a heap at some point if we wanna support multiple prios\n    if (req.priority > 0) this.priority.push(req)\n    else this.queue.push(req)\n\n    this.requests.set(req.id, req)\n    this.length++\n  }\n\n  shift () {\n    while (this.priority.length > 0) {\n      const msg = this.priority.pop()\n      const req = this._processRequest(msg)\n      if (req !== null) return req\n    }\n\n    while (this.queue.length > 0) {\n      const msg = this.queue.shift()\n      const req = this._processRequest(msg)\n      if (req !== null) return req\n    }\n\n    return null\n  }\n\n  _processRequest (req) {\n    if (req.block || req.hash || req.seek || req.upgrade || req.manifest) {\n      this.requests.delete(req.id)\n      this.length--\n      return req\n    }\n\n    return null\n  }\n\n  clear () {\n    this.queue.clear()\n    this.priority = []\n    this.length = 0\n    this.requests.clear()\n  }\n\n  delete (id) {\n    const req = this.requests.get(id)\n    if (!req) return\n\n    req.block = null\n    req.hash = null\n    req.seek = null\n    req.upgrade = null\n    req.manifest = false\n\n    this.requests.delete(id)\n    this.length--\n\n    if (this.length === 0) {\n      this.queue.clear()\n      this.priority = []\n    }\n  }\n}\nconst BigSparseArray = require('big-sparse-array')\nconst quickbit = require('./compat').quickbit\n\nconst BITS_PER_PAGE = 32768\nconst BYTES_PER_PAGE = BITS_PER_PAGE / 8\nconst WORDS_PER_PAGE = BYTES_PER_PAGE / 4\nconst BITS_PER_SEGMENT = 2097152\nconst BYTES_PER_SEGMENT = BITS_PER_SEGMENT / 8\nconst PAGES_PER_SEGMENT = BITS_PER_SEGMENT / BITS_PER_PAGE\n\nclass RemoteBitfieldPage {\n  constructor (index, bitfield, segment) {\n    this.index = index\n    this.offset = index * BYTES_PER_PAGE - segment.offset\n    this.bitfield = bitfield\n    this.segment = segment\n\n    segment.add(this)\n  }\n\n  get tree () {\n    return this.segment.tree\n  }\n\n  get (index) {\n    return quickbit.get(this.bitfield, index)\n  }\n\n  set (index, val) {\n    if (quickbit.set(this.bitfield, index, val)) {\n      this.tree.update(this.offset * 8 + index)\n    }\n  }\n\n  setRange (start, end, val) {\n    quickbit.fill(this.bitfield, val, start, end)\n\n    let i = Math.floor(start / 128)\n    const n = i + Math.ceil((end - start) / 128)\n\n    while (i <= n) this.tree.update(this.offset * 8 + i++ * 128)\n  }\n\n  findFirst (val, position) {\n    return quickbit.findFirst(this.bitfield, val, position)\n  }\n\n  findLast (val, position) {\n    return quickbit.findLast(this.bitfield, val, position)\n  }\n\n  insert (start, bitfield) {\n    this.bitfield.set(bitfield, start / 32)\n    this.segment.refresh()\n  }\n\n  clear (start, bitfield) {\n    quickbit.clear(this.bitfield, { field: bitfield, offset: start })\n  }\n}\n\nclass RemoteBitfieldSegment {\n  constructor (index) {\n    this.index = index\n    this.offset = index * BYTES_PER_SEGMENT\n    this.tree = quickbit.Index.from([], BYTES_PER_SEGMENT)\n    this.pages = new Array(PAGES_PER_SEGMENT)\n    this.pagesLength = 0\n  }\n\n  get chunks () {\n    return this.tree.chunks\n  }\n\n  refresh () {\n    this.tree = quickbit.Index.from(this.tree.chunks, BYTES_PER_SEGMENT)\n  }\n\n  add (page) {\n    const pageIndex = page.index - this.index * PAGES_PER_SEGMENT\n    if (pageIndex >= this.pagesLength) this.pagesLength = pageIndex + 1\n\n    this.pages[pageIndex] = page\n\n    const chunk = { field: page.bitfield, offset: page.offset }\n\n    this.chunks.push(chunk)\n\n    for (let i = this.chunks.length - 2; i >= 0; i--) {\n      const prev = this.chunks[i]\n      if (prev.offset <= chunk.offset) break\n      this.chunks[i] = chunk\n      this.chunks[i + 1] = prev\n    }\n  }\n\n  findFirst (val, position) {\n    position = this.tree.skipFirst(!val, position)\n\n    let j = position & (BITS_PER_PAGE - 1)\n    let i = (position - j) / BITS_PER_PAGE\n\n    if (i >= PAGES_PER_SEGMENT) return -1\n\n    while (i < this.pagesLength) {\n      const p = this.pages[i]\n\n      let index = -1\n\n      if (p) index = p.findFirst(val, j)\n      else if (!val) index = j\n\n      if (index !== -1) return i * BITS_PER_PAGE + index\n\n      j = 0\n      i++\n    }\n\n    return (val || this.pagesLength === PAGES_PER_SEGMENT) ? -1 : this.pagesLength * BITS_PER_PAGE\n  }\n\n  findLast (val, position) {\n    position = this.tree.skipLast(!val, position)\n\n    let j = position & (BITS_PER_PAGE - 1)\n    let i = (position - j) / BITS_PER_PAGE\n\n    if (i >= PAGES_PER_SEGMENT) return -1\n\n    while (i >= 0) {\n      const p = this.pages[i]\n\n      let index = -1\n\n      if (p) index = p.findLast(val, j)\n      else if (!val) index = j\n\n      if (index !== -1) return i * BITS_PER_PAGE + index\n\n      j = BITS_PER_PAGE - 1\n      i--\n    }\n\n    return -1\n  }\n}\n\nmodule.exports = class RemoteBitfield {\n  static BITS_PER_PAGE = BITS_PER_PAGE\n\n  constructor () {\n    this._pages = new BigSparseArray()\n    this._segments = new BigSparseArray()\n    this._maxSegments = 0\n  }\n\n  getBitfield (index) {\n    const j = index & (BITS_PER_PAGE - 1)\n    const i = (index - j) / BITS_PER_PAGE\n\n    const p = this._pages.get(i)\n    return p || null\n  }\n\n  get (index) {\n    const j = index & (BITS_PER_PAGE - 1)\n    const i = (index - j) / BITS_PER_PAGE\n\n    const p = this._pages.get(i)\n\n    return p ? p.get(j) : false\n  }\n\n  set (index, val) {\n    const j = index & (BITS_PER_PAGE - 1)\n    const i = (index - j) / BITS_PER_PAGE\n\n    let p = this._pages.get(i)\n\n    if (!p && val) {\n      const k = Math.floor(i / PAGES_PER_SEGMENT)\n      const s = this._segments.get(k) || this._segments.set(k, new RemoteBitfieldSegment(k))\n      if (this._maxSegments <= k) this._maxSegments = k + 1\n\n      p = this._pages.set(i, new RemoteBitfieldPage(i, new Uint32Array(WORDS_PER_PAGE), s))\n    }\n\n    if (p) p.set(j, val)\n  }\n\n  setRange (start, end, val) {\n    let j = start & (BITS_PER_PAGE - 1)\n    let i = (start - j) / BITS_PER_PAGE\n\n    while (start < end) {\n      let p = this._pages.get(i)\n\n      if (!p && val) {\n        const k = Math.floor(i / PAGES_PER_SEGMENT)\n        const s = this._segments.get(k) || this._segments.set(k, new RemoteBitfieldSegment(k))\n        if (this._maxSegments <= k) this._maxSegments = k + 1\n\n        p = this._pages.set(i, new RemoteBitfieldPage(i, new Uint32Array(WORDS_PER_PAGE), s))\n      }\n\n      const offset = i * BITS_PER_PAGE\n      const last = Math.min(end - offset, BITS_PER_PAGE)\n      const range = last - j\n\n      if (p) p.setRange(j, last, val)\n\n      j = 0\n      i++\n      start += range\n    }\n  }\n\n  findFirst (val, position) {\n    let j = position & (BITS_PER_SEGMENT - 1)\n    let i = (position - j) / BITS_PER_SEGMENT\n\n    while (i < this._maxSegments) {\n      const s = this._segments.get(i)\n\n      let index = -1\n\n      if (s) index = s.findFirst(val, j)\n      else if (!val) index = j\n\n      if (index !== -1) return i * BITS_PER_SEGMENT + index\n\n      j = 0\n      i++\n    }\n\n    // For the val === false case, we always return at least\n    // the 'position', also if nothing was found\n    return val\n      ? -1\n      : Math.max(position, this._maxSegments * BITS_PER_SEGMENT)\n  }\n\n  firstSet (position) {\n    return this.findFirst(true, position)\n  }\n\n  firstUnset (position) {\n    return this.findFirst(false, position)\n  }\n\n  findLast (val, position) {\n    let j = position & (BITS_PER_SEGMENT - 1)\n    let i = (position - j) / BITS_PER_SEGMENT\n\n    while (i >= 0) {\n      const s = this._segments.get(i)\n\n      let index = -1\n\n      if (s) index = s.findLast(val, j)\n      else if (!val) index = j\n\n      if (index !== -1) return i * BITS_PER_SEGMENT + index\n\n      j = BITS_PER_SEGMENT - 1\n      i--\n    }\n\n    return -1\n  }\n\n  lastSet (position) {\n    return this.findLast(true, position)\n  }\n\n  lastUnset (position) {\n    return this.findLast(false, position)\n  }\n\n  insert (start, bitfield) {\n    if (start % 32 !== 0) return false\n\n    let length = bitfield.byteLength * 8\n\n    let j = start & (BITS_PER_PAGE - 1)\n    let i = (start - j) / BITS_PER_PAGE\n\n    while (length > 0) {\n      let p = this._pages.get(i)\n\n      if (!p) {\n        const k = Math.floor(i / PAGES_PER_SEGMENT)\n        const s = this._segments.get(k) || this._segments.set(k, new RemoteBitfieldSegment(k))\n        if (this._maxSegments <= k) this._maxSegments = k + 1\n\n        p = this._pages.set(i, new RemoteBitfieldPage(i, new Uint32Array(WORDS_PER_PAGE), s))\n      }\n\n      const end = Math.min(j + length, BITS_PER_PAGE)\n      const range = end - j\n\n      p.insert(j, bitfield.subarray(0, range / 32))\n\n      bitfield = bitfield.subarray(range / 32)\n\n      j = 0\n      i++\n      length -= range\n    }\n\n    return true\n  }\n\n  clear (start, bitfield) {\n    if (start % 32 !== 0) return false\n\n    let length = bitfield.byteLength * 8\n\n    let j = start & (BITS_PER_PAGE - 1)\n    let i = (start - j) / BITS_PER_PAGE\n\n    while (length > 0) {\n      let p = this._pages.get(i)\n\n      if (!p) {\n        const k = Math.floor(i / PAGES_PER_SEGMENT)\n        const s = this._segments.get(k) || this._segments.set(k, new RemoteBitfieldSegment(k))\n        if (this._maxSegments <= k) this._maxSegments = k + 1\n\n        p = this._pages.set(i, new RemoteBitfieldPage(i, new Uint32Array(WORDS_PER_PAGE), s))\n      }\n\n      const end = Math.min(j + length, BITS_PER_PAGE)\n      const range = end - j\n\n      p.clear(j, bitfield.subarray(0, range / 32))\n\n      bitfield = bitfield.subarray(range / 32)\n\n      j = 0\n      i++\n      length -= range\n    }\n\n    return true\n  }\n}\n/* DEV DOCS\n  Every hypercore has one Replicator object managing its connections to other peers.\n  There is one Peer object per peer connected to the Hypercore.\n  Hypercores do not know about other hypercores, so when a peer is connected to multiple cores, there exists one Peer object per core.\n\n  Hypercore indicates block should be downloaded through methods like Replicator.addRange or Replicator.addBlock\n  Hypercore calls Replicator.updateActivity every time a hypercore session opens/closes\n  Replicator.updateActivity ensures the Hypercore is downloading blocks as expected\n  Replicator keeps track of:\n    - Which blocks need to be downloaded (Replicator._blocks)\n    - Which blocks currently have inflight requests (Replicator._inflight)\n\n  Blocks are requested from remote peers by Peer objects. The flow is:\n    - The replicator's updatePeer method gets called\n    - The replicator detects whether the Peer can accept more requests (for example by checking if it's maxed out on inflight blocks)\n    - The replicator then tells the Peer what to request (e.g. Peer_requestRange or Peer._requestBlock methods)\n\n  The Peer object is responsible for tracking\n    - Which blocks does the Peer have available (tracked in remoteBitfield)\n    - Which blocks are you actively looking for from this peer (tracked in missingBlocks)\n    - How many blocks are currently inflight (tracked in inflight)\n  The Peer uses this information to decide which blocks to request from the peer in response to _requestRange requests and the like.\n*/\n\nconst b4a = require('b4a')\nconst safetyCatch = require('safety-catch')\nconst RandomIterator = require('random-array-iterator')\nconst flatTree = require('flat-tree')\nconst ReceiverQueue = require('./receiver-queue')\nconst HotswapQueue = require('./hotswap-queue')\nconst RemoteBitfield = require('./remote-bitfield')\nconst { MerkleTree } = require('./merkle-tree')\nconst { REQUEST_CANCELLED, REQUEST_TIMEOUT, INVALID_CAPABILITY, SNAPSHOT_NOT_AVAILABLE } = require('hypercore-errors')\nconst m = require('./messages')\nconst caps = require('./caps')\n\nconst DEFAULT_MAX_INFLIGHT = [16, 512]\nconst SCALE_LATENCY = 50\nconst DEFAULT_SEGMENT_SIZE = 256 * 1024 * 8 // 256 KiB in bits\nconst NOT_DOWNLOADING_SLACK = 20000 + (Math.random() * 20000) | 0\nconst MAX_PEERS_UPGRADE = 3\n\nconst MAX_RANGES = 64\n\nconst PRIORITY = {\n  NORMAL: 0,\n  HIGH: 1,\n  VERY_HIGH: 2,\n  CANCELLED: 255 // reserved to mark cancellation\n}\n\nclass Attachable {\n  constructor () {\n    this.resolved = false\n    this.processing = false\n    this.refs = []\n  }\n\n  attach (session) {\n    const r = {\n      context: this,\n      session,\n      sindex: 0,\n      rindex: 0,\n      snapshot: true,\n      resolve: null,\n      reject: null,\n      promise: null,\n      timeout: null\n    }\n\n    r.sindex = session.push(r) - 1\n    r.rindex = this.refs.push(r) - 1\n    r.promise = new Promise((resolve, reject) => {\n      r.resolve = resolve\n      r.reject = reject\n    })\n\n    return r\n  }\n\n  detach (r, err = null) {\n    if (r.context !== this) return false\n\n    this._detach(r)\n    this._cancel(r, err)\n    this.gc()\n\n    return true\n  }\n\n  _detach (r) {\n    const rh = this.refs.pop()\n    const sh = r.session.pop()\n\n    if (r.rindex < this.refs.length) this.refs[rh.rindex = r.rindex] = rh\n    if (r.sindex < r.session.length) r.session[sh.sindex = r.sindex] = sh\n\n    destroyRequestTimeout(r)\n    r.context = null\n\n    return r\n  }\n\n  gc () {\n    if (this.refs.length === 0 && !this.processing) this._unref()\n  }\n\n  processed () {\n    this.processing = false\n    this.gc()\n  }\n\n  _cancel (r, err) {\n    r.reject(err || REQUEST_CANCELLED())\n  }\n\n  _unref () {\n    // overwrite me\n  }\n\n  resolve (val) {\n    this.resolved = true\n    while (this.refs.length > 0) {\n      this._detach(this.refs[this.refs.length - 1]).resolve(val)\n    }\n  }\n\n  reject (err) {\n    this.resolved = true\n    while (this.refs.length > 0) {\n      this._detach(this.refs[this.refs.length - 1]).reject(err)\n    }\n  }\n\n  setTimeout (r, ms) {\n    destroyRequestTimeout(r)\n    r.timeout = setTimeout(onrequesttimeout, ms, r)\n  }\n}\n\nclass BlockRequest extends Attachable {\n  constructor (tracker, index, priority) {\n    super()\n\n    this.index = index\n    this.priority = priority\n    this.inflight = []\n    this.queued = false\n    this.hotswap = null\n    this.tracker = tracker\n  }\n\n  _unref () {\n    this.queued = false\n\n    for (const req of this.inflight) {\n      req.peer._cancelRequest(req)\n    }\n\n    this.tracker.remove(this.index)\n    removeHotswap(this)\n  }\n}\n\nclass RangeRequest extends Attachable {\n  constructor (ranges, start, end, linear, ifAvailable, blocks) {\n    super()\n\n    this.start = start\n    this.end = end\n    this.linear = linear\n    this.ifAvailable = ifAvailable\n    this.blocks = blocks\n    this.ranges = ranges\n\n    // As passed by the user, immut\n    this.userStart = start\n    this.userEnd = end\n  }\n\n  _unref () {\n    const i = this.ranges.indexOf(this)\n    if (i === -1) return\n    const h = this.ranges.pop()\n    if (i < this.ranges.length) this.ranges[i] = h\n  }\n\n  _cancel (r) {\n    r.resolve(false)\n  }\n}\n\nclass UpgradeRequest extends Attachable {\n  constructor (replicator, fork, length) {\n    super()\n\n    this.fork = fork\n    this.length = length\n    this.inflight = []\n    this.replicator = replicator\n  }\n\n  _unref () {\n    if (this.replicator.eagerUpgrade === true || this.inflight.length > 0) return\n    this.replicator._upgrade = null\n  }\n\n  _cancel (r) {\n    r.resolve(false)\n  }\n}\n\nclass SeekRequest extends Attachable {\n  constructor (seeks, seeker) {\n    super()\n\n    this.seeker = seeker\n    this.inflight = []\n    this.seeks = seeks\n  }\n\n  _unref () {\n    if (this.inflight.length > 0) return\n    const i = this.seeks.indexOf(this)\n    if (i === -1) return\n    const h = this.seeks.pop()\n    if (i < this.seeks.length) this.seeks[i] = h\n  }\n}\n\nclass InflightTracker {\n  constructor () {\n    this._requests = []\n    this._free = []\n  }\n\n  get idle () {\n    return this._requests.length === this._free.length\n  }\n\n  * [Symbol.iterator] () {\n    for (const req of this._requests) {\n      if (req !== null) yield req\n    }\n  }\n\n  add (req) {\n    const id = this._free.length ? this._free.pop() : this._requests.push(null)\n    req.id = id\n    this._requests[id - 1] = req\n    return req\n  }\n\n  get (id) {\n    return id <= this._requests.length ? this._requests[id - 1] : null\n  }\n\n  remove (id, roundtrip) {\n    if (id > this._requests.length) return\n    this._requests[id - 1] = null\n    if (roundtrip === true) this._free.push(id)\n  }\n\n  reusable (id) {\n    this._free.push(id)\n  }\n}\n\nclass BlockTracker {\n  constructor () {\n    this._map = new Map()\n  }\n\n  [Symbol.iterator] () {\n    return this._map.values()\n  }\n\n  isEmpty () {\n    return this._map.size === 0\n  }\n\n  has (index) {\n    return this._map.has(index)\n  }\n\n  get (index) {\n    return this._map.get(index) || null\n  }\n\n  add (index, priority) {\n    let b = this._map.get(index)\n    if (b) return b\n\n    b = new BlockRequest(this, index, priority)\n    this._map.set(index, b)\n\n    return b\n  }\n\n  remove (index) {\n    const b = this.get(index)\n    this._map.delete(index)\n    return b\n  }\n}\n\nclass RoundtripQueue {\n  constructor () {\n    this.queue = []\n    this.tick = 0\n  }\n\n  clear () {\n    const ids = new Array(this.queue.length)\n    for (let i = 0; i < ids.length; i++) {\n      ids[i] = this.queue[i][1]\n    }\n\n    this.queue = []\n\n    return ids\n  }\n\n  add (id) {\n    this.queue.push([++this.tick, id])\n  }\n\n  flush (tick) {\n    let flushed = null\n\n    for (let i = 0; i < this.queue.length; i++) {\n      if (this.queue[i][0] > tick) break\n      if (flushed === null) flushed = []\n      flushed.push(this.queue[i][1])\n    }\n\n    if (flushed !== null) this.queue.splice(0, flushed.length)\n    return flushed\n  }\n}\n\nclass ProofRequest {\n  constructor (msg, proof, block, manifest) {\n    this.msg = msg\n    this.proof = proof\n    this.block = block\n    this.manifest = manifest\n  }\n\n  async fulfill () {\n    if (this.proof === null) return null\n\n    const [proof, block] = await Promise.all([this.proof.settle(), this.block])\n\n    if (this.manifest) proof.manifest = this.manifest\n\n    if (!block && proof.block) return null\n\n    if (block) proof.block.value = block\n    return proof\n  }\n}\n\nclass Peer {\n  constructor (replicator, protomux, channel, inflightRange) {\n    this.core = replicator.core\n    this.replicator = replicator\n    this.stream = protomux.stream\n    this.protomux = protomux\n    this.remotePublicKey = this.stream.remotePublicKey\n    this.remoteSupportsSeeks = false\n    this.inflightRange = inflightRange\n\n    this.paused = false\n    this.removed = false\n\n    this.channel = channel\n    this.channel.userData = this\n\n    this.wireSync = this.channel.messages[0]\n    this.wireRequest = this.channel.messages[1]\n    this.wireCancel = this.channel.messages[2]\n    this.wireData = this.channel.messages[3]\n    this.wireNoData = this.channel.messages[4]\n    this.wireWant = this.channel.messages[5]\n    this.wireUnwant = this.channel.messages[6]\n    this.wireBitfield = this.channel.messages[7]\n    this.wireRange = this.channel.messages[8]\n    this.wireExtension = this.channel.messages[9]\n\n    // Same stats as replicator, but for this specific peer\n    this.stats = {\n      wireSync: { tx: 0, rx: 0 },\n      wireRequest: { tx: 0, rx: 0 },\n      wireCancel: { tx: 0, rx: 0 },\n      wireData: { tx: 0, rx: 0 },\n      wireWant: { tx: 0, rx: 0 },\n      wireBitfield: { tx: 0, rx: 0 },\n      wireRange: { tx: 0, rx: 0 },\n      wireExtension: { tx: 0, rx: 0 },\n      hotswaps: 0\n    }\n\n    this.receiverQueue = new ReceiverQueue()\n    this.receiverBusy = false\n\n    // most often not used, so made on demand\n    this.roundtripQueue = null\n\n    this.inflight = 0\n    this.dataProcessing = 0\n\n    this.canUpgrade = true\n\n    this.needsSync = false\n    this.syncsProcessing = 0\n\n    this._remoteContiguousLength = 0\n\n    // TODO: tweak pipelining so that data sent BEFORE remoteOpened is not cap verified!\n    // we might wanna tweak that with some crypto, ie use the cap to encrypt it...\n    // or just be aware of that, to only push non leaky data\n\n    this.remoteOpened = false\n    this.remoteBitfield = new RemoteBitfield()\n    this.missingBlocks = new RemoteBitfield()\n\n    this.remoteFork = 0\n    this.remoteLength = 0\n    this.remoteCanUpgrade = false\n    this.remoteUploading = true\n    this.remoteDownloading = true\n    this.remoteSynced = false\n    this.remoteHasManifest = false\n    this.remoteRequests = new Map()\n\n    this.segmentsWanted = new Set()\n    this.broadcastedNonSparse = false\n\n    this.lengthAcked = 0\n\n    this.extensions = new Map()\n    this.lastExtensionSent = ''\n    this.lastExtensionRecv = ''\n\n    replicator._ifAvailable++\n    replicator._active++\n  }\n\n  get remoteContiguousLength () {\n    return this.remoteBitfield.findFirst(false, this._remoteContiguousLength)\n  }\n\n  getMaxInflight () {\n    const stream = this.stream.rawStream\n    if (!stream.udx) return Math.min(this.inflightRange[1], this.inflightRange[0] * 3)\n\n    const scale = stream.rtt <= SCALE_LATENCY ? 1 : stream.rtt / SCALE_LATENCY * Math.min(1, 2 / this.replicator.peers.length)\n    return Math.max(this.inflightRange[0], Math.round(Math.min(this.inflightRange[1], this.inflightRange[0] * scale)))\n  }\n\n  getMaxHotswapInflight () {\n    const inf = this.getMaxInflight()\n    return Math.max(16, inf / 2)\n  }\n\n  signalUpgrade () {\n    if (this._shouldUpdateCanUpgrade() === true) this._updateCanUpgradeAndSync()\n    else this.sendSync()\n  }\n\n  _markInflight (index) {\n    this.missingBlocks.set(index, false)\n  }\n\n  broadcastRange (start, length, drop) {\n    if (!this.isActive()) return\n\n    if (drop) this._unclearLocalRange(start, length)\n    else this._clearLocalRange(start, length)\n\n    // TODO: consider also adding early-returns on the drop===true case\n    if (!drop) {\n      // No need to broadcast if the remote already has this range\n\n      if (this._remoteContiguousLength >= start + length) return\n\n      if (length === 1) {\n        if (this.remoteBitfield.get(start)) return\n      } else {\n        if (this.remoteBitfield.firstUnset(start) >= start + length) return\n      }\n    }\n\n    this.wireRange.send({\n      drop,\n      start,\n      length\n    })\n    incrementTx(this.stats.wireRange, this.replicator.stats.wireRange)\n  }\n\n  extension (name, message) {\n    this.wireExtension.send({ name: name === this.lastExtensionSent ? '' : name, message })\n    incrementTx(this.stats.wireExtension, this.replicator.stats.wireExtension)\n    this.lastExtensionSent = name\n  }\n\n  onextension (message) {\n    const name = message.name || this.lastExtensionRecv\n    this.lastExtensionRecv = name\n    const ext = this.extensions.get(name)\n    if (ext) ext._onmessage({ start: 0, end: message.message.byteLength, buffer: message.message }, this)\n  }\n\n  sendSync () {\n    if (this.syncsProcessing !== 0) {\n      this.needsSync = true\n      return\n    }\n\n    if (this.core.state.fork !== this.remoteFork) {\n      this.canUpgrade = false\n    }\n\n    this.needsSync = false\n\n    this.wireSync.send({\n      fork: this.core.state.fork,\n      length: this.core.state.length,\n      remoteLength: this.core.state.fork === this.remoteFork ? this.remoteLength : 0,\n      canUpgrade: this.canUpgrade,\n      uploading: true,\n      downloading: this.replicator.isDownloading(),\n      hasManifest: !!this.core.header.manifest && this.core.compat === false\n    })\n    incrementTx(this.stats.wireSync, this.replicator.stats.wireSync)\n  }\n\n  onopen ({ seeks, capability }) {\n    const expected = caps.replicate(this.stream.isInitiator === false, this.core.key, this.stream.handshakeHash)\n\n    if (b4a.equals(capability, expected) !== true) { // TODO: change this to a rejection instead, less leakage\n      throw INVALID_CAPABILITY('Remote sent an invalid replication capability')\n    }\n\n    if (this.remoteOpened === true) return\n    this.remoteOpened = true\n    this.remoteSupportsSeeks = seeks\n\n    this.protomux.cork()\n\n    this.sendSync()\n\n    const contig = Math.min(this.core.state.length, this.core.header.hints.contiguousLength)\n    if (contig > 0) {\n      this.broadcastRange(0, contig, false)\n\n      if (contig === this.core.state.length) {\n        this.broadcastedNonSparse = true\n      }\n    }\n\n    this.replicator._ifAvailable--\n    this.replicator._addPeer(this)\n\n    this.protomux.uncork()\n\n    this.core.checkIfIdle()\n  }\n\n  onclose (isRemote) {\n    // we might have signalled to the remote that we are done (ie not downloading) and the remote might agree on that\n    // if that happens, the channel might be closed by the remote. if so just renegotiate it.\n    // TODO: add a CLOSE_REASON to mux to we can make this cleaner...\n    const reopen = isRemote === true && this.remoteOpened === true && this.remoteDownloading === false &&\n       this.remoteUploading === true && this.replicator.downloading === true\n\n    if (this.remoteOpened === false) {\n      this.replicator._ifAvailable--\n      this.replicator.updateAll()\n      return\n    }\n\n    this.remoteOpened = false\n    this.removed = true\n    this.remoteRequests.clear() // cancel all\n    this.receiverQueue.clear()\n\n    if (this.roundtripQueue !== null) {\n      for (const id of this.roundtripQueue.clear()) this.replicator._inflight.reusable(id)\n    }\n\n    this.replicator._removePeer(this)\n\n    if (reopen) {\n      this.replicator._makePeer(this.protomux)\n    }\n  }\n\n  closeIfIdle () {\n    if (this.remoteDownloading === false && this.replicator.isDownloading() === false) {\n      // idling, shut it down...\n      this.channel.close()\n      return true\n    }\n\n    return false\n  }\n\n  async onsync ({ fork, length, remoteLength, canUpgrade, uploading, downloading, hasManifest }) {\n    const lengthChanged = length !== this.remoteLength\n    const sameFork = fork === this.core.state.fork\n\n    this.remoteSynced = true\n    this.remoteFork = fork\n    this.remoteLength = length\n    this.remoteCanUpgrade = canUpgrade\n    this.remoteUploading = uploading\n    this.remoteDownloading = downloading\n    this.remoteHasManifest = hasManifest\n\n    if (this.closeIfIdle()) return\n\n    this.lengthAcked = sameFork ? remoteLength : 0\n    this.syncsProcessing++\n\n    this.replicator._updateFork(this)\n\n    if (this.remoteLength > this.core.state.length && this.lengthAcked === this.core.state.length) {\n      if (this.replicator._addUpgradeMaybe() !== null) this._update()\n    }\n\n    const upgrade = (lengthChanged === false || sameFork === false)\n      ? this.canUpgrade && sameFork\n      : await this._canUpgrade(length, fork)\n\n    if (length === this.remoteLength && fork === this.core.state.fork) {\n      this.canUpgrade = upgrade\n    }\n\n    if (--this.syncsProcessing !== 0) return // ie not latest\n\n    if (this.needsSync === true || (this.core.state.fork === this.remoteFork && this.core.state.length > this.remoteLength)) {\n      this.signalUpgrade()\n    }\n\n    this._update()\n  }\n\n  _shouldUpdateCanUpgrade () {\n    return this.core.state.fork === this.remoteFork &&\n      this.core.state.length > this.remoteLength &&\n      this.canUpgrade === false &&\n      this.syncsProcessing === 0\n  }\n\n  async _updateCanUpgradeAndSync () {\n    const { length, fork } = this.core.state\n\n    const canUpgrade = await this._canUpgrade(this.remoteLength, this.remoteFork)\n\n    if (this.syncsProcessing > 0 || length !== this.core.state.length || fork !== this.core.state.fork) {\n      return\n    }\n    if (canUpgrade === this.canUpgrade) {\n      return\n    }\n\n    this.canUpgrade = canUpgrade\n    this.sendSync()\n  }\n\n  // Safe to call in the background - never fails\n  async _canUpgrade (remoteLength, remoteFork) {\n    if (remoteFork !== this.core.state.fork) return false\n\n    if (remoteLength === 0) return true\n    if (remoteLength >= this.core.state.length) return false\n\n    try {\n      // Rely on caching to make sure this is cheap...\n      const canUpgrade = await MerkleTree.upgradeable(this.core.state, remoteLength)\n\n      if (remoteFork !== this.core.state.fork) return false\n\n      return canUpgrade\n    } catch {\n      return false\n    }\n  }\n\n  async _getProof (batch, msg) {\n    let block = null\n\n    if (msg.block) {\n      const index = msg.block.index\n\n      if (msg.fork !== this.core.state.fork || !this.core.bitfield.get(index)) {\n        return new ProofRequest(msg, null, null, null)\n      }\n\n      block = batch.getBlock(index)\n    }\n\n    const manifest = (msg.manifest && !this.core.compat) ? this.core.header.manifest : null\n    const proof = await MerkleTree.proof(this.core.state, batch, msg)\n\n    return new ProofRequest(msg, proof, block, manifest)\n  }\n\n  async onrequest (msg) {\n    const size = this.remoteRequests.size\n    this.remoteRequests.set(msg.id, msg)\n\n    // if size didnt change -> id overwrite -> old one is deleted, cancel current and re-add\n    if (size === this.remoteRequests.size) {\n      this._cancel(msg.id)\n      this.remoteRequests.set(msg.id, msg)\n    }\n\n    if (!this.protomux.drained || this.receiverQueue.length) {\n      this.receiverQueue.push(msg)\n      return\n    }\n\n    if (this.replicator.destroyed) return\n\n    await this._handleRequest(msg)\n  }\n\n  oncancel (msg) {\n    this._cancel(msg.request)\n  }\n\n  _cancel (id) {\n    this.remoteRequests.delete(id)\n    this.receiverQueue.delete(id)\n  }\n\n  ondrain () {\n    return this._handleRequests()\n  }\n\n  async _handleRequests () {\n    if (this.receiverBusy || this.replicator.destroyed) return\n    this.receiverBusy = true\n    this.protomux.cork()\n\n    while (this.remoteOpened && this.protomux.drained && this.receiverQueue.length > 0 && !this.removed) {\n      const msg = this.receiverQueue.shift()\n      await this._handleRequest(msg)\n    }\n\n    this.protomux.uncork()\n    this.receiverBusy = false\n  }\n\n  async _handleRequest (msg) {\n    const batch = this.core.storage.read()\n\n    // TODO: could still be answerable if (index, fork) is an ancestor of the current fork\n    const req = msg.fork === this.core.state.fork\n      ? await this._getProof(batch, msg)\n      : new ProofRequest(msg, null, null, null)\n\n    batch.tryFlush()\n\n    await this._fulfillRequest(req)\n  }\n\n  async _fulfillRequest (req) {\n    const proof = await req.fulfill()\n\n    // if cancelled do not reply\n    if (this.remoteRequests.get(req.msg.id) !== req.msg) {\n      return\n    }\n\n    // sync from now on, so safe to delete from the map\n    this.remoteRequests.delete(req.msg.id)\n\n    if (!this.isActive() && proof.block !== null) {\n      return\n    }\n\n    if (proof === null) {\n      if (req.msg.manifest && this.core.header.manifest) {\n        const manifest = this.core.header.manifest\n        this.wireData.send({ request: req.msg.id, fork: this.core.state.fork, block: null, hash: null, seek: null, upgrade: null, manifest })\n        incrementTx(this.stats.wireData, this.replicator.stats.wireData)\n        return\n      }\n\n      this.wireNoData.send({ request: req.msg.id })\n      return\n    }\n\n    if (proof.block !== null) {\n      this.replicator._onupload(proof.block.index, proof.block.value.byteLength, this)\n    }\n\n    this.wireData.send({\n      request: req.msg.id,\n      fork: req.msg.fork,\n      block: proof.block,\n      hash: proof.hash,\n      seek: proof.seek,\n      upgrade: proof.upgrade,\n      manifest: proof.manifest\n    })\n    incrementTx(this.stats.wireData, this.replicator.stats.wireData)\n  }\n\n  _cancelRequest (req) {\n    if (req.priority === PRIORITY.CANCELLED) return\n    // mark as cancelled also and avoid re-entry\n    req.priority = PRIORITY.CANCELLED\n\n    this.inflight--\n    this.replicator._requestDone(req.id, false)\n\n    // clear inflight state\n    if (isBlockRequest(req)) this.replicator._unmarkInflight(req.block.index)\n    if (isUpgradeRequest(req)) this.replicator._clearInflightUpgrade(req)\n\n    if (this.roundtripQueue === null) this.roundtripQueue = new RoundtripQueue()\n    this.roundtripQueue.add(req.id)\n    this.wireCancel.send({ request: req.id })\n    incrementTx(this.stats.wireCancel, this.replicator.stats.wireCancel)\n  }\n\n  _checkIfConflict () {\n    this.paused = true\n\n    const length = Math.min(this.core.state.length, this.remoteLength)\n    if (length === 0) return // pause and ignore\n\n    this.wireRequest.send({\n      id: 0, // TODO: use an more explicit id for this eventually...\n      fork: this.remoteFork,\n      block: null,\n      hash: null,\n      seek: null,\n      upgrade: {\n        start: 0,\n        length\n      }\n    })\n\n    incrementTx(this.stats.wireRequest, this.replicator.stats.wireRequest)\n  }\n\n  async ondata (data) {\n    // always allow a fork conflict proof to be sent\n    if (data.request === 0 && data.upgrade && data.upgrade.start === 0) {\n      if (await this.core.checkConflict(data, this)) return\n      this.paused = false\n    }\n\n    const req = data.request > 0 ? this.replicator._inflight.get(data.request) : null\n    const reorg = data.fork > this.core.state.fork\n\n    // no push atm, TODO: check if this satisfies another pending request\n    // allow reorg pushes tho as those are not written to storage so we'll take all the help we can get\n    if (req === null && reorg === false) return\n\n    if (req !== null) {\n      if (req.peer !== this) return\n      this._onrequestroundtrip(req)\n    }\n\n    try {\n      if (reorg === true) return await this.replicator._onreorgdata(this, req, data)\n    } catch (err) {\n      safetyCatch(err)\n      if (isBlockRequest(req)) this.replicator._unmarkInflight(req.block.index)\n\n      this.paused = true\n      this.replicator._oninvalid(err, req, data, this)\n      return\n    }\n\n    this.dataProcessing++\n    if (isBlockRequest(req)) this.replicator._markProcessing(req.block.index)\n\n    try {\n      if (!matchingRequest(req, data) || !(await this.core.verify(data, this))) {\n        this.replicator._onnodata(this, req)\n        return\n      }\n    } catch (err) {\n      safetyCatch(err)\n      if (isBlockRequest(req)) this.replicator._unmarkInflight(req.block.index)\n\n      if (err.code === 'WRITE_FAILED') {\n        // For example, we don't want to keep pulling data when storage is full\n        // TODO: notify the user somehow\n        this.paused = true\n        return\n      }\n\n      if (this.core.closed && !isCriticalError(err)) return\n\n      if (err.code !== 'INVALID_OPERATION') {\n        // might be a fork, verify\n        this._checkIfConflict()\n      }\n\n      this.replicator._onnodata(this, req)\n      this.replicator._oninvalid(err, req, data, this)\n      return\n    } finally {\n      if (isBlockRequest(req)) this.replicator._markProcessed(req.block.index)\n      this.dataProcessing--\n    }\n\n    this.replicator._ondata(this, req, data)\n\n    if (this._shouldUpdateCanUpgrade() === true) {\n      this._updateCanUpgradeAndSync()\n    }\n  }\n\n  onnodata ({ request }) {\n    const req = request > 0 ? this.replicator._inflight.get(request) : null\n\n    if (req === null || req.peer !== this) return\n\n    this._onrequestroundtrip(req)\n    this.replicator._onnodata(this, req)\n  }\n\n  _onrequestroundtrip (req) {\n    if (req.priority === PRIORITY.CANCELLED) return\n    // to avoid re-entry we also just mark it as cancelled\n    req.priority = PRIORITY.CANCELLED\n\n    this.inflight--\n    this.replicator._requestDone(req.id, true)\n    if (this.roundtripQueue === null) return\n    const flushed = this.roundtripQueue.flush(req.rt)\n    if (flushed === null) return\n    for (const id of flushed) this.replicator._inflight.reusable(id)\n  }\n\n  onwant ({ start, length }) {\n    this.replicator._onwant(this, start, length)\n  }\n\n  onunwant () {\n    // TODO\n  }\n\n  onbitfield ({ start, bitfield }) {\n    if (start < this._remoteContiguousLength) this._remoteContiguousLength = start // bitfield is always the truth\n    this.remoteBitfield.insert(start, bitfield)\n    this.missingBlocks.insert(start, bitfield)\n    this._clearLocalRange(start, bitfield.byteLength * 8)\n    this._update()\n  }\n\n  _clearLocalRange (start, length) {\n    const bitfield = this.core.skipBitfield === null ? this.core.bitfield : this.core.skipBitfield\n\n    if (length === 1) {\n      this.missingBlocks.set(start, this._remoteHasBlock(start) && !bitfield.get(start))\n      return\n    }\n\n    const contig = Math.min(this.core.state.length, this.core.header.hints.contiguousLength)\n\n    if (start + length < contig) {\n      this.missingBlocks.setRange(start, contig, false)\n      return\n    }\n\n    const rem = start & 32767\n    if (rem > 0) {\n      start -= rem\n      length += rem\n    }\n\n    const end = start + Math.min(length, this.core.state.length)\n    while (start < end) {\n      const local = bitfield.getBitfield(start)\n\n      if (local && local.bitfield) {\n        this.missingBlocks.clear(start, local.bitfield)\n      }\n\n      start += 32768\n    }\n  }\n\n  _resetMissingBlock (index) {\n    const bitfield = this.core.skipBitfield === null ? this.core.bitfield : this.core.skipBitfield\n    this.missingBlocks.set(index, this._remoteHasBlock(index) && !bitfield.get(index))\n  }\n\n  _unclearLocalRange (start, length) {\n    if (length === 1) {\n      this._resetMissingBlock(start)\n      return\n    }\n\n    const rem = start & 2097151\n    if (rem > 0) {\n      start -= rem\n      length += rem\n    }\n\n    const fixedStart = start\n\n    const end = start + Math.min(length, this.remoteLength)\n    while (start < end) {\n      const remote = this.remoteBitfield.getBitfield(start)\n      if (remote && remote.bitfield) {\n        this.missingBlocks.insert(start, remote.bitfield)\n      }\n\n      start += 2097152\n    }\n\n    this._clearLocalRange(fixedStart, length)\n  }\n\n  onrange ({ drop, start, length }) {\n    const has = drop === false\n\n    if (drop === true && start < this._remoteContiguousLength) {\n      this._remoteContiguousLength = start\n    }\n\n    if (start === 0 && drop === false) {\n      if (length > this._remoteContiguousLength) this._remoteContiguousLength = length\n    } else if (length === 1) {\n      const bitfield = this.core.skipBitfield === null ? this.core.bitfield : this.core.skipBitfield\n      this.remoteBitfield.set(start, has)\n      this.missingBlocks.set(start, has && !bitfield.get(start))\n    } else {\n      const rangeStart = this.remoteBitfield.findFirst(!has, start)\n      const rangeEnd = length + start\n\n      if (rangeStart !== -1 && rangeStart < rangeEnd) {\n        this.remoteBitfield.setRange(rangeStart, rangeEnd, has)\n        this.missingBlocks.setRange(rangeStart, rangeEnd, has)\n        if (has) this._clearLocalRange(rangeStart, rangeEnd - rangeStart)\n      }\n    }\n\n    if (drop === false) this._update()\n  }\n\n  onreorghint () {\n    // TODO\n  }\n\n  _update () {\n    // TODO: if this is in a batch or similar it would be better to defer it\n    // we could do that with nextTick/microtick mb? (combined with a property on the session to signal read buffer mb)\n    this.replicator.updatePeer(this)\n  }\n\n  async _onconflict () {\n    this.protomux.cork()\n    if (this.remoteLength > 0 && this.core.state.fork === this.remoteFork) {\n      await this.onrequest({\n        id: 0,\n        fork: this.core.state.fork,\n        block: null,\n        hash: null,\n        seek: null,\n        upgrade: {\n          start: 0,\n          length: Math.min(this.core.state.length, this.remoteLength)\n        }\n      })\n    }\n    this.channel.close()\n    this.protomux.uncork()\n  }\n\n  _makeRequest (needsUpgrade, priority, minLength) {\n    if (needsUpgrade === true && this.replicator._shouldUpgrade(this) === false) {\n      return null\n    }\n\n    // ensure that the remote has signalled they have the length we request\n    if (this.remoteLength < minLength) {\n      return null\n    }\n\n    if (needsUpgrade === false && this.replicator._autoUpgrade(this) === true) {\n      needsUpgrade = true\n    }\n\n    return {\n      peer: this,\n      rt: this.roundtripQueue === null ? 0 : this.roundtripQueue.tick,\n      id: 0,\n      fork: this.remoteFork,\n      block: null,\n      hash: null,\n      seek: null,\n      upgrade: needsUpgrade === false\n        ? null\n        : { start: this.core.state.length, length: this.remoteLength - this.core.state.length },\n      // remote manifest check can be removed eventually...\n      manifest: this.core.header.manifest === null && this.remoteHasManifest === true,\n      priority\n    }\n  }\n\n  _requestManifest () {\n    const req = this._makeRequest(false, 0, 0)\n    this._send(req)\n  }\n\n  _requestUpgrade (u) {\n    const req = this._makeRequest(true, 0, 0)\n    if (req === null) return false\n\n    this._send(req)\n\n    return true\n  }\n\n  _requestSeek (s) {\n    // if replicator is updating the seeks etc, bail and wait for it to drain\n    if (this.replicator._updatesPending > 0) return false\n\n    const { length, fork } = this.core.state\n\n    if (fork !== this.remoteFork) return false\n\n    if (s.seeker.start >= length) {\n      const req = this._makeRequest(true, 0, 0)\n\n      // We need an upgrade for the seek, if non can be provided, skip\n      if (req === null) return false\n\n      req.seek = this.remoteSupportsSeeks ? { bytes: s.seeker.bytes, padding: s.seeker.padding } : null\n\n      s.inflight.push(req)\n      this._send(req)\n\n      return true\n    }\n\n    const len = s.seeker.end - s.seeker.start\n    const off = s.seeker.start + Math.floor(Math.random() * len)\n\n    for (let i = 0; i < len; i++) {\n      let index = off + i\n      if (index > s.seeker.end) index -= len\n\n      if (this._remoteHasBlock(index) === false) continue\n      if (this.core.bitfield.get(index) === true) continue\n      if (!this._hasTreeParent(index)) continue\n\n      // Check if this block is currently inflight - if so pick another\n      const b = this.replicator._blocks.get(index)\n      if (b !== null && b.inflight.length > 0) continue\n\n      // Block is not inflight, but we only want the hash, check if that is inflight\n      const h = this.replicator._hashes.add(index, PRIORITY.NORMAL)\n      if (h.inflight.length > 0) continue\n\n      const req = this._makeRequest(false, h.priority, index + 1)\n      if (req === null) continue\n\n      const nodes = flatTree.depth(s.seeker.start + s.seeker.end - 1)\n\n      req.hash = { index: 2 * index, nodes }\n      req.seek = this.remoteSupportsSeeks ? { bytes: s.seeker.bytes, padding: s.seeker.padding } : null\n\n      s.inflight.push(req)\n      h.inflight.push(req)\n      this._send(req)\n\n      return true\n    }\n\n    this._maybeWant(s.seeker.start, len)\n    return false\n  }\n\n  _hasTreeParent (index) {\n    if (this.remoteLength >= this.core.state.length) return true\n\n    const ite = flatTree.iterator(index * 2)\n\n    let span = 2\n    let length = 0\n\n    while (true) {\n      ite.parent()\n\n      const left = (ite.index - ite.factor / 2 + 1) / 2\n      length = left + span\n\n      // if larger than local AND larger than remote - they share the root so its ok\n      if (length > this.core.state.length) {\n        if (length > this.remoteLength) return true\n        break\n      }\n\n      // its less than local but larger than remote so skip it\n      if (length > this.remoteLength) break\n\n      span *= 2\n      const first = this.core.bitfield.findFirst(true, left)\n      if (first > -1 && first < length) return true\n    }\n\n    // TODO: push to async queue and check against our local merkle tree if we actually can request this block\n    return false\n  }\n\n  _remoteHasBlock (index) {\n    return index < this._remoteContiguousLength || this.remoteBitfield.get(index) === true\n  }\n\n  _sendBlockRequest (req, b) {\n    req.block = { index: b.index, nodes: 0 }\n    this.replicator._markInflight(b.index)\n\n    b.inflight.push(req)\n    this.replicator.hotswaps.add(b)\n    this._send(req)\n  }\n\n  _requestBlock (b) {\n    const { length, fork } = this.core.state\n\n    if (this._remoteHasBlock(b.index) === false || fork !== this.remoteFork) {\n      this._maybeWant(b.index)\n      return false\n    }\n\n    if (!this._hasTreeParent(b.index)) {\n      return false\n    }\n\n    const req = this._makeRequest(b.index >= length, b.priority, b.index + 1)\n    if (req === null) return false\n\n    this._sendBlockRequest(req, b)\n\n    return true\n  }\n\n  _requestRangeBlock (index, length) {\n    if (this.core.bitfield.get(index) === true || !this._hasTreeParent(index)) return false\n\n    const b = this.replicator._blocks.add(index, PRIORITY.NORMAL)\n    if (b.inflight.length > 0) {\n      this.missingBlocks.set(index, false) // in case we missed some states just set them ondemand, nbd\n      return false\n    }\n\n    const req = this._makeRequest(index >= length, b.priority, index + 1)\n\n    // If the request cannot be satisfied, dealloc the block request if no one is subscribed to it\n    if (req === null) {\n      b.gc()\n      return false\n    }\n\n    this._sendBlockRequest(req, b)\n\n    // Don't think this will ever happen, as the pending queue is drained before the range queue\n    // but doesn't hurt to check this explicitly here also.\n    if (b.queued) b.queued = false\n    return true\n  }\n\n  _findNext (i) {\n    if (i < this._remoteContiguousLength) {\n      if (this.core.skipBitfield === null) this.replicator._openSkipBitfield()\n      i = this.core.skipBitfield.findFirst(false, i)\n      if (i < this._remoteContiguousLength && i > -1) return i\n      i = this._remoteContiguousLength\n    }\n\n    return this.missingBlocks.findFirst(true, i)\n  }\n\n  _requestRange (r) {\n    const { length, fork } = this.core.state\n\n    if (r.blocks) {\n      let min = -1\n      let max = -1\n\n      for (let i = r.start; i < r.end; i++) {\n        const index = r.blocks[i]\n        if (min === -1 || index < min) min = index\n        if (max === -1 || index > max) max = index\n        const has = index < this._remoteContiguousLength || this.missingBlocks.get(index) === true\n        if (has === true && this._requestRangeBlock(index, length)) return true\n      }\n\n      if (min > -1) this._maybeWant(min, max - min)\n      return false\n    }\n\n    const end = Math.min(this.core.state.length, Math.min(r.end === -1 ? this.remoteLength : r.end, this.remoteLength))\n    if (end <= r.start || fork !== this.remoteFork) return false\n\n    const len = end - r.start\n    const off = r.start + (r.linear ? 0 : Math.floor(Math.random() * len))\n\n    let i = off\n\n    while (true) {\n      i = this._findNext(i)\n      if (i === -1 || i >= end) break\n\n      if (this._requestRangeBlock(i, length)) return true\n      i++\n    }\n\n    i = r.start\n\n    while (true) {\n      i = this._findNext(i)\n      if (i === -1 || i >= off) break\n\n      if (this._requestRangeBlock(i, length)) return true\n      i++\n    }\n\n    this._maybeWant(r.start, len)\n    return false\n  }\n\n  _requestForkProof (f) {\n    const req = this._makeRequest(false, 0, 0)\n\n    req.upgrade = { start: 0, length: this.remoteLength }\n    req.manifest = !this.core.header.manifest\n\n    f.inflight.push(req)\n    this._send(req)\n  }\n\n  _requestForkRange (f) {\n    if (f.fork !== this.remoteFork || f.batch.want === null) return false\n\n    const end = Math.min(f.batch.want.end, this.remoteLength)\n    if (end < f.batch.want.start) return false\n\n    const len = end - f.batch.want.start\n    const off = f.batch.want.start + Math.floor(Math.random() * len)\n\n    for (let i = 0; i < len; i++) {\n      let index = off + i\n      if (index >= end) index -= len\n\n      if (this._remoteHasBlock(index) === false) continue\n\n      const req = this._makeRequest(false, 0, 0)\n\n      req.hash = { index: 2 * index, nodes: f.batch.want.nodes }\n\n      f.inflight.push(req)\n      this._send(req)\n\n      return true\n    }\n\n    this._maybeWant(f.batch.want.start, len)\n    return false\n  }\n\n  _maybeWant (start, length = 1) {\n    if (start + length <= this.remoteContiguousLength) return\n\n    let i = Math.floor(start / DEFAULT_SEGMENT_SIZE)\n    const n = Math.ceil((start + length) / DEFAULT_SEGMENT_SIZE)\n\n    for (; i < n; i++) {\n      if (this.segmentsWanted.has(i)) continue\n      this.segmentsWanted.add(i)\n\n      this.wireWant.send({\n        start: i * DEFAULT_SEGMENT_SIZE,\n        length: DEFAULT_SEGMENT_SIZE\n      })\n      incrementTx(this.stats.wireWant, this.replicator.stats.wireWant)\n    }\n  }\n\n  isActive () {\n    if (this.paused || this.removed || this.core.header.frozen) return false\n    return true\n  }\n\n  async _send (req) {\n    const fork = this.core.state.fork\n\n    this.inflight++\n    this.replicator._inflight.add(req)\n\n    if (req.upgrade !== null && req.fork === fork) {\n      const u = this.replicator._addUpgrade()\n      u.inflight.push(req)\n    }\n\n    try {\n      if (req.block !== null && req.fork === fork) {\n        req.block.nodes = await MerkleTree.missingNodes(this.core.state, 2 * req.block.index, this.core.state.length)\n        if (req.priority === PRIORITY.CANCELLED) return\n      }\n      if (req.hash !== null && req.fork === fork && req.hash.nodes === 0) {\n        req.hash.nodes = await MerkleTree.missingNodes(this.core.state, req.hash.index, this.core.state.length)\n        if (req.priority === PRIORITY.CANCELLED) return\n\n        // nodes === 0, we already have it, bail\n        if (req.hash.nodes === 0 && (req.hash.index & 1) === 0) {\n          this.inflight--\n          this.replicator._resolveHashLocally(this, req)\n          return\n        }\n      }\n    } catch (err) {\n      this.stream.destroy(err)\n      return\n    }\n\n    this.wireRequest.send(req)\n    incrementTx(this.stats.wireRequest, this.replicator.stats.wireRequest)\n  }\n}\n\nmodule.exports = class Replicator {\n  static Peer = Peer // hack to be able to access Peer from outside this module\n\n  constructor (core, {\n    notDownloadingLinger = NOT_DOWNLOADING_SLACK,\n    eagerUpgrade = true,\n    allowFork = true,\n    inflightRange = null\n  } = {}) {\n    this.core = core\n    this.eagerUpgrade = eagerUpgrade\n    this.allowFork = allowFork\n    this.ondownloading = null // optional external hook for monitoring downloading status\n    this.peers = []\n    this.findingPeers = 0 // updatable from the outside\n    this.destroyed = false\n    this.downloading = false\n    this.activeSessions = 0\n\n    this.hotswaps = new HotswapQueue()\n    this.inflightRange = inflightRange || DEFAULT_MAX_INFLIGHT\n\n    // Note: nodata and unwant not currently tracked\n    // tx = transmitted, rx = received\n    this.stats = {\n      wireSync: { tx: 0, rx: 0 },\n      wireRequest: { tx: 0, rx: 0 },\n      wireCancel: { tx: 0, rx: 0 },\n      wireData: { tx: 0, rx: 0 },\n      wireWant: { tx: 0, rx: 0 },\n      wireBitfield: { tx: 0, rx: 0 },\n      wireRange: { tx: 0, rx: 0 },\n      wireExtension: { tx: 0, rx: 0 },\n      hotswaps: 0\n    }\n\n    this._attached = new Set()\n    this._inflight = new InflightTracker()\n    this._blocks = new BlockTracker()\n    this._hashes = new BlockTracker()\n\n    this._queued = []\n\n    this._seeks = []\n    this._upgrade = null\n    this._reorgs = []\n    this._ranges = []\n\n    this._hadPeers = false\n    this._active = 0\n    this._ifAvailable = 0\n    this._updatesPending = 0\n    this._applyingReorg = null\n    this._manifestPeer = null\n    this._notDownloadingLinger = notDownloadingLinger\n    this._downloadingTimer = null\n\n    const self = this\n    this._onstreamclose = onstreamclose\n\n    function onstreamclose () {\n      self.detachFrom(this.userData)\n    }\n  }\n\n  updateActivity (inc, session) {\n    this.activeSessions += inc\n    this.setDownloading(this.activeSessions !== 0, session)\n  }\n\n  isDownloading () {\n    return this.downloading || !this._inflight.idle\n  }\n\n  setDownloading (downloading) {\n    clearTimeout(this._downloadingTimer)\n\n    if (this.destroyed) return\n    if (downloading || this._notDownloadingLinger === 0) {\n      this.setDownloadingNow(downloading)\n      return\n    }\n\n    this._downloadingTimer = setTimeout(setDownloadingLater, this._notDownloadingLinger, this, downloading)\n    if (this._downloadingTimer.unref) this._downloadingTimer.unref()\n  }\n\n  setDownloadingNow (downloading) {\n    this._downloadingTimer = null\n    if (this.downloading === downloading) return\n    this.downloading = downloading\n    if (!downloading && this.isDownloading()) return\n\n    for (const peer of this.peers) peer.signalUpgrade()\n\n    if (downloading) { // restart channel if needed...\n      for (const protomux of this._attached) {\n        if (!protomux.stream.handshakeHash) continue\n        if (protomux.opened({ protocol: 'hypercore/alpha', id: this.core.discoveryKey })) continue\n        this._makePeer(protomux, true)\n      }\n    } else {\n      for (const peer of this.peers) peer.closeIfIdle()\n    }\n\n    if (this.ondownloading !== null && downloading) this.ondownloading()\n  }\n\n  cork () {\n    for (const peer of this.peers) peer.protomux.cork()\n  }\n\n  uncork () {\n    for (const peer of this.peers) peer.protomux.uncork()\n  }\n\n  // Called externally when a range of new blocks has been processed/removed\n  onhave (start, length, drop = false) {\n    for (const peer of this.peers) peer.broadcastRange(start, length, drop)\n  }\n\n  // Called externally when a truncation upgrade has been processed\n  ontruncate (newLength, truncated) {\n    const notify = []\n\n    for (const blk of this._blocks) {\n      if (blk.index < newLength) continue\n      notify.push(blk)\n    }\n\n    for (const blk of notify) {\n      for (const r of blk.refs) {\n        if (r.snapshot === false) continue\n        blk.detach(r, SNAPSHOT_NOT_AVAILABLE())\n      }\n    }\n\n    for (const peer of this.peers) peer._unclearLocalRange(newLength, truncated)\n  }\n\n  // Called externally when a upgrade has been processed\n  onupgrade () {\n    for (const peer of this.peers) peer.signalUpgrade()\n    if (this._blocks.isEmpty() === false) this._resolveBlocksLocally()\n    if (this._upgrade !== null) this._resolveUpgradeRequest(null)\n    if (!this._blocks.isEmpty() || this._ranges.length !== 0 || this._seeks.length !== 0) {\n      this._updateNonPrimary(true)\n    }\n  }\n\n  // Called externally when a conflict has been detected and verified\n  async onconflict () {\n    const all = []\n    for (const peer of this.peers) {\n      all.push(peer._onconflict())\n    }\n    await Promise.allSettled(all)\n  }\n\n  async applyPendingReorg () {\n    if (this._applyingReorg !== null) {\n      await this._applyingReorg\n      return true\n    }\n\n    for (let i = this._reorgs.length - 1; i >= 0; i--) {\n      const f = this._reorgs[i]\n      if (f.batch !== null && f.batch.finished) {\n        await this._applyReorg(f)\n        return true\n      }\n    }\n\n    return false\n  }\n\n  addUpgrade (session) {\n    if (this._upgrade !== null) {\n      const ref = this._upgrade.attach(session)\n      this._checkUpgradeIfAvailable()\n      return ref\n    }\n\n    const ref = this._addUpgrade().attach(session)\n\n    this.updateAll()\n\n    return ref\n  }\n\n  addBlock (session, index) {\n    const b = this._blocks.add(index, PRIORITY.HIGH)\n    const ref = b.attach(session)\n\n    this._queueBlock(b)\n    this.updateAll()\n\n    return ref\n  }\n\n  addSeek (session, seeker) {\n    const s = new SeekRequest(this._seeks, seeker)\n    const ref = s.attach(session)\n\n    this._seeks.push(s)\n    this.updateAll()\n\n    return ref\n  }\n\n  addRange (session, { start = 0, end = -1, length = toLength(start, end), blocks = null, linear = false, ifAvailable = false } = {}) {\n    if (blocks !== null) { // if using blocks, start, end just acts as frames around the blocks array\n      start = 0\n      end = length = blocks.length\n    }\n\n    const r = new RangeRequest(\n      this._ranges,\n      start,\n      length === -1 ? -1 : start + length,\n      linear,\n      ifAvailable,\n      blocks\n    )\n\n    const ref = r.attach(session)\n\n    // Trigger this to see if this is already resolved...\n    // Also auto compresses the range based on local bitfield\n    clampRange(this.core, r)\n\n    this._ranges.push(r)\n\n    if (r.end !== -1 && r.start >= r.end) {\n      this._resolveRangeRequest(r, this._ranges.length - 1)\n      return ref\n    }\n\n    this.updateAll()\n\n    return ref\n  }\n\n  cancel (ref) {\n    ref.context.detach(ref, null)\n  }\n\n  clearRequests (session, err = null) {\n    let cleared = false\n    while (session.length > 0) {\n      const ref = session[session.length - 1]\n      ref.context.detach(ref, err)\n      cleared = true\n    }\n\n    if (cleared) this.updateAll()\n  }\n\n  _addUpgradeMaybe () {\n    return this.eagerUpgrade === true ? this._addUpgrade() : this._upgrade\n  }\n\n  // TODO: this function is OVER called atm, at each updatePeer/updateAll\n  // instead its more efficient to only call it when the conditions in here change - ie on sync/add/remove peer\n  // Do this when we have more tests.\n  _checkUpgradeIfAvailable () {\n    if (this._ifAvailable > 0 && this.peers.length < MAX_PEERS_UPGRADE) return\n    if (this._upgrade === null || this._upgrade.refs.length === 0) return\n    if (this._hadPeers === false && this.findingPeers > 0) return\n\n    const maxPeers = Math.min(this.peers.length, MAX_PEERS_UPGRADE)\n\n    // check if a peer can upgrade us\n\n    for (let i = 0; i < maxPeers; i++) {\n      const peer = this.peers[i]\n\n      if (peer.remoteSynced === false) return\n\n      if (this.core.state.length === 0 && peer.remoteLength > 0) return\n\n      if (peer.remoteLength <= this._upgrade.length || peer.remoteFork !== this._upgrade.fork) continue\n\n      if (peer.syncsProcessing > 0) return\n\n      if (peer.lengthAcked !== this.core.state.length && peer.remoteFork === this.core.state.fork) return\n      if (peer.remoteCanUpgrade === true) return\n    }\n\n    // check if reorgs in progress...\n\n    if (this._applyingReorg !== null) return\n\n    // TODO: we prob should NOT wait for inflight reorgs here, seems better to just resolve the upgrade\n    // and then apply the reorg on the next call in case it's slow - needs some testing in practice\n\n    for (let i = 0; i < this._reorgs.length; i++) {\n      const r = this._reorgs[i]\n      if (r.inflight.length > 0) return\n    }\n\n    // if something is inflight, wait for that first\n    if (this._upgrade.inflight.length > 0) return\n\n    // nothing to do, indicate no update avail\n\n    const u = this._upgrade\n    this._upgrade = null\n    u.resolve(false)\n  }\n\n  _addUpgrade () {\n    if (this._upgrade !== null) return this._upgrade\n\n    // TODO: needs a reorg: true/false flag to indicate if the user requested a reorg\n    this._upgrade = new UpgradeRequest(this, this.core.state.fork, this.core.state.length)\n\n    return this._upgrade\n  }\n\n  _addReorg (fork, peer) {\n    if (this.allowFork === false) return null\n\n    // TODO: eager gc old reorgs from the same peer\n    // not super important because they'll get gc'ed when the request finishes\n    // but just spam the remote can do ...\n\n    for (const f of this._reorgs) {\n      if (f.fork > fork && f.batch !== null) return null\n      if (f.fork === fork) return f\n    }\n\n    const f = {\n      fork,\n      inflight: [],\n      batch: null\n    }\n\n    this._reorgs.push(f)\n\n    // maintain sorted by fork\n    let i = this._reorgs.length - 1\n    while (i > 0 && this._reorgs[i - 1].fork > fork) {\n      this._reorgs[i] = this._reorgs[i - 1]\n      this._reorgs[--i] = f\n    }\n\n    return f\n  }\n\n  _shouldUpgrade (peer) {\n    if (this._upgrade !== null && this._upgrade.inflight.length > 0) return false\n    return peer.remoteCanUpgrade === true &&\n      peer.remoteLength > this.core.state.length &&\n      peer.lengthAcked === this.core.state.length\n  }\n\n  _autoUpgrade (peer) {\n    return this._upgrade !== null && peer.remoteFork === this.core.state.fork && this._shouldUpgrade(peer)\n  }\n\n  _addPeer (peer) {\n    this._hadPeers = true\n    this.peers.push(peer)\n    this.updatePeer(peer)\n    this._onpeerupdate(true, peer)\n  }\n\n  _requestDone (id, roundtrip) {\n    this._inflight.remove(id, roundtrip)\n    if (this.isDownloading() === true) return\n    for (const peer of this.peers) peer.signalUpgrade()\n  }\n\n  _removePeer (peer) {\n    this.peers.splice(this.peers.indexOf(peer), 1)\n\n    if (this._manifestPeer === peer) this._manifestPeer = null\n\n    for (const req of this._inflight) {\n      if (req.peer !== peer) continue\n      this._inflight.remove(req.id, true)\n      this._clearRequest(peer, req)\n    }\n\n    this._onpeerupdate(false, peer)\n    this.updateAll()\n  }\n\n  _queueBlock (b) {\n    if (b.inflight.length > 0 || b.queued === true) return\n    b.queued = true\n    this._queued.push(b)\n  }\n\n  _resolveHashLocally (peer, req) {\n    this._requestDone(req.id, false)\n    this._resolveBlockRequest(this._hashes, req.hash.index / 2, null, req)\n    this.updatePeer(peer)\n  }\n\n  // Runs in the background - not allowed to throw\n  async _resolveBlocksLocally () {\n    // TODO: check if fork compat etc. Requires that we pass down truncation info\n\n    const clear = []\n    const blocks = []\n\n    const reader = this.core.storage.read()\n    for (const b of this._blocks) {\n      if (this.core.bitfield.get(b.index) === false) continue\n      blocks.push(this._resolveLocalBlock(b, reader, clear))\n    }\n    reader.tryFlush()\n\n    await Promise.all(blocks)\n\n    if (!clear.length) return\n\n    // Currently the block tracker does not support deletes during iteration, so we make\n    // sure to clear them afterwards.\n    for (const b of clear) {\n      this._blocks.remove(b.index)\n      removeHotswap(b)\n    }\n  }\n\n  async _resolveLocalBlock (b, reader, resolved) {\n    try {\n      b.resolve(await reader.getBlock(b.index))\n    } catch (err) {\n      b.reject(err)\n      return\n    }\n\n    resolved.push(b)\n  }\n\n  _resolveBlockRequest (tracker, index, value, req) {\n    const b = tracker.remove(index)\n    if (b === null) return false\n\n    removeInflight(b.inflight, req)\n    removeHotswap(b)\n    b.queued = false\n\n    b.resolve(value)\n\n    if (b.inflight.length > 0) { // if anything is still inflight, cancel it\n      for (let i = b.inflight.length - 1; i >= 0; i--) {\n        const req = b.inflight[i]\n        req.peer._cancelRequest(req)\n      }\n    }\n\n    return true\n  }\n\n  _resolveUpgradeRequest (req) {\n    if (req !== null) removeInflight(this._upgrade.inflight, req)\n\n    if (this.core.state.length === this._upgrade.length && this.core.state.fork === this._upgrade.fork) return false\n\n    const u = this._upgrade\n    this._upgrade = null\n    u.resolve(true)\n\n    return true\n  }\n\n  _resolveRangeRequest (req, index) {\n    const head = this._ranges.pop()\n\n    if (index < this._ranges.length) this._ranges[index] = head\n\n    req.resolve(true)\n  }\n\n  _clearInflightBlock (tracker, req) {\n    const isBlock = tracker === this._blocks\n    const index = isBlock === true ? req.block.index : req.hash.index / 2\n    const b = tracker.get(index)\n\n    if (b === null || removeInflight(b.inflight, req) === false) return\n\n    if (removeHotswap(b) === true && b.inflight.length > 0) {\n      this.hotswaps.add(b)\n    }\n\n    if (b.refs.length > 0 && isBlock === true) {\n      this._queueBlock(b)\n      return\n    }\n\n    b.gc()\n  }\n\n  _clearInflightUpgrade (req) {\n    if (removeInflight(this._upgrade.inflight, req) === false) return\n    this._upgrade.gc()\n  }\n\n  _clearInflightSeeks (req) {\n    for (const s of this._seeks) {\n      if (removeInflight(s.inflight, req) === false) continue\n      s.gc()\n    }\n  }\n\n  _clearInflightReorgs (req) {\n    for (const r of this._reorgs) {\n      removeInflight(r.inflight, req)\n    }\n  }\n\n  _clearOldReorgs (fork) {\n    for (let i = 0; i < this._reorgs.length; i++) {\n      const f = this._reorgs[i]\n      if (f.fork >= fork) continue\n      if (i === this._reorgs.length - 1) this._reorgs.pop()\n      else this._reorgs[i] = this._reorgs.pop()\n      i--\n    }\n  }\n\n  // \"slow\" updates here - async but not allowed to ever throw\n  async _updateNonPrimary (updateAll) {\n    // Check if running, if so skip it and the running one will issue another update for us (debounce)\n    while (++this._updatesPending === 1) {\n      let len = Math.min(MAX_RANGES, this._ranges.length)\n\n      for (let i = 0; i < len; i++) {\n        const r = this._ranges[i]\n\n        clampRange(this.core, r)\n\n        if (r.end !== -1 && r.start >= r.end) {\n          this._resolveRangeRequest(r, i--)\n          if (len > this._ranges.length) len--\n          if (this._ranges.length === MAX_RANGES) updateAll = true\n        }\n      }\n\n      for (let i = 0; i < this._seeks.length; i++) {\n        const s = this._seeks[i]\n\n        let err = null\n        let res = null\n\n        try {\n          res = await s.seeker.update()\n        } catch (error) {\n          err = error\n        }\n\n        if (!res && !err) continue\n\n        if (i < this._seeks.length - 1) this._seeks[i] = this._seeks.pop()\n        else this._seeks.pop()\n\n        i--\n\n        if (err) s.reject(err)\n        else s.resolve(res)\n      }\n\n      // No additional updates scheduled - break\n      if (--this._updatesPending === 0) break\n      // Debounce the additional updates - continue\n      this._updatesPending = 0\n    }\n\n    if (this._inflight.idle || updateAll) this.updateAll()\n  }\n\n  _maybeResolveIfAvailableRanges () {\n    if (this._ifAvailable > 0 || !this._inflight.idle || !this._ranges.length) return\n\n    for (let i = 0; i < this.peers.length; i++) {\n      if (this.peers[i].dataProcessing > 0) return\n    }\n\n    for (let i = 0; i < this._ranges.length; i++) {\n      const r = this._ranges[i]\n\n      if (r.ifAvailable) {\n        this._resolveRangeRequest(r, i--)\n      }\n    }\n  }\n\n  _clearRequest (peer, req) {\n    if (req.block !== null) {\n      this._clearInflightBlock(this._blocks, req)\n      this._unmarkInflight(req.block.index)\n    }\n\n    if (req.hash !== null) {\n      this._clearInflightBlock(this._hashes, req)\n    }\n\n    if (req.upgrade !== null && this._upgrade !== null) {\n      this._clearInflightUpgrade(req)\n    }\n\n    if (this._seeks.length > 0) {\n      this._clearInflightSeeks(req)\n    }\n\n    if (this._reorgs.length > 0) {\n      this._clearInflightReorgs(req)\n    }\n  }\n\n  _onnodata (peer, req) {\n    this._clearRequest(peer, req)\n    this.updateAll()\n  }\n\n  _openSkipBitfield () {\n    // technically the skip bitfield gets bits cleared if .clear() is called\n    // also which might be in inflight also, but that just results in that section being overcalled shortly\n    // worst case, so ok for now\n\n    const bitfield = this.core.openSkipBitfield()\n\n    for (const req of this._inflight) {\n      if (req.block) bitfield.set(req.block.index, true) // skip\n    }\n  }\n\n  _markProcessing (index) {\n    const b = this._blocks.get(index)\n    if (b) {\n      b.processing = true\n      return\n    }\n\n    const h = this._hashes.get(index)\n    if (h) h.processing = true\n  }\n\n  _markProcessed (index) {\n    const b = this._blocks.get(index)\n    if (b) return b.processed()\n\n    const h = this._hashes.get(index)\n    if (h) h.processed()\n  }\n\n  _markInflight (index) {\n    if (this.core.skipBitfield !== null) this.core.skipBitfield.set(index, true)\n    for (const peer of this.peers) peer._markInflight(index)\n  }\n\n  _unmarkInflight (index) {\n    if (this.core.skipBitfield !== null) this.core.skipBitfield.set(index, this.core.bitfield.get(index))\n    for (const peer of this.peers) peer._resetMissingBlock(index)\n  }\n\n  _ondata (peer, req, data) {\n    if (data.block !== null) {\n      this._resolveBlockRequest(this._blocks, data.block.index, data.block.value, req)\n      this._ondownload(data.block.index, data.block.value.byteLength, peer)\n    }\n\n    if (data.hash !== null && (data.hash.index & 1) === 0) {\n      this._resolveBlockRequest(this._hashes, data.hash.index / 2, null, req)\n    }\n\n    if (this._upgrade !== null) {\n      this._resolveUpgradeRequest(req)\n    }\n\n    if (this._seeks.length > 0) {\n      this._clearInflightSeeks(req)\n    }\n\n    if (this._reorgs.length > 0) {\n      this._clearInflightReorgs(req)\n    }\n\n    if (this._manifestPeer === peer && this.core.header.manifest !== null) {\n      this._manifestPeer = null\n    }\n\n    if (this._seeks.length > 0 || this._ranges.length > 0) this._updateNonPrimary(this._seeks.length > 0)\n    this.updatePeer(peer)\n  }\n\n  _onwant (peer, start, length) {\n    if (!peer.isActive()) return\n\n    const contig = Math.min(this.core.state.length, this.core.header.hints.contiguousLength)\n\n    if (start + length < contig || (this.core.state.length === contig)) {\n      peer.wireRange.send({\n        drop: false,\n        start: 0,\n        length: contig\n      })\n      incrementTx(peer.stats.wireRange, this.stats.wireRange)\n      return\n    }\n\n    length = Math.min(length, this.core.state.length - start)\n\n    peer.protomux.cork()\n\n    for (const msg of this.core.bitfield.want(start, length)) {\n      peer.wireBitfield.send(msg)\n      incrementTx(peer.stats.wireBitfield, this.stats.wireBitfield)\n    }\n\n    peer.protomux.uncork()\n  }\n\n  async _onreorgdata (peer, req, data) {\n    const newBatch = data.upgrade && await this.core.verifyReorg(data)\n    const f = this._addReorg(data.fork, peer)\n\n    if (f === null) {\n      this.updateAll()\n      return\n    }\n\n    removeInflight(f.inflight, req)\n\n    if (f.batch) {\n      await f.batch.update(data)\n    } else if (data.upgrade) {\n      f.batch = newBatch\n\n      // Remove \"older\" reorgs in progress as we just verified this one.\n      this._clearOldReorgs(f.fork)\n    }\n\n    if (f.batch && f.batch.finished) {\n      if (this._addUpgradeMaybe() !== null) {\n        await this._applyReorg(f)\n      }\n    }\n\n    this.updateAll()\n  }\n\n  // Never throws, allowed to run in the background\n  async _applyReorg (f) {\n    // TODO: more optimal here to check if potentially a better reorg\n    // is available, ie higher fork, and request that one first.\n    // This will request that one after this finishes, which is fine, but we\n    // should investigate the complexity in going the other way\n\n    const u = this._upgrade\n\n    this._reorgs = [] // clear all as the nodes are against the old tree - easier\n    this._applyingReorg = this.core.reorg(f.batch, null) // TODO: null should be the first/last peer?\n\n    try {\n      await this._applyingReorg\n    } catch (err) {\n      this._upgrade = null\n      u.reject(err)\n    }\n\n    this._applyingReorg = null\n\n    if (this._upgrade !== null) {\n      this._resolveUpgradeRequest(null)\n    }\n\n    for (const peer of this.peers) this._updateFork(peer)\n\n    // TODO: all the remaining is a tmp workaround until we have a flag/way for ANY_FORK\n    for (const r of this._ranges) {\n      r.start = r.userStart\n      r.end = r.userEnd\n    }\n\n    this.updateAll()\n  }\n\n  _maybeUpdate () {\n    return this._upgrade !== null && this._upgrade.inflight.length === 0\n  }\n\n  _maybeRequestManifest () {\n    return this.core.header.manifest === null && this._manifestPeer === null\n  }\n\n  _updateFork (peer) {\n    if (this._applyingReorg !== null || this.allowFork === false || peer.remoteFork <= this.core.state.fork) {\n      return false\n    }\n\n    const f = this._addReorg(peer.remoteFork, peer)\n\n    // TODO: one per peer is better\n    if (f !== null && f.batch === null && f.inflight.length === 0) {\n      return peer._requestForkProof(f)\n    }\n\n    return false\n  }\n\n  _updateHotswap (peer) {\n    const maxHotswaps = peer.getMaxHotswapInflight()\n    if (!peer.isActive() || peer.inflight >= maxHotswaps) return\n\n    for (const b of this.hotswaps.pick(peer)) {\n      if (peer._requestBlock(b) === false) continue\n      peer.stats.hotswaps++\n      peer.replicator.stats.hotswaps++\n      if (peer.inflight >= maxHotswaps) break\n    }\n  }\n\n  _updatePeer (peer) {\n    if (!peer.isActive() || peer.inflight >= peer.getMaxInflight()) {\n      return false\n    }\n\n    // Eagerly request the manifest even if the remote length is 0. If not 0 we'll get as part of the upgrade request...\n    if (this._maybeRequestManifest() === true && peer.remoteLength === 0 && peer.remoteHasManifest === true) {\n      this._manifestPeer = peer\n      peer._requestManifest()\n    }\n\n    for (const s of this._seeks) {\n      if (s.inflight.length > 0) continue // TODO: one per peer is better\n      if (peer._requestSeek(s) === true) {\n        return true\n      }\n    }\n\n    // Implied that any block in the queue should be requested, no matter how many inflights\n    const blks = new RandomIterator(this._queued)\n\n    for (const b of blks) {\n      if (b.queued === false || peer._requestBlock(b) === true) {\n        b.queued = false\n        blks.dequeue()\n        return true\n      }\n    }\n\n    return false\n  }\n\n  _updatePeerNonPrimary (peer) {\n    if (!peer.isActive() || peer.inflight >= peer.getMaxInflight()) {\n      return false\n    }\n\n    const ranges = new RandomIterator(this._ranges)\n    let tried = 0\n\n    for (const r of ranges) {\n      if (peer._requestRange(r) === true) {\n        return true\n      }\n      if (++tried >= MAX_RANGES) break\n    }\n\n    // Iterate from newest fork to oldest fork...\n    for (let i = this._reorgs.length - 1; i >= 0; i--) {\n      const f = this._reorgs[i]\n      if (f.batch !== null && f.inflight.length === 0 && peer._requestForkRange(f) === true) {\n        return true\n      }\n    }\n\n    if (this._maybeUpdate() === true && peer._requestUpgrade(this._upgrade) === true) {\n      return true\n    }\n\n    return false\n  }\n\n  updatePeer (peer) {\n    // Quick shortcut to wait for flushing reorgs - not needed but less waisted requests\n    if (this._applyingReorg !== null) return\n\n    while (this._updatePeer(peer) === true);\n    while (this._updatePeerNonPrimary(peer) === true);\n\n    if (this.peers.length > 1 && this._blocks.isEmpty() === false) {\n      this._updateHotswap(peer)\n    }\n\n    this._checkUpgradeIfAvailable()\n    this._maybeResolveIfAvailableRanges()\n  }\n\n  updateAll () {\n    // Quick shortcut to wait for flushing reorgs - not needed but less waisted requests\n    if (this._applyingReorg !== null) return\n\n    const peers = new RandomIterator(this.peers)\n\n    for (const peer of peers) {\n      if (this._updatePeer(peer) === true) {\n        peers.requeue()\n      }\n    }\n\n    // Check if we can skip the non primary check fully\n    if (this._maybeUpdate() === false && this._ranges.length === 0 && this._reorgs.length === 0) {\n      this._checkUpgradeIfAvailable()\n      return\n    }\n\n    for (const peer of peers.restart()) {\n      if (this._updatePeerNonPrimary(peer) === true) {\n        peers.requeue()\n      }\n    }\n\n    this._checkUpgradeIfAvailable()\n    this._maybeResolveIfAvailableRanges()\n  }\n\n  onpeerdestroy () {\n    if (--this._active === 0) this.core.checkIfIdle()\n  }\n\n  attached (protomux) {\n    return this._attached.has(protomux)\n  }\n\n  attachTo (protomux) {\n    if (this.core.closed) return\n\n    const makePeer = this._makePeer.bind(this, protomux)\n\n    this._attached.add(protomux)\n    protomux.pair({ protocol: 'hypercore/alpha', id: this.core.discoveryKey }, makePeer)\n    protomux.stream.setMaxListeners(0)\n    protomux.stream.on('close', this._onstreamclose)\n\n    this._ifAvailable++\n    this._active++\n\n    protomux.stream.opened.then((opened) => {\n      this._ifAvailable--\n      this._active--\n\n      if (opened && !this.destroyed) makePeer()\n      this._checkUpgradeIfAvailable()\n\n      this.core.checkIfIdle()\n    })\n  }\n\n  detachFrom (protomux) {\n    if (this._attached.delete(protomux)) {\n      protomux.stream.removeListener('close', this._onstreamclose)\n      protomux.unpair({ protocol: 'hypercore/alpha', id: this.core.discoveryKey })\n    }\n  }\n\n  idle () {\n    return this.peers.length === 0 && this._active === 0\n  }\n\n  close () {\n    const waiting = []\n\n    for (const peer of this.peers) {\n      waiting.push(peer.channel.fullyClosed())\n    }\n\n    this.destroy()\n    return Promise.all(waiting)\n  }\n\n  destroy () {\n    if (this.destroyed) return\n    this.destroyed = true\n\n    if (this._downloadingTimer) {\n      clearTimeout(this._downloadingTimer)\n      this._downloadingTimer = null\n    }\n\n    while (this.peers.length) {\n      const peer = this.peers[this.peers.length - 1]\n      this.detachFrom(peer.protomux)\n      peer.channel.close() // peer is removed from array in onclose\n    }\n\n    for (const protomux of this._attached) {\n      this.detachFrom(protomux)\n    }\n  }\n\n  _makePeer (protomux) {\n    const replicator = this\n    if (protomux.opened({ protocol: 'hypercore/alpha', id: this.core.discoveryKey })) return onnochannel()\n\n    const channel = protomux.createChannel({\n      userData: null,\n      protocol: 'hypercore/alpha',\n      aliases: ['hypercore'],\n      id: this.core.discoveryKey,\n      handshake: m.wire.handshake,\n      messages: [\n        { encoding: m.wire.sync, onmessage: onwiresync },\n        { encoding: m.wire.request, onmessage: onwirerequest },\n        { encoding: m.wire.cancel, onmessage: onwirecancel },\n        { encoding: m.wire.data, onmessage: onwiredata },\n        { encoding: m.wire.noData, onmessage: onwirenodata },\n        { encoding: m.wire.want, onmessage: onwirewant },\n        { encoding: m.wire.unwant, onmessage: onwireunwant },\n        { encoding: m.wire.bitfield, onmessage: onwirebitfield },\n        { encoding: m.wire.range, onmessage: onwirerange },\n        { encoding: m.wire.extension, onmessage: onwireextension }\n      ],\n      onopen: onwireopen,\n      onclose: onwireclose,\n      ondrain: onwiredrain,\n      ondestroy: onwiredestroy\n    })\n\n    if (channel === null) return onnochannel()\n\n    const peer = new Peer(replicator, protomux, channel, this.inflightRange)\n    const stream = protomux.stream\n\n    peer.channel.open({\n      seeks: true,\n      capability: caps.replicate(stream.isInitiator, this.core.key, stream.handshakeHash)\n    })\n\n    return true\n\n    function onnochannel () {\n      return false\n    }\n  }\n\n  _onpeerupdate (added, peer) {\n    const name = added ? 'peer-add' : 'peer-remove'\n    const sessions = this.core.monitors\n\n    for (let i = sessions.length - 1; i >= 0; i--) {\n      sessions[i].emit(name, peer)\n\n      if (added) {\n        for (const ext of sessions[i].extensions.values()) {\n          peer.extensions.set(ext.name, ext)\n        }\n      }\n    }\n  }\n\n  _ondownload (index, byteLength, from) {\n    const sessions = this.core.monitors\n\n    for (let i = sessions.length - 1; i >= 0; i--) {\n      const s = sessions[i]\n      s.emit('download', index, byteLength - s.padding, from)\n    }\n  }\n\n  _onupload (index, byteLength, from) {\n    const sessions = this.core.monitors\n\n    for (let i = sessions.length - 1; i >= 0; i--) {\n      const s = sessions[i]\n      s.emit('upload', index, byteLength - s.padding, from)\n    }\n  }\n\n  _oninvalid (err, req, res, from) {\n    const sessions = this.core.monitors\n\n    for (let i = 0; i < sessions.length; i++) {\n      sessions[i].emit('verification-error', err, req, res, from)\n    }\n  }\n}\n\nfunction matchingRequest (req, data) {\n  if (data.block !== null && (req.block === null || req.block.index !== data.block.index)) return false\n  if (data.hash !== null && (req.hash === null || req.hash.index !== data.hash.index)) return false\n  if (data.seek !== null && (req.seek === null || req.seek.bytes !== data.seek.bytes)) return false\n  if (data.upgrade !== null && req.upgrade === null) return false\n  return req.fork === data.fork\n}\n\nfunction removeHotswap (block) {\n  if (block.hotswap === null) return false\n  block.hotswap.ref.remove(block)\n  return true\n}\n\nfunction removeInflight (inf, req) {\n  const i = inf.indexOf(req)\n  if (i === -1) return false\n  if (i < inf.length - 1) inf[i] = inf.pop()\n  else inf.pop()\n  return true\n}\n\nfunction toLength (start, end) {\n  return end === -1 ? -1 : (end < start ? 0 : end - start)\n}\n\nfunction clampRange (core, r) {\n  if (r.blocks === null) {\n    const start = core.bitfield.firstUnset(r.start)\n\n    if (r.end === -1) r.start = start === -1 ? core.state.length : start\n    else if (start === -1 || start >= r.end) r.start = r.end\n    else {\n      r.start = start\n\n      const end = core.bitfield.lastUnset(r.end - 1)\n\n      if (end === -1 || start >= end + 1) r.end = r.start\n      else r.end = end + 1\n    }\n  } else {\n    while (r.start < r.end && core.bitfield.get(r.blocks[r.start])) r.start++\n    while (r.start < r.end && core.bitfield.get(r.blocks[r.end - 1])) r.end--\n  }\n}\n\nfunction onrequesttimeout (req) {\n  if (req.context) req.context.detach(req, REQUEST_TIMEOUT())\n}\n\nfunction destroyRequestTimeout (req) {\n  if (req.timeout !== null) {\n    clearTimeout(req.timeout)\n    req.timeout = null\n  }\n}\n\nfunction isCriticalError (err) {\n  // TODO: expose .critical or similar on the hypercore errors that are critical (if all not are)\n  return err.name === 'HypercoreError'\n}\n\nfunction onwireopen (m, c) {\n  return c.userData.onopen(m)\n}\n\nfunction onwireclose (isRemote, c) {\n  return c.userData.onclose(isRemote)\n}\n\nfunction onwiredestroy (c) {\n  c.userData.replicator.onpeerdestroy()\n}\n\nfunction onwiredrain (c) {\n  return c.userData.ondrain()\n}\n\nfunction onwiresync (m, c) {\n  incrementRx(c.userData.stats.wireSync, c.userData.replicator.stats.wireSync)\n  return c.userData.onsync(m)\n}\n\nfunction onwirerequest (m, c) {\n  incrementRx(c.userData.stats.wireRequest, c.userData.replicator.stats.wireRequest)\n  return c.userData.onrequest(m)\n}\n\nfunction onwirecancel (m, c) {\n  incrementRx(c.userData.stats.wireCancel, c.userData.replicator.stats.wireCancel)\n  return c.userData.oncancel(m)\n}\n\nfunction onwiredata (m, c) {\n  incrementRx(c.userData.stats.wireData, c.userData.replicator.stats.wireData)\n  return c.userData.ondata(m)\n}\n\nfunction onwirenodata (m, c) {\n  return c.userData.onnodata(m)\n}\n\nfunction onwirewant (m, c) {\n  incrementRx(c.userData.stats.wireWant, c.userData.replicator.stats.wireWant)\n  return c.userData.onwant(m)\n}\n\nfunction onwireunwant (m, c) {\n  return c.userData.onunwant(m)\n}\n\nfunction onwirebitfield (m, c) {\n  incrementRx(c.userData.stats.wireBitfield, c.userData.replicator.stats.wireBitfield)\n  return c.userData.onbitfield(m)\n}\n\nfunction onwirerange (m, c) {\n  incrementRx(c.userData.stats.wireRange, c.userData.replicator.stats.wireRange)\n  return c.userData.onrange(m)\n}\n\nfunction onwireextension (m, c) {\n  incrementRx(c.userData.stats.wireExtension, c.userData.replicator.stats.wireExtension)\n  return c.userData.onextension(m)\n}\n\nfunction setDownloadingLater (repl, downloading, session) {\n  repl.setDownloadingNow(downloading, session)\n}\n\nfunction isBlockRequest (req) {\n  return req !== null && req.block !== null\n}\n\nfunction isUpgradeRequest (req) {\n  return req !== null && req.upgrade !== null\n}\n\nfunction incrementTx (stats1, stats2) {\n  stats1.tx++\n  stats2.tx++\n}\n\nfunction incrementRx (stats1, stats2) {\n  stats1.rx++\n  stats2.rx++\n}\nconst crypto = require('hypercore-crypto')\nconst b4a = require('b4a')\nconst assert = require('nanoassert')\nconst flat = require('flat-tree')\nconst quickbit = require('quickbit-universal')\n\nconst { INVALID_OPERATION, INVALID_SIGNATURE } = require('hypercore-errors')\n\nconst Mutex = require('./mutex')\nconst Bitfield = require('./bitfield')\nconst { MerkleTree, MerkleTreeBatch } = require('./merkle-tree')\n\nmodule.exports = class SessionState {\n  constructor (core, parent, storage, treeInfo, name) {\n    this.core = core\n    this.index = this.core.sessionStates.push(this) - 1\n\n    this.storage = storage\n    this.name = name\n    this.sessions = []\n\n    // small hack to close old storages as late as possible.\n    // TODO: add a read lock so we can avoid that\n    this.lingers = null\n\n    this.parent = parent\n    this.atomized = null\n    this.mutex = new Mutex()\n\n    // merkle state\n    this.roots = treeInfo.roots.length ? treeInfo.roots : []\n    this.fork = treeInfo.fork || 0\n    this.length = MerkleTree.span(this.roots) / 2\n    this.byteLength = MerkleTree.size(this.roots)\n    this.prologue = treeInfo.prologue || null\n    this.signature = treeInfo.signature || null\n\n    this.snapshotCompatLength = this.isSnapshot() ? Math.min(this.length, this.core.state.length) : -1\n    this.lastTruncation = null\n\n    this.active = 0\n\n    this._activeTx = null\n    this._pendingBitfield = null\n\n    this.ref()\n  }\n\n  isSnapshot () {\n    return this.storage.snapshotted\n  }\n\n  isDefault () {\n    return this.core.state === this || this.isAtomicDefault()\n  }\n\n  isAtomicDefault () {\n    return !!this.storage.atom && !!this.parent && this.parent.isDefault()\n  }\n\n  createTreeBatch () {\n    return new MerkleTreeBatch(this)\n  }\n\n  addSession (s) {\n    if (s._stateIndex !== -1) return\n    s._stateIndex = this.sessions.push(s) - 1\n    if (s.weak === false) this.core.activeSessions++\n  }\n\n  removeSession (s) {\n    if (s._stateIndex === -1) return\n    const head = this.sessions.pop()\n    if (head !== s) this.sessions[(head._stateIndex = s._stateIndex)] = head\n    s._stateIndex = -1\n    if (s.weak === false) this.core.activeSessions--\n    this.core.checkIfIdle()\n  }\n\n  flushedLength () {\n    if (this.isDefault() || this.isSnapshot()) return this.length\n    const deps = this.storage.dependencies\n    if (deps.length) return deps[deps.length - 1].length\n    return 0\n  }\n\n  signedLength () {\n    const l = Math.min(this.flushedLength(), this.core.state.length)\n    return this.isSnapshot() && l > this.snapshotCompatLength ? this.snapshotCompatLength : l\n  }\n\n  unref () {\n    if (--this.active > 0) return\n    this.close().catch(noop) // technically async, but only for the last db session\n  }\n\n  ref () {\n    this.active++\n    return this\n  }\n\n  hash () {\n    return MerkleTree.hash(this)\n  }\n\n  setRoots (roots) {\n    this.roots = roots\n    this.length = MerkleTree.span(roots) / 2\n    this.byteLength = MerkleTree.size(roots)\n  }\n\n  get encryptionFork () {\n    return this.core.header.tree.fork\n  }\n\n  async updateSnapshotStorage (storage) {\n    if (!this.atomized || !this.atomized.flushing) return this.treeInfo()\n    await this.atomized.flushed()\n\n    let rx = storage.read()\n    const headPromise = rx.getHead()\n    const authPromise = rx.getAuth()\n    const depPromise = rx.getDependency()\n\n    rx.tryFlush()\n    const [head, auth, dep] = await Promise.all([headPromise, authPromise, depPromise])\n\n    storage.setDependencyHead(dep)\n\n    const fork = head ? head.fork : 0\n    const length = head ? head.length : 0\n\n    rx = storage.read()\n    const rootPromises = []\n    for (const r of flat.fullRoots(length * 2)) {\n      rootPromises.push(rx.getTreeNode(r))\n    }\n\n    rx.tryFlush()\n\n    const roots = await Promise.all(rootPromises)\n\n    // dbl check if we are hitting an regression from earler\n    for (const root of roots) {\n      if (root === null) {\n        throw new Error('Bad snapshot from atomized session, id = ' + this.core.id + ' length = ' + length + ' fork = ' + fork)\n      }\n    }\n\n    return {\n      fork,\n      roots,\n      length,\n      prologue: auth.manifest && auth.manifest.prologue,\n      signature: head && head.signature\n    }\n  }\n\n  treeInfo () {\n    return {\n      fork: this.fork,\n      roots: this.roots.slice(),\n      length: this.length,\n      prologue: this.prologue,\n      signature: this.signature\n    }\n  }\n\n  async close () {\n    if (this.index === -1) return\n\n    this.active = 0\n    this.mutex.destroy(new Error('Closed')).catch(noop)\n    if (this.parent && this.parent.atomized) this.parent.atomized = null\n\n    const closing = this.storage.close()\n\n    const head = this.core.sessionStates.pop()\n    if (head !== this) this.core.sessionStates[(head.index = this.index)] = head\n\n    this.index = -1\n    this.core.checkIfIdle()\n\n    if (this.lingers !== null) {\n      for (const storage of this.lingers) await storage.close()\n    }\n\n    return closing\n  }\n\n  async snapshot () {\n    const storage = this.storage.snapshot()\n    const treeInfo = await this.updateSnapshotStorage(storage)\n\n    const s = new SessionState(\n      this.core,\n      null,\n      storage,\n      treeInfo,\n      this.name\n    )\n\n    return s\n  }\n\n  updateDependency (tx, length) {\n    const dependency = updateDependency(this, length, false)\n    if (dependency) tx.setDependency(dependency)\n    return dependency\n  }\n\n  _clearActiveBatch () {\n    this._activeTx = null\n  }\n\n  createWriteBatch () {\n    assert(!this._activeTx && !this.storage.snapshotted)\n\n    this._activeTx = this.storage.write()\n    return this._activeTx\n  }\n\n  _unlock () {\n    this._clearActiveBatch()\n    this.mutex.unlock()\n    this.core.checkIfIdle()\n  }\n\n  async flush () {\n    const tx = this._activeTx\n    this._activeTx = null\n\n    try {\n      if (!(await tx.flush())) return false\n    } finally {\n      this._clearActiveBatch()\n    }\n\n    this.lastTruncation = null\n    return true\n  }\n\n  _precommit () {\n    this.commiting = true\n  }\n\n  async _commit () {\n    await this.mutex.lock()\n\n    try {\n      const bitfield = this._pendingBitfield\n      this._pendingBitfield = null\n      this.lastTruncation = null\n      await this.parent._oncommit(this, bitfield)\n    } finally {\n      this.commiting = false\n      this.mutex.unlock()\n    }\n  }\n\n  async _oncommit (src, bitfield) {\n    await this.mutex.lock()\n\n    try {\n      const currLength = this.length\n\n      // load dependency into memory\n      const rx = this.storage.read()\n      const dependencyPromise = rx.getDependency()\n\n      rx.tryFlush()\n\n      const dependency = await dependencyPromise\n\n      this.fork = src.fork\n      this.length = src.length\n      this.byteLength = src.byteLength\n      this.roots = src.roots.slice()\n      this.signature = src.signature\n\n      const tree = {\n        fork: this.fork,\n        length: this.length,\n        rootHash: this.hash(),\n        signature: this.signature\n      }\n\n      if (dependency) this.storage.setDependencyHead(dependency)\n\n      const truncated = bitfield ? bitfield.truncated : -1\n\n      if (truncated !== -1 && truncated < currLength) {\n        this.ontruncate(tree, truncated, currLength, true)\n        if (!bitfield || bitfield.length === 0) return\n      }\n\n      this.onappend(tree, bitfield, true)\n    } finally {\n      this.mutex.unlock()\n      this.core.checkIfIdle()\n    }\n  }\n\n  async setUserData (key, value) {\n    await this.mutex.lock()\n\n    try {\n      const tx = this.createWriteBatch()\n      tx.putUserData(key, value)\n\n      return await this.flush()\n    } finally {\n      this._unlock()\n    }\n  }\n\n  async _verifyBlock (batch, bitfield, value, manifest, from) {\n    await this.mutex.lock()\n\n    try {\n      if (!batch.commitable()) return false\n      const tx = this.createWriteBatch()\n      this.updating = true\n\n      if (bitfield) {\n        tx.putBlock(bitfield.start, value)\n      }\n\n      if (bitfield && this.isDefault()) {\n        await storeBitfieldRange(this.storage, tx, bitfield.start, bitfield.start + 1, true)\n      }\n\n      if (manifest) this.core._setManifest(tx, manifest, null)\n\n      assert(batch.commitable(), 'Should still be commitable')\n      batch.commit(tx)\n\n      const head = {\n        fork: batch.fork,\n        length: batch.length,\n        rootHash: batch.hash(),\n        signature: batch.signature\n      }\n\n      if (batch.upgraded) tx.setHead(head)\n\n      const flushed = await this.flush()\n\n      if (batch.upgraded) {\n        this.roots = batch.roots\n        this.length = batch.length\n        this.byteLength = batch.byteLength\n        this.fork = batch.fork\n        this.signature = batch.signature\n\n        this.onappend(head, bitfield, flushed)\n      }\n    } finally {\n      this._clearActiveBatch()\n      this.updating = false\n      this.mutex.unlock()\n    }\n\n    return true\n  }\n\n  async truncate (length, fork, { signature, keyPair } = {}) {\n    if (!keyPair && this.isDefault()) keyPair = this.core.header.keyPair\n\n    await this.mutex.lock()\n\n    try {\n      if (this.prologue && length < this.prologue.length) {\n        throw INVALID_OPERATION('Truncation breaks prologue')\n      }\n      if (length > this.length) {\n        throw INVALID_OPERATION('Not a truncation, ' + length + ' must be less or equal to ' + this.length)\n      }\n\n      const batch = this.createTreeBatch()\n      await MerkleTree.truncate(this, length, batch, fork)\n\n      if (!signature && keyPair && length > 0) signature = this.core.verifier.sign(batch, keyPair)\n      if (signature) batch.signature = signature\n\n      const tx = this.createWriteBatch()\n\n      // upsert compat manifest\n      if (this.core.verifier === null && keyPair) this.core._setManifest(tx, null, keyPair)\n\n      const { dependency, tree, roots } = await this._truncate(tx, batch)\n\n      for (const sessionState of this.core.sessionStates) {\n        if (sessionState.isSnapshot() && sessionState.name === this.name && length < sessionState.snapshotCompatLength) {\n          sessionState.snapshotCompatLength = length\n        }\n      }\n\n      const flushed = await this.flush()\n\n      this.fork = tree.fork\n      this.length = tree.length\n      this.byteLength = MerkleTree.size(roots)\n      this.roots = roots\n      this.signature = tree.signature\n\n      if (dependency) this.storage.setDependencyHead(dependency)\n\n      this.ontruncate(tree, tree.length, batch.treeLength, flushed)\n    } finally {\n      this._unlock()\n    }\n  }\n\n  async reorg (batch) {\n    await this.mutex.lock()\n\n    const storage = this.createWriteBatch()\n\n    try {\n      if (!batch.commitable()) return false\n\n      const { dependency, tree } = await this._truncate(storage, batch)\n\n      const flushed = await this.flush()\n\n      this.fork = batch.fork\n      this.length = batch.length\n      this.byteLength = batch.byteLength\n      this.roots = batch.roots\n      this.signature = batch.signature\n\n      if (dependency) this.storage.setDependencyHead(dependency)\n\n      this.ontruncate(tree, batch.ancestors, batch.treeLength, flushed)\n    } finally {\n      this._unlock()\n    }\n  }\n\n  async _truncate (storage, batch) {\n    storage.deleteBlockRange(batch.ancestors, batch.treeLength)\n\n    assert(batch.commitable(), 'Batch must be commitable')\n\n    const tree = {\n      fork: batch.fork,\n      length: batch.length,\n      rootHash: batch.hash(),\n      signature: batch.signature\n    }\n\n    storage.setHead(tree)\n    batch.commit(storage)\n\n    const truncated = batch.length < this.flushedLength()\n    const dependency = truncated ? updateDependency(this, batch.length, true) : null\n\n    if (dependency) storage.setDependency(dependency)\n\n    if (this.isDefault()) {\n      await storeBitfieldRange(this.storage, storage, batch.ancestors, batch.treeLength, false)\n      if (batch.ancestors < this.core.header.hints.contiguousLength) {\n        storage.setHints({ contiguousLength: batch.ancestors })\n      }\n    }\n\n    return { dependency, tree, roots: batch.roots }\n  }\n\n  async clear (start, end, cleared) {\n    await this.mutex.lock()\n\n    try {\n      const tx = this.createWriteBatch()\n\n      if (this.isDefault()) {\n        await storeBitfieldRange(this.storage, tx, start, end, false)\n        if (start < this.core.header.hints.contiguousLength) {\n          tx.setHints({ contiguousLength: start })\n        }\n      }\n\n      tx.deleteBlockRange(start, end)\n\n      const dependency = start < this.flushedLength() ? updateDependency(this, start, true) : null\n\n      const flushed = await this.flush()\n\n      if (dependency) this.storage.setDependencyHead(dependency)\n\n      // todo: atomic event handle\n      if (this.isDefault() && flushed) {\n        const length = end - start\n        this.core.updateContiguousLength({ start, length, drop: true })\n        this.core._setBitfieldRanges(start, end, false)\n        this.core.replicator.onhave(start, length, true)\n      }\n    } finally {\n      this._unlock()\n    }\n  }\n\n  async append (values, { signature, keyPair, preappend } = {}) {\n    if (!keyPair && this.isDefault()) keyPair = this.core.header.keyPair\n\n    await this.mutex.lock()\n\n    try {\n      const tx = this.createWriteBatch()\n\n      // upsert compat manifest\n      if (this.core.verifier === null && keyPair) this.core._setManifest(tx, null, keyPair)\n\n      if (preappend) await preappend(values)\n\n      if (!values.length) {\n        await this.flush()\n        return { length: this.length, byteLength: this.byteLength }\n      }\n\n      const batch = this.createTreeBatch()\n      for (const val of values) batch.append(val)\n\n      // only multisig can have prologue so signature is always present\n      if (this.prologue && batch.length < this.prologue.length) {\n        throw INVALID_OPERATION('Append is not consistent with prologue')\n      }\n\n      if (!signature && keyPair) signature = this.core.verifier.sign(batch, keyPair)\n      if (signature) batch.signature = signature\n\n      batch.commit(tx)\n\n      const tree = {\n        fork: batch.fork,\n        length: batch.length,\n        rootHash: batch.hash(),\n        signature: batch.signature\n      }\n\n      tx.setHead(tree)\n\n      if (this.isDefault()) await storeBitfieldRange(this.storage, tx, batch.ancestors, batch.length, true)\n\n      for (let i = 0; i < values.length; i++) {\n        tx.putBlock(this.length + i, values[i])\n      }\n\n      const bitfield = {\n        drop: false,\n        start: batch.ancestors,\n        length: values.length\n      }\n\n      const flushed = await this.flush()\n\n      this.fork = batch.fork\n      this.roots = batch.roots\n      this.length = batch.length\n      this.byteLength = batch.byteLength\n      this.signature = batch.signature\n\n      this.onappend(tree, bitfield, flushed)\n\n      return { length: this.length, byteLength: this.byteLength }\n    } finally {\n      this._unlock()\n    }\n  }\n\n  onappend (tree, bitfield, flushed) {\n    if (!flushed) this._updateBitfield(bitfield)\n    else if (this.isDefault()) this.core.onappend(tree, bitfield)\n\n    for (let i = this.sessions.length - 1; i >= 0; i--) {\n      this.sessions[i].emit('append')\n    }\n  }\n\n  ontruncate (tree, to, from, flushed) {\n    const bitfield = { start: to, length: from - to, drop: true }\n\n    this.lastTruncation = { from, to }\n\n    if (!flushed) this._updateBitfield(bitfield)\n    else if (this.isDefault()) this.core.ontruncate(tree, bitfield)\n\n    for (const sessionState of this.core.sessionStates) {\n      if (sessionState.isSnapshot() && sessionState.name === this.name && to < sessionState.snapshotCompatLength) {\n        sessionState.snapshotCompatLength = to\n      }\n    }\n\n    for (let i = this.sessions.length - 1; i >= 0; i--) {\n      this.sessions[i].emit('truncate', to, tree.fork)\n    }\n  }\n\n  _updateBitfield (bitfield, flushed) {\n    if (!bitfield) return\n\n    const p = this._pendingBitfield\n    const b = bitfield\n\n    if (b.drop) {\n      if (p === null) {\n        this._pendingBitfield = { truncated: b.start, start: b.start, length: 0, drop: false }\n        return\n      }\n\n      if (p.drop || p.truncated !== -1) {\n        if (p.truncated !== b.start + b.length) throw INVALID_OPERATION('Atomic truncations must be contiguous')\n        p.truncated = b.start\n        return\n      }\n\n      if (b.start < p.start) throw INVALID_OPERATION('Atomic truncations must be contiguous')\n      p.length = b.start - p.start\n\n      if (p.length === 0) this._pendingBitfield = null\n      return\n    }\n\n    if (p === null) {\n      this._pendingBitfield = { truncated: -1, start: b.start, length: b.length, drop: false }\n      return\n    }\n\n    const start = p.truncated === -1 ? p.start : p.truncated\n    if (b.start !== start + p.length) {\n      throw INVALID_OPERATION('Atomic operations must be contiguous')\n    }\n\n    p.length += b.length\n  }\n\n  async catchup (length) {\n    assert(!this.isDefault(), 'Cannot catchup signed state') // TODO: make this check better\n\n    await this.mutex.lock()\n\n    try {\n      const origLength = this.length\n\n      let sharedLength = 0\n      for (let i = this.storage.dependencies.length - 1; i >= 0; i--) {\n        const dep = this.storage.dependencies[i]\n        if (dep.dataPointer === this.core.state.storage.core.dataPointer) {\n          sharedLength = dep.length\n          break\n        }\n      }\n\n      const tx = this.createWriteBatch()\n      const rx = this.core.state.storage.read()\n      const rootPromises = []\n\n      for (const root of flat.fullRoots(length * 2)) {\n        rootPromises.push(rx.getTreeNode(root))\n      }\n\n      rx.tryFlush()\n\n      const roots = await Promise.all(rootPromises)\n      const truncating = sharedLength < origLength\n\n      for (const node of roots) {\n        if (node === null) throw INVALID_OPERATION('Invalid catchup length, tree nodes not available')\n      }\n\n      const fork = truncating ? this.fork + 1 : this.fork\n\n      // overwrite it atm, TODO: keep what we can connect to the tree\n      tx.deleteBlockRange(0, -1)\n      tx.deleteTreeNodeRange(0, -1)\n      tx.deleteBitfieldPageRange(0, -1)\n\n      const tree = {\n        fork,\n        length,\n        rootHash: crypto.tree(roots),\n        signature: null\n      }\n\n      tx.setHead(tree)\n\n      // prop a better way to do this\n      const dep = updateDependency(this, sharedLength, true)\n      dep.length = length\n\n      tx.setDependency(dep)\n\n      const flushed = await this.flush()\n\n      this.storage.setDependencyHead(dep)\n\n      this.fork = tree.fork\n      this.roots = roots\n      this.length = tree.length\n      this.byteLength = MerkleTree.size(roots)\n\n      if (truncating) this.ontruncate(tree, sharedLength, origLength, flushed)\n      if (sharedLength < length) this.onappend(tree, null, flushed)\n    } finally {\n      this.mutex.unlock()\n    }\n  }\n\n  async _overwrite (source, fork, length, treeLength, signature) {\n    const blockPromises = []\n    const treePromises = []\n    const rootPromises = []\n\n    const rx = source.storage.read()\n\n    for (const root of flat.fullRoots(length * 2)) {\n      rootPromises.push(rx.getTreeNode(root))\n    }\n\n    for (const index of flat.patch(treeLength * 2, length * 2)) {\n      treePromises.push(rx.getTreeNode(index))\n    }\n\n    for (let i = treeLength; i < length; i++) {\n      treePromises.push(rx.getTreeNode(i * 2))\n      treePromises.push(rx.getTreeNode(i * 2 + 1))\n      blockPromises.push(rx.getBlock(i))\n    }\n\n    rx.tryFlush()\n\n    const blocks = await Promise.all(blockPromises)\n    const nodes = await Promise.all(treePromises)\n    const roots = await Promise.all(rootPromises)\n\n    if (this.core.destroyed) throw new Error('Core destroyed')\n\n    if (signature) {\n      const batch = this.createTreeBatch()\n      batch.roots = roots\n      batch.length = length\n\n      if (!this.core.verifier.verify(batch, signature)) {\n        throw INVALID_SIGNATURE('Signature is not valid over committed tree')\n      }\n    }\n\n    const tx = this.createWriteBatch()\n\n    // truncate existing tree\n    if (treeLength < this.length) {\n      tx.deleteBlockRange(treeLength, this.length)\n    }\n\n    for (const root of roots) tx.putTreeNode(root)\n\n    // no nodes will be copied in shallow mode\n    for (const node of nodes) {\n      if (node !== null) tx.putTreeNode(node)\n    }\n\n    for (let i = 0; i < blocks.length; i++) {\n      assert(blocks[i] !== null, 'has block')\n      tx.putBlock(i + treeLength, blocks[i])\n    }\n\n    const totalLength = Math.max(length, this.length)\n\n    if (totalLength > treeLength) {\n      const firstPage = getBitfieldPage(treeLength)\n      const lastPage = getBitfieldPage(totalLength - 1)\n\n      const srx = this.storage.read()\n      const bitfieldPagePromise = srx.getBitfieldPage(firstPage)\n      srx.tryFlush()\n\n      const bitfieldPage = await bitfieldPagePromise\n\n      let index = treeLength\n\n      for (let i = firstPage; i <= lastPage; i++) {\n        const page = b4a.alloc(Bitfield.BYTES_PER_PAGE)\n        tx.putBitfieldPage(i, page)\n\n        // copy existing bits in\n        if (i === firstPage && bitfieldPage) page.set(bitfieldPage)\n\n        if (index < length) {\n          index = fillBitfieldPage(page, index, length, i, true)\n          if (index < length) continue\n        }\n\n        if (index < this.length) {\n          index = fillBitfieldPage(page, index, this.length, i, false)\n        }\n      }\n    }\n\n    const tree = {\n      fork,\n      length,\n      rootHash: crypto.tree(roots),\n      signature\n    }\n\n    const upgraded = treeLength < this.length || this.length < length || tree.fork !== this.fork\n\n    if (upgraded) tx.setHead(tree)\n\n    const flushed = await this.flush()\n\n    this.fork = tree.fork\n    this.roots = roots\n    this.length = length\n    this.byteLength = MerkleTree.size(roots)\n    this.signature = signature\n\n    return { tree, flushed }\n  }\n\n  async commit (state, { signature, keyPair, length = state.length, treeLength = -1, overwrite = false } = {}) {\n    assert(this.isDefault() || (this.parent && this.parent.isDefault()), 'Can only commit into default state')\n\n    let srcLocked = false\n    await this.mutex.lock()\n\n    try {\n      await state.mutex.lock()\n      srcLocked = true\n\n      if (treeLength === -1) treeLength = state.flushedLength()\n\n      if (!(await this.core._validateCommit(state, treeLength))) return null\n      if (this.length > length) return null\n\n      if (this.length < length && !signature) {\n        if (!keyPair) keyPair = this.core.header.keyPair\n        const batch = state.createTreeBatch()\n        if (length !== batch.length) await batch.restore(length)\n        signature = this.core.verifier.sign(batch, keyPair)\n      }\n\n      const { tree, flushed } = await this._overwrite(state, this.fork, length, treeLength, signature)\n\n      // gc blocks from source\n      if (treeLength < length) {\n        const tx = state.createWriteBatch()\n\n        tx.deleteBlockRange(treeLength, length)\n        const dependency = state.updateDependency(tx, length)\n\n        await state.flush(tx)\n\n        if (dependency) state.storage.setDependencyHead(dependency)\n      }\n\n      const bitfield = { start: treeLength, length: length - treeLength, drop: false }\n      this.onappend(tree, bitfield, flushed)\n\n      return {\n        length: this.length,\n        byteLength: this.byteLength\n      }\n    } finally {\n      this.updating = false\n      this.mutex.unlock()\n\n      if (srcLocked) {\n        state.mutex.unlock()\n        state._clearActiveBatch()\n      }\n\n      this.core.checkIfIdle()\n    }\n  }\n\n  async _getTreeHeadAt (length) {\n    if (length === null) return this.treeInfo()\n\n    const head = getDefaultTree()\n\n    head.length = length\n\n    const roots = await MerkleTree.getRootsFromStorage(this.storage, length)\n    const rootHash = crypto.tree(roots)\n\n    head.fork = this.fork\n    head.rootHash = rootHash\n\n    if (length === this.length) head.signature = this.signature\n\n    return head\n  }\n\n  _moveToCore (core, truncated, appended) {\n    const head = this.core.sessionStates.pop()\n    if (head !== this) this.core.sessionStates[(head.index = this.index)] = head\n\n    this.core = core\n    this.index = this.core.sessionStates.push(this) - 1\n\n    for (let i = this.sessions.length - 1; i >= 0; i--) {\n      const s = this.sessions[i]\n      const manifest = s.manifest\n      s.transferSession(this.core)\n      if (!manifest && s.manifest) s.emit('manifest')\n      if (truncated) s.emit('truncate', truncated.to, truncated.fork)\n      if (appended) s.emit('append')\n    }\n  }\n\n  async moveTo (core, length) {\n    const state = core.state\n\n    await this.mutex.lock()\n\n    try {\n      // if (state.storage && (await state.storage.resumeSession(this.name)) !== null) {\n      //   throw STORAGE_CONFLICT('Batch has already been created')\n      // }\n\n      const treeLength = this.length\n\n      let truncated = null\n      let appended = false\n\n      if (!this.isSnapshot()) {\n        if (this.lingers === null) this.lingers = []\n        this.lingers.push(this.storage)\n\n        const resumed = await state.storage.resumeSession(this.name)\n\n        const truncation = length < this.length ? await truncateAndFlush(this, length) : null\n        const treeInfo = truncation ? truncation.tree : resumed ? null : await state._getTreeHeadAt(this.length)\n\n        const fork = truncation ? this.fork + 1 : this.fork\n\n        // todo: validate treeInfo\n\n        let storage = null\n\n        if (resumed) {\n          storage = resumed\n        } else {\n          treeInfo.fork = fork\n          storage = await state.storage.createSession(this.name, treeInfo)\n        }\n\n        const roots = await MerkleTree.getRootsFromStorage(storage, length)\n\n        this.storage = storage\n        this.prologue = state.prologue\n        this.fork = fork\n        this.length = length\n        this.byteLength = MerkleTree.size(roots)\n        this.roots = roots\n\n        if (truncation) {\n          const { dependency } = truncation\n\n          if (dependency) this.storage.setDependencyHead(dependency)\n          truncated = { to: treeLength, fork }\n        }\n\n        if (this.length > treeLength) {\n          appended = true\n        }\n      }\n\n      for (let i = this.core.sessionStates.length - 1; i >= 0; i--) {\n        const state = this.core.sessionStates[i]\n        if (state === this) continue\n        if (state.name === this.name) state._moveToCore(core.core)\n      }\n\n      this._moveToCore(core.core, truncated, appended)\n    } finally {\n      this.mutex.unlock()\n    }\n  }\n\n  async createSession (name, overwrite, atom) {\n    let storage = null\n    let treeInfo = null\n\n    if (!atom && !overwrite && this.storage) {\n      storage = await this.storage.resumeSession(name)\n\n      if (storage !== null) treeInfo = (await getCoreHead(storage)) || getDefaultTree()\n    }\n\n    const length = treeInfo ? treeInfo.length : this.length\n\n    if (storage === null) {\n      treeInfo = await this._getTreeHeadAt(length)\n\n      if (atom) {\n        storage = await this.storage.createAtomicSession(atom, treeInfo)\n      } else {\n        storage = await this.storage.createSession(name, treeInfo)\n      }\n    }\n\n    if (this.atomized && atom) {\n      throw new Error('Session already atomized')\n    }\n\n    const head = {\n      fork: this.fork,\n      roots: length === this.length ? this.roots.slice() : await MerkleTree.getRootsFromStorage(storage, length),\n      length,\n      prologue: this.prologue,\n      signature: length === this.length ? this.signature : null\n    }\n\n    const state = new SessionState(\n      this.core,\n      atom ? this : null,\n      storage,\n      head,\n      atom ? this.name : name\n    )\n\n    if (atom) {\n      this.atomized = atom\n      atom.onflush(state._commit.bind(state))\n    }\n\n    return state\n  }\n}\n\nfunction noop () {}\n\nfunction getBitfieldPage (index) {\n  return Math.floor(index / Bitfield.BITS_PER_PAGE)\n}\n\nfunction fillBitfieldPage (page, start, end, pageIndex, value) {\n  const offset = pageIndex * Bitfield.BITS_PER_PAGE\n  const max = offset + Bitfield.BITS_PER_PAGE\n\n  const index = max < end ? max : end\n\n  const from = start - offset\n  const to = index - offset\n\n  quickbit.fill(page, value, from, to)\n\n  return index\n}\n\nasync function storeBitfieldRange (storage, tx, from, to, value) {\n  if (from >= to) return\n\n  const firstPage = getBitfieldPage(from)\n  const lastPage = getBitfieldPage(to - 1)\n\n  let index = from\n\n  const rx = storage.read()\n\n  const promises = []\n  for (let i = firstPage; i <= lastPage; i++) {\n    promises.push(rx.getBitfieldPage(i))\n  }\n\n  rx.tryFlush()\n\n  const pages = await Promise.all(promises)\n  const cnt = lastPage - firstPage + 1\n\n  for (let i = 0; i < cnt; i++) {\n    const pageIndex = i + firstPage\n    if (!pages[i]) pages[i] = b4a.alloc(Bitfield.BYTES_PER_PAGE)\n\n    index = fillBitfieldPage(pages[i], index, to, pageIndex, value)\n    tx.putBitfieldPage(pageIndex, pages[i])\n  }\n}\n\nasync function truncateAndFlush (s, length) {\n  const batch = s.createTreeBatch()\n  await MerkleTree.truncate(s, length, batch, s.fork)\n  const tx = s.createWriteBatch()\n\n  const info = await s._truncate(tx, batch)\n  const flushed = await s.flush()\n\n  return {\n    tree: info.tree,\n    roots: info.roots,\n    dependency: info.dependency,\n    flushed\n  }\n}\n\nfunction updateDependency (state, length, truncated) {\n  const i = state.storage.findDependencyIndex(length, truncated)\n  if (i === -1) return null // skip default state and overlays of default\n\n  return {\n    dataPointer: state.storage.dependencies[i].dataPointer,\n    length\n  }\n}\n\nfunction getDefaultTree () {\n  return {\n    fork: 0,\n    length: 0,\n    rootHash: null,\n    signature: null\n  }\n}\n\nfunction getCoreHead (storage) {\n  const b = storage.read()\n  const p = b.getHead()\n  b.tryFlush()\n  return p\n}\nconst { Writable, Readable } = require('streamx')\n\nclass ReadStream extends Readable {\n  constructor (core, opts = {}) {\n    super()\n\n    this.core = core\n    this.start = opts.start || 0\n    this.end = typeof opts.end === 'number' ? opts.end : -1\n    this.snapshot = !opts.live && opts.snapshot !== false\n    this.live = !!opts.live\n  }\n\n  _open (cb) {\n    this._openP().then(cb, cb)\n  }\n\n  _read (cb) {\n    this._readP().then(cb, cb)\n  }\n\n  async _openP () {\n    if (this.end === -1) await this.core.update()\n    else await this.core.ready()\n    if (this.snapshot && this.end === -1) this.end = this.core.length\n  }\n\n  async _readP () {\n    const end = this.live ? -1 : (this.end === -1 ? this.core.length : this.end)\n    if (end >= 0 && this.start >= end) {\n      this.push(null)\n      return\n    }\n\n    this.push(await this.core.get(this.start++))\n  }\n}\n\nexports.ReadStream = ReadStream\n\nclass WriteStream extends Writable {\n  constructor (core) {\n    super()\n    this.core = core\n  }\n\n  _writev (batch, cb) {\n    this._writevP(batch).then(cb, cb)\n  }\n\n  async _writevP (batch) {\n    await this.core.append(batch)\n  }\n}\n\nexports.WriteStream = WriteStream\n\nclass ByteStream extends Readable {\n  constructor (core, opts = {}) {\n    super()\n\n    this._core = core\n    this._index = 0\n    this._range = null\n\n    this._byteOffset = opts.byteOffset || 0\n    this._byteLength = typeof opts.byteLength === 'number' ? opts.byteLength : -1\n    this._prefetch = typeof opts.prefetch === 'number' ? opts.prefetch : 32\n\n    this._applyOffset = this._byteOffset > 0\n  }\n\n  _open (cb) {\n    this._openp().then(cb, cb)\n  }\n\n  _read (cb) {\n    this._readp().then(cb, cb)\n  }\n\n  async _openp () {\n    if (this._byteLength === -1) {\n      await this._core.update()\n      this._byteLength = Math.max(this._core.byteLength - this._byteOffset, 0)\n    }\n  }\n\n  async _readp () {\n    let data = null\n\n    if (this._byteLength === 0) {\n      this.push(null)\n      return\n    }\n\n    let relativeOffset = 0\n\n    if (this._applyOffset) {\n      this._applyOffset = false\n\n      const [block, byteOffset] = await this._core.seek(this._byteOffset)\n\n      this._index = block\n      relativeOffset = byteOffset\n    }\n\n    this._predownload(this._index + 1)\n    data = await this._core.get(this._index++, { valueEncoding: 'binary' })\n\n    if (relativeOffset > 0) data = data.subarray(relativeOffset)\n\n    if (data.byteLength > this._byteLength) data = data.subarray(0, this._byteLength)\n    this._byteLength -= data.byteLength\n\n    this.push(data)\n    if (this._byteLength === 0) this.push(null)\n  }\n\n  _predownload (index) {\n    if (this._range) this._range.destroy()\n    this._range = this._core.download({ start: index, end: index + this._prefetch, linear: true })\n  }\n\n  _destroy (cb) {\n    if (this._range) this._range.destroy()\n    cb(null)\n  }\n}\n\nexports.ByteStream = ByteStream\nconst crypto = require('hypercore-crypto')\nconst b4a = require('b4a')\nconst c = require('compact-encoding')\nconst flat = require('flat-tree')\nconst { BAD_ARGUMENT } = require('hypercore-errors')\nconst unslab = require('unslab')\n\nconst m = require('./messages')\nconst multisig = require('./multisig')\nconst caps = require('./caps')\n\nclass Signer {\n  constructor (manifestHash, version, index, { signature = 'ed25519', publicKey, namespace = caps.DEFAULT_NAMESPACE } = {}) {\n    if (!publicKey) throw BAD_ARGUMENT('public key is required for a signer')\n    if (signature !== 'ed25519') throw BAD_ARGUMENT('Only Ed25519 signatures are supported')\n\n    this.manifestHash = manifestHash\n    this.version = version\n    this.signer = index\n    this.signature = signature\n    this.publicKey = publicKey\n    this.namespace = namespace\n  }\n\n  _ctx () {\n    return this.version === 0 ? this.namespace : this.manifestHash\n  }\n\n  verify (batch, signature) {\n    return crypto.verify(batch.signable(this._ctx()), signature, this.publicKey)\n  }\n\n  sign (batch, keyPair) {\n    return crypto.sign(batch.signable(this._ctx()), keyPair.secretKey)\n  }\n}\n\nclass CompatSigner extends Signer {\n  constructor (index, signer, legacy) {\n    super(null, 0, index, signer)\n    this.legacy = legacy\n  }\n\n  verify (batch, signature) {\n    return crypto.verify(batch.signableCompat(this.legacy), signature, this.publicKey)\n  }\n\n  sign (batch, keyPair) {\n    return crypto.sign(batch.signableCompat(this.legacy), keyPair.secretKey)\n  }\n}\n\nmodule.exports = class Verifier {\n  constructor (manifestHash, manifest, { compat = isCompat(manifestHash, manifest), legacy = false } = {}) {\n    const self = this\n\n    this.manifestHash = manifestHash\n    this.compat = compat || manifest === null\n    this.version = this.compat ? 0 : typeof manifest.version === 'number' ? manifest.version : 1\n    this.hash = manifest.hash || 'blake2b'\n    this.allowPatch = !this.compat && !!manifest.allowPatch\n    this.quorum = this.compat ? 1 : defaultQuorum(manifest)\n\n    this.signers = manifest.signers ? manifest.signers.map(createSigner) : []\n    this.prologue = this.compat ? null : (manifest.prologue || null)\n\n    function createSigner (signer, index) {\n      return self.compat\n        ? new CompatSigner(index, signer, legacy)\n        : new Signer(manifestHash, self.version, index, signer)\n    }\n  }\n\n  _verifyCompat (batch, signature) {\n    if (!signature) return false\n\n    if (this.compat || (!this.allowPatch && this.signers.length === 1)) {\n      return !!signature && this.signers[0].verify(batch, signature)\n    }\n\n    return this._verifyMulti(batch, signature)\n  }\n\n  _inflate (signature) {\n    if (this.version >= 1) return multisig.inflate(signature)\n    const { proofs, patch } = multisig.inflatev0(signature)\n\n    return {\n      proofs: proofs.map(proofToVersion1),\n      patch\n    }\n  }\n\n  _verifyMulti (batch, signature) {\n    if (!signature || this.quorum === 0) return false\n\n    const { proofs, patch } = this._inflate(signature)\n    if (proofs.length < this.quorum) return false\n\n    const tried = new Uint8Array(this.signers.length)\n    const nodes = this.allowPatch && patch.length ? toMap(patch) : null\n\n    for (let i = 0; i < this.quorum; i++) {\n      const inp = proofs[i]\n\n      let tree = batch\n\n      if (inp.patch && this.allowPatch) {\n        tree = batch.clone()\n\n        const upgrade = generateUpgrade(nodes, batch.length, inp.patch)\n        const proof = { fork: tree.fork, block: null, hash: null, seek: null, upgrade, manifest: null }\n\n        try {\n          if (!tree.verifyUpgrade(proof)) return false\n        } catch {\n          return false\n        }\n      }\n\n      if (inp.signer >= this.signers.length || tried[inp.signer]) return false\n      tried[inp.signer] = 1\n\n      const s = this.signers[inp.signer]\n      if (!s.verify(tree, inp.signature)) return false\n    }\n\n    return true\n  }\n\n  verify (batch, signature) {\n    if (this.version === 0) {\n      return this._verifyCompat(batch, signature)\n    }\n\n    if (this.prologue !== null && batch.length <= this.prologue.length) {\n      return batch.length === this.prologue.length && b4a.equals(batch.hash(), this.prologue.hash)\n    }\n\n    return this._verifyMulti(batch, signature)\n  }\n\n  // TODO: better api for this that is more ... multisig-ey\n  sign (batch, keyPair) {\n    if (!keyPair || !keyPair.secretKey) throw BAD_ARGUMENT('No key pair was passed')\n\n    for (const s of this.signers) {\n      if (b4a.equals(s.publicKey, keyPair.publicKey)) {\n        const signature = s.sign(batch, keyPair)\n        if (this.signers.length !== 1 || this.version === 0) return signature\n        return this.assemble([{ signer: 0, signature, patch: 0, nodes: null }])\n      }\n    }\n\n    throw BAD_ARGUMENT('Public key is not a declared signer')\n  }\n\n  assemble (inputs) {\n    return this.version === 0 ? multisig.assemblev0(inputs) : multisig.assemble(inputs)\n  }\n\n  static manifestHash (manifest) {\n    return manifestHash(manifest)\n  }\n\n  static encodeManifest (manifest) {\n    return c.encode(m.manifest, manifest)\n  }\n\n  static decodeManifest (manifest) {\n    return c.decode(m.manifest, manifest)\n  }\n\n  static defaultSignerManifest (publicKey) {\n    return {\n      version: 1,\n      hash: 'blake2b',\n      allowPatch: false,\n      quorum: 1,\n      signers: [{\n        signature: 'ed25519',\n        namespace: caps.DEFAULT_NAMESPACE,\n        publicKey\n      }],\n      prologue: null,\n      linked: null\n    }\n  }\n\n  static fromManifest (manifest, opts) {\n    const m = this.createManifest(manifest)\n    return new this(manifestHash(m), m, opts)\n  }\n\n  static createManifest (inp) {\n    if (!inp) return null\n\n    const manifest = {\n      version: getManifestVersion(inp), // only v2 if linked are present\n      hash: 'blake2b',\n      allowPatch: !!inp.allowPatch,\n      quorum: defaultQuorum(inp),\n      signers: inp.signers ? inp.signers.map(parseSigner) : [],\n      prologue: null,\n      linked: null\n    }\n\n    if (inp.hash && inp.hash !== 'blake2b') throw BAD_ARGUMENT('Only Blake2b hashes are supported')\n\n    if (inp.prologue) {\n      if (!(b4a.isBuffer(inp.prologue.hash) && inp.prologue.hash.byteLength === 32) || !(inp.prologue.length >= 0)) {\n        throw BAD_ARGUMENT('Invalid prologue')\n      }\n\n      manifest.prologue = inp.prologue\n      manifest.prologue.hash = unslab(manifest.prologue.hash)\n    }\n\n    if (inp.linked && inp.linked.length) {\n      if (manifest.version < 2) throw BAD_ARGUMENT('Invalid field')\n\n      for (const key of inp.linked) {\n        if (!(b4a.isBuffer(key) && key.byteLength === 32)) {\n          throw BAD_ARGUMENT('Invalid key')\n        }\n      }\n\n      manifest.linked = inp.linked\n    }\n\n    return manifest\n  }\n\n  static isValidManifest (key, manifest) {\n    return b4a.equals(key, manifestHash(manifest))\n  }\n\n  static isCompat (key, manifest) {\n    return isCompat(key, manifest)\n  }\n\n  static sign (manifest, batch, keyPair, opts) {\n    return Verifier.fromManifest(manifest, opts).sign(batch, keyPair)\n  }\n}\n\nfunction toMap (nodes) {\n  const m = new Map()\n  for (const node of nodes) m.set(node.index, node)\n  return m\n}\n\nfunction isCompat (key, manifest) {\n  return !!(manifest && manifest.signers.length === 1 && b4a.equals(key, manifest.signers[0].publicKey))\n}\n\nfunction defaultQuorum (man) {\n  if (typeof man.quorum === 'number') return man.quorum\n  if (!man.signers || !man.signers.length) return 0\n  return (man.signers.length >> 1) + 1\n}\n\nfunction generateUpgrade (patch, start, length) {\n  const upgrade = { start, length, nodes: null, additionalNodes: [], signature: null }\n\n  const from = start * 2\n  const to = from + length * 2\n\n  for (const ite = flat.iterator(0); ite.fullRoot(to); ite.nextTree()) {\n    if (ite.index + ite.factor / 2 < from) continue\n\n    if (upgrade.nodes === null && ite.contains(from - 2)) {\n      upgrade.nodes = []\n\n      const root = ite.index\n      const target = from - 2\n\n      ite.seek(target)\n\n      while (ite.index !== root) {\n        ite.sibling()\n        if (ite.index > target) upgrade.nodes.push(patch.get(ite.index))\n        ite.parent()\n      }\n\n      continue\n    }\n\n    if (upgrade.nodes === null) upgrade.nodes = []\n    upgrade.nodes.push(patch.get(ite.index))\n  }\n\n  if (upgrade.nodes === null) upgrade.nodes = []\n  return upgrade\n}\n\nfunction parseSigner (signer) {\n  validateSigner(signer)\n  return {\n    signature: 'ed25519',\n    namespace: unslab(signer.namespace || caps.DEFAULT_NAMESPACE),\n    publicKey: unslab(signer.publicKey)\n  }\n}\n\nfunction validateSigner (signer) {\n  if (!signer || !signer.publicKey) throw BAD_ARGUMENT('Signer missing public key')\n  if (signer.signature && signer.signature !== 'ed25519') throw BAD_ARGUMENT('Only Ed25519 signatures are supported')\n}\n\nfunction manifestHash (manifest) {\n  const state = { start: 0, end: 32, buffer: null }\n  m.manifest.preencode(state, manifest)\n  state.buffer = b4a.allocUnsafe(state.end)\n  c.raw.encode(state, caps.MANIFEST)\n  m.manifest.encode(state, manifest)\n  return crypto.hash(state.buffer)\n}\n\nfunction proofToVersion1 (proof) {\n  return {\n    signer: proof.signer,\n    signature: proof.signature,\n    patch: proof.patch ? proof.patch.length : 0\n  }\n}\n\nfunction getManifestVersion (inp) {\n  if (typeof inp.version === 'number') return inp.version\n  if (inp.linked && inp.linked.length) return 2\n  return 1\n}\n{\n  \"name\": \"hypercore\",\n  \"version\": \"11.1.0\",\n  \"description\": \"Hypercore is a secure, distributed append-only log\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"standard && node test/all.js\",\n    \"test:generate\": \"brittle -r test/all.js test/*.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/hypercore.git\"\n  },\n  \"contributors\": [\n    {\n      \"name\": \"Mathias Buus\",\n      \"email\": \"mathiasbuus@gmail.com\",\n      \"url\": \"https://mafinto.sh\"\n    },\n    {\n      \"name\": \"Andrew Osheroff\",\n      \"email\": \"andrewosh@gmail.com\",\n      \"url\": \"https://andrewosh.com\"\n    }\n  ],\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/hypercore/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/hypercore#readme\",\n  \"files\": [\n    \"index.js\",\n    \"errors.js\",\n    \"messages.js\",\n    \"lib/**.js\"\n  ],\n  \"imports\": {\n    \"events\": {\n      \"bare\": \"bare-events\",\n      \"default\": \"events\"\n    }\n  },\n  \"dependencies\": {\n    \"@hyperswarm/secret-stream\": \"^6.0.0\",\n    \"b4a\": \"^1.1.0\",\n    \"bare-events\": \"^2.2.0\",\n    \"big-sparse-array\": \"^1.0.3\",\n    \"compact-encoding\": \"^2.11.0\",\n    \"fast-fifo\": \"^1.3.0\",\n    \"flat-tree\": \"^1.9.0\",\n    \"hypercore-crypto\": \"^3.2.1\",\n    \"hypercore-encryption\": \"^1.0.0\",\n    \"hypercore-errors\": \"^1.2.0\",\n    \"hypercore-id-encoding\": \"^1.2.0\",\n    \"hypercore-storage\": \"^1.0.0\",\n    \"is-options\": \"^1.0.1\",\n    \"protomux\": \"^3.5.0\",\n    \"quickbit-universal\": \"^2.2.0\",\n    \"random-array-iterator\": \"^1.0.0\",\n    \"safety-catch\": \"^1.0.1\",\n    \"sodium-universal\": \"^4.0.0\",\n    \"streamx\": \"^2.12.4\",\n    \"unslab\": \"^1.3.0\",\n    \"z32\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.0.0\",\n    \"debugging-stream\": \"^3.1.0\",\n    \"hyperswarm\": \"^4.3.6\",\n    \"rache\": \"^1.0.0\",\n    \"range-parser\": \"^1.2.1\",\n    \"speedometer\": \"^1.1.0\",\n    \"standard\": \"^17.0.0\",\n    \"test-tmp\": \"^1.0.2\",\n    \"tiny-byte-size\": \"^1.1.0\",\n    \"udx-native\": \"^1.6.1\"\n  }\n}\nconst IndexStream = require('./lib/stream')\nconst b4a = require('b4a')\n\n// engines\nconst RocksEngine = require('./lib/engine/rocks')\nconst BeeEngine = require('./lib/engine/bee')\n\nlet compareHasDups = false\n\nclass Updates {\n  constructor (tick, entries) {\n    this.refs = 1\n    this.mutating = 0\n    this.tick = tick // internal tie breaker clock for same key updates\n    this.map = new Map(entries)\n    this.locks = new Map()\n  }\n\n  get size () {\n    return this.map.size\n  }\n\n  enter (collection) {\n    if (collection.trigger !== null) {\n      if (this.locks.has(collection)) return false\n      this.locks.set(collection, { resolve: null, promise: null })\n    }\n\n    this.mutating++\n    return true\n  }\n\n  exit (collection) {\n    this.mutating--\n    if (collection.trigger === null) return\n    const { resolve } = this.locks.get(collection)\n    this.locks.delete(collection)\n    if (resolve) resolve()\n  }\n\n  wait (collection) {\n    const state = this.locks.get(collection)\n    if (state.promise) return state.promise\n    state.promise = new Promise((resolve) => { state.resolve = resolve })\n    return state.promise\n  }\n\n  ref () {\n    this.refs++\n    return this\n  }\n\n  unref () {\n    this.refs--\n  }\n\n  detach () {\n    const entries = new Array(this.map.size)\n\n    if (entries.length > 0) {\n      let i = 0\n      for (const [key, u] of this.map) {\n        const clone = {\n          created: u.created,\n          tick: u.tick,\n          collection: u.collection,\n          key: u.key,\n          value: u.value,\n          indexes: u.indexes.slice(0)\n        }\n        entries[i++] = [key, clone]\n      }\n    }\n\n    this.refs--\n    return new Updates(this.tick, entries)\n  }\n\n  get (key) {\n    const u = this.map.get(b4a.toString(key, 'hex'))\n    return u === undefined ? null : u\n  }\n\n  getIndex (index, key) {\n    // 99% of all reads\n    if (this.map.size === 0) return null\n\n    const matches = []\n\n    for (const u of this.map.values()) {\n      if (u.collection !== index.collection) continue\n\n      const ups = u.indexes[index.offset]\n\n      for (let i = 0; i < ups.length; i++) {\n        if (b4a.equals(key, ups[i].key)) matches.push(u)\n      }\n    }\n\n    if (!matches.length) return null\n\n    let latest = matches[0]\n\n    for (let i = 1; i < matches.length; i++) {\n      const m = matches[i]\n      if (m.tick > latest.tick) latest = m\n    }\n\n    return latest\n  }\n\n  flush () {\n    this.map.clear()\n  }\n\n  update (collection, key, value) {\n    const u = {\n      created: false,\n      tick: this.tick++,\n      collection,\n      key,\n      value,\n      indexes: []\n    }\n    this.map.set(b4a.toString(key, 'hex'), u)\n    return u\n  }\n\n  delete (key) {\n    this.map.delete(b4a.toString(key, 'hex'))\n  }\n\n  batch () {\n    const ordered = new Array(this.map.size)\n\n    let sort = false\n    let i = 0\n\n    for (const u of this.map.values()) {\n      if (i > 0 && u.tick < ordered[i - 1].tick) sort = true\n      ordered[i++] = u\n    }\n\n    if (sort) ordered.sort(sortUpdates)\n\n    const dedup = ordered.length > 1 ? new Set() : null\n    const batch = []\n\n    for (let i = ordered.length - 1; i >= 0; i--) {\n      const u = ordered[i]\n\n      for (let j = 0; j < u.indexes.length; j++) {\n        const idx = u.indexes[j]\n\n        // TODO: we can be more fancy here with only deduping non-unique indexes\n        for (let k = 0; k < idx.length; k++) {\n          const { key, value } = idx[k]\n          if (dedup !== null) {\n            const id = b4a.toString(key, 'hex')\n            if (dedup.has(id)) continue\n            dedup.add(id)\n          }\n\n          batch.push([key, value])\n        }\n      }\n\n      // these keys are guaranteed unique so no dedup is needed\n      batch.push([u.key, u.value])\n    }\n\n    return batch\n  }\n\n  collectionOverlay (collection, range, reverse) {\n    const overlay = []\n\n    // 99% of all reads\n    if (this.map.size === 0) return overlay\n\n    for (const u of this.map.values()) {\n      if (u.collection !== collection) continue\n      if (withinRange(range, u.key)) {\n        overlay.push({\n          tick: u.tick,\n          key: u.key,\n          value: u.value === null ? null : [u.key, u.value]\n        })\n      }\n    }\n\n    return sortOverlay(overlay, reverse)\n  }\n\n  indexOverlay (index, range, reverse) {\n    const overlay = []\n\n    // 99% of all reads\n    if (this.map.size === 0) return overlay\n\n    const collection = index.collection\n\n    for (const u of this.map.values()) {\n      if (u.collection !== collection) continue\n      for (const { key, value } of u.indexes[index.offset]) {\n        if (withinRange(range, key)) {\n          overlay.push({\n            tick: u.tick,\n            key,\n            value: value === null ? null : [u.key, u.value]\n          })\n        }\n      }\n    }\n\n    return sortOverlay(overlay, reverse)\n  }\n}\n\nclass HyperDB {\n  constructor (engine, definition, {\n    version = definition.version,\n    snapshot = engine.snapshot(),\n    updates = new Updates(0, []),\n    rootInstance = null,\n    writable = true,\n    context = null\n  } = {}) {\n    this.version = version\n    this.context = context\n    this.engine = engine\n    this.engineSnapshot = snapshot\n    this.definition = definition\n    this.updates = updates\n    this.rootInstance = writable === true ? (rootInstance || this) : null\n    this.watchers = null\n    this.closing = null\n\n    engine.refs++\n  }\n\n  static isDefinition (definition) {\n    return !!(definition && typeof definition.resolveCollection === 'function')\n  }\n\n  static rocks (storage, definition, options = {}) {\n    const readOnly = options.readOnly === true || options.readonly === true\n    return new HyperDB(new RocksEngine(storage, { readOnly }), definition, options)\n  }\n\n  static bee (core, definition, options = {}) {\n    const extension = options.extension\n    const autoUpdate = !!options.autoUpdate\n\n    const db = new HyperDB(new BeeEngine(core, { extension }), definition, options)\n\n    if (autoUpdate) {\n      const update = db.update.bind(db)\n      core.on('append', update)\n      core.on('truncate', update)\n    }\n\n    return db\n  }\n\n  get core () {\n    return this.engine.core\n  }\n\n  get db () {\n    return this.engine.db\n  }\n\n  get closed () {\n    return this.engine === null\n  }\n\n  get writable () {\n    return this.rootInstance !== null\n  }\n\n  get readable () {\n    return this.closing !== null\n  }\n\n  get autoClose () {\n    return this.rootInstance !== null && this.rootInstance !== this\n  }\n\n  cork () {\n    if (this.engineSnapshot !== null) this.engineSnapshot.cork()\n  }\n\n  uncork () {\n    if (this.engineSnapshot !== null) this.engineSnapshot.uncork()\n  }\n\n  ready () {\n    return this.engineSnapshot === null ? Promise.resolve() : this.engineSnapshot.ready()\n  }\n\n  close () {\n    if (this.closing === null) this.closing = this._close()\n    return this.closing\n  }\n\n  changes (range = {}) {\n    maybeClosed(this)\n\n    return this.engine.changes(range.live ? null : this.engineSnapshot, this.version, this.definition, range)\n  }\n\n  watch (fn) {\n    if (this.watchers === null) this.watchers = new Set()\n    this.watchers.add(fn)\n  }\n\n  unwatch (fn) {\n    if (this.watchers === null) return\n    this.watchers.delete(fn)\n  }\n\n  async _close () {\n    this.updates.unref()\n    this.updates = null\n\n    this.engineSnapshot.unref()\n    this.engineSnapshot = null\n\n    if (--this.engine.refs === 0) await this.engine.close()\n    this.engine = null\n\n    this.rootInstance = null\n  }\n\n  _createSnapshot (rootInstance, writable, context) {\n    const snapshot = this.engineSnapshot.ref()\n\n    return new HyperDB(this.engine, this.definition, {\n      version: this.version,\n      snapshot,\n      updates: this.updates.ref(),\n      rootInstance,\n      writable,\n      context\n    })\n  }\n\n  snapshot (options) {\n    maybeClosed(this)\n\n    const context = (options && options.context) || this.context\n    return this._createSnapshot(null, false, context)\n  }\n\n  transaction (options) {\n    maybeClosed(this)\n\n    if (this.rootInstance !== this) {\n      throw new Error('Can only make transactions on main instance')\n    }\n\n    const context = (options && options.context) || this.context\n    const tx = this._createSnapshot(this, true, context)\n\n    tx.update()\n\n    return tx\n  }\n\n  find (indexName, query = {}, options) {\n    if (options) query = { ...query, ...options }\n\n    maybeClosed(this)\n\n    const index = this.definition.resolveIndex(indexName)\n    const collection = index === null\n      ? this.definition.resolveCollection(indexName)\n      : index.collection\n\n    if (collection === null) throw new Error('Unknown index: ' + indexName)\n\n    const limit = query.limit\n    const reverse = !!query.reverse\n\n    const range = index === null\n      ? collection.encodeKeyRange(query)\n      : index.encodeKeyRange(query)\n\n    const overlay = index === null\n      ? this.updates.collectionOverlay(collection, range, reverse)\n      : this.updates.indexOverlay(index, range, reverse)\n\n    return new IndexStream(this, range, {\n      index,\n      collection,\n      reverse,\n      limit,\n      overlay\n    })\n  }\n\n  async findOne (indexName, query, options) {\n    return this.find(indexName, query, { ...options, limit: 1 }).one()\n  }\n\n  updated (collectionName, doc) {\n    if (this.updates === null) return false\n    if (!collectionName) return this.updates.size > 0\n\n    const collection = this.definition.resolveCollection(collectionName)\n    if (collection === null) return false\n\n    const key = b4a.isBuffer(doc) ? doc : collection.encodeKey(doc)\n    const u = this.updates.get(key)\n    return u !== null\n  }\n\n  async get (collectionName, doc) {\n    maybeClosed(this)\n\n    const snap = this.engineSnapshot.ref()\n\n    try {\n      const collection = this.definition.resolveCollection(collectionName)\n      if (collection !== null) return await this._getCollection(collection, snap, doc)\n\n      const index = this.definition.resolveIndex(collectionName)\n      if (index === null) throw new Error('Unknown index or collection: ' + collectionName)\n\n      const key = index.encodeKey(doc, this.context)\n      if (key === null) return null\n\n      const u = this.updates.getIndex(index, key)\n      if (u !== null) return u.value === null ? null : index.collection.reconstruct(this.version, u.key, u.value)\n\n      const value = await snap.get(key)\n      if (value === null) return null\n\n      return this._getCollection(index.collection, snap, index.reconstruct(key, value))\n    } finally {\n      if (snap !== null) snap.unref()\n    }\n  }\n\n  async _getCollection (collection, snap, doc) {\n    maybeClosed(this)\n\n    // we allow passing the raw primary key here cause thats what the trigger passes for simplicity\n    // you shouldnt rely on that.\n    const key = b4a.isBuffer(doc) ? doc : collection.encodeKey(doc)\n\n    const u = this.updates.get(key)\n    const value = u !== null ? u.value : await snap.get(key)\n\n    return value === null ? null : collection.reconstruct(this.version, key, value)\n  }\n\n  // TODO: needs to wait for pending inserts/deletes and then lock all future ones whilst it runs\n  _runTrigger (collection, key, doc) {\n    return collection.trigger(this, key, doc, this.context)\n  }\n\n  async delete (collectionName, doc) {\n    maybeClosed(this)\n\n    if (this.updates.refs > 1) this.updates = this.updates.detach()\n\n    const collection = this.definition.resolveCollection(collectionName)\n    if (collection === null) return\n\n    while (this.updates.enter(collection) === false) await this.updates.wait(collection)\n\n    const snap = this.engineSnapshot.ref()\n    const key = collection.encodeKey(doc)\n\n    let prevValue = null\n\n    try {\n      prevValue = await this.engineSnapshot.get(key)\n      if (collection.trigger !== null) await this._runTrigger(collection, doc, null)\n\n      if (prevValue === null) {\n        this.updates.delete(key)\n        return\n      }\n\n      const prevDoc = collection.reconstruct(this.version, key, prevValue)\n\n      const u = this.updates.update(collection, key, null)\n\n      for (let i = 0; i < collection.indexes.length; i++) {\n        const idx = collection.indexes[i]\n        const del = idx.encodeIndexKeys(prevDoc, this.context)\n        const ups = []\n\n        u.indexes.push(ups)\n\n        for (let j = 0; j < del.length; j++) ups.push({ key: del[j], value: null })\n      }\n    } finally {\n      snap.unref()\n      this.updates.exit(collection)\n    }\n  }\n\n  async insert (collectionName, doc) {\n    maybeClosed(this)\n\n    if (this.updates.refs > 1) this.updates = this.updates.detach()\n\n    const collection = this.definition.resolveCollection(collectionName)\n    if (collection === null) throw new Error('Unknown collection: ' + collectionName)\n\n    while (this.updates.enter(collection) === false) await this.updates.wait(collection)\n\n    const snap = this.engineSnapshot.ref()\n    const key = collection.encodeKey(doc)\n    const value = collection.encodeValue(this.version, doc)\n\n    let prevValue = null\n\n    try {\n      prevValue = await this.engineSnapshot.get(key)\n      if (collection.trigger !== null) await this._runTrigger(collection, doc, doc)\n\n      if (prevValue !== null && b4a.equals(value, prevValue)) {\n        this.updates.delete(key)\n        return\n      }\n\n      const prevDoc = prevValue === null ? null : collection.reconstruct(this.version, key, prevValue)\n\n      const u = this.updates.update(collection, key, value)\n\n      u.created = prevValue === null\n\n      for (let i = 0; i < collection.indexes.length; i++) {\n        const idx = collection.indexes[i]\n        const prevKeys = prevDoc ? idx.encodeIndexKeys(prevDoc, this.context) : []\n        const nextKeys = idx.encodeIndexKeys(doc, this.context)\n        const ups = []\n\n        u.indexes.push(ups)\n\n        const [del, put] = diffKeys(prevKeys, nextKeys)\n        const value = put.length === 0 ? null : idx.encodeValue(doc)\n\n        for (let j = 0; j < del.length; j++) ups.push({ key: del[j], value: null })\n        for (let j = 0; j < put.length; j++) ups.push({ key: put[j], value })\n      }\n    } finally {\n      snap.unref()\n      this.updates.exit(collection)\n    }\n  }\n\n  update () {\n    maybeClosed(this)\n\n    if (!this.engine.outdated(this.engineSnapshot)) return\n\n    if (this.updates.refs > 1) this.updates = this.updates.detach()\n    this.updates.flush()\n\n    this.engineSnapshot.unref()\n    this.engineSnapshot = this.engine.snapshot()\n\n    if (this.watchers !== null) {\n      for (const fn of this.watchers) fn()\n    }\n  }\n\n  async _flush () {\n    if (this.engine.outdated(this.engineSnapshot)) throw new Error('Database has changed, refusing to commit')\n    if (this.updates.refs > 1) this.updates = this.updates.detach()\n\n    await this.engine.commit(this.updates)\n\n    this.update()\n\n    if (this.rootInstance !== this && this.rootInstance.updates.size === 0) this.rootInstance.update()\n  }\n\n  async flush () {\n    maybeClosed(this)\n\n    if (this.engineSnapshot.opened === false) await this.engineSnapshot.ready()\n\n    if (this.updating > 0) throw new Error('Insert/delete in progress, refusing to commit')\n    if (this.rootInstance === null) throw new Error('Instance is not writable, refusing to commit')\n    if (this.updates.size > 0) await this._flush()\n    if (this.autoClose === true) await this.close()\n  }\n}\n\nfunction maybeClosed (db) {\n  if (db.closing !== null) throw new Error('Hyperdb is closed')\n}\n\nfunction withinRange (range, key) {\n  if (range.gte && b4a.compare(range.gte, key) > 0) return false\n  if (range.gt && b4a.compare(range.gt, key) >= 0) return false\n  if (range.lte && b4a.compare(range.lte, key) < 0) return false\n  if (range.lt && b4a.compare(range.lt, key) <= 0) return false\n  return true\n}\n\nfunction sortKeys (a, b) {\n  return b4a.compare(a, b)\n}\n\nfunction sortUpdates (a, b) {\n  return a.tick - b.tick // oldest to newest\n}\n\nfunction compareOverlay (a, b) {\n  const c = b4a.compare(a.key, b.key)\n  if (c !== 0) return c\n  compareHasDups = true\n  return b.tick - a.tick\n}\n\nfunction reverseCompareOverlay (a, b) {\n  const c = b4a.compare(b.key, a.key)\n  if (c !== 0) return c\n  compareHasDups = true\n  return b.tick - a.tick\n}\n\nfunction diffKeys (a, b) {\n  if (a.length === 0 || b.length === 0) return [a, b]\n\n  // 90% of all indexes\n  if (a.length === 1 && b.length === 1) {\n    return b4a.equals(a[0], b[0]) ? [[], []] : [a, b]\n  }\n\n  a.sort(sortKeys)\n  b.sort(sortKeys)\n\n  const res = [[], []]\n  let ai = 0\n  let bi = 0\n\n  while (true) {\n    if (ai < a.length && bi < b.length) {\n      const cmp = b4a.compare(a[ai], b[bi])\n\n      if (cmp === 0) {\n        ai++\n        bi++\n      } else if (cmp < 0) {\n        res[0].push(a[ai++])\n      } else {\n        res[1].push(b[bi++])\n      }\n\n      continue\n    }\n\n    if (ai < a.length) res[0].push(a[ai++])\n    else if (bi < b.length) res[1].push(b[bi++])\n    else break\n  }\n\n  return res\n}\n\nfunction stripDups (overlay) {\n  let j = 0\n\n  for (let i = 0; i < overlay.length; i++) {\n    const a = overlay[i]\n    overlay[j++] = a\n    while (i + 1 < overlay.length && b4a.equals(a.key, overlay[i + 1].key)) i++\n  }\n\n  overlay.length = j\n}\n\nfunction sortOverlay (overlay, reverse) {\n  compareHasDups = false\n  overlay.sort(reverse ? reverseCompareOverlay : compareOverlay)\n  if (compareHasDups === true) stripDups(overlay)\n  return overlay\n}\n\nmodule.exports = HyperDB\nconst HyperBee = require('hyperbee')\nconst { Readable, getStreamError } = require('streamx')\nconst c = require('compact-encoding')\n\nclass BeeSnapshot {\n  constructor (snap) {\n    this.refs = 1\n    this.snapshot = snap\n    this.opened = false\n  }\n\n  async ready () {\n    await this.snapshot.ready()\n    this.opened = true\n  }\n\n  ref () {\n    this.refs++\n    return this\n  }\n\n  unref () {\n    if (--this.refs === 0) {\n      this.snapshot.close().catch(noop)\n      this.snapshot = null\n    }\n  }\n\n  cork () {}\n\n  uncork () {}\n\n  getIndirectRange (reconstruct, entries) {\n    const promises = new Array(entries.length)\n\n    for (let i = 0; i < promises.length; i++) {\n      const { key, value } = entries[i]\n      promises[i] = getWrapped(this.snapshot, key, reconstruct(key, value))\n    }\n\n    return promises\n  }\n\n  getBatch (keys) {\n    const promises = new Array(keys.length)\n\n    for (let i = 0; i < keys.length; i++) {\n      promises[i] = getValue(this.snapshot, keys[i])\n    }\n\n    return Promise.all(promises)\n  }\n\n  get (key) {\n    return getValue(this.snapshot, key)\n  }\n\n  createReadStream (range, options) {\n    return this.snapshot.createReadStream(range, options)\n  }\n}\n\nclass ChangesStream extends Readable {\n  constructor (db, version, definition, range) {\n    super()\n\n    this.db = db\n    this.version = version\n    this.definition = definition\n    this.stream = null\n    this.collectionsById = new Map()\n    this.range = range\n\n    for (const c of this.definition.collections) this.collectionsById.set(c.id, c)\n  }\n\n  _open (cb) {\n    this.stream = this.db.createHistoryStream(this.range)\n    this.stream.on('readable', this._ondrain.bind(this))\n    this.stream.on('error', noop)\n    this.stream.on('close', this._onclose.bind(this))\n    cb(null)\n  }\n\n  _ondrain () {\n    while (Readable.isBackpressured(this) === false) {\n      const data = this.stream.read()\n\n      if (data === null) break\n\n      const id = c.uint.decode({ start: 0, end: data.key.byteLength, buffer: data.key })\n      const coll = this.collectionsById.get(id)\n      if (coll === undefined) continue\n\n      if (data.type === 'put') {\n        const doc = coll.reconstruct(this.version, data.key, data.value)\n        this.push({ type: 'insert', seq: data.seq, collection: coll.name, value: doc })\n      } else {\n        const key = coll.reconstructKey(data.key)\n        this.push({ type: 'delete', seq: data.seq, collection: coll.name, value: key })\n      }\n    }\n  }\n\n  _onclose () {\n    const err = getStreamError(this.stream, { all: true })\n    if (err === null) this.push(null)\n    else this.destroy(err)\n  }\n\n  _read (cb) {\n    this._ondrain()\n    cb(null)\n  }\n\n  _destroy (cb) {\n    this.stream.destroy()\n    cb(null)\n  }\n}\n\nmodule.exports = class BeeEngine {\n  constructor (core, { extension } = {}) {\n    this.asap = true\n    this.clock = 0\n    this.refs = 0\n    this.core = core\n    this.db = new HyperBee(core, {\n      extension,\n      keyEncoding: 'binary',\n      valueEncoding: 'binary'\n    })\n  }\n\n  get closed () {\n    return this.db.closed\n  }\n\n  ready () {\n    return this.db.ready()\n  }\n\n  close () {\n    return this.db.close()\n  }\n\n  changes (snapshot, version, definition, range) {\n    const db = snapshot === null ? this.db : snapshot.snapshot\n    return new ChangesStream(db, version, definition, range)\n  }\n\n  snapshot () {\n    return new BeeSnapshot(this.db.snapshot())\n  }\n\n  outdated (snap) {\n    return snap === null || this.core.length !== snap.snapshot.core.length || this.core.fork !== snap.snapshot.core.fork\n  }\n\n  async commit (updates) {\n    this.clock++\n\n    const batch = this.db.batch()\n    const entries = updates.batch()\n\n    for (let i = 0; i < entries.length; i++) {\n      const [key, value] = entries[i]\n\n      if (value !== null) await batch.put(key, value)\n      else await batch.del(key)\n    }\n\n    await batch.flush()\n  }\n}\n\nasync function getWrapped (db, key, value) {\n  return { key, value: [value, await getValue(db, value)] }\n}\n\nasync function getValue (db, key) {\n  const node = await db.get(key)\n  return node === null ? null : node.value\n}\n\nfunction noop () {}\nconst RocksDB = require('rocksdb-native')\n\nclass RocksSnapshot {\n  constructor (snap, clock) {\n    this.clock = clock\n    this.corks = 0\n    this.refs = 1\n    this.snapshot = snap\n    this.opened = true\n    this.batch = null\n    this.batches = []\n  }\n\n  ready () {\n    return this.snapshot.ready()\n  }\n\n  ref () {\n    this.refs++\n    return this\n  }\n\n  unref () {\n    if (--this.refs === 0) {\n      this.snapshot.close().catch(noop)\n      for (const b of this.batches) b.destroy()\n    }\n  }\n\n  cork () {\n    this.corks++\n    if (this.batch === null) this.batch = this.snapshot.read()\n  }\n\n  uncork () {\n    if (--this.corks !== 0) return\n    if (this.batch !== null) this._flushBackground(this.batch)\n    this.batch = null\n  }\n\n  getIndirectRange (reconstruct, entries) {\n    const read = this.batches.length > 0 ? this.batches.pop() : this.snapshot.read()\n    const promises = new Array(entries.length)\n\n    for (let i = 0; i < promises.length; i++) {\n      const { key, value } = entries[i]\n      promises[i] = getWrapped(read, key, reconstruct(key, value))\n    }\n\n    this._flushBackground(read)\n    return promises\n  }\n\n  getBatch (keys) {\n    const read = this.batches.length > 0 ? this.batches.pop() : this.snapshot.read()\n    const promises = new Array(keys.length)\n\n    for (let i = 0; i < promises.length; i++) {\n      promises[i] = read.get(keys[i])\n    }\n\n    this._flushBackground(read)\n    return Promise.all(promises)\n  }\n\n  get (key) {\n    return this.batch === null ? this.snapshot.get(key) : this.batch.get(key)\n  }\n\n  createReadStream (range, options) {\n    return this.snapshot.iterator({ ...range, ...options })\n  }\n\n  async _flushBackground (batch) {\n    try {\n      await batch.flush()\n      this.batches.push(batch)\n    } catch (err) {\n      batch.destroy()\n    }\n  }\n}\n\nmodule.exports = class RocksEngine {\n  constructor (storage, options) {\n    this.asap = false\n    this.clock = 0\n    this.refs = 0\n    this.core = null\n    this.db = typeof storage === 'object' ? storage : new RocksDB(storage, options)\n    this.db.ready().catch(noop)\n    this.write = null\n  }\n\n  get closed () {\n    return this.db.closed\n  }\n\n  ready () {\n    return this.db.ready()\n  }\n\n  close () {\n    if (this.write !== null) this.write.destroy()\n    return this.db.close()\n  }\n\n  changes () {\n    throw new Error('Not supported in Rocks engine')\n  }\n\n  snapshot () {\n    return new RocksSnapshot(this.db.snapshot(), this.clock)\n  }\n\n  outdated (snap) {\n    return snap === null || snap.clock !== this.clock\n  }\n\n  async commit (updates) {\n    this.clock++\n\n    if (this.write === null) this.write = this.db.write()\n\n    const entries = updates.batch()\n\n    for (let i = 0; i < entries.length; i++) {\n      const [key, value] = entries[i]\n\n      if (value !== null) this.write.tryPut(key, value)\n      else this.write.tryDelete(key)\n    }\n\n    await this.write.flush()\n  }\n}\n\nasync function getWrapped (read, key, value) {\n  return { key, value: [value, await read.get(value)] }\n}\n\nfunction noop () {}\nconst { Readable, isEnded, getStreamError } = require('streamx')\nconst b4a = require('b4a')\n\nmodule.exports = class IndexStream extends Readable {\n  constructor (db, range, { index = null, collection = index.collection, reverse = false, limit = -1, overlay = [] }) {\n    super()\n\n    this.version = db.version\n    this.engine = db.engine\n    this.snapshot = db.engineSnapshot\n    this.collection = collection\n    this.index = index\n    this.stream = this.snapshot.createReadStream(range, { reverse, limit })\n    this.streamClosed = false\n    this.overlay = overlay\n    this.overlayIndex = 0\n    this.continueDestroy = null\n    this.limit = limit\n    this.reverse = reverse\n    this.mapping = false\n    this.ending = false\n\n    this.snapshot.ref()\n  }\n\n  _open (cb) {\n    const destroy = this.destroy.bind(this)\n    const drain = this._drain.bind(this)\n    const onclose = this._onclose.bind(this)\n\n    this.stream.on('readable', drain)\n    this.stream.on('end', drain)\n\n    this.stream.on('error', destroy)\n    this.stream.on('close', onclose)\n\n    cb(null)\n  }\n\n  _onclose () {\n    this.streamClosed = true\n    if (isEnded(this.stream) === false) this.destroy()\n    this._continueDestroyMaybe()\n  }\n\n  _continueDestroyMaybe () {\n    if (this.mapping === true) return\n    if (this.streamClosed === false) return\n    if (this.continueDestroy === null) return\n\n    const cb = this.continueDestroy\n    this.continueDestroy = null\n    this.snapshot.unref()\n    cb(null)\n  }\n\n  _push (value) {\n    if (value === null) return\n    if (this.limit > 0) this.limit--\n    this.push(this.collection.reconstruct(this.version, value[0], value[1]))\n  }\n\n  _process (batch, ended) {\n    for (let i = 0; i < batch.length && this.limit !== 0; i++) {\n      const data = batch[i]\n\n      while (this.limit !== 0) {\n        if (this.overlayIndex >= this.overlay.length) {\n          this._push(data.value)\n          break\n        }\n\n        const cmp = b4a.compare(data.key, this.overlay[this.overlayIndex].key)\n        if (this.reverse === true ? cmp > 0 : cmp < 0) {\n          this._push(data.value)\n          break\n        }\n\n        this._push(this.overlay[this.overlayIndex++].value)\n        if (cmp === 0) break\n      }\n    }\n\n    if (ended === true) {\n      while (this.overlayIndex < this.overlay.length && this.limit !== 0) {\n        this._push(this.overlay[this.overlayIndex++].value)\n      }\n\n      this.push(null)\n      this.ending = true\n    }\n  }\n\n  async _processAsap (promises, ended) {\n    for (let i = 1; i < promises.length; i++) promises[i].catch(noop) // promises are handled\n\n    for (let i = 0; i < promises.length; i++) {\n      const batch = [await promises[i]]\n      if (this.destroying === true) return\n      this._process(batch, (i === promises.length - 1) && ended)\n    }\n  }\n\n  async _mapAndProcess () {\n    this.mapping = true\n\n    while (!Readable.isBackpressured(this) && this.destroying === false) {\n      const entries = fullyDrain(this.stream)\n\n      const promises = entries.length === 0 ? entries : this.snapshot.getIndirectRange(this.index.reconstruct, entries)\n      const ended = isEnded(this.stream)\n\n      if (promises.length === 0 && ended === false) break\n\n      try {\n        if (this.engine.asap === true && promises.length > 1) {\n          await this._processAsap(promises, ended)\n        } else {\n          const batch = await Promise.all(promises)\n          if (this.destroying === false) this._process(batch, ended)\n        }\n      } catch (err) {\n        await Promise.allSettled(promises)\n        this.destroy(err)\n      }\n    }\n\n    this.mapping = false\n    this._continueDestroyMaybe()\n  }\n\n  _drain () {\n    if (Readable.isBackpressured(this)) return\n\n    if (this.index === null) {\n      this._process(fullyDrainMapped(this.stream), isEnded(this.stream))\n    } else if (this.mapping === false) {\n      this._mapAndProcess()\n    }\n  }\n\n  _read (cb) {\n    this._drain()\n    cb(null)\n  }\n\n  _predestroy () {\n    this.stream.destroy()\n  }\n\n  _destroy (cb) {\n    this.stream.destroy()\n    this.continueDestroy = cb\n    this._continueDestroyMaybe()\n  }\n\n  one () {\n    const stream = this\n    let last = null\n\n    return new Promise(function (resolve, reject) {\n      stream.on('error', noop)\n      stream.on('readable', onreadable)\n      stream.on('close', onclose)\n\n      function onreadable () {\n        while (true) {\n          const data = stream.read()\n          if (data === null) return\n          last = data\n        }\n      }\n\n      function onclose () {\n        if (isEnded(stream)) resolve(last)\n        else reject(getStreamError(stream, { all: true }))\n      }\n    })\n  }\n\n  async toArray () {\n    const stream = this\n    const list = []\n\n    return new Promise(function (resolve, reject) {\n      stream.on('error', noop)\n      stream.on('readable', onreadable)\n      stream.on('close', onclose)\n\n      function onreadable () {\n        while (true) {\n          const data = stream.read()\n          if (data === null) return\n          list.push(data)\n        }\n      }\n\n      function onclose () {\n        if (isEnded(stream)) resolve(list)\n        else reject(getStreamError(stream, { all: true }))\n      }\n    })\n  }\n}\n\nfunction fullyDrainMapped (stream) {\n  const batch = []\n\n  while (true) {\n    const data = stream.read()\n    if (data === null) return batch\n    batch.push({ key: data.key, value: [data.key, data.value] })\n  }\n}\n\nfunction fullyDrain (stream) {\n  const batch = []\n\n  while (true) {\n    const data = stream.read()\n    if (data === null) return batch\n    batch.push(data)\n  }\n}\n\nfunction noop () {}\n{\n  \"name\": \"hyperdb\",\n  \"version\": \"4.9.4\",\n  \"description\": \"P2P Indexable Database\",\n  \"files\": [\n    \"index.js\",\n    \"runtime.js\",\n    \"runtime.mjs\",\n    \"builder/*.js\",\n    \"builder/*.mjs\",\n    \"lib/**\"\n  ],\n  \"scripts\": {\n    \"test\": \"standard && brittle test/*.js\",\n    \"generate\": \"rm -rf test/fixtures/generated && node test/fixtures/generate.js\"\n  },\n  \"exports\": {\n    \".\": \"./index.js\",\n    \"./package\": \"./package.json\",\n    \"./builder\": {\n      \"import\": \"./builder/index.mjs\",\n      \"default\": \"./builder/index.js\"\n    },\n    \"./runtime\": {\n      \"import\": \"./runtime.mjs\",\n      \"default\": \"./runtime.js\"\n    }\n  },\n  \"imports\": {\n    \"fs\": {\n      \"bare\": \"bare-fs\",\n      \"default\": \"fs\"\n    },\n    \"path\": {\n      \"bare\": \"bare-path\",\n      \"default\": \"path\"\n    }\n  },\n  \"dependencies\": {\n    \"b4a\": \"^1.6.6\",\n    \"compact-encoding\": \"^2.15.0\",\n    \"generate-object-property\": \"^2.0.0\",\n    \"generate-string\": \"^1.0.1\",\n    \"hyperbee\": \"^2.20.4\",\n    \"hyperschema\": \"^1.9.2\",\n    \"index-encoder\": \"^3.2.0\",\n    \"rocksdb-native\": \"^3.0.0\",\n    \"streamx\": \"^2.20.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.7.0\",\n    \"hypercore\": \"^10.37.22\",\n    \"standard\": \"^17.1.0\",\n    \"test-tmp\": \"^1.2.1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/holepunchto/hyperdb.git\"\n  },\n  \"author\": \"Holepunch Inc\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/hyperdb/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/hyperdb\"\n}\nimport c from 'compact-encoding'\nimport b4a from 'b4a'\nimport IndexEncoder from 'index-encoder'\n\nexport { c, b4a, IndexEncoder }\nconst DHT = require('dht-rpc')\nconst sodium = require('sodium-universal')\nconst c = require('compact-encoding')\nconst b4a = require('b4a')\nconst safetyCatch = require('safety-catch')\nconst m = require('./lib/messages')\nconst SocketPool = require('./lib/socket-pool')\nconst Persistent = require('./lib/persistent')\nconst Router = require('./lib/router')\nconst Server = require('./lib/server')\nconst connect = require('./lib/connect')\nconst { FIREWALL, BOOTSTRAP_NODES, KNOWN_NODES, COMMANDS } = require('./lib/constants')\nconst { hash, createKeyPair } = require('./lib/crypto')\nconst { decode } = require('hypercore-id-encoding')\nconst RawStreamSet = require('./lib/raw-stream-set')\nconst ConnectionPool = require('./lib/connection-pool')\nconst { STREAM_NOT_CONNECTED } = require('./lib/errors')\n\nclass HyperDHT extends DHT {\n  constructor (opts = {}) {\n    const port = opts.port || 49737\n    const bootstrap = opts.bootstrap || BOOTSTRAP_NODES\n    const nodes = opts.nodes || KNOWN_NODES\n\n    super({ ...opts, port, bootstrap, nodes, filterNode })\n\n    const { router, persistent } = defaultCacheOpts(opts)\n\n    this.defaultKeyPair = opts.keyPair || createKeyPair(opts.seed)\n    this.listening = new Set()\n    this.connectionKeepAlive = opts.connectionKeepAlive === false\n      ? 0\n      : opts.connectionKeepAlive || 5000\n\n    // stats is inherited from dht-rpc so fwd the ones from there\n    this.stats = { punches: { consistent: 0, random: 0, open: 0 }, ...this.stats }\n\n    this._router = new Router(this, router)\n    this._socketPool = new SocketPool(this, opts.host || '0.0.0.0')\n    this._rawStreams = new RawStreamSet(this)\n    this._persistent = null\n    this._validatedLocalAddresses = new Map()\n\n    this._lastRandomPunch = 0\n    this._randomPunchInterval = opts.randomPunchInterval || 20000 // min 20s between random punches...\n    this._randomPunches = 0\n    this._randomPunchLimit = 1 // set to one for extra safety for now\n\n    this.once('persistent', () => {\n      this._persistent = new Persistent(this, persistent)\n    })\n\n    this.on('network-change', () => {\n      for (const server of this.listening) server.refresh()\n    })\n\n    this.on('network-update', () => {\n      if (!this.online) return\n      for (const server of this.listening) server.notifyOnline()\n    })\n  }\n\n  connect (remotePublicKey, opts) {\n    return connect(this, decode(remotePublicKey), opts)\n  }\n\n  createServer (opts, onconnection) {\n    if (typeof opts === 'function') return this.createServer({}, opts)\n    if (opts && opts.onconnection) onconnection = opts.onconnection\n    const s = new Server(this, opts)\n    if (onconnection) s.on('connection', onconnection)\n    return s\n  }\n\n  pool () {\n    return new ConnectionPool(this)\n  }\n\n  async resume () {\n    await super.resume()\n    const resuming = []\n    for (const server of this.listening) resuming.push(server.resume())\n    await Promise.allSettled(resuming)\n  }\n\n  async suspend () {\n    const suspending = []\n    for (const server of this.listening) suspending.push(server.suspend())\n    await Promise.allSettled(suspending)\n    await super.suspend()\n    await this._rawStreams.clear()\n  }\n\n  async destroy ({ force = false } = {}) {\n    if (!force) {\n      const closing = []\n      for (const server of this.listening) closing.push(server.close())\n      await Promise.allSettled(closing)\n    }\n    this._router.destroy()\n    if (this._persistent) this._persistent.destroy()\n    await this._rawStreams.clear()\n    await this._socketPool.destroy()\n    await super.destroy()\n  }\n\n  async validateLocalAddresses (addresses) {\n    const list = []\n    const socks = []\n    const waiting = []\n\n    for (const addr of addresses) {\n      const { host } = addr\n\n      if (this._validatedLocalAddresses.has(host)) {\n        if (await this._validatedLocalAddresses.get(host)) {\n          list.push(addr)\n        }\n        continue\n      }\n\n      const sock = this.udx.createSocket()\n      try {\n        sock.bind(0, host)\n      } catch {\n        this._validatedLocalAddresses.set(host, Promise.resolve(false))\n        continue\n      }\n\n      socks.push(sock)\n\n      // semi terrible heuristic until we proper fix local connections by racing them to the remote...\n      const promise = new Promise(resolve => {\n        sock.on('message', () => resolve(true))\n        setTimeout(() => resolve(false), 500)\n        sock.trySend(b4a.alloc(1), sock.address().port, addr.host)\n      })\n\n      this._validatedLocalAddresses.set(host, promise)\n      waiting.push(addr)\n    }\n\n    for (const addr of waiting) {\n      const { host } = addr\n      if (this._validatedLocalAddresses.has(host)) {\n        if (await this._validatedLocalAddresses.get(host)) {\n          list.push(addr)\n        }\n        continue\n      }\n    }\n\n    for (const sock of socks) await sock.close()\n\n    return list\n  }\n\n  findPeer (publicKey, opts = {}) {\n    const target = opts.hash === false ? publicKey : hash(publicKey)\n    opts = { ...opts, map: mapFindPeer }\n    return this.query({ target, command: COMMANDS.FIND_PEER, value: null }, opts)\n  }\n\n  lookup (target, opts = {}) {\n    opts = { ...opts, map: mapLookup }\n    return this.query({ target, command: COMMANDS.LOOKUP, value: null }, opts)\n  }\n\n  lookupAndUnannounce (target, keyPair, opts = {}) {\n    const unannounces = []\n    const dht = this\n    const userCommit = opts.commit || noop\n    const signUnannounce = opts.signUnannounce || Persistent.signUnannounce\n\n    if (this._persistent !== null) { // unlink self\n      this._persistent.unannounce(target, keyPair.publicKey)\n    }\n\n    opts = { ...opts, map, commit }\n    return this.query({ target, command: COMMANDS.LOOKUP, value: null }, opts)\n\n    async function commit (reply, dht, query) {\n      await Promise.all(unannounces) // can never fail, caught below\n      return userCommit(reply, dht, query)\n    }\n\n    function map (reply) {\n      const data = mapLookup(reply)\n\n      if (!data || !data.token) return data\n\n      let found = data.peers.length >= 20\n      for (let i = 0; !found && i < data.peers.length; i++) {\n        found = b4a.equals(data.peers[i].publicKey, keyPair.publicKey)\n      }\n\n      if (!found) return data\n\n      if (!data.from.id) return data\n\n      unannounces.push(\n        dht._requestUnannounce(\n          keyPair,\n          dht,\n          target,\n          data.token,\n          data.from,\n          signUnannounce\n        ).catch(safetyCatch)\n      )\n\n      return data\n    }\n  }\n\n  unannounce (target, keyPair, opts = {}) {\n    return this.lookupAndUnannounce(target, keyPair, opts).finished()\n  }\n\n  announce (target, keyPair, relayAddresses, opts = {}) {\n    const signAnnounce = opts.signAnnounce || Persistent.signAnnounce\n\n    opts = { ...opts, commit }\n\n    return opts.clear\n      ? this.lookupAndUnannounce(target, keyPair, opts)\n      : this.lookup(target, opts)\n\n    function commit (reply, dht) {\n      return dht._requestAnnounce(\n        keyPair,\n        dht,\n        target,\n        reply.token,\n        reply.from,\n        relayAddresses,\n        signAnnounce\n      )\n    }\n  }\n\n  async immutableGet (target, opts = {}) {\n    opts = { ...opts, map: mapImmutable }\n\n    const query = this.query({ target, command: COMMANDS.IMMUTABLE_GET, value: null }, opts)\n    const check = b4a.allocUnsafe(32)\n\n    for await (const node of query) {\n      const { value } = node\n      sodium.crypto_generichash(check, value)\n      if (b4a.equals(check, target)) return node\n    }\n\n    return null\n  }\n\n  async immutablePut (value, opts = {}) {\n    const target = b4a.allocUnsafe(32)\n    sodium.crypto_generichash(target, value)\n\n    opts = {\n      ...opts,\n      map: mapImmutable,\n      commit (reply, dht) {\n        return dht.request({ token: reply.token, target, command: COMMANDS.IMMUTABLE_PUT, value }, reply.from)\n      }\n    }\n\n    const query = this.query({ target, command: COMMANDS.IMMUTABLE_GET, value: null }, opts)\n    await query.finished()\n\n    return { hash: target, closestNodes: query.closestNodes }\n  }\n\n  async mutableGet (publicKey, opts = {}) {\n    let refresh = opts.refresh || null\n    let signed = null\n    let result = null\n\n    opts = { ...opts, map: mapMutable, commit: refresh ? commit : null }\n\n    const target = b4a.allocUnsafe(32)\n    sodium.crypto_generichash(target, publicKey)\n\n    const userSeq = opts.seq || 0\n    const query = this.query({ target, command: COMMANDS.MUTABLE_GET, value: c.encode(c.uint, userSeq) }, opts)\n    const latest = opts.latest !== false\n\n    for await (const node of query) {\n      if (result && node.seq <= result.seq) continue\n      if (node.seq < userSeq || !Persistent.verifyMutable(node.signature, node.seq, node.value, publicKey)) continue\n      if (!latest) return node\n      if (!result || node.seq > result.seq) result = node\n    }\n\n    return result\n\n    function commit (reply, dht) {\n      if (!signed && result && refresh) {\n        if (refresh(result)) {\n          signed = c.encode(m.mutablePutRequest, {\n            publicKey,\n            seq: result.seq,\n            value: result.value,\n            signature: result.signature\n          })\n        } else {\n          refresh = null\n        }\n      }\n\n      return signed ? dht.request({ token: reply.token, target, command: COMMANDS.MUTABLE_PUT, value: signed }, reply.from) : Promise.resolve(null)\n    }\n  }\n\n  async mutablePut (keyPair, value, opts = {}) {\n    const signMutable = opts.signMutable || Persistent.signMutable\n\n    const target = b4a.allocUnsafe(32)\n    sodium.crypto_generichash(target, keyPair.publicKey)\n\n    const seq = opts.seq || 0\n    const signature = await signMutable(seq, value, keyPair)\n\n    const signed = c.encode(m.mutablePutRequest, {\n      publicKey: keyPair.publicKey,\n      seq,\n      value,\n      signature\n    })\n\n    opts = {\n      ...opts,\n      map: mapMutable,\n      commit (reply, dht) {\n        return dht.request({ token: reply.token, target, command: COMMANDS.MUTABLE_PUT, value: signed }, reply.from)\n      }\n    }\n\n    // use seq = 0, for the query part here, as we don't care about the actual values\n    const query = this.query({ target, command: COMMANDS.MUTABLE_GET, value: c.encode(c.uint, 0) }, opts)\n    await query.finished()\n\n    return { publicKey: keyPair.publicKey, closestNodes: query.closestNodes, seq, signature }\n  }\n\n  onrequest (req) {\n    switch (req.command) {\n      case COMMANDS.PEER_HANDSHAKE: {\n        this._router.onpeerhandshake(req)\n        return true\n      }\n      case COMMANDS.PEER_HOLEPUNCH: {\n        this._router.onpeerholepunch(req)\n        return true\n      }\n    }\n\n    if (this._persistent === null) return false\n\n    switch (req.command) {\n      case COMMANDS.FIND_PEER: {\n        this._persistent.onfindpeer(req)\n        return true\n      }\n      case COMMANDS.LOOKUP: {\n        this._persistent.onlookup(req)\n        return true\n      }\n      case COMMANDS.ANNOUNCE: {\n        this._persistent.onannounce(req)\n        return true\n      }\n      case COMMANDS.UNANNOUNCE: {\n        this._persistent.onunannounce(req)\n        return true\n      }\n      case COMMANDS.MUTABLE_PUT: {\n        this._persistent.onmutableput(req)\n        return true\n      }\n      case COMMANDS.MUTABLE_GET: {\n        this._persistent.onmutableget(req)\n        return true\n      }\n      case COMMANDS.IMMUTABLE_PUT: {\n        this._persistent.onimmutableput(req)\n        return true\n      }\n      case COMMANDS.IMMUTABLE_GET: {\n        this._persistent.onimmutableget(req)\n        return true\n      }\n    }\n\n    return false\n  }\n\n  static keyPair (seed) {\n    return createKeyPair(seed)\n  }\n\n  static hash (data) {\n    return hash(data)\n  }\n\n  static connectRawStream (encryptedStream, rawStream, remoteId) {\n    const stream = encryptedStream.rawStream\n\n    if (!stream.connected) throw STREAM_NOT_CONNECTED()\n\n    rawStream.connect(\n      stream.socket,\n      remoteId,\n      stream.remotePort,\n      stream.remoteHost\n    )\n  }\n\n  createRawStream (opts) {\n    return this._rawStreams.add(opts)\n  }\n\n  async _requestAnnounce (keyPair, dht, target, token, from, relayAddresses, sign) {\n    const ann = {\n      peer: {\n        publicKey: keyPair.publicKey,\n        relayAddresses: relayAddresses || []\n      },\n      refresh: null,\n      signature: null\n    }\n\n    ann.signature = await sign(target, token, from.id, ann, keyPair)\n\n    const value = c.encode(m.announce, ann)\n\n    return dht.request({\n      token,\n      target,\n      command: COMMANDS.ANNOUNCE,\n      value\n    }, from)\n  }\n\n  async _requestUnannounce (keyPair, dht, target, token, from, sign) {\n    const unann = {\n      peer: {\n        publicKey: keyPair.publicKey,\n        relayAddresses: []\n      },\n      signature: null\n    }\n\n    unann.signature = await sign(target, token, from.id, unann, keyPair)\n\n    const value = c.encode(m.announce, unann)\n\n    return dht.request({\n      token,\n      target,\n      command: COMMANDS.UNANNOUNCE,\n      value\n    }, from)\n  }\n}\n\nHyperDHT.BOOTSTRAP = BOOTSTRAP_NODES\nHyperDHT.FIREWALL = FIREWALL\n\nmodule.exports = HyperDHT\n\nfunction mapLookup (node) {\n  if (!node.value) return null\n\n  try {\n    return {\n      token: node.token,\n      from: node.from,\n      to: node.to,\n      peers: c.decode(m.peers, node.value)\n    }\n  } catch {\n    return null\n  }\n}\n\nfunction mapFindPeer (node) {\n  if (!node.value) return null\n\n  try {\n    return {\n      token: node.token,\n      from: node.from,\n      to: node.to,\n      peer: c.decode(m.peer, node.value)\n    }\n  } catch {\n    return null\n  }\n}\n\nfunction mapImmutable (node) {\n  if (!node.value) return null\n\n  return {\n    token: node.token,\n    from: node.from,\n    to: node.to,\n    value: node.value\n  }\n}\n\nfunction mapMutable (node) {\n  if (!node.value) return null\n\n  try {\n    const { seq, value, signature } = c.decode(m.mutableGetResponse, node.value)\n\n    return {\n      token: node.token,\n      from: node.from,\n      to: node.to,\n      seq,\n      value,\n      signature\n    }\n  } catch {\n    return null\n  }\n}\n\nfunction noop () {}\n\nfunction filterNode (node) {\n  // always skip these testnet nodes that got mixed in by accident, until they get updated\n  return !(node.port === 49738 && (node.host === '134.209.28.98' || node.host === '167.99.142.185')) &&\n    !(node.port === 9400 && node.host === '35.233.47.252') && !(node.host === '150.136.142.116')\n}\n\nconst defaultMaxSize = 65536\nconst defaultMaxAge = 20 * 60 * 1000 // 20 minutes\n\nfunction defaultCacheOpts (opts) {\n  const maxSize = opts.maxSize || defaultMaxSize\n  const maxAge = opts.maxAge || defaultMaxAge\n\n  return {\n    router: {\n      forwards: { maxSize, maxAge }\n    },\n    persistent: {\n      records: { maxSize, maxAge },\n      refreshes: { maxSize, maxAge },\n      mutables: {\n        maxSize: maxSize / 2 | 0,\n        maxAge: opts.maxAge || 48 * 60 * 60 * 1000 // 48 hours\n      },\n      immutables: {\n        maxSize: maxSize / 2 | 0,\n        maxAge: opts.maxAge || 48 * 60 * 60 * 1000 // 48 hours\n      }\n    }\n  }\n}\nconst safetyCatch = require('safety-catch')\nconst c = require('compact-encoding')\nconst Signal = require('signal-promise')\nconst { encodeUnslab } = require('./encode')\nconst Sleeper = require('./sleeper')\nconst m = require('./messages')\nconst Persistent = require('./persistent')\nconst { COMMANDS } = require('./constants')\n\nconst MIN_ACTIVE = 3\n\nmodule.exports = class Announcer {\n  constructor (dht, keyPair, target, opts = {}) {\n    this.dht = dht\n    this.keyPair = keyPair\n    this.target = target\n    this.relays = []\n    this.relayAddresses = []\n    this.stopped = false\n    this.suspended = false\n    this.record = encodeUnslab(m.peer, { publicKey: keyPair.publicKey, relayAddresses: [] })\n    this.online = new Signal()\n\n    this._refreshing = false\n    this._closestNodes = null\n    this._active = null\n    this._sleeper = new Sleeper()\n    this._resumed = new Signal()\n    this._signAnnounce = opts.signAnnounce || Persistent.signAnnounce\n    this._signUnannounce = opts.signUnannounce || Persistent.signUnannounce\n    this._updating = null\n    this._activeQuery = null\n    this._unannouncing = null\n\n    this._serverRelays = [\n      new Map(),\n      new Map(),\n      new Map()\n    ]\n  }\n\n  isRelay (addr) {\n    const id = addr.host + ':' + addr.port\n    const [a, b, c] = this._serverRelays\n    return a.has(id) || b.has(id) || c.has(id)\n  }\n\n  async suspend () {\n    if (this.suspended) return\n    this.suspended = true\n\n    // Suspend has its own sleep logic\n    // so we don't want to hang on this one\n    this.online.notify()\n\n    if (this._activeQuery) this._activeQuery.destroy()\n\n    this._sleeper.resume()\n    if (this._updating) await this._updating\n\n    if (this.suspended === false || this.stopped) return\n    await this._unannounceCurrent()\n  }\n\n  resume () {\n    if (!this.suspended) return\n    this.suspended = false\n\n    this.refresh()\n    this._sleeper.resume()\n    this._resumed.notify()\n  }\n\n  refresh () {\n    if (this.stopped) return\n    this._refreshing = true\n  }\n\n  async start () {\n    if (this.stopped) return\n    this._active = this._runUpdate()\n    await this._active\n    if (this.stopped) return\n    this._active = this._background()\n  }\n\n  async stop () {\n    this.stopped = true\n    this.online.notify() // Break out of the _background loop if we're offline\n    this._sleeper.resume()\n    this._resumed.notify()\n    await this._active\n    await this._unannounceCurrent()\n  }\n\n  async _unannounceCurrent () {\n    while (this._unannouncing !== null) await this._unannouncing\n    const un = this._unannouncing = this._unannounceAll(this._serverRelays[2].values())\n    await this._unannouncing\n    if (un === this._unannouncing) this._unannouncing = null\n  }\n\n  async _background () {\n    while (!this.dht.destroyed && !this.stopped) {\n      try {\n        this._refreshing = false\n\n        // ~5min +-\n        for (let i = 0; i < 100 && !this.stopped && !this._refreshing && !this.suspended; i++) {\n          const pings = []\n\n          for (const node of this._serverRelays[2].values()) {\n            pings.push(this.dht.ping(node))\n          }\n\n          const active = await resolved(pings)\n          if (active < Math.min(pings.length, MIN_ACTIVE)) {\n            this.refresh() // we lost too many relay nodes, retry all\n          }\n\n          if (this.stopped) return\n\n          if (!this.suspended && !this._refreshing) await this._sleeper.pause(3000)\n        }\n\n        while (!this.stopped && this.suspended) await this._resumed.wait()\n\n        if (!this.stopped) await this._runUpdate()\n\n        while (!this.dht.online && !this.stopped && !this.suspended) {\n          // Being offline can make _background repeat very quickly\n          // So wait until we're back online\n          await this.online.wait()\n        }\n      } catch (err) {\n        safetyCatch(err)\n      }\n    }\n  }\n\n  async _runUpdate () {\n    this._updating = this._update()\n    await this._updating\n    this._updating = null\n  }\n\n  async _update () {\n    while (this._unannouncing) await this._unannouncing\n\n    this._cycle()\n\n    const q = this._activeQuery = this.dht.findPeer(this.target, { hash: false, nodes: this._closestNodes })\n\n    try {\n      await q.finished()\n    } catch {\n      // ignore failures...\n    }\n\n    this._activeQuery = null\n\n    if (this.stopped || this.suspended) return\n\n    const ann = []\n    const replies = pickBest(q.closestReplies)\n\n    const relays = []\n    const relayAddresses = []\n\n    if (!this.dht.firewalled) {\n      const addr = this.dht.remoteAddress()\n      if (addr) relayAddresses.push(addr)\n    }\n\n    for (const msg of replies) {\n      ann.push(this._commit(msg, relays, relayAddresses))\n    }\n\n    await Promise.allSettled(ann)\n    if (this.stopped || this.suspended) return\n\n    this._closestNodes = q.closestNodes\n    this.relays = relays\n    this.relayAddresses = relayAddresses\n\n    const removed = []\n    for (const [key, value] of this._serverRelays[1]) {\n      if (!this._serverRelays[2].has(key)) removed.push(value)\n    }\n\n    await this._unannounceAll(removed)\n  }\n\n  _unannounceAll (relays) {\n    const unann = []\n    for (const r of relays) unann.push(this._unannounce(r))\n    return Promise.allSettled(unann)\n  }\n\n  async _unannounce (to) {\n    const unann = {\n      peer: {\n        publicKey: this.keyPair.publicKey,\n        relayAddresses: []\n      },\n      refresh: null,\n      signature: null\n    }\n\n    const { from, token, value } = await this.dht.request({\n      token: null,\n      command: COMMANDS.FIND_PEER,\n      target: this.target,\n      value: null\n    }, to)\n\n    if (!token || !from.id || !value) return\n\n    unann.signature = await this._signUnannounce(this.target, token, from.id, unann, this.keyPair)\n\n    await this.dht.request({\n      token,\n      command: COMMANDS.UNANNOUNCE,\n      target: this.target,\n      value: c.encode(m.announce, unann)\n    }, to)\n  }\n\n  async _commit (msg, relays, relayAddresses) {\n    const ann = {\n      peer: {\n        publicKey: this.keyPair.publicKey,\n        relayAddresses: []\n      },\n      refresh: null,\n      signature: null\n    }\n\n    ann.signature = await this._signAnnounce(this.target, msg.token, msg.from.id, ann, this.keyPair)\n\n    const res = await this.dht.request({\n      token: msg.token,\n      command: COMMANDS.ANNOUNCE,\n      target: this.target,\n      value: c.encode(m.announce, ann)\n    }, msg.from)\n\n    if (res.error !== 0) return\n\n    if (relayAddresses.length < 3) relayAddresses.push({ host: msg.from.host, port: msg.from.port })\n    relays.push({ relayAddress: msg.from, peerAddress: msg.to })\n\n    this._serverRelays[2].set(msg.from.host + ':' + msg.from.port, msg.from)\n  }\n\n  _cycle () {\n    const tmp = this._serverRelays[0]\n    this._serverRelays[0] = this._serverRelays[1]\n    this._serverRelays[1] = this._serverRelays[2]\n    this._serverRelays[2] = tmp\n    tmp.clear()\n  }\n}\n\nfunction resolved (ps) {\n  let replied = 0\n  let ticks = ps.length + 1\n\n  return new Promise((resolve) => {\n    for (const p of ps) p.then(push, tick)\n    tick()\n\n    function push (v) {\n      replied++\n      tick()\n    }\n\n    function tick () {\n      if (--ticks === 0) resolve(replied)\n    }\n  })\n}\n\nfunction pickBest (replies) { // TODO: pick the ones closest to us RTT wise\n  return replies.slice(0, 3)\n}\nconst NoiseSecretStream = require('@hyperswarm/secret-stream')\nconst b4a = require('b4a')\nconst relay = require('blind-relay')\nconst { isPrivate, isBogon } = require('bogon')\nconst safetyCatch = require('safety-catch')\nconst unslab = require('unslab')\nconst Semaphore = require('./semaphore')\nconst NoiseWrap = require('./noise-wrap')\nconst SecurePayload = require('./secure-payload')\nconst Holepuncher = require('./holepuncher')\nconst Sleeper = require('./sleeper')\nconst { FIREWALL, ERROR } = require('./constants')\nconst { unslabbedHash } = require('./crypto')\nconst {\n  CANNOT_HOLEPUNCH,\n  HANDSHAKE_INVALID,\n  HOLEPUNCH_ABORTED,\n  HOLEPUNCH_INVALID,\n  HOLEPUNCH_PROBE_TIMEOUT,\n  HOLEPUNCH_DOUBLE_RANDOMIZED_NATS,\n  PEER_CONNECTION_FAILED,\n  PEER_NOT_FOUND,\n  REMOTE_ABORTED,\n  REMOTE_NOT_HOLEPUNCHABLE,\n  REMOTE_NOT_HOLEPUNCHING,\n  SERVER_ERROR,\n  SERVER_INCOMPATIBLE,\n  RELAY_ABORTED,\n  SUSPENDED\n} = require('./errors')\n\nmodule.exports = function connect (dht, publicKey, opts = {}) {\n  const pool = opts.pool || null\n\n  if (pool && pool.has(publicKey)) return pool.get(publicKey)\n\n  publicKey = unslab(publicKey)\n\n  const keyPair = opts.keyPair || dht.defaultKeyPair\n  const relayThrough = selectRelay(opts.relayThrough || null)\n  const encryptedSocket = (opts.createSecretStream || defaultCreateSecretStream)(true, null, {\n    publicKey: keyPair.publicKey,\n    remotePublicKey: publicKey,\n    autoStart: false,\n    keepAlive: dht.connectionKeepAlive\n  })\n\n  // in case a socket is made during suspended state, destroy it immediately\n  if (dht.suspended) {\n    encryptedSocket.destroy(SUSPENDED())\n    return encryptedSocket\n  }\n\n  if (pool) pool._attachStream(encryptedSocket, false)\n\n  const c = {\n    dht,\n    session: dht.session(),\n    relayAddresses: opts.relayAddresses || [],\n    pool,\n    round: 0,\n    target: unslabbedHash(publicKey),\n    remotePublicKey: publicKey,\n    reusableSocket: !!opts.reusableSocket,\n    handshake: (opts.createHandshake || defaultCreateHandshake)(keyPair, publicKey),\n    request: null,\n    requesting: false,\n    lan: opts.localConnection !== false,\n    firewall: FIREWALL.UNKNOWN,\n    rawStream: dht.createRawStream({ framed: true, firewall }),\n    connect: null,\n    query: null,\n    puncher: null,\n    payload: null,\n    passiveConnectTimeout: null,\n    serverSocket: null,\n    serverAddress: null,\n    onsocket: null,\n    sleeper: new Sleeper(),\n    encryptedSocket,\n\n    // Relay state\n    relayTimeout: null,\n    relayThrough,\n    relayToken: relayThrough ? relay.token() : null,\n    relaySocket: null,\n    relayClient: null,\n    relayPaired: false,\n    relayKeepAlive: opts.relayKeepAlive || 5000\n  }\n\n  // If the raw stream receives an error signal pre connect (ie from the firewall hook), make sure\n  // to forward that to the encrypted socket for proper teardown\n  c.rawStream.on('error', autoDestroy)\n  c.rawStream.once('connect', () => {\n    c.rawStream.removeListener('error', autoDestroy)\n  })\n\n  encryptedSocket.on('close', function () {\n    if (c.passiveConnectTimeout) clearPassiveConnectTimeout(c)\n    if (c.query) c.query.destroy()\n    if (c.puncher) c.puncher.destroy()\n    if (c.rawStream) c.rawStream.destroy()\n    c.session.destroy()\n    c.sleeper.resume()\n  })\n\n  // Safe to run in the background - never throws\n  if (dht.suspended) encryptedSocket.destroy(SUSPENDED())\n  else connectAndHolepunch(c, opts)\n\n  return encryptedSocket\n\n  function autoDestroy (err) {\n    maybeDestroyEncryptedSocket(c, err)\n  }\n\n  function firewall (socket, port, host) {\n    // Check if the traffic originated from the socket on which we're expecting relay traffic. If so,\n    // we haven't hole punched yet and the other side is just sending us traffic through the relay.\n    if (c.relaySocket && isRelay(c.relaySocket, socket, port, host)) {\n      return false\n    }\n\n    if (c.onsocket) {\n      c.onsocket(socket, port, host)\n    } else {\n      c.serverSocket = socket\n      c.serverAddress = { port, host }\n    }\n    return false\n  }\n}\n\nfunction isDone (c) {\n  // we are destroying or the puncher is connected - done\n  if (c.encryptedSocket.destroying || !!(c.puncher && c.puncher.connected)) {\n    return true\n  }\n  // not destroying, but no raw stream - def not done\n  if (c.encryptedSocket.rawStream === null) {\n    return false\n  }\n  // we are relayed, but the puncher is not done yet\n  if (c.relaySocket && !!(c.puncher && !c.puncher.connected && !c.puncher.destroyed)) {\n    return false\n  }\n  // we are done\n  return true\n}\n\nasync function retryRoute (c, route) {\n  const ref = c.dht._socketPool.lookup(route.socket)\n\n  if (!ref) {\n    if (route.socket === c.dht.socket) {\n      await connectThroughNode(c, route.address, c.dht.socket)\n    }\n    return\n  }\n\n  ref.active()\n\n  try {\n    await connectThroughNode(c, route.address, route.socket)\n  } catch {\n    // if error, just ignore, and continue through the existing strat\n  }\n\n  ref.inactive()\n}\n\nasync function connectAndHolepunch (c, opts) {\n  const route = c.reusableSocket ? c.dht._socketPool.routes.get(c.remotePublicKey) : null\n\n  if (route) {\n    await retryRoute(c, route)\n    if (isDone(c)) return\n  }\n\n  await findAndConnect(c, opts)\n  if (isDone(c)) return\n\n  if (!c.connect) { // TODO: just a quick fix for now, should retry prob\n    maybeDestroyEncryptedSocket(c, HANDSHAKE_INVALID())\n    return\n  }\n\n  await holepunch(c, opts)\n}\n\nfunction getFirstRemoteAddress (addrs, serverAddress) {\n  for (const addr of addrs) {\n    if (isBogon(addr.host)) continue\n    return addr\n  }\n\n  return serverAddress\n}\n\nasync function holepunch (c, opts) {\n  let { relayAddress, serverAddress, clientAddress, payload } = c.connect\n\n  const remoteHolepunchable = !!(payload.holepunch && payload.holepunch.relays.length)\n\n  const relayed = diffAddress(serverAddress, relayAddress)\n\n  if (payload.firewall === FIREWALL.OPEN || (relayed && !remoteHolepunchable)) {\n    const addr = getFirstRemoteAddress(payload.addresses4, serverAddress)\n    if (addr) {\n      const socket = c.dht.socket\n      c.dht.stats.punches.open++\n      c.onsocket(socket, addr.port, addr.host)\n      return\n    }\n    // TODO: check all addresses also obvs\n  }\n\n  const onabort = () => {\n    c.session.destroy()\n    maybeDestroyEncryptedSocket(c, HOLEPUNCH_ABORTED())\n  }\n\n  if (c.firewall === FIREWALL.OPEN) {\n    c.passiveConnectTimeout = setTimeout(onabort, 10000)\n    return\n  }\n\n  // TODO: would be better to just try local addrs in the background whilst continuing with other strategies...\n  if (c.lan && relayed && clientAddress.host === serverAddress.host) {\n    const serverAddresses = payload.addresses4.filter(onlyPrivateHosts)\n\n    if (serverAddresses.length > 0) {\n      const myAddresses = Holepuncher.localAddresses(c.dht.io.serverSocket)\n      const addr = Holepuncher.matchAddress(myAddresses, serverAddresses) || serverAddresses[0]\n\n      const socket = c.dht.io.serverSocket\n      try {\n        await c.dht.ping(addr)\n      } catch {\n        maybeDestroyEncryptedSocket(c, HOLEPUNCH_ABORTED())\n        return\n      }\n      c.onsocket(socket, addr.port, addr.host)\n      return\n    }\n  }\n\n  if (!remoteHolepunchable) {\n    maybeDestroyEncryptedSocket(c, CANNOT_HOLEPUNCH())\n    return\n  }\n\n  c.puncher = new Holepuncher(c.dht, c.session, true, payload.firewall)\n\n  c.puncher.onconnect = c.onsocket\n  c.puncher.onabort = onabort\n\n  const serverRelay = pickServerRelay(payload.holepunch.relays, relayAddress)\n\n  // Begin holepunching!\n\n  let probe\n  try {\n    probe = await probeRound(c, opts.fastOpen === false ? null : serverAddress, serverRelay, true)\n  } catch (err) {\n    destroyPuncher(c)\n    // TODO: we should retry here with some of the other relays, bail for now\n    maybeDestroyEncryptedSocket(c, err)\n    return\n  }\n\n  if (isDone(c) || !probe) return\n  const { token, peerAddress } = probe\n\n  // If the relay the server picked is the same as the relay the client picked,\n  // then we can use the peerAddress that round one indicates the server wants to use.\n  // This shaves off a roundtrip if the server chose to reroll its socket due to some NAT\n  // issue with the first one it picked (ie mobile nat inconsistencies...).\n  // If the relays were different, then the server would not have a UDP session open on this address\n  // to the client relay, which round2 uses.\n  if (!diffAddress(serverRelay.relayAddress, relayAddress) && diffAddress(serverAddress, peerAddress)) {\n    serverAddress = peerAddress\n    await c.puncher.openSession(serverAddress)\n    if (isDone(c)) return\n  }\n\n  // TODO: still continue here if a local connection might work, but then do not holepunch...\n  if (opts.holepunch && !opts.holepunch(c.puncher.remoteFirewall, c.puncher.nat.firewall, c.puncher.remoteAddresses, c.puncher.nat.addresses)) {\n    await abort(c, serverRelay, HOLEPUNCH_ABORTED('Client aborted holepunch'))\n    return\n  }\n\n  try {\n    await roundPunch(c, serverAddress, token, relayAddress, serverRelay, false)\n  } catch (err) {\n    destroyPuncher(c)\n    // TODO: retry with another relay?\n    maybeDestroyEncryptedSocket(c, err)\n  }\n}\n\nasync function findAndConnect (c, opts) {\n  let attempts = 0\n  let closestNodes = (opts.relayAddresses && opts.relayAddresses.length) ? opts.relayAddresses : null\n\n  if (c.dht._persistent) { // check if we know the route ourself...\n    const route = c.dht._router.get(c.target)\n    if (route && route.relay !== null) closestNodes = [{ host: route.relay.host, port: route.relay.port }]\n  }\n\n  // 2 is how many parallel connect attempts we want to do, we can make this configurable\n  const sem = new Semaphore(2)\n  const signal = sem.signal.bind(sem)\n  const tries = closestNodes !== null ? 2 : 1\n\n  try {\n    for (let i = 0; i < tries && !isDone(c) && !c.connect; i++) {\n      c.query = c.dht.findPeer(c.target, { hash: false, session: c.session, closestNodes, onlyClosestNodes: closestNodes !== null })\n\n      for await (const data of c.query) {\n        await sem.wait()\n        if (isDone(c)) return\n\n        if (c.connect) {\n          sem.signal()\n          break\n        }\n\n        attempts++\n        connectThroughNode(c, data.from, null).then(signal, signal)\n      }\n\n      closestNodes = null\n    }\n\n    c.query = null\n    if (isDone(c)) return\n\n    // flush the semaphore\n    await sem.flush()\n    if (isDone(c)) return\n  } catch (err) {\n    c.query = null\n    maybeDestroyEncryptedSocket(c, err)\n    return\n  }\n\n  if (!c.connect) {\n    maybeDestroyEncryptedSocket(c, attempts ? PEER_CONNECTION_FAILED() : PEER_NOT_FOUND())\n  }\n}\n\nasync function connectThroughNode (c, address, socket) {\n  if (!c.requesting) {\n    // If we have a stable server address, send it over now\n    const addr = c.dht.remoteAddress()\n    const localAddrs = c.lan ? Holepuncher.localAddresses(c.dht.io.serverSocket) : null\n    const addresses4 = []\n\n    if (addr) addresses4.push(addr)\n    if (localAddrs) addresses4.push(...localAddrs)\n\n    c.firewall = addr ? FIREWALL.OPEN : FIREWALL.UNKNOWN\n    c.requesting = true\n    c.request = await c.handshake.send({\n      error: ERROR.NONE,\n      firewall: c.firewall,\n      holepunch: null,\n      addresses4,\n      addresses6: [],\n      udx: {\n        reusableSocket: c.reusableSocket,\n        id: c.rawStream.id,\n        seq: 0\n      },\n      secretStream: {},\n      relayThrough: c.relayThrough\n        ? { publicKey: c.relayThrough, token: c.relayToken }\n        : null\n    })\n    if (isDone(c)) return\n  }\n\n  const { serverAddress, clientAddress, relayed, noise } = await c.dht._router.peerHandshake(c.target, { noise: c.request, socket, session: c.session }, address)\n  if (isDone(c) || c.connect) return\n\n  const payload = await c.handshake.recv(noise)\n  if (isDone(c) || !payload) return\n\n  if (payload.version !== 1) {\n    maybeDestroyEncryptedSocket(c, SERVER_INCOMPATIBLE())\n    return\n  }\n  if (payload.error !== ERROR.NONE) {\n    maybeDestroyEncryptedSocket(c, SERVER_ERROR())\n    return\n  }\n  if (!payload.udx) {\n    maybeDestroyEncryptedSocket(c, SERVER_ERROR('Server did not send UDX data'))\n    return\n  }\n\n  const hs = c.handshake.final()\n\n  c.handshake = null\n  c.request = null\n  c.requesting = false\n  c.connect = {\n    relayed,\n    relayAddress: address,\n    clientAddress,\n    serverAddress,\n    payload\n  }\n\n  c.payload = new SecurePayload(hs.holepunchSecret)\n\n  c.onsocket = function (socket, port, host) {\n    if (c.rawStream === null) return // Already hole punched\n\n    if (c.rawStream.connected) {\n      const remoteChanging = c.rawStream.changeRemote(socket, c.connect.payload.udx.id, port, host)\n\n      if (remoteChanging) remoteChanging.catch(safetyCatch)\n    } else {\n      c.rawStream.connect(socket, c.connect.payload.udx.id, port, host)\n      c.encryptedSocket.start(c.rawStream, { handshake: hs })\n    }\n\n    if (c.reusableSocket && payload.udx.reusableSocket) {\n      c.dht._socketPool.routes.add(c.remotePublicKey, c.rawStream)\n    }\n\n    if (c.puncher) {\n      c.puncher.onabort = noop\n      c.puncher.destroy()\n    }\n\n    if (c.passiveConnectTimeout) {\n      clearPassiveConnectTimeout(c)\n    }\n\n    c.rawStream = null\n  }\n\n  if (payload.relayThrough || c.relayThrough) {\n    relayConnection(c, c.relayThrough, payload, hs)\n  }\n\n  if (c.serverSocket) {\n    c.onsocket(c.serverSocket, c.serverAddress.port, c.serverAddress.host)\n    return\n  }\n\n  if (!relayed) {\n    c.onsocket(socket || c.dht.socket, address.port, address.host)\n  }\n\n  c.session.destroy()\n}\n\nasync function updateHolepunch (c, peerAddress, relayAddr, payload) {\n  const holepunch = await c.dht._router.peerHolepunch(c.target, {\n    id: c.connect.payload.holepunch.id,\n    payload: c.payload.encrypt(payload),\n    peerAddress,\n    socket: c.puncher.socket,\n    session: c.session\n  }, relayAddr)\n\n  if (isDone(c)) return null\n\n  const remotePayload = c.payload.decrypt(holepunch.payload)\n  if (!remotePayload) {\n    throw HOLEPUNCH_INVALID()\n  }\n\n  const { error, firewall, punching, addresses, remoteToken } = remotePayload\n\n  if (error === ERROR.TRY_LATER && c.relayToken && payload.punching) {\n    return {\n      tryLater: true,\n      ...holepunch,\n      payload: remotePayload\n    }\n  }\n\n  if (error !== ERROR.NONE) {\n    throw REMOTE_ABORTED('Remote aborted with error code ' + error)\n  }\n\n  const echoed = !!(remoteToken && payload.token && b4a.equals(remoteToken, payload.token))\n\n  c.puncher.updateRemote({ punching, firewall, addresses, verified: echoed ? peerAddress.host : null })\n\n  return {\n    tryLater: false,\n    ...holepunch,\n    payload: remotePayload\n  }\n}\n\nasync function probeRound (c, serverAddress, serverRelay, retry) {\n  // Open a quick low ttl session against what we think is the server\n  if (serverAddress) await c.puncher.openSession(serverAddress)\n\n  if (isDone(c)) return null\n\n  const reply = await updateHolepunch(c, serverRelay.peerAddress, serverRelay.relayAddress, {\n    error: ERROR.NONE,\n    firewall: c.puncher.nat.firewall,\n    round: c.round++,\n    connected: false,\n    punching: false,\n    addresses: c.puncher.nat.addresses,\n    remoteAddress: serverAddress,\n    token: null,\n    remoteToken: null\n  })\n\n  if (isDone(c) || !reply) return null\n\n  const { peerAddress } = reply\n  const { address, token } = reply.payload\n\n  c.puncher.nat.add(reply.to, reply.from)\n\n  // Open another quick low ttl session against what the server says their address is,\n  // if they haven't said they are random yet\n  if (c.puncher.remoteFirewall < FIREWALL.RANDOM && address && address.host && address.port && diffAddress(address, serverAddress)) {\n    await c.puncher.openSession(address)\n    if (isDone(c)) return null\n  }\n\n  // If the remote told us they didn't know their nat firewall yet, give them a chance to figure it out\n  // They might say this to see if the \"fast mode\" punch comes through first.\n  if (c.puncher.remoteFirewall === FIREWALL.UNKNOWN) {\n    await c.sleeper.pause(1000)\n    if (isDone(c)) return null\n  }\n\n  let stable = await c.puncher.analyze(false)\n  if (isDone(c)) return null\n\n  // If the socket seems unstable, try to make it stable by setting the \"allowReopen\" flag\n  // Mostly relevant for mobile networks\n  if (!stable) {\n    stable = await c.puncher.analyze(true)\n    if (isDone(c)) return null\n    if (stable) return probeRound(c, serverAddress, serverRelay, false)\n  }\n\n  if ((c.puncher.remoteFirewall === FIREWALL.UNKNOWN || !token) && retry) {\n    return probeRound(c, serverAddress, serverRelay, false)\n  }\n\n  if (c.puncher.remoteFirewall === FIREWALL.UNKNOWN || c.puncher.nat.firewall === FIREWALL.UNKNOWN) {\n    await abort(c, serverRelay, HOLEPUNCH_PROBE_TIMEOUT())\n    return null\n  }\n\n  if (c.puncher.remoteFirewall >= FIREWALL.RANDOM && c.puncher.nat.firewall >= FIREWALL.RANDOM) {\n    await abort(c, serverRelay, HOLEPUNCH_DOUBLE_RANDOMIZED_NATS())\n    return null\n  }\n\n  return { token, peerAddress }\n}\n\nasync function roundPunch (c, serverAddress, remoteToken, clientRelay, serverRelay, delayed) {\n  // We are gossiping our final NAT status to the other peer now\n  // so make sure we don't update our local view for now as that can make things weird\n  c.puncher.nat.freeze()\n\n  const isRandom = c.puncher.remoteFirewall >= FIREWALL.RANDOM || c.puncher.nat.firewall >= FIREWALL.RANDOM\n  if (isRandom) {\n    while (c.dht._randomPunches >= c.dht._randomPunchLimit || (Date.now() - c.dht._lastRandomPunch) < c.dht._randomPunchInterval) {\n      // if no relay can help, bail\n      if (!c.relayToken) throw HOLEPUNCH_ABORTED()\n\n      if (!delayed) {\n        delayed = true\n        await updateHolepunch(c, serverAddress, clientRelay, {\n          error: ERROR.NONE,\n          firewall: c.puncher.nat.firewall,\n          round: c.round++,\n          connected: false,\n          punching: false,\n          addresses: c.puncher.nat.addresses,\n          remoteAddress: null,\n          token: c.payload.token(serverAddress),\n          remoteToken\n        })\n        if (isDone(c)) return\n      }\n\n      await tryLater(c)\n      if (isDone(c)) return\n    }\n  }\n\n  // increment now, so we can commit to punching\n  if (isRandom) c.dht._randomPunches++\n\n  let reply\n\n  try {\n    // if delayed switch to the servers chosen relay - we validated anyway\n    reply = await updateHolepunch(c, delayed ? serverRelay.peerAddress : serverAddress, delayed ? serverRelay.relayAddress : clientRelay, {\n      error: ERROR.NONE,\n      firewall: c.puncher.nat.firewall,\n      round: c.round++,\n      connected: false,\n      punching: true,\n      addresses: c.puncher.nat.addresses,\n      remoteAddress: null,\n      token: delayed ? null : c.payload.token(serverAddress),\n      remoteToken\n    })\n  } finally {\n    // decrement as punch increments for us\n    if (isRandom) c.dht._randomPunches--\n  }\n\n  if (isDone(c)) return\n  if (!reply) return\n\n  if (reply.tryLater) {\n    await tryLater(c)\n    if (isDone(c)) return\n    return roundPunch(c, serverAddress, remoteToken, clientRelay, serverRelay, true)\n  }\n\n  if (!c.puncher.remoteHolepunching) {\n    throw REMOTE_NOT_HOLEPUNCHING()\n  }\n\n  if (!await c.puncher.punch()) {\n    throw REMOTE_NOT_HOLEPUNCHABLE()\n  }\n}\n\nasync function tryLater (c) {\n  if (!c.relayToken) throw HOLEPUNCH_ABORTED()\n  await c.sleeper.pause(10000 + Math.round(Math.random() * 10000))\n}\n\nfunction maybeDestroyEncryptedSocket (c, err) {\n  if (isDone(c)) return\n  if (c.encryptedSocket.rawStream) return\n  if (c.relaySocket) return // waiting for the relay\n  if (c.puncher && !c.puncher.destroyed) return // waiting for the puncher\n  c.session.destroy()\n  c.encryptedSocket.destroy(err)\n}\n\nasync function abort (c, { peerAddress, relayAddress }, err) {\n  try {\n    await updateHolepunch(peerAddress, relayAddress, {\n      error: ERROR.ABORTED,\n      firewall: FIREWALL.UNKNOWN,\n      round: c.round++,\n      connected: false,\n      punching: false,\n      addresses: null,\n      remoteAddress: null,\n      token: null,\n      remoteToken: null\n    })\n  } catch {}\n\n  destroyPuncher(c)\n  maybeDestroyEncryptedSocket(c, err)\n}\n\nfunction relayConnection (c, relayThrough, payload, hs) {\n  let isInitiator\n  let publicKey\n  let token\n\n  if (payload.relayThrough) {\n    isInitiator = false\n    publicKey = payload.relayThrough.publicKey\n    token = payload.relayThrough.token\n  } else {\n    isInitiator = true\n    publicKey = relayThrough\n    token = c.relayToken\n  }\n\n  c.relayToken = token\n  c.relaySocket = c.dht.connect(publicKey)\n  c.relaySocket.setKeepAlive(c.relayKeepAlive)\n  c.relayClient = relay.Client.from(c.relaySocket, { id: c.relaySocket.publicKey })\n  c.relayTimeout = setTimeout(onabort, 15000, null)\n\n  c.relayClient\n    .pair(isInitiator, token, c.rawStream)\n    .on('error', onabort)\n    .on('data', ondata)\n\n  function ondata (remoteId) {\n    if (c.relayTimeout) clearRelayTimeout(c)\n    if (c.rawStream === null) {\n      onabort(null)\n      return\n    }\n\n    c.relayPaired = true\n\n    const {\n      remotePort,\n      remoteHost,\n      socket\n    } = c.relaySocket.rawStream\n\n    c.rawStream\n      .on('close', () => c.relaySocket.destroy())\n      .connect(socket, remoteId, remotePort, remoteHost)\n\n    c.encryptedSocket.start(c.rawStream, { handshake: hs })\n  }\n\n  function onabort (err) {\n    if (c.relayTimeout) clearRelayTimeout(c)\n    const socket = c.relaySocket\n    c.relayToken = null\n    c.relaySocket = null\n    if (socket) socket.destroy()\n    maybeDestroyEncryptedSocket(c, err || RELAY_ABORTED())\n  }\n}\n\nfunction clearPassiveConnectTimeout (c) {\n  clearTimeout(c.passiveConnectTimeout)\n  c.passiveConnectTimeout = null\n}\n\nfunction clearRelayTimeout (c) {\n  clearTimeout(c.relayTimeout)\n  c.relayTimeout = null\n}\n\nfunction destroyPuncher (c) {\n  if (c.puncher) c.puncher.destroy()\n  c.session.destroy()\n}\n\nfunction pickServerRelay (relays, clientRelay) {\n  for (const r of relays) {\n    if (!diffAddress(r.relayAddress, clientRelay)) return r\n  }\n  return relays[0]\n}\n\nfunction diffAddress (a, b) {\n  return a.host !== b.host || a.port !== b.port\n}\n\nfunction defaultCreateHandshake (keyPair, remotePublicKey) {\n  return new NoiseWrap(keyPair, remotePublicKey)\n}\n\nfunction defaultCreateSecretStream (isInitiator, rawStream, opts) {\n  return new NoiseSecretStream(isInitiator, rawStream, opts)\n}\n\nfunction onlyPrivateHosts (addr) {\n  return isPrivate(addr.host)\n}\n\nfunction isRelay (relaySocket, socket, port, host) {\n  const stream = relaySocket.rawStream\n  if (!stream) return false\n  if (stream.socket !== socket) return false\n  return port === stream.remotePort && host === stream.remoteHost\n}\n\nfunction selectRelay (relayThrough) {\n  if (typeof relayThrough === 'function') relayThrough = relayThrough()\n  if (relayThrough === null) return null\n  if (Array.isArray(relayThrough)) return relayThrough[Math.floor(Math.random() * relayThrough.length)]\n  return relayThrough\n}\n\nfunction noop () {}\nconst EventEmitter = require('events')\nconst b4a = require('b4a')\nconst errors = require('./errors')\n\nmodule.exports = class ConnectionPool extends EventEmitter {\n  constructor (dht) {\n    super()\n\n    this._dht = dht\n    this._servers = new Map()\n    this._connecting = new Map()\n    this._connections = new Map()\n  }\n\n  _attachServer (server) {\n    const keyString = b4a.toString(server.publicKey, 'hex')\n\n    this._servers.set(keyString, server)\n\n    server\n      .on('close', () => {\n        this._servers.delete(keyString)\n      })\n      .on('connection', (socket) => {\n        this._attachStream(socket, true)\n      })\n  }\n\n  _attachStream (stream, opened) {\n    const existing = this.get(stream.remotePublicKey)\n\n    if (existing) {\n      const keepNew = stream.isInitiator === existing.isInitiator || b4a.compare(stream.publicKey, stream.remotePublicKey) > 0\n\n      if (keepNew) {\n        let closed = false\n\n        const onclose = () => {\n          closed = true\n        }\n\n        existing\n          .on('error', noop)\n          .on('close', () => {\n            if (closed) return\n\n            stream\n              .off('error', noop)\n              .off('close', onclose)\n\n            this._attachStream(stream, opened)\n          })\n          .destroy(errors.DUPLICATE_CONNECTION())\n\n        stream\n          .on('error', noop)\n          .on('close', onclose)\n      } else {\n        stream\n          .on('error', noop)\n          .destroy(errors.DUPLICATE_CONNECTION())\n      }\n\n      return\n    }\n\n    const session = new ConnectionRef(this, stream)\n\n    const keyString = b4a.toString(stream.remotePublicKey, 'hex')\n\n    if (opened) {\n      this._connections.set(keyString, session)\n\n      stream.on('close', () => {\n        this._connections.delete(keyString)\n      })\n\n      this.emit('connection', stream, session)\n    } else {\n      this._connecting.set(keyString, session)\n\n      stream\n        .on('error', noop)\n        .on('close', () => {\n          if (opened) this._connections.delete(keyString)\n          else this._connecting.delete(keyString)\n        })\n        .on('open', () => {\n          opened = true\n\n          this._connecting.delete(keyString)\n          this._connections.set(keyString, session)\n\n          stream.off('error', noop)\n\n          this.emit('connection', stream, session)\n        })\n    }\n\n    return session\n  }\n\n  get connecting () {\n    return this._connecting.size\n  }\n\n  get connections () {\n    return this._connections.values()\n  }\n\n  has (publicKey) {\n    const keyString = b4a.toString(publicKey, 'hex')\n\n    return this._connections.has(keyString) || this._connecting.has(keyString)\n  }\n\n  get (publicKey) {\n    const keyString = b4a.toString(publicKey, 'hex')\n\n    const existing = this._connections.get(keyString) || this._connecting.get(keyString)\n\n    return existing?._stream || null\n  }\n}\n\nclass ConnectionRef {\n  constructor (pool, stream) {\n    this._pool = pool\n    this._stream = stream\n    this._refs = 0\n  }\n\n  active () {\n    this._refs++\n  }\n\n  inactive () {\n    this._refs--\n  }\n\n  release () {\n    this._stream.destroy()\n  }\n}\n\nfunction noop () {}\nconst crypto = require('hypercore-crypto')\n\nconst COMMANDS = exports.COMMANDS = {\n  PEER_HANDSHAKE: 0,\n  PEER_HOLEPUNCH: 1,\n  FIND_PEER: 2,\n  LOOKUP: 3,\n  ANNOUNCE: 4,\n  UNANNOUNCE: 5,\n  MUTABLE_PUT: 6,\n  MUTABLE_GET: 7,\n  IMMUTABLE_PUT: 8,\n  IMMUTABLE_GET: 9\n}\n\nexports.BOOTSTRAP_NODES = global.Pear?.config.dht?.bootstrap || [\n  '88.99.3.86@node1.hyperdht.org:49737',\n  '142.93.90.113@node2.hyperdht.org:49737',\n  '138.68.147.8@node3.hyperdht.org:49737'\n]\n\nexports.KNOWN_NODES = global.Pear?.config.dht?.nodes || []\n\nexports.FIREWALL = {\n  UNKNOWN: 0,\n  OPEN: 1,\n  CONSISTENT: 2,\n  RANDOM: 3\n}\n\nexports.ERROR = {\n  // noise / connection related\n  NONE: 0,\n  ABORTED: 1,\n  VERSION_MISMATCH: 2,\n  TRY_LATER: 3,\n  // dht related\n  SEQ_REUSED: 16,\n  SEQ_TOO_LOW: 17\n}\n\nconst [\n  NS_ANNOUNCE,\n  NS_UNANNOUNCE,\n  NS_MUTABLE_PUT,\n  NS_PEER_HANDSHAKE,\n  NS_PEER_HOLEPUNCH\n] = crypto.namespace('hyperswarm/dht', [\n  COMMANDS.ANNOUNCE,\n  COMMANDS.UNANNOUNCE,\n  COMMANDS.MUTABLE_PUT,\n  COMMANDS.PEER_HANDSHAKE,\n  COMMANDS.PEER_HOLEPUNCH\n])\n\nexports.NS = {\n  ANNOUNCE: NS_ANNOUNCE,\n  UNANNOUNCE: NS_UNANNOUNCE,\n  MUTABLE_PUT: NS_MUTABLE_PUT,\n  PEER_HANDSHAKE: NS_PEER_HANDSHAKE,\n  PEER_HOLEPUNCH: NS_PEER_HOLEPUNCH\n}\nconst sodium = require('sodium-universal')\nconst b4a = require('b4a')\n\nfunction hash (data) {\n  const out = b4a.allocUnsafe(32)\n  sodium.crypto_generichash(out, data)\n  return out\n}\n\nfunction unslabbedHash (data) {\n  const out = b4a.allocUnsafeSlow(32)\n  sodium.crypto_generichash(out, data)\n  return out\n}\n\nfunction createKeyPair (seed) {\n  const publicKey = b4a.alloc(32)\n  const secretKey = b4a.alloc(64)\n  if (seed) sodium.crypto_sign_seed_keypair(publicKey, secretKey, seed)\n  else sodium.crypto_sign_keypair(publicKey, secretKey)\n  return { publicKey, secretKey }\n}\n\nmodule.exports = {\n  hash,\n  unslabbedHash,\n  createKeyPair\n}\nconst b4a = require('b4a')\nconst cenc = require('compact-encoding')\n\nfunction encodeUnslab (enc, m) {\n  // Faster than unslab(c.encode(enc, data)) because it avoids the mem copy.\n  // Makes sense to put in compact-encoding when we need it in other modules too\n  const state = cenc.state()\n  enc.preencode(state, m)\n  state.buffer = b4a.allocUnsafeSlow(state.end)\n  enc.encode(state, m)\n  return state.buffer\n}\n\nmodule.exports = {\n  encodeUnslab\n}\nmodule.exports = class DHTError extends Error {\n  constructor (msg, code, fn = DHTError) {\n    super(`${code}: ${msg}`)\n    this.code = code\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, fn)\n    }\n  }\n\n  get name () {\n    return 'DHTError'\n  }\n\n  static BAD_HANDSHAKE_REPLY (msg = 'Bad handshake reply') {\n    return new DHTError(msg, 'BAD_HANDSHAKE_REPLY', DHTError.BAD_HANDSHAKE_REPLY)\n  }\n\n  static BAD_HOLEPUNCH_REPLY (msg = 'Bad holepunch reply') {\n    return new DHTError(msg, 'BAD_HOLEPUNCH_REPLY', DHTError.BAD_HOLEPUNCH_REPLY)\n  }\n\n  static HOLEPUNCH_ABORTED (msg = 'Holepunch aborted') {\n    return new DHTError(msg, 'HOLEPUNCH_ABORTED', DHTError.HOLEPUNCH_ABORTED)\n  }\n\n  static HOLEPUNCH_INVALID (msg = 'Invalid holepunch payload') {\n    return new DHTError(msg, 'HOLEPUNCH_INVALID', DHTError.HOLEPUNCH_INVALID)\n  }\n\n  static HOLEPUNCH_PROBE_TIMEOUT (msg = 'Holepunching probe did not finish in time') {\n    return new DHTError(msg, 'HOLEPUNCH_PROBE_TIMEOUT', DHTError.HOLEPUNCH_PROBE_TIMEOUT)\n  }\n\n  static HOLEPUNCH_DOUBLE_RANDOMIZED_NATS (msg = 'Both remote and local NATs are randomized') {\n    return new DHTError(msg, 'HOLEPUNCH_DOUBLE_RANDOMIZED_NATS', DHTError.HOLEPUNCH_DOUBLE_RANDOMIZED_NATS)\n  }\n\n  static CANNOT_HOLEPUNCH (msg = 'Cannot holepunch to remote') {\n    return new DHTError(msg, 'CANNOT_HOLEPUNCH', DHTError.CANNOT_HOLEPUNCH)\n  }\n\n  static REMOTE_NOT_HOLEPUNCHING (msg = 'Remote is not holepunching') {\n    return new DHTError(msg, 'REMOTE_NOT_HOLEPUNCHING', DHTError.REMOTE_NOT_HOLEPUNCHING)\n  }\n\n  static REMOTE_NOT_HOLEPUNCHABLE (msg = 'Remote is not holepunchable') {\n    return new DHTError(msg, 'REMOTE_NOT_HOLEPUNCHABLE', DHTError.REMOTE_NOT_HOLEPUNCHABLE)\n  }\n\n  static REMOTE_ABORTED (msg = 'Remote aborted') {\n    return new DHTError(msg, 'REMOTE_ABORTED', DHTError.REMOTE_ABORTED)\n  }\n\n  static HANDSHAKE_UNFINISHED (msg = 'Handshake did not finish') {\n    return new DHTError(msg, 'HANDSHAKE_UNFINISHED', DHTError.HANDSHAKE_UNFINISHED)\n  }\n\n  static HANDSHAKE_INVALID (msg = 'Received invalid handshake') {\n    return new DHTError(msg, 'HANDSHAKE_INVALID', DHTError.HANDSHAKE_INVALID)\n  }\n\n  static ALREADY_LISTENING (msg = 'Already listening') {\n    return new DHTError(msg, 'ALREADY_LISTENING', DHTError.ALREADY_LISTENING)\n  }\n\n  static KEYPAIR_ALREADY_USED (msg = 'Keypair already used') {\n    return new DHTError(msg, 'KEYPAIR_ALREADY_USED', DHTError.KEYPAIR_ALREADY_USED)\n  }\n\n  static NODE_DESTROYED (msg = 'Node destroyed') {\n    return new DHTError(msg, 'NODE_DESTROYED', DHTError.NODE_DESTROYED)\n  }\n\n  static PEER_CONNECTION_FAILED (msg = 'Could not connect to peer') {\n    return new DHTError(msg, 'PEER_CONNECTION_FAILED', DHTError.PEER_CONNECTION_FAILED)\n  }\n\n  static PEER_NOT_FOUND (msg = 'Peer not found') {\n    return new DHTError(msg, 'PEER_NOT_FOUND', DHTError.PEER_NOT_FOUND)\n  }\n\n  static STREAM_NOT_CONNECTED (msg = 'Stream is not connected') {\n    return new DHTError(msg, 'STREAM_NOT_CONNECTED', DHTError.STREAM_DISCONNECTED)\n  }\n\n  static SERVER_INCOMPATIBLE (msg = 'Server is using an incompatible version') {\n    return new DHTError(msg, 'SERVER_INCOMPATIBLE', DHTError.SERVER_INCOMPATIBLE)\n  }\n\n  static SERVER_ERROR (msg = 'Server returned an error') {\n    return new DHTError(msg, 'SERVER_ERROR', DHTError.SERVER_ERROR)\n  }\n\n  static DUPLICATE_CONNECTION (msg = 'Duplicate connection') {\n    return new DHTError(msg, 'DUPLICATE_CONNECTION', DHTError.DUPLICATE_CONNECTION)\n  }\n\n  static RELAY_ABORTED (msg = 'Relay aborted') {\n    return new DHTError(msg, 'RELAY_ABORTED', DHTError.RELAY_ABORTED)\n  }\n\n  static SUSPENDED (msg = 'Suspended') {\n    return new DHTError(msg, 'SUSPENDED', DHTError.SUSPENDED)\n  }\n}\nconst b4a = require('b4a')\nconst Nat = require('./nat')\nconst Sleeper = require('./sleeper')\nconst { FIREWALL } = require('./constants')\n\nconst BIRTHDAY_SOCKETS = 256\nconst HOLEPUNCH = b4a.from([0])\nconst HOLEPUNCH_TTL = 5\nconst DEFAULT_TTL = 64\nconst MAX_REOPENS = 3\n\nmodule.exports = class Holepuncher {\n  constructor (dht, session, isInitiator, remoteFirewall = FIREWALL.UNKNOWN) {\n    const holder = dht._socketPool.acquire()\n\n    this.dht = dht\n    this.session = session\n\n    this.nat = new Nat(dht, session, holder.socket)\n    this.nat.autoSample()\n\n    this.isInitiator = isInitiator\n\n    // events\n    this.onconnect = noop\n    this.onabort = noop\n\n    this.punching = false\n    this.connected = false\n    this.destroyed = false\n    this.randomized = false\n\n    // track remote state\n    this.remoteFirewall = remoteFirewall\n    this.remoteAddresses = []\n    this.remoteHolepunching = false\n\n    this._sleeper = new Sleeper()\n    this._reopening = null\n    this._timeout = null\n    this._punching = null\n    this._allHolders = []\n    this._holder = this._addRef(holder)\n  }\n\n  get socket () {\n    return this._holder.socket\n  }\n\n  updateRemote ({ punching, firewall, addresses, verified }) {\n    const remoteAddresses = []\n\n    if (addresses) {\n      for (const addr of addresses) {\n        remoteAddresses.push({\n          host: addr.host,\n          port: addr.port,\n          verified: (verified === addr.host) || this._isVerified(addr.host)\n        })\n      }\n    }\n\n    this.remoteFirewall = firewall\n    this.remoteAddresses = remoteAddresses\n    this.remoteHolepunching = punching\n  }\n\n  _isVerified (host) {\n    for (const addr of this.remoteAddresses) {\n      if (addr.verified && addr.host === host) {\n        return true\n      }\n    }\n    return false\n  }\n\n  ping (addr, socket = this._holder.socket) {\n    return holepunch(socket, addr, false)\n  }\n\n  openSession (addr, socket = this._holder.socket) {\n    return holepunch(socket, addr, true)\n  }\n\n  async analyze (allowReopen) {\n    await this.nat.analyzing\n    if (this._unstable()) {\n      if (!allowReopen) return false\n      if (!this._reopening) this._reopening = this._reopen()\n      return this._reopening\n    }\n    return true\n  }\n\n  _unstable () {\n    // TODO!!: We need an additional heuristic here... If we were NOT random in the past we should also do this.\n    const firewall = this.nat.firewall\n    return (this.remoteFirewall >= FIREWALL.RANDOM && firewall >= FIREWALL.RANDOM) || firewall === FIREWALL.UNKNOWN\n  }\n\n  _reset () {\n    const prev = this._holder\n\n    this._allHolders.pop()\n    this._holder = this._addRef(this.dht._socketPool.acquire())\n\n    prev.release()\n    this.nat.destroy()\n\n    this.nat = new Nat(this.dht, this.session, this._holder.socket)\n    // TODO: maybe make auto sampling configurable somehow?\n    this.nat.autoSample()\n  }\n\n  _addRef (ref) {\n    this._allHolders.push(ref)\n    ref.onholepunchmessage = (msg, rinfo) => this._onholepunchmessage(msg, rinfo, ref)\n    return ref\n  }\n\n  _onholepunchmessage (_, addr, ref) {\n    if (!this.isInitiator) { // TODO: we don't need this if we had a way to connect a socket to many hosts\n      holepunch(ref.socket, addr, false) // never fails\n      return\n    }\n\n    if (this.connected) return\n\n    this.connected = true\n    this.punching = false\n\n    for (const r of this._allHolders) {\n      if (r === ref) continue\n      r.release()\n    }\n\n    this._allHolders[0] = ref\n    while (this._allHolders.length > 1) this._allHolders.pop()\n\n    this._decrementRandomized()\n    this.onconnect(ref.socket, addr.port, addr.host)\n  }\n\n  _done () {\n    return this.destroyed || this.connected\n  }\n\n  async _reopen () {\n    for (let i = 0; this._unstable() && i < MAX_REOPENS && !this._done() && !this.punching; i++) {\n      this._reset()\n      await this.nat.analyzing\n    }\n\n    return coerceFirewall(this.nat.firewall) === FIREWALL.CONSISTENT\n  }\n\n  punch () {\n    if (!this._punching) this._punching = this._punch()\n    return this._punching\n  }\n\n  async _punch () {\n    if (this._done() || !this.remoteAddresses.length) return false\n\n    this.punching = true\n\n    // Coerce into consistency for now. Obvs we could make this this more efficient if we use that info\n    // but that's seldomly used since those will just use tcp most of the time.\n\n    const local = coerceFirewall(this.nat.firewall)\n    const remote = coerceFirewall(this.remoteFirewall)\n\n    // Note that most of these async functions are meant to run in the background\n    // which is why we don't await them here and why they are not allowed to throw\n\n    let remoteVerifiedAddress = null\n    for (const addr of this.remoteAddresses) {\n      if (addr.verified) {\n        remoteVerifiedAddress = addr\n        break\n      }\n    }\n\n    if (local === FIREWALL.CONSISTENT && remote === FIREWALL.CONSISTENT) {\n      this.dht.stats.punches.consistent++\n      this._consistentProbe()\n      return true\n    }\n\n    if (!remoteVerifiedAddress) return false\n\n    if (local === FIREWALL.CONSISTENT && remote >= FIREWALL.RANDOM) {\n      this.dht.stats.punches.random++\n      this._incrementRandomized()\n      this._randomProbes(remoteVerifiedAddress)\n      return true\n    }\n\n    if (local >= FIREWALL.RANDOM && remote === FIREWALL.CONSISTENT) {\n      this.dht.stats.punches.random++\n      this._incrementRandomized()\n      await this._openBirthdaySockets(remoteVerifiedAddress)\n      if (this.punching) this._keepAliveRandomNat(remoteVerifiedAddress)\n      return true\n    }\n\n    return false\n  }\n\n  // Note that this never throws so it is safe to run in the background\n  async _consistentProbe () {\n    // Here we do the sleep first because the \"fast open\" mode in the server just fired a ping\n    if (!this.isInitiator) await this._sleeper.pause(1000)\n\n    let tries = 0\n\n    while (this.punching && tries++ < 10) {\n      for (const addr of this.remoteAddresses) {\n        // only try unverified addresses every 4 ticks\n        if (!addr.verified && ((tries & 3) !== 0)) continue\n        await holepunch(this._holder.socket, addr, false)\n      }\n      if (this.punching) await this._sleeper.pause(1000)\n    }\n\n    this._autoDestroy()\n  }\n\n  // Note that this never throws so it is safe to run in the background\n  async _randomProbes (remoteAddr) {\n    let tries = 1750 // ~35s\n\n    while (this.punching && tries-- > 0) {\n      const addr = { host: remoteAddr.host, port: randomPort() }\n      await holepunch(this._holder.socket, addr, false)\n      if (this.punching) await this._sleeper.pause(20)\n    }\n\n    this._autoDestroy()\n  }\n\n  // Note that this never throws so it is safe to run in the background\n  async _keepAliveRandomNat (remoteAddr) {\n    let i = 0\n    let lowTTLRounds = 1\n\n    // TODO: experiment with this here. We just bursted all the messages in\n    // openOtherSockets to ensure the sockets are open, so it's potentially\n    // a good idea to slow down for a bit.\n    await this._sleeper.pause(100)\n\n    let tries = 1750 // ~35s\n\n    while (this.punching && tries-- > 0) {\n      if (i === this._allHolders.length) {\n        i = 0\n        if (lowTTLRounds > 0) lowTTLRounds--\n      }\n\n      await holepunch(this._allHolders[i++].socket, remoteAddr, lowTTLRounds > 0)\n      if (this.punching) await this._sleeper.pause(20)\n    }\n\n    this._autoDestroy()\n  }\n\n  async _openBirthdaySockets (remoteAddr) {\n    while (this.punching && this._allHolders.length < BIRTHDAY_SOCKETS) {\n      const ref = this._addRef(this.dht._socketPool.acquire())\n      await holepunch(ref.socket, remoteAddr, HOLEPUNCH_TTL)\n    }\n  }\n\n  _autoDestroy () {\n    if (!this.connected) this.destroy()\n  }\n\n  _incrementRandomized () {\n    if (!this.randomized) {\n      this.randomized = true\n      this.dht._randomPunches++\n    }\n  }\n\n  _decrementRandomized () {\n    if (this.randomized) {\n      this.dht._lastRandomPunch = Date.now()\n      this.randomized = false\n      this.dht._randomPunches--\n    }\n  }\n\n  destroy () {\n    if (this.destroyed) return\n    this.destroyed = true\n    this.punching = false\n\n    for (const ref of this._allHolders) ref.release()\n    this._allHolders = []\n    this.nat.destroy()\n\n    if (!this.connected) {\n      this._decrementRandomized()\n      this.onabort()\n    }\n  }\n\n  static ping (socket, addr) {\n    return holepunch(socket, addr, false)\n  }\n\n  static localAddresses (socket) {\n    return localAddresses(socket)\n  }\n\n  static matchAddress (myAddresses, externalAddresses) {\n    return matchAddress(myAddresses, externalAddresses)\n  }\n}\n\nfunction holepunch (socket, addr, lowTTL) {\n  return socket.send(HOLEPUNCH, addr.port, addr.host, lowTTL ? HOLEPUNCH_TTL : DEFAULT_TTL)\n}\n\nfunction randomPort () {\n  return 1000 + (Math.random() * 64536) | 0\n}\n\nfunction coerceFirewall (fw) {\n  return fw === FIREWALL.OPEN ? FIREWALL.CONSISTENT : fw\n}\n\nfunction localAddresses (socket) {\n  const addrs = []\n  const { host, port } = socket.address()\n\n  if (host === '127.0.0.1') return [{ host, port }]\n\n  for (const n of socket.udx.networkInterfaces()) {\n    if (n.family !== 4 || n.internal) continue\n\n    addrs.push({ host: n.host, port })\n  }\n\n  if (addrs.length === 0) {\n    addrs.push({ host: '127.0.0.1', port })\n  }\n\n  return addrs\n}\n\nfunction matchAddress (localAddresses, remoteLocalAddresses) {\n  if (remoteLocalAddresses.length === 0) return null\n\n  let best = { segment: 1, addr: null }\n\n  for (const localAddress of localAddresses) {\n    // => 192.168.122.238\n    const a = localAddress.host.split('.')\n\n    for (const remoteAddress of remoteLocalAddresses) {\n      // => 192.168.0.23\n      // => 192.168.122.1\n      const b = remoteAddress.host.split('.')\n\n      // Matches 192.*.*.*\n      if (a[0] === b[0]) {\n        if (best.segment === 1) best = { segment: 2, addr: remoteAddress }\n\n        // Matches 192.168.*.*\n        if (a[1] === b[1]) {\n          if (best.segment === 2) best = { segment: 3, addr: remoteAddress }\n\n          // Matches 192.168.122.*\n          if (a[2] === b[2]) return remoteAddress\n        }\n      }\n    }\n  }\n\n  return best.addr\n}\n\nfunction noop () {}\nconst c = require('compact-encoding')\nconst net = require('compact-encoding-net')\n\nconst ipv4 = {\n  ...net.ipv4Address,\n  decode (state) {\n    const ip = net.ipv4Address.decode(state)\n    return {\n      host: ip.host,\n      port: ip.port\n    }\n  }\n}\n\nconst ipv4Array = c.array(ipv4)\n\nconst ipv6 = {\n  ...net.ipv6Address,\n  decode (state) {\n    const ip = net.ipv6Address.decode(state)\n    return {\n      host: ip.host,\n      port: ip.port\n    }\n  }\n}\n\nconst ipv6Array = c.array(ipv6)\n\nexports.handshake = {\n  preencode (state, m) {\n    state.end += 1 + 1 + (m.peerAddress ? 6 : 0) + (m.relayAddress ? 6 : 0)\n    c.buffer.preencode(state, m.noise)\n  },\n  encode (state, m) {\n    const flags = (m.peerAddress ? 1 : 0) | (m.relayAddress ? 2 : 0)\n\n    c.uint.encode(state, flags)\n    c.uint.encode(state, m.mode)\n    c.buffer.encode(state, m.noise)\n\n    if (m.peerAddress) ipv4.encode(state, m.peerAddress)\n    if (m.relayAddress) ipv4.encode(state, m.relayAddress)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n\n    return {\n      mode: c.uint.decode(state),\n      noise: c.buffer.decode(state),\n      peerAddress: (flags & 1) ? ipv4.decode(state) : null,\n      relayAddress: (flags & 2) ? ipv4.decode(state) : null\n    }\n  }\n}\n\nconst relayInfo = {\n  preencode (state, m) {\n    state.end += 12\n  },\n  encode (state, m) {\n    ipv4.encode(state, m.relayAddress)\n    ipv4.encode(state, m.peerAddress)\n  },\n  decode (state) {\n    return {\n      relayAddress: ipv4.decode(state),\n      peerAddress: ipv4.decode(state)\n    }\n  }\n}\n\nconst relayInfoArray = c.array(relayInfo)\n\nconst holepunchInfo = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.id)\n    relayInfoArray.preencode(state, m.relays)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.id)\n    relayInfoArray.encode(state, m.relays)\n  },\n  decode (state) {\n    return {\n      id: c.uint.decode(state),\n      relays: relayInfoArray.decode(state)\n    }\n  }\n}\n\nconst udxInfo = {\n  preencode (state, m) {\n    state.end += 2 // version + features\n    c.uint.preencode(state, m.id)\n    c.uint.preencode(state, m.seq)\n  },\n  encode (state, m) {\n    c.uint.encode(state, 1)\n    c.uint.encode(state, m.reusableSocket ? 1 : 0)\n    c.uint.encode(state, m.id)\n    c.uint.encode(state, m.seq)\n  },\n  decode (state) {\n    const version = c.uint.decode(state)\n    const features = c.uint.decode(state)\n\n    return {\n      version,\n      reusableSocket: (features & 1) !== 0,\n      id: c.uint.decode(state),\n      seq: c.uint.decode(state)\n    }\n  }\n}\n\nconst secretStreamInfo = {\n  preencode (state, m) {\n    c.uint.preencode(state, 1)\n  },\n  encode (state, m) {\n    c.uint.encode(state, 1)\n  },\n  decode (state) {\n    return {\n      version: c.uint.decode(state)\n    }\n  }\n}\n\nconst relayThroughInfo = {\n  preencode (state, m) {\n    c.uint.preencode(state, 1) // version\n    c.uint.preencode(state, 0) // flags\n    c.fixed32.preencode(state, m.publicKey)\n    c.fixed32.preencode(state, m.token)\n  },\n  encode (state, m) {\n    c.uint.encode(state, 1)\n    c.uint.encode(state, 0)\n    c.fixed32.encode(state, m.publicKey)\n    c.fixed32.encode(state, m.token)\n  },\n  decode (state) {\n    const version = c.uint.decode(state)\n    c.uint.decode(state)\n\n    return {\n      version,\n      publicKey: c.fixed32.decode(state),\n      token: c.fixed32.decode(state)\n    }\n  }\n}\n\nexports.noisePayload = {\n  preencode (state, m) {\n    state.end += 4 // version + flags + error + firewall\n    if (m.holepunch) holepunchInfo.preencode(state, m.holepunch)\n    if (m.addresses4 && m.addresses4.length) ipv4Array.preencode(state, m.addresses4)\n    if (m.addresses6 && m.addresses6.length) ipv6Array.preencode(state, m.addresses6)\n    if (m.udx) udxInfo.preencode(state, m.udx)\n    if (m.secretStream) secretStreamInfo.preencode(state, m.secretStream)\n    if (m.relayThrough) relayThroughInfo.preencode(state, m.relayThrough)\n  },\n  encode (state, m) {\n    let flags = 0\n\n    if (m.holepunch) flags |= 1\n    if (m.addresses4 && m.addresses4.length) flags |= 2\n    if (m.addresses6 && m.addresses6.length) flags |= 4\n    if (m.udx) flags |= 8\n    if (m.secretStream) flags |= 16\n    if (m.relayThrough) flags |= 32\n\n    c.uint.encode(state, 1) // version\n    c.uint.encode(state, flags)\n    c.uint.encode(state, m.error)\n    c.uint.encode(state, m.firewall)\n\n    if (m.holepunch) holepunchInfo.encode(state, m.holepunch)\n    if (m.addresses4 && m.addresses4.length) ipv4Array.encode(state, m.addresses4)\n    if (m.addresses6 && m.addresses6.length) ipv6Array.encode(state, m.addresses6)\n    if (m.udx) udxInfo.encode(state, m.udx)\n    if (m.secretStream) secretStreamInfo.encode(state, m.secretStream)\n    if (m.relayThrough) relayThroughInfo.encode(state, m.relayThrough)\n  },\n  decode (state) {\n    const version = c.uint.decode(state)\n\n    if (version !== 1) {\n      // Do not attempt to decode but return this back to the user so they can\n      // actually handle it\n      return {\n        version,\n        error: 0,\n        firewall: 0,\n        holepunch: null,\n        addresses4: [],\n        addresses6: [],\n        udx: null,\n        secretStream: null,\n        relayThrough: null\n      }\n    }\n\n    const flags = c.uint.decode(state)\n\n    return {\n      version,\n      error: c.uint.decode(state),\n      firewall: c.uint.decode(state),\n      holepunch: (flags & 1) !== 0 ? holepunchInfo.decode(state) : null,\n      addresses4: (flags & 2) !== 0 ? ipv4Array.decode(state) : [],\n      addresses6: (flags & 4) !== 0 ? ipv6Array.decode(state) : [],\n      udx: (flags & 8) !== 0 ? udxInfo.decode(state) : null,\n      secretStream: (flags & 16) !== 0 ? secretStreamInfo.decode(state) : null,\n      relayThrough: (flags & 32) !== 0 ? relayThroughInfo.decode(state) : null\n    }\n  }\n}\n\nexports.holepunch = {\n  preencode (state, m) {\n    state.end += 2\n    c.uint.preencode(state, m.id)\n    c.buffer.preencode(state, m.payload)\n    if (m.peerAddress) ipv4.preencode(state, m.peerAddress)\n  },\n  encode (state, m) {\n    const flags = m.peerAddress ? 1 : 0\n    c.uint.encode(state, flags)\n    c.uint.encode(state, m.mode)\n    c.uint.encode(state, m.id)\n    c.buffer.encode(state, m.payload)\n    if (m.peerAddress) ipv4.encode(state, m.peerAddress)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n    return {\n      mode: c.uint.decode(state),\n      id: c.uint.decode(state),\n      payload: c.buffer.decode(state),\n      peerAddress: (flags & 1) ? ipv4.decode(state) : null\n    }\n  }\n}\n\nexports.holepunchPayload = {\n  preencode (state, m) {\n    state.end += 4 // flags + error + firewall + round\n    if (m.addresses) ipv4Array.preencode(state, m.addresses)\n    if (m.remoteAddress) state.end += 6\n    if (m.token) state.end += 32\n    if (m.remoteToken) state.end += 32\n  },\n  encode (state, m) {\n    const flags = (m.connected ? 1 : 0) |\n      (m.punching ? 2 : 0) |\n      (m.addresses ? 4 : 0) |\n      (m.remoteAddress ? 8 : 0) |\n      (m.token ? 16 : 0) |\n      (m.remoteToken ? 32 : 0)\n\n    c.uint.encode(state, flags)\n    c.uint.encode(state, m.error)\n    c.uint.encode(state, m.firewall)\n    c.uint.encode(state, m.round)\n\n    if (m.addresses) ipv4Array.encode(state, m.addresses)\n    if (m.remoteAddress) ipv4.encode(state, m.remoteAddress)\n    if (m.token) c.fixed32.encode(state, m.token)\n    if (m.remoteToken) c.fixed32.encode(state, m.remoteToken)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n\n    return {\n      error: c.uint.decode(state),\n      firewall: c.uint.decode(state),\n      round: c.uint.decode(state),\n      connected: (flags & 1) !== 0,\n      punching: (flags & 2) !== 0,\n      addresses: (flags & 4) !== 0 ? ipv4Array.decode(state) : null,\n      remoteAddress: (flags & 8) !== 0 ? ipv4.decode(state) : null,\n      token: (flags & 16) !== 0 ? c.fixed32.decode(state) : null,\n      remoteToken: (flags & 32) !== 0 ? c.fixed32.decode(state) : null\n    }\n  }\n}\n\nconst peer = exports.peer = {\n  preencode (state, m) {\n    state.end += 32\n    ipv4Array.preencode(state, m.relayAddresses)\n  },\n  encode (state, m) {\n    c.fixed32.encode(state, m.publicKey)\n    ipv4Array.encode(state, m.relayAddresses)\n  },\n  decode (state) {\n    return {\n      publicKey: c.fixed32.decode(state),\n      relayAddresses: ipv4Array.decode(state)\n    }\n  }\n}\n\nexports.peers = c.array(peer)\n\nexports.announce = {\n  preencode (state, m) {\n    state.end++ // flags\n    if (m.peer) peer.preencode(state, m.peer)\n    if (m.refresh) state.end += 32\n    if (m.signature) state.end += 64\n  },\n  encode (state, m) {\n    const flags = (m.peer ? 1 : 0) | (m.refresh ? 2 : 0) | (m.signature ? 4 : 0)\n    c.uint.encode(state, flags)\n    if (m.peer) peer.encode(state, m.peer)\n    if (m.refresh) c.fixed32.encode(state, m.refresh)\n    if (m.signature) c.fixed64.encode(state, m.signature)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n\n    return {\n      peer: (flags & 1) !== 0 ? peer.decode(state) : null,\n      refresh: (flags & 2) !== 0 ? c.fixed32.decode(state) : null,\n      signature: (flags & 4) !== 0 ? c.fixed64.decode(state) : null\n    }\n  }\n}\n\nexports.mutableSignable = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.seq)\n    c.buffer.preencode(state, m.value)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.seq)\n    c.buffer.encode(state, m.value)\n  },\n  decode (state) {\n    return {\n      seq: c.uint.decode(state),\n      value: c.buffer.decode(state)\n    }\n  }\n}\n\nexports.mutablePutRequest = {\n  preencode (state, m) {\n    c.fixed32.preencode(state, m.publicKey)\n    c.uint.preencode(state, m.seq)\n    c.buffer.preencode(state, m.value)\n    c.fixed64.preencode(state, m.signature)\n  },\n  encode (state, m) {\n    c.fixed32.encode(state, m.publicKey)\n    c.uint.encode(state, m.seq)\n    c.buffer.encode(state, m.value)\n    c.fixed64.encode(state, m.signature)\n  },\n  decode (state) {\n    return {\n      publicKey: c.fixed32.decode(state),\n      seq: c.uint.decode(state),\n      value: c.buffer.decode(state),\n      signature: c.fixed64.decode(state)\n    }\n  }\n}\n\nexports.mutableGetResponse = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.seq)\n    c.buffer.preencode(state, m.value)\n    c.fixed64.preencode(state, m.signature)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.seq)\n    c.buffer.encode(state, m.value)\n    c.fixed64.encode(state, m.signature)\n  },\n  decode (state) {\n    return {\n      seq: c.uint.decode(state),\n      value: c.buffer.decode(state),\n      signature: c.fixed64.decode(state)\n    }\n  }\n}\nconst { FIREWALL } = require('../lib/constants')\n\nmodule.exports = class Nat {\n  constructor (dht, session, socket) {\n    this._samplesHost = []\n    this._samplesFull = []\n    this._visited = new Map()\n    this._resolve = null\n    this._minSamples = 4\n    this._autoSampling = false\n\n    this.dht = dht\n    this.session = session\n    this.socket = socket\n\n    this.sampled = 0\n    this.firewall = dht.firewalled ? FIREWALL.UNKNOWN : FIREWALL.OPEN\n    this.addresses = null\n\n    this.analyzing = new Promise((resolve) => { this._resolve = resolve })\n  }\n\n  autoSample (retry = true) {\n    if (this._autoSampling) return\n    this._autoSampling = true\n\n    const self = this\n    const socket = this.socket\n    const maxPings = this._minSamples\n\n    let skip = this.dht.nodes.length >= 8 ? 5 : 0\n    let pending = 0\n\n    // TODO: it would be best to pick the nodes to help us based on latency to us\n    // That should reduce connect latency in general. We should investigate tracking that later on.\n\n    // TODO 2: try to pick nodes with different IPs as well, as that'll help multi IP cell connections...\n    // If we expose this from the nat sampler then the DHT should be able to help us filter out scams as well...\n\n    for (let node = this.dht.nodes.latest; node && this.sampled + pending < maxPings; node = node.prev) {\n      if (skip > 0) {\n        skip--\n        continue\n      }\n\n      const ref = node.host + ':' + node.port\n\n      if (this._visited.has(ref)) continue\n      this._visited.set(ref, 1)\n\n      pending++\n      this.session.ping(node, { socket, retry: false }).then(onpong, onskip)\n    }\n\n    pending++\n    onskip()\n\n    function onpong (res) {\n      self.add(res.to, res.from)\n      onskip()\n    }\n\n    function onskip () {\n      if (--pending === 0 && self.sampled < self._minSamples) {\n        if (retry) {\n          self._autoSampling = false\n          self.autoSample(false)\n          return\n        }\n        self._resolve()\n      }\n    }\n  }\n\n  destroy () {\n    this._autoSampling = true\n    this._minSamples = 0\n    this._resolve()\n  }\n\n  unfreeze () {\n    this.frozen = false\n    this._updateFirewall()\n    this._updateAddresses()\n  }\n\n  freeze () {\n    this.frozen = true\n  }\n\n  _updateFirewall () {\n    if (!this.dht.firewalled) {\n      this.firewall = FIREWALL.OPEN\n      return\n    }\n\n    if (this.sampled < 3) return\n\n    const max = this._samplesFull[0].hits\n\n    if (max >= 3) {\n      this.firewall = FIREWALL.CONSISTENT\n      return\n    }\n\n    if (max === 1) {\n      this.firewall = FIREWALL.RANDOM\n      return\n    }\n\n    // else max === 2\n\n    // 1 host, >= 4 total samples ie, 2 bad ones -> random\n    if (this._samplesHost.length === 1 && this.sampled > 3) {\n      this.firewall = FIREWALL.RANDOM\n      return\n    }\n\n    // double hit on two different ips -> assume consistent\n    if (this._samplesHost.length > 1 && this._samplesFull[1].hits > 1) {\n      this.firewall = FIREWALL.CONSISTENT\n      return\n    }\n\n    // (4 is just means - all the samples we expect) - no decision - assume random\n    if (this.sampled > 4) {\n      this.firewall = FIREWALL.RANDOM\n    }\n  }\n\n  _updateAddresses () {\n    if (this.firewall === FIREWALL.UNKNOWN) {\n      this.addresses = null\n      return\n    }\n\n    if (this.firewall === FIREWALL.RANDOM) {\n      this.addresses = [this._samplesHost[0]]\n      return\n    }\n\n    if (this.firewall === FIREWALL.CONSISTENT) {\n      this.addresses = []\n      for (const addr of this._samplesFull) {\n        if (addr.hits >= 2 || this.addresses.length < 2) this.addresses.push(addr)\n      }\n    }\n  }\n\n  update () {\n    if (this.dht.firewalled && this.firewall === FIREWALL.OPEN) {\n      this.firewall = FIREWALL.UNKNOWN\n    }\n    this._updateFirewall()\n    this._updateAddresses()\n  }\n\n  add (addr, from) {\n    const ref = from.host + ':' + from.port\n\n    if (this._visited.get(ref) === 2) return\n    this._visited.set(ref, 2)\n\n    addSample(this._samplesHost, addr.host, 0)\n    addSample(this._samplesFull, addr.host, addr.port)\n\n    if ((++this.sampled >= 3 || !this.dht.firewalled) && !this.frozen) {\n      this.update()\n    }\n\n    if ((this.firewall === FIREWALL.CONSISTENT || this.firewall === FIREWALL.OPEN)) {\n      this._resolve()\n    } else if (this.sampled >= this._minSamples) {\n      this._resolve()\n    }\n  }\n}\n\nfunction addSample (samples, host, port) {\n  for (let i = 0; i < samples.length; i++) {\n    const s = samples[i]\n\n    if (s.port !== port || s.host !== host) continue\n    s.hits++\n\n    for (; i > 0; i--) {\n      const prev = samples[i - 1]\n      if (prev.hits >= s.hits) return\n      samples[i - 1] = s\n      samples[i] = prev\n    }\n\n    return\n  }\n\n  samples.push({\n    host,\n    port,\n    hits: 1\n  })\n}\nconst NoiseSecretStream = require('@hyperswarm/secret-stream')\nconst NoiseHandshake = require('noise-handshake')\nconst curve = require('noise-curve-ed')\nconst c = require('compact-encoding')\nconst b4a = require('b4a')\nconst sodium = require('sodium-universal')\nconst m = require('./messages')\nconst { NS } = require('./constants')\nconst { HANDSHAKE_UNFINISHED } = require('./errors')\n\nconst NOISE_PROLOUGE = NS.PEER_HANDSHAKE\n\nmodule.exports = class NoiseWrap {\n  constructor (keyPair, remotePublicKey) {\n    this.isInitiator = !!remotePublicKey\n    this.remotePublicKey = remotePublicKey\n    this.keyPair = keyPair\n    this.handshake = new NoiseHandshake('IK', this.isInitiator, keyPair, { curve })\n    this.handshake.initialise(NOISE_PROLOUGE, remotePublicKey)\n  }\n\n  send (payload) {\n    const buf = c.encode(m.noisePayload, payload)\n    return this.handshake.send(buf)\n  }\n\n  recv (buf) {\n    const payload = c.decode(m.noisePayload, this.handshake.recv(buf))\n    this.remotePublicKey = b4a.toBuffer(this.handshake.rs)\n    return payload\n  }\n\n  final () {\n    if (!this.handshake.complete) throw HANDSHAKE_UNFINISHED()\n\n    const holepunchSecret = b4a.allocUnsafe(32)\n\n    sodium.crypto_generichash(holepunchSecret, NS.PEER_HOLEPUNCH, this.handshake.hash)\n\n    return {\n      isInitiator: this.isInitiator,\n      publicKey: this.keyPair.publicKey,\n      streamId: this.streamId,\n      remotePublicKey: this.remotePublicKey,\n      remoteId: NoiseSecretStream.id(this.handshake.hash, !this.isInitiator),\n      holepunchSecret,\n      hash: b4a.toBuffer(this.handshake.hash),\n      rx: b4a.toBuffer(this.handshake.rx),\n      tx: b4a.toBuffer(this.handshake.tx)\n    }\n  }\n}\nconst c = require('compact-encoding')\nconst sodium = require('sodium-universal')\nconst RecordCache = require('record-cache')\nconst Cache = require('xache')\nconst b4a = require('b4a')\nconst unslab = require('unslab')\n\nconst { encodeUnslab } = require('./encode')\nconst m = require('./messages')\nconst { NS, ERROR } = require('./constants')\n\nconst EMPTY = b4a.alloc(0)\nconst TMP = b4a.allocUnsafe(32)\n\nconst rawArray = c.array(c.raw)\n\nmodule.exports = class Persistent {\n  constructor (dht, opts) {\n    this.dht = dht\n    this.records = new RecordCache(opts.records)\n    this.refreshes = new Cache(opts.refreshes)\n    this.mutables = new Cache(opts.mutables)\n    this.immutables = new Cache(opts.immutables)\n  }\n\n  onlookup (req) {\n    if (!req.target) return\n\n    const k = b4a.toString(req.target, 'hex')\n    const records = this.records.get(k, 20)\n    const fwd = this.dht._router.get(k)\n\n    if (fwd && records.length < 20) records.push(fwd.record)\n\n    req.reply(records.length ? c.encode(rawArray, records) : null)\n  }\n\n  onfindpeer (req) {\n    if (!req.target) return\n    const fwd = this.dht._router.get(req.target)\n    req.reply(fwd ? fwd.record : null)\n  }\n\n  unannounce (target, publicKey) {\n    const k = b4a.toString(target, 'hex')\n    sodium.crypto_generichash(TMP, publicKey)\n\n    if (b4a.equals(TMP, target)) this.dht._router.delete(k)\n    this.records.remove(k, publicKey)\n  }\n\n  onunannounce (req) {\n    if (!req.target || !req.token) return\n\n    const unann = decode(m.announce, req.value)\n    if (unann === null) return\n\n    const { peer, signature } = unann\n    if (!peer || !signature) return\n\n    const signable = annSignable(req.target, req.token, this.dht.id, unann, NS.UNANNOUNCE)\n\n    if (!sodium.crypto_sign_verify_detached(signature, signable, peer.publicKey)) {\n      return\n    }\n\n    this.unannounce(req.target, peer.publicKey)\n    req.reply(null, { token: false, closerNodes: false })\n  }\n\n  _onrefresh (token, req) {\n    sodium.crypto_generichash(TMP, token)\n    const activeRefresh = b4a.toString(TMP, 'hex')\n\n    const r = this.refreshes.get(activeRefresh)\n    if (!r) return\n\n    const { announceSelf, k, record } = r\n    const publicKey = record.subarray(0, 32)\n\n    if (announceSelf) {\n      this.dht._router.set(k, {\n        relay: req.from,\n        record,\n        onconnect: null,\n        onholepunch: null\n      })\n      this.records.remove(k, publicKey)\n    } else {\n      this.records.add(k, publicKey, record)\n    }\n\n    this.refreshes.delete(activeRefresh)\n    this.refreshes.set(b4a.toString(token, 'hex'), r)\n\n    req.reply(null, { token: false, closerNodes: false })\n  }\n\n  onannounce (req) {\n    if (!req.target || !req.token || !this.dht.id) return\n\n    const ann = decode(m.announce, req.value)\n    if (ann === null) return\n\n    const signable = annSignable(req.target, req.token, this.dht.id, ann, NS.ANNOUNCE)\n    const { peer, refresh, signature } = ann\n\n    if (!peer) {\n      if (!refresh) return\n      this._onrefresh(refresh, req)\n      return\n    }\n\n    if (!signature || !sodium.crypto_sign_verify_detached(signature, signable, peer.publicKey)) {\n      return\n    }\n\n    // TODO: it would be potentially be more optimal to allow more than 3 addresses here for a findPeer response\n    // and only use max 3 for a lookup reply\n    if (peer.relayAddresses.length > 3) {\n      peer.relayAddresses = peer.relayAddresses.slice(0, 3)\n    }\n\n    sodium.crypto_generichash(TMP, peer.publicKey)\n\n    const k = b4a.toString(req.target, 'hex')\n    const announceSelf = b4a.equals(TMP, req.target)\n    const record = encodeUnslab(m.peer, peer)\n\n    if (announceSelf) {\n      this.dht._router.set(k, {\n        relay: req.from,\n        record,\n        onconnect: null,\n        onholepunch: null\n      })\n      this.records.remove(k, peer.publicKey)\n    } else {\n      this.records.add(k, peer.publicKey, record)\n    }\n\n    if (refresh) {\n      this.refreshes.set(b4a.toString(refresh, 'hex'), { k, record, announceSelf })\n    }\n\n    req.reply(null, { token: false, closerNodes: false })\n  }\n\n  onmutableget (req) {\n    if (!req.target || !req.value) return\n\n    let seq = 0\n    try {\n      seq = c.decode(c.uint, req.value)\n    } catch {\n      return\n    }\n\n    const k = b4a.toString(req.target, 'hex')\n    const value = this.mutables.get(k)\n\n    if (!value) {\n      req.reply(null)\n      return\n    }\n\n    const localSeq = c.decode(c.uint, value)\n    req.reply(localSeq < seq ? null : value)\n  }\n\n  onmutableput (req) {\n    if (!req.target || !req.token || !req.value) return\n\n    const p = decode(m.mutablePutRequest, req.value)\n    if (!p) return\n\n    const { publicKey, seq, value, signature } = p\n\n    const hash = b4a.allocUnsafe(32)\n    sodium.crypto_generichash(hash, publicKey)\n    if (!b4a.equals(hash, req.target)) return\n\n    if (!value || !verifyMutable(signature, seq, value, publicKey)) return\n\n    const k = b4a.toString(hash, 'hex')\n    const local = this.mutables.get(k)\n\n    if (local) {\n      const existing = c.decode(m.mutableGetResponse, local)\n      if (existing.value && existing.seq === seq && b4a.compare(value, existing.value) !== 0) {\n        req.error(ERROR.SEQ_REUSED)\n        return\n      }\n      if (seq < existing.seq) {\n        req.error(ERROR.SEQ_TOO_LOW)\n        return\n      }\n    }\n\n    this.mutables.set(k, encodeUnslab(m.mutableGetResponse, { seq, value, signature }))\n    req.reply(null)\n  }\n\n  onimmutableget (req) {\n    if (!req.target) return\n\n    const k = b4a.toString(req.target, 'hex')\n    const value = this.immutables.get(k)\n\n    req.reply(value || null)\n  }\n\n  onimmutableput (req) {\n    if (!req.target || !req.token || !req.value) return\n\n    const hash = b4a.alloc(32)\n    sodium.crypto_generichash(hash, req.value)\n    if (!b4a.equals(hash, req.target)) return\n\n    const k = b4a.toString(hash, 'hex')\n    this.immutables.set(k, unslab(req.value))\n\n    req.reply(null)\n  }\n\n  destroy () {\n    this.records.destroy()\n    this.refreshes.destroy()\n    this.mutables.destroy()\n    this.immutables.destroy()\n  }\n\n  static signMutable (seq, value, keyPair) {\n    const signable = b4a.allocUnsafe(32 + 32)\n    const hash = signable.subarray(32)\n\n    signable.set(NS.MUTABLE_PUT, 0)\n\n    sodium.crypto_generichash(hash, c.encode(m.mutableSignable, { seq, value }))\n    return sign(signable, keyPair)\n  }\n\n  static verifyMutable (signature, seq, value, publicKey) {\n    return verifyMutable(signature, seq, value, publicKey)\n  }\n\n  static signAnnounce (target, token, id, ann, keyPair) {\n    return sign(annSignable(target, token, id, ann, NS.ANNOUNCE), keyPair)\n  }\n\n  static signUnannounce (target, token, id, ann, keyPair) {\n    return sign(annSignable(target, token, id, ann, NS.UNANNOUNCE), keyPair)\n  }\n}\n\nfunction verifyMutable (signature, seq, value, publicKey) {\n  const signable = b4a.allocUnsafe(32 + 32)\n  const hash = signable.subarray(32)\n\n  signable.set(NS.MUTABLE_PUT, 0)\n\n  sodium.crypto_generichash(hash, c.encode(m.mutableSignable, { seq, value }))\n  return sodium.crypto_sign_verify_detached(signature, signable, publicKey)\n}\n\nfunction annSignable (target, token, id, ann, ns) {\n  const signable = b4a.allocUnsafe(32 + 32)\n  const hash = signable.subarray(32)\n\n  signable.set(ns, 0)\n\n  sodium.crypto_generichash_batch(hash, [\n    target,\n    id,\n    token,\n    c.encode(m.peer, ann.peer), // note that this is the partial encoding of the announce message so we could just use that for perf\n    ann.refresh || EMPTY\n  ])\n\n  return signable\n}\n\nfunction sign (signable, keyPair) {\n  if (keyPair.sign) {\n    return keyPair.sign(signable)\n  }\n  const secretKey = keyPair.secretKey ? keyPair.secretKey : keyPair\n  const signature = b4a.allocUnsafe(64)\n  sodium.crypto_sign_detached(signature, signable, secretKey)\n  return signature\n}\n\nfunction decode (enc, val) {\n  try {\n    return val && c.decode(enc, val)\n  } catch (err) {\n    return null\n  }\n}\nmodule.exports = class RawStreamSet {\n  constructor (dht) {\n    this._dht = dht\n\n    this._prefix = 16 - 1 // 16 is the default stream-set side in udx\n    this._streams = new Map()\n  }\n\n  add (opts) {\n    const self = this\n\n    // TODO: we should prob have a udx helper for id generation, given the slight complexity\n    // of the below. requires a PRNG in udx tho.\n\n    let id = 0\n\n    while (true) {\n      id = (Math.random() * 0x100000000) >>> 0\n\n      if (this._streams.has(id & this._prefix)) continue\n      break\n    }\n\n    // always have ~50% change of rolling a free one\n    if (2 * this._streams.size >= this._prefix) {\n      // ie 0b11111 = 0b1111 + 1 + 0b1111\n      this._prefix = 2 * this._prefix + 1\n\n      // move the prefixes over\n      const next = new Map()\n      for (const stream of this._streams.values()) {\n        next.set(stream.id & this._prefix, stream)\n      }\n      this._streams = next\n    }\n\n    const stream = this._dht.udx.createStream(id, opts)\n    this._streams.set(id & this._prefix, stream)\n\n    stream.on('close', onclose)\n\n    return stream\n\n    function onclose () {\n      self._streams.delete(id & self._prefix)\n    }\n  }\n\n  async clear () {\n    const destroying = []\n\n    for (const stream of this._streams.values()) {\n      destroying.push(new Promise((resolve) => stream\n        .once('close', resolve)\n        .destroy()\n      ))\n    }\n\n    await Promise.allSettled(destroying)\n  }\n}\nconst c = require('compact-encoding')\nconst Cache = require('xache')\nconst safetyCatch = require('safety-catch')\nconst b4a = require('b4a')\nconst { handshake, holepunch } = require('./messages')\nconst { COMMANDS } = require('./constants')\nconst { BAD_HANDSHAKE_REPLY, BAD_HOLEPUNCH_REPLY } = require('./errors')\n\nconst FROM_CLIENT = 0\nconst FROM_SERVER = 1\nconst FROM_RELAY = 2\nconst FROM_SECOND_RELAY = 3\nconst REPLY = 4\n\n// TODO: While the current design is very trustless in regards to clients/servers trusting the DHT,\n// we should add a bunch of rate limits everywhere, especially including here to avoid bad users\n// using a DHT node to relay traffic indiscriminately using the connect/holepunch messages.\n// That's mostly from an abuse POV as none of the messsages do amplication.\n\nmodule.exports = class Router {\n  constructor (dht, opts) {\n    this.dht = dht\n    this.forwards = new Cache(opts.forwards)\n  }\n\n  set (target, state) {\n    if (state.onpeerhandshake) {\n      this.forwards.retain(toString(target), state)\n    } else {\n      this.forwards.set(toString(target), state)\n    }\n  }\n\n  get (target) {\n    return this.forwards.get(toString(target))\n  }\n\n  delete (target) {\n    this.forwards.delete(toString(target))\n  }\n\n  destroy () {\n    this.forwards.destroy()\n  }\n\n  async peerHandshake (target, { noise, peerAddress, relayAddress, socket, session }, to) {\n    const dht = this.dht\n\n    const requestValue = c.encode(handshake, {\n      mode: FROM_CLIENT,\n      noise,\n      peerAddress,\n      relayAddress\n    })\n\n    const res = await dht.request({ command: COMMANDS.PEER_HANDSHAKE, target, value: requestValue }, to, { socket, session })\n\n    const hs = decode(handshake, res.value)\n    if (!hs || hs.mode !== REPLY || (to.host !== res.from.host || to.port !== res.from.port) || !hs.noise) {\n      throw BAD_HANDSHAKE_REPLY()\n    }\n\n    return {\n      noise: hs.noise,\n      relayed: !!hs.peerAddress,\n      serverAddress: hs.peerAddress || to,\n      clientAddress: res.to\n    }\n  }\n\n  async onpeerhandshake (req) {\n    const hs = req.value && decode(handshake, req.value)\n    if (!hs) return\n\n    const { mode, noise, peerAddress, relayAddress } = hs\n\n    const state = req.target && this.get(req.target)\n    const isServer = !!(state && state.onpeerhandshake)\n    const relay = state && state.relay\n\n    if (isServer) {\n      let reply = null\n      try {\n        reply = noise && await state.onpeerhandshake({ noise, peerAddress }, req)\n      } catch (e) {\n        safetyCatch(e)\n        return\n      }\n      if (!reply || !reply.noise) return\n      const opts = { socket: reply.socket, closerNodes: false, token: false }\n\n      switch (mode) {\n        case FROM_CLIENT: {\n          req.reply(c.encode(handshake, { mode: REPLY, noise: reply.noise, peerAddress: null }), opts)\n          return\n        }\n        case FROM_RELAY: {\n          req.relay(c.encode(handshake, { mode: FROM_SERVER, noise: reply.noise, peerAddress }), req.from, opts)\n          return\n        }\n        case FROM_SECOND_RELAY: {\n          if (!relayAddress) return\n          req.relay(c.encode(handshake, { mode: FROM_SERVER, noise: reply.noise, peerAddress }), relayAddress, opts)\n          return // eslint-disable-line\n        }\n      }\n    } else {\n      switch (mode) {\n        case FROM_CLIENT: {\n          // TODO: if no relay is known route closer to the target instead of timing out\n          if (!noise) return\n          if (!relay && !relayAddress) { // help the user route\n            req.reply(null, { token: false, closerNodes: true })\n            return\n          }\n          req.relay(c.encode(handshake, { mode: FROM_RELAY, noise, peerAddress: req.from, relayAddress: null }), relayAddress || relay)\n          return\n        }\n        case FROM_RELAY: {\n          if (!relay || !noise) return\n          req.relay(c.encode(handshake, { mode: FROM_SECOND_RELAY, noise, peerAddress, relayAddress: req.from }), relay)\n          return\n        }\n        case FROM_SERVER: {\n          if (!peerAddress || !noise) return\n          req.reply(c.encode(handshake, { mode: REPLY, noise, peerAddress: req.from, relayAddress: null }), { to: peerAddress, closerNodes: false, token: false })\n          return // eslint-disable-line\n        }\n      }\n    }\n  }\n\n  async peerHolepunch (target, { id, payload, peerAddress, socket, session }, to) {\n    const dht = this.dht\n    const requestValue = c.encode(holepunch, {\n      mode: FROM_CLIENT,\n      id,\n      payload,\n      peerAddress\n    })\n\n    const res = await dht.request({ command: COMMANDS.PEER_HOLEPUNCH, target, value: requestValue }, to, { socket, session })\n\n    const hp = decode(holepunch, res.value)\n    if (!hp || hp.mode !== REPLY || (to.host !== res.from.host || to.port !== res.from.port)) {\n      throw BAD_HOLEPUNCH_REPLY()\n    }\n\n    return {\n      from: res.from,\n      to: res.to,\n      payload: hp.payload,\n      peerAddress: hp.peerAddress || to\n    }\n  }\n\n  async onpeerholepunch (req) {\n    const hp = req.value && decode(holepunch, req.value)\n    if (!hp) return\n\n    const { mode, id, payload, peerAddress } = hp\n\n    const state = req.target && this.get(req.target)\n    const isServer = !!(state && state.onpeerholepunch)\n    const relay = state && state.relay\n\n    switch (mode) {\n      case FROM_CLIENT: {\n        if (!peerAddress && !relay) return\n        req.relay(c.encode(holepunch, { mode: FROM_RELAY, id, payload, peerAddress: req.from }), peerAddress || relay)\n        return\n      }\n      case FROM_RELAY: {\n        if (!isServer || !peerAddress) return\n        let reply = null\n        try {\n          reply = await state.onpeerholepunch({ id, payload, peerAddress }, req)\n        } catch (e) {\n          safetyCatch(e)\n          return\n        }\n        if (!reply) return\n        const opts = { socket: reply.socket, closerNodes: false, token: false }\n        req.relay(c.encode(holepunch, { mode: FROM_SERVER, id: 0, payload: reply.payload, peerAddress }), req.from, opts)\n        return\n      }\n      case FROM_SERVER: {\n        req.reply(c.encode(holepunch, { mode: REPLY, id, payload, peerAddress: req.from }), { to: peerAddress, closerNodes: false, token: false })\n        return // eslint-disable-line\n      }\n    }\n  }\n}\n\nfunction decode (enc, val) {\n  try {\n    return c.decode(enc, val)\n  } catch {\n    return null\n  }\n}\n\nfunction toString (t) {\n  return typeof t === 'string' ? t : b4a.toString(t, 'hex')\n}\nconst sodium = require('sodium-universal')\nconst b4a = require('b4a')\nconst { holepunchPayload } = require('./messages')\n\nmodule.exports = class HolepunchPayload {\n  constructor (holepunchSecret) {\n    this._sharedSecret = holepunchSecret\n    this._localSecret = b4a.allocUnsafe(32)\n\n    sodium.randombytes_buf(this._localSecret)\n  }\n\n  decrypt (buffer) {\n    const state = { start: 24, end: buffer.byteLength - 16, buffer }\n\n    if (state.end <= state.start) return null\n\n    const nonce = buffer.subarray(0, 24)\n    const msg = state.buffer.subarray(state.start, state.end)\n    const cipher = state.buffer.subarray(state.start)\n\n    if (!sodium.crypto_secretbox_open_easy(msg, cipher, nonce, this._sharedSecret)) return null\n\n    try {\n      return holepunchPayload.decode(state)\n    } catch {\n      return null\n    }\n  }\n\n  encrypt (payload) {\n    const state = { start: 24, end: 24, buffer: null }\n    holepunchPayload.preencode(state, payload)\n    state.buffer = b4a.allocUnsafe(state.end + 16)\n\n    const nonce = state.buffer.subarray(0, 24)\n    const msg = state.buffer.subarray(state.start, state.end)\n    const cipher = state.buffer.subarray(state.start)\n\n    holepunchPayload.encode(state, payload)\n    sodium.randombytes_buf(nonce)\n    sodium.crypto_secretbox_easy(cipher, msg, nonce, this._sharedSecret)\n\n    return state.buffer\n  }\n\n  token (addr) {\n    const out = b4a.allocUnsafe(32)\n    sodium.crypto_generichash(out, b4a.from(addr.host), this._localSecret)\n    return out\n  }\n}\nconst DONE = Promise.resolve(true)\nconst DESTROYED = Promise.resolve(false)\n\nmodule.exports = class Semaphore {\n  constructor (limit = 1) {\n    this.limit = limit\n    this.active = 0\n    this.waiting = []\n    this.destroyed = false\n\n    this._onwait = (resolve) => { this.waiting.push(resolve) }\n  }\n\n  wait () {\n    if (this.destroyed === true) return DESTROYED\n\n    if (this.active < this.limit && this.waiting.length === 0) {\n      this.active++\n      return DONE\n    }\n\n    return new Promise(this._onwait)\n  }\n\n  signal () {\n    if (this.destroyed === true) return\n\n    this.active--\n    while (this.active < this.limit && this.waiting.length > 0 && this.destroyed === false) {\n      this.active++\n      this.waiting.shift()(true)\n    }\n  }\n\n  async flush () {\n    if (this.destroyed === true) return\n    this.limit = 1\n    await this.wait()\n    this.signal()\n  }\n\n  destroy () {\n    this.destroyed = true\n    this.active = 0\n    while (this.waiting.length) this.waiting.pop()(false)\n  }\n}\nconst { EventEmitter } = require('events')\nconst safetyCatch = require('safety-catch')\nconst NoiseSecretStream = require('@hyperswarm/secret-stream')\nconst b4a = require('b4a')\nconst relay = require('blind-relay')\nconst NoiseWrap = require('./noise-wrap')\nconst Announcer = require('./announcer')\nconst { FIREWALL, ERROR } = require('./constants')\nconst { unslabbedHash } = require('./crypto')\nconst SecurePayload = require('./secure-payload')\nconst Holepuncher = require('./holepuncher')\nconst { isPrivate } = require('bogon')\nconst { ALREADY_LISTENING, NODE_DESTROYED, KEYPAIR_ALREADY_USED } = require('./errors')\n\nconst HANDSHAKE_CLEAR_WAIT = 10000\nconst HANDSHAKE_INITIAL_TIMEOUT = 10000\n\nmodule.exports = class Server extends EventEmitter {\n  constructor (dht, opts = {}) {\n    super()\n\n    this.dht = dht\n    this.target = null\n\n    this.closed = false\n    this.firewall = opts.firewall || (() => false)\n    this.holepunch = opts.holepunch || (() => true)\n    this.relayThrough = opts.relayThrough || null\n    this.relayKeepAlive = opts.relayKeepAlive || 5000\n    this.pool = opts.pool || null\n    this.createHandshake = opts.createHandshake || defaultCreateHandshake\n    this.createSecretStream = opts.createSecretStream || defaultCreateSecretStream\n    this.suspended = false\n\n    this._shareLocalAddress = opts.shareLocalAddress !== false\n    this._reusableSocket = !!opts.reusableSocket\n    this._neverPunch = opts.holepunch === false // useful for fully disabling punching\n    this._keyPair = null\n    this._announcer = null\n    this._connects = new Map()\n    this._holepunches = []\n    this._listening = null\n    this._closing = null\n  }\n\n  get listening () {\n    return this._listening !== null\n  }\n\n  get publicKey () {\n    return this._keyPair && this._keyPair.publicKey\n  }\n\n  get relayAddresses () {\n    return this._announcer ? this._announcer.relayAddresses : []\n  }\n\n  onconnection (encryptedSocket) {\n    this.emit('connection', encryptedSocket)\n  }\n\n  async suspend () {\n    if (this._listening !== null) await this._listening\n    this.suspended = true\n    this._clearAll()\n    return this._announcer ? this._announcer.suspend() : Promise.resolve()\n  }\n\n  async resume () {\n    if (this._listening !== null) await this._listening\n    this.suspended = false\n    return this._announcer ? this._announcer.resume() : Promise.resolve()\n  }\n\n  address () {\n    if (!this._keyPair) return null\n\n    return {\n      publicKey: this._keyPair.publicKey,\n      host: this.dht.host,\n      port: this.dht.port\n    }\n  }\n\n  close () {\n    if (this._closing) return this._closing\n    this._closing = this._close()\n    return this._closing\n  }\n\n  _gc () {\n    this.dht.listening.delete(this)\n    if (this.target) this.dht._router.delete(this.target)\n  }\n\n  async _stopListening () {\n    try {\n      if (this._announcer) await this._announcer.stop()\n    } catch {\n      // ignore\n    }\n\n    this._announcer = null\n    this._listening = null\n    this._keyPair = null\n  }\n\n  async _close () {\n    if (this._listening === null) {\n      this.closed = true\n      this.emit('close')\n      return\n    }\n\n    try {\n      await this._listening\n    } catch {}\n\n    this._gc()\n    this._clearAll()\n\n    await this._stopListening()\n\n    this.closed = true\n    this.emit('close')\n  }\n\n  _clearAll () {\n    while (this._holepunches.length > 0) {\n      const h = this._holepunches.pop()\n      if (h && h.puncher) h.puncher.destroy()\n      if (h && h.clearing) clearTimeout(h.clearing)\n      if (h && h.prepunching) clearTimeout(h.prepunching)\n      if (h && h.rawStream) h.rawStream.destroy()\n    }\n\n    this._connects.clear()\n  }\n\n  async listen (keyPair = this.dht.defaultKeyPair, opts = {}) {\n    if (this._listening !== null) throw ALREADY_LISTENING()\n    if (this.dht.destroyed) throw NODE_DESTROYED()\n\n    this._listening = this._listen(keyPair, opts)\n    await this._listening\n    return this\n  }\n\n  async _listen (keyPair, opts) {\n    // From now on, the DHT object which created me is responsible for closing me\n    this.dht.listening.add(this)\n\n    try {\n      await this.dht.bind()\n      if (this._closing) return\n\n      for (const s of this.dht.listening) {\n        if (s._keyPair && b4a.equals(s._keyPair.publicKey, keyPair.publicKey)) {\n          throw KEYPAIR_ALREADY_USED()\n        }\n      }\n\n      this.target = unslabbedHash(keyPair.publicKey)\n      this._keyPair = keyPair\n      this._announcer = new Announcer(this.dht, keyPair, this.target, opts)\n\n      this.dht._router.set(this.target, {\n        relay: null,\n        record: this._announcer.record,\n        onpeerhandshake: this._onpeerhandshake.bind(this),\n        onpeerholepunch: this._onpeerholepunch.bind(this)\n      })\n\n      // warm it up for now\n      this._localAddresses().catch(safetyCatch)\n\n      await this._announcer.start()\n    } catch (err) {\n      await this._stopListening()\n      this._gc()\n      throw err\n    }\n\n    if (this._closing) return\n    if (this.suspended) await this._announcer.suspend()\n\n    if (this._closing) return\n    if (this.dht.destroyed) throw NODE_DESTROYED()\n\n    if (this.pool) this.pool._attachServer(this)\n\n    this.emit('listening')\n  }\n\n  refresh () {\n    if (this._announcer) this._announcer.refresh()\n  }\n\n  notifyOnline () {\n    if (this._announcer) this._announcer.online.notify()\n  }\n\n  _localAddresses () {\n    return this.dht.validateLocalAddresses(Holepuncher.localAddresses(this.dht.io.serverSocket))\n  }\n\n  async _addHandshake (k, noise, clientAddress, { from, to: serverAddress, socket }, direct) {\n    let id = this._holepunches.indexOf(null)\n    if (id === -1) id = this._holepunches.push(null) - 1\n\n    const hs = {\n      round: 0,\n      reply: null,\n      puncher: null,\n      payload: null,\n      rawStream: null,\n      encryptedSocket: null,\n      prepunching: null,\n      firewalled: true,\n      clearing: null,\n      onsocket: null,\n\n      // Relay state\n      relayTimeout: null,\n      relayToken: null,\n      relaySocket: null,\n      relayClient: null,\n      relayPaired: false\n    }\n\n    this._holepunches[id] = hs\n\n    const handshake = this.createHandshake(this._keyPair, null)\n\n    let remotePayload\n    try {\n      remotePayload = await handshake.recv(noise)\n    } catch (err) {\n      safetyCatch(err)\n      this._clearLater(hs, id, k)\n      return null\n    }\n\n    if (this._closing || this.suspended) return null\n\n    try {\n      hs.firewalled = await this.firewall(handshake.remotePublicKey, remotePayload, clientAddress)\n    } catch (err) {\n      safetyCatch(err)\n    }\n\n    if (this._closing || this.suspended) return null\n\n    if (hs.firewalled) {\n      this._clearLater(hs, id, k)\n      return null\n    }\n\n    const error = remotePayload.version === 1\n      ? (remotePayload.udx ? ERROR.NONE : ERROR.ABORTED)\n      : ERROR.VERSION_MISMATCH\n\n    const addresses = []\n    const ourRemoteAddr = this.dht.remoteAddress()\n    const ourLocalAddrs = this._shareLocalAddress ? await this._localAddresses() : null\n\n    if (this._closing || this.suspended) return null\n\n    if (ourRemoteAddr) addresses.push(ourRemoteAddr)\n    if (ourLocalAddrs) addresses.push(...ourLocalAddrs)\n\n    if (error === ERROR.NONE) {\n      hs.rawStream = this.dht.createRawStream({\n        framed: true,\n        firewall (socket, port, host) {\n          // Check if the traffic originated from the socket on which we're expecting relay traffic. If so,\n          // we haven't hole punched yet and the other side is just sending us traffic through the relay.\n          if (hs.relaySocket && isRelay(hs.relaySocket, socket, port, host)) {\n            return false\n          }\n\n          hs.onsocket(socket, port, host)\n          return false\n        }\n      })\n\n      hs.rawStream.on('error', autoDestroy)\n\n      hs.onsocket = (socket, port, host) => {\n        if (hs.rawStream === null) return // Already hole punched\n\n        this._clearLater(hs, id, k)\n\n        if (hs.prepunching) {\n          clearTimeout(hs.prepunching)\n          hs.prepunching = null\n        }\n\n        if (this._reusableSocket && remotePayload.udx.reusableSocket) {\n          this.dht._socketPool.routes.add(handshake.remotePublicKey, hs.rawStream)\n        }\n\n        hs.rawStream.removeListener('error', autoDestroy)\n\n        if (hs.rawStream.connected) {\n          const remoteChanging = hs.rawStream.changeRemote(socket, remotePayload.udx.id, port, host)\n\n          if (remoteChanging) remoteChanging.catch(safetyCatch)\n        } else {\n          hs.rawStream.connect(socket, remotePayload.udx.id, port, host)\n          hs.encryptedSocket = this.createSecretStream(false, hs.rawStream, {\n            handshake: h,\n            keepAlive: this.dht.connectionKeepAlive\n          })\n\n          this.onconnection(hs.encryptedSocket)\n        }\n\n        if (hs.puncher) {\n          hs.puncher.onabort = noop\n          hs.puncher.destroy()\n        }\n\n        hs.rawStream = null\n      }\n\n      function autoDestroy () {\n        if (hs.puncher) hs.puncher.destroy()\n      }\n    }\n\n    const relayThrough = selectRelay(this.relayThrough)\n\n    if (relayThrough) hs.relayToken = relay.token()\n\n    try {\n      hs.reply = await handshake.send({\n        error,\n        firewall: ourRemoteAddr ? FIREWALL.OPEN : FIREWALL.UNKNOWN,\n        holepunch: ourRemoteAddr ? null : { id, relays: this._announcer.relays },\n        addresses4: addresses,\n        addresses6: null,\n        udx: {\n          reusableSocket: this._reusableSocket,\n          id: hs.rawStream ? hs.rawStream.id : 0,\n          seq: 0\n        },\n        secretStream: {},\n        relayThrough: relayThrough\n          ? { publicKey: relayThrough, token: hs.relayToken }\n          : null\n      })\n    } catch (err) {\n      safetyCatch(err)\n      hs.rawStream.destroy()\n      this._clearLater(hs, id, k)\n      return null\n    }\n\n    if (this._closing || this.suspended) {\n      hs.rawStream.destroy()\n      return null\n    }\n\n    const h = handshake.final()\n\n    if (error !== ERROR.NONE) {\n      hs.rawStream.destroy()\n      this._clearLater(hs, id, k)\n      return hs\n    }\n\n    if (relayThrough || remotePayload.relayThrough) {\n      this._relayConnection(hs, relayThrough, remotePayload, h)\n    }\n\n    if (remotePayload.firewall === FIREWALL.OPEN || direct) {\n      const sock = direct ? socket : this.dht.socket\n      this.dht.stats.punches.open++\n      hs.onsocket(sock, clientAddress.port, clientAddress.host)\n      return hs\n    }\n\n    const onabort = () => {\n      if (hs.prepunching) clearTimeout(hs.prepunching)\n      hs.prepunching = null\n      hs.rawStream.on('close', () => this._clearLater(hs, id, k))\n      if (hs.relayToken === null) hs.rawStream.destroy()\n    }\n\n    if (!direct && clientAddress.host === serverAddress.host) {\n      const clientAddresses = remotePayload.addresses4.filter(onlyPrivateHosts)\n\n      if (clientAddresses.length > 0 && this._shareLocalAddress) {\n        const myAddresses = await this._localAddresses()\n        const addr = Holepuncher.matchAddress(myAddresses, clientAddresses)\n\n        if (addr) {\n          hs.prepunching = setTimeout(onabort, HANDSHAKE_INITIAL_TIMEOUT)\n          return hs\n        }\n      }\n    }\n\n    if (this._closing || this.suspended) return null\n\n    if (ourRemoteAddr || this._neverPunch) {\n      hs.prepunching = setTimeout(onabort, HANDSHAKE_INITIAL_TIMEOUT)\n      return hs\n    }\n\n    hs.payload = new SecurePayload(h.holepunchSecret)\n    hs.puncher = new Holepuncher(this.dht, this.dht.session(), false, remotePayload.firewall)\n\n    hs.puncher.onconnect = hs.onsocket\n    hs.puncher.onabort = onabort\n    hs.prepunching = setTimeout(hs.puncher.destroy.bind(hs.puncher), HANDSHAKE_INITIAL_TIMEOUT)\n\n    return hs\n  }\n\n  _clearLater (hs, id, k) {\n    if (hs.clearing) return\n    hs.clearing = setTimeout(() => this._clear(hs, id, k), HANDSHAKE_CLEAR_WAIT)\n  }\n\n  _clear (hs, id, k) {\n    if (id >= this._holepunches.length || this._holepunches[id] !== hs) return\n    if (hs.clearing) clearTimeout(hs.clearing)\n\n    this._holepunches[id] = null\n    while (this._holepunches.length > 0 && this._holepunches[this._holepunches.length - 1] === null) {\n      this._holepunches.pop()\n    }\n    this._connects.delete(k)\n  }\n\n  async _onpeerhandshake ({ noise, peerAddress }, req) {\n    const k = b4a.toString(noise, 'hex')\n\n    // The next couple of statements MUST run within the same tick to prevent\n    // a malicious peer from flooding us with handshakes.\n    let p = this._connects.get(k)\n    if (!p) {\n      p = this._addHandshake(k, noise, peerAddress || req.from, req, !peerAddress)\n      this._connects.set(k, p)\n    }\n\n    const h = await p\n    if (!h) return null\n\n    if (this._closing !== null || this.suspended) return null\n\n    return { socket: h.puncher && h.puncher.socket, noise: h.reply }\n  }\n\n  async _onpeerholepunch ({ id, peerAddress, payload }, req) {\n    const h = id < this._holepunches.length ? this._holepunches[id] : null\n    if (!h) return null\n\n    if (!peerAddress || this._closing !== null || this.suspended) return null\n\n    const p = h.puncher\n    if (!p || !p.socket) return this._abort(h) // not opened\n\n    const remotePayload = h.payload.decrypt(payload)\n    if (!remotePayload) return null\n\n    const isServerRelay = this._announcer.isRelay(req.from)\n    const { error, firewall, round, punching, addresses, remoteAddress, remoteToken } = remotePayload\n\n    if (error !== ERROR.NONE) {\n      // We actually do not need to set the round here, but just do it for consistency.\n      if (round >= h.round) h.round = round\n      return this._abort(h)\n    }\n\n    const token = h.payload.token(peerAddress)\n    const echoed = isServerRelay && !!remoteToken && b4a.equals(token, remoteToken)\n\n    // Update our heuristics here\n    if (req.socket === p.socket) {\n      p.nat.add(req.to, req.from)\n    }\n\n    if (round >= h.round) {\n      h.round = round\n      p.updateRemote({ punching, firewall, addresses, verified: echoed ? peerAddress.host : null })\n    }\n\n    // Wait for the analyzer to reach a conclusion...\n    let stable = await p.analyze(false)\n    if (p.destroyed) return null\n\n    if (!p.remoteHolepunching && !stable) {\n      stable = await p.analyze(true)\n      if (p.destroyed) return null\n      if (!stable) return this._abort(h)\n    }\n\n    // Fast mode! If we are consistent and the remote has opened a session to us (remoteAddress)\n    // then fire a quick punch back. Note the await here just waits for the udp socket to flush.\n    if (isConsistent(p.nat.firewall) && remoteAddress && hasSameAddr(p.nat.addresses, remoteAddress)) {\n      await p.ping(peerAddress)\n      if (p.destroyed) return null\n    }\n\n    // Remote said they are punching (or willing to), so we will punch as well.\n    // Note that this returns when the punching has STARTED, so no guarantee\n    // we will have a connection after this promise etc.\n    if (p.remoteHolepunching) {\n      // TODO: still continue here if a local connection might work, but then do not holepunch...\n      if (!this.holepunch(p.remoteFirewall, p.nat.firewall, p.remoteAddresses, p.nat.addresses)) {\n        return p.destroyed ? null : this._abort(h)\n      }\n\n      if (h.prepunching) {\n        clearTimeout(h.prepunching)\n        h.prepunching = null\n      }\n\n      if (p.remoteFirewall >= FIREWALL.RANDOM || p.nat.firewall >= FIREWALL.RANDOM) {\n        if (this.dht._randomPunches >= this.dht._randomPunchLimit || (Date.now() - this.dht._lastRandomPunch) < this.dht._randomPunchInterval) {\n          if (!h.relayToken) return this._abort(h, ERROR.TRY_LATER)\n          return {\n            socket: p.socket,\n            payload: h.payload.encrypt({\n              error: ERROR.TRY_LATER,\n              firewall: p.nat.firewall,\n              round: h.round,\n              connected: p.connected,\n              punching: p.punching,\n              addresses: p.nat.addresses,\n              remoteAddress: null,\n              token: isServerRelay ? token : null,\n              remoteToken: remotePayload.token\n            })\n          }\n        }\n      }\n\n      const punching = await p.punch()\n      if (p.destroyed) return null\n      if (!punching) return this._abort(h)\n    }\n\n    // Freeze that analysis as soon as we have a result we are giving to the other peer\n    if (p.nat.firewall !== FIREWALL.UNKNOWN) {\n      p.nat.freeze()\n    }\n\n    return {\n      socket: p.socket,\n      payload: h.payload.encrypt({\n        error: ERROR.NONE,\n        firewall: p.nat.firewall,\n        round: h.round,\n        connected: p.connected,\n        punching: p.punching,\n        addresses: p.nat.addresses,\n        remoteAddress: null,\n        token: isServerRelay ? token : null,\n        remoteToken: remotePayload.token\n      })\n    }\n  }\n\n  _abort (h, error = ERROR.ABORTED) {\n    if (!h.payload) {\n      if (h.puncher) h.puncher.destroy()\n      return null\n    }\n\n    const payload = h.payload.encrypt({\n      error,\n      firewall: FIREWALL.UNKNOWN,\n      round: h.round,\n      connected: false,\n      punching: false,\n      addresses: null,\n      remoteAddress: null,\n      token: null,\n      remoteToken: null\n    })\n\n    h.puncher.destroy()\n\n    return { socket: this.dht.socket, payload }\n  }\n\n  _relayConnection (hs, relayThrough, remotePayload, h) {\n    let isInitiator\n    let publicKey\n    let token\n\n    if (relayThrough) {\n      isInitiator = true\n      publicKey = relayThrough\n      token = hs.relayToken\n    } else {\n      isInitiator = false\n      publicKey = remotePayload.relayThrough.publicKey\n      token = remotePayload.relayThrough.token\n    }\n\n    hs.relayToken = token\n    hs.relaySocket = this.dht.connect(publicKey)\n    hs.relaySocket.setKeepAlive(this.relayKeepAlive)\n    hs.relayClient = relay.Client.from(hs.relaySocket, { id: hs.relaySocket.publicKey })\n    hs.relayTimeout = setTimeout(onabort, 15000)\n\n    hs.relayClient\n      .pair(isInitiator, token, hs.rawStream)\n      .on('error', onabort)\n      .on('data', (remoteId) => {\n        if (hs.relayTimeout) clearRelayTimeout(hs)\n        if (hs.rawStream === null) {\n          onabort(null)\n          return\n        }\n\n        hs.relayPaired = true\n\n        if (hs.prepunching) clearTimeout(hs.prepunching)\n        hs.prepunching = null\n\n        const {\n          remotePort,\n          remoteHost,\n          socket\n        } = hs.relaySocket.rawStream\n\n        hs.rawStream\n          .on('close', () => hs.relaySocket.destroy())\n          .connect(socket, remoteId, remotePort, remoteHost)\n\n        hs.encryptedSocket = this.createSecretStream(false, hs.rawStream, { handshake: h })\n\n        this.onconnection(hs.encryptedSocket)\n      })\n\n    function onabort () {\n      if (hs.relayTimeout) clearRelayTimeout(hs)\n      const socket = hs.relaySocket\n      hs.relayToken = null\n      hs.relaySocket = null\n      if (socket) socket.destroy()\n    }\n  }\n}\n\nfunction clearRelayTimeout (hs) {\n  clearTimeout(hs.relayTimeout)\n  hs.relayTimeout = null\n}\n\nfunction isConsistent (fw) {\n  return fw === FIREWALL.OPEN || fw === FIREWALL.CONSISTENT\n}\n\nfunction hasSameAddr (addrs, other) {\n  if (addrs === null) return false\n\n  for (const addr of addrs) {\n    if (addr.port === other.port && addr.host === other.host) return true\n  }\n  return false\n}\n\nfunction defaultCreateHandshake (keyPair, remotePublicKey) {\n  return new NoiseWrap(keyPair, remotePublicKey)\n}\n\nfunction defaultCreateSecretStream (isInitiator, rawStream, opts) {\n  return new NoiseSecretStream(isInitiator, rawStream, opts)\n}\n\nfunction onlyPrivateHosts (addr) {\n  return isPrivate(addr.host)\n}\n\nfunction isRelay (relaySocket, socket, port, host) {\n  const stream = relaySocket.rawStream\n  if (!stream) return false\n  if (stream.socket !== socket) return false\n  return port === stream.remotePort && host === stream.remoteHost\n}\n\nfunction selectRelay (relayThrough) {\n  if (typeof relayThrough === 'function') relayThrough = relayThrough()\n  if (relayThrough === null) return null\n  if (Array.isArray(relayThrough)) return relayThrough[Math.floor(Math.random() * relayThrough.length)]\n  return relayThrough\n}\n\nfunction noop () {}\nmodule.exports = class Sleeper {\n  constructor () {\n    this._timeout = null\n    this._resolve = null\n\n    this._start = (resolve) => {\n      this._resolve = resolve\n    }\n\n    this._trigger = () => {\n      if (this._resolve === null) return\n      const resolve = this._resolve\n      this._timeout = null\n      this._resolve = null\n      resolve()\n    }\n  }\n\n  pause (ms) {\n    const p = new Promise(this._start)\n    if (this._timeout !== null) {\n      clearTimeout(this._timeout)\n      this._trigger()\n    }\n    this._timeout = setTimeout(this._trigger, ms)\n    return p\n  }\n\n  resume () {\n    if (this._timeout !== null) {\n      clearTimeout(this._timeout)\n      this._trigger()\n    }\n  }\n}\nconst b4a = require('b4a')\n\nconst LINGER_TIME = 3000\n\nmodule.exports = class SocketPool {\n  constructor (dht, host) {\n    this._dht = dht\n    this._sockets = new Map()\n    this._lingering = new Set() // updated by the ref\n    this._host = host\n\n    this.routes = new SocketRoutes(this)\n  }\n\n  _onmessage (ref, data, address) {\n    this._dht.onmessage(ref.socket, data, address)\n  }\n\n  _add (ref) {\n    this._sockets.set(ref.socket, ref)\n  }\n\n  _remove (ref) {\n    this._sockets.delete(ref.socket)\n    this._lingering.delete(ref)\n  }\n\n  lookup (socket) {\n    return this._sockets.get(socket) || null\n  }\n\n  setReusable (socket, bool) {\n    const ref = this.lookup(socket)\n    if (ref) ref.reusable = bool\n  }\n\n  acquire () {\n    // TODO: Enable socket reuse\n    return new SocketRef(this)\n  }\n\n  async destroy () {\n    const closing = []\n\n    for (const ref of this._sockets.values()) {\n      ref._unlinger()\n      closing.push(ref.socket.close())\n    }\n\n    await Promise.allSettled(closing)\n  }\n}\n\nclass SocketRoutes {\n  constructor (pool) {\n    this._pool = pool\n    this._routes = new Map()\n  }\n\n  add (publicKey, rawStream) {\n    if (rawStream.socket) this._onconnect(publicKey, rawStream)\n    else rawStream.on('connect', this._onconnect.bind(this, publicKey, rawStream))\n  }\n\n  get (publicKey) {\n    const id = b4a.toString(publicKey, 'hex')\n    const route = this._routes.get(id)\n    if (!route) return null\n    return route\n  }\n\n  _onconnect (publicKey, rawStream) {\n    const id = b4a.toString(publicKey, 'hex')\n    const socket = rawStream.socket\n\n    let route = this._routes.get(id)\n\n    if (!route) {\n      const gc = () => {\n        if (this._routes.get(id) === route) this._routes.delete(id)\n        socket.removeListener('close', gc)\n      }\n\n      route = {\n        socket,\n        address: { host: rawStream.remoteHost, port: rawStream.remotePort },\n        gc\n      }\n\n      this._routes.set(id, route)\n      socket.on('close', gc)\n    }\n\n    this._pool.setReusable(socket, true)\n\n    rawStream.on('error', () => {\n      this._pool.setReusable(socket, false)\n      if (!route) route = this._routes.get(id)\n      if (route && route.socket === socket) route.gc()\n    })\n  }\n}\n\n// TODO: we should just make some \"user data\" object on udx to allow to attach this info\nclass SocketRef {\n  constructor (pool) {\n    this._pool = pool\n\n    // Events\n    this.onholepunchmessage = noop\n\n    // Whether it should teardown immediately or wait a bit\n    this.reusable = false\n\n    this.socket = pool._dht.udx.createSocket()\n    this.socket\n      .on('close', this._onclose.bind(this))\n      .on('message', this._onmessage.bind(this))\n      .on('idle', this._onidle.bind(this))\n      .on('busy', this._onbusy.bind(this))\n      .bind(0, this._pool._host)\n\n    this._refs = 1\n    this._released = false\n    this._closed = false\n\n    this._timeout = null\n    this._wasBusy = false\n\n    this._pool._add(this)\n  }\n\n  _onclose () {\n    this._pool._remove(this)\n  }\n\n  _onmessage (data, address) {\n    if (data.byteLength > 1) {\n      this._pool._onmessage(this, data, address)\n    } else {\n      this.onholepunchmessage(data, address, this)\n    }\n  }\n\n  _onidle () {\n    this._closeMaybe()\n  }\n\n  _onbusy () {\n    this._wasBusy = true\n    this._unlinger()\n  }\n\n  _reset () {\n    this.onholepunchmessage = noop\n  }\n\n  _closeMaybe () {\n    if (this._refs === 0 && this.socket.idle && !this._timeout) this._close()\n  }\n\n  _lingeringClose () {\n    this._pool._lingering.delete(this)\n    this._timeout = null\n    this._closeMaybe()\n  }\n\n  _close () {\n    this._unlinger()\n\n    if (this.reusable && this._wasBusy) {\n      this._wasBusy = false\n      this._pool._lingering.add(this)\n      this._timeout = setTimeout(this._lingeringClose.bind(this), LINGER_TIME)\n      return\n    }\n\n    this._closed = true\n    this.socket.close()\n  }\n\n  _unlinger () {\n    if (this._timeout !== null) {\n      clearTimeout(this._timeout)\n      this._pool._lingering.delete(this)\n      this._timeout = null\n    }\n  }\n\n  get free () {\n    return this._refs === 0\n  }\n\n  active () {\n    this._refs++\n    this._unlinger()\n  }\n\n  inactive () {\n    this._refs--\n    this._closeMaybe()\n  }\n\n  address () {\n    return this.socket.address()\n  }\n\n  release () {\n    if (this._released) return\n\n    this._released = true\n    this._reset()\n\n    this._refs--\n    this._closeMaybe()\n  }\n}\n\nfunction noop () {}\n{\n  \"name\": \"hyperdht\",\n  \"version\": \"6.20.1\",\n  \"description\": \"The DHT powering Hyperswarm\",\n  \"main\": \"index.js\",\n  \"browser\": \"browser.js\",\n  \"bin\": {\n    \"hyperdht\": \"./bin.js\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"browser.js\",\n    \"testnet.js\",\n    \"bin.js\",\n    \"lib/**.js\"\n  ],\n  \"imports\": {\n    \"events\": {\n      \"bare\": \"bare-events\",\n      \"default\": \"events\"\n    }\n  },\n  \"dependencies\": {\n    \"@hyperswarm/secret-stream\": \"^6.6.2\",\n    \"b4a\": \"^1.3.1\",\n    \"bare-events\": \"^2.2.0\",\n    \"blind-relay\": \"^1.3.0\",\n    \"bogon\": \"^1.0.0\",\n    \"compact-encoding\": \"^2.4.1\",\n    \"compact-encoding-net\": \"^1.0.1\",\n    \"dht-rpc\": \"^6.15.1\",\n    \"hypercore-crypto\": \"^3.3.0\",\n    \"hypercore-id-encoding\": \"^1.2.0\",\n    \"noise-curve-ed\": \"^2.0.0\",\n    \"noise-handshake\": \"^3.0.0\",\n    \"record-cache\": \"^1.1.1\",\n    \"safety-catch\": \"^1.0.1\",\n    \"signal-promise\": \"^1.0.3\",\n    \"sodium-universal\": \"^4.0.0\",\n    \"streamx\": \"^2.16.1\",\n    \"unslab\": \"^1.3.0\",\n    \"xache\": \"^1.1.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.0.0\",\n    \"graceful-goodbye\": \"^1.3.0\",\n    \"newline-decoder\": \"^1.0.2\",\n    \"standard\": \"^17.1.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && node test/all.js\",\n    \"test:generate\": \"brittle -r test/all.js test/*.js\",\n    \"lint\": \"standard\",\n    \"integration\": \"brittle test/integration/*.js\",\n    \"end-to-end\": \"brittle test/end-to-end/*.js\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"directories\": {\n    \"lib\": \"lib\",\n    \"test\": \"test\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/hyperdht.git\"\n  },\n  \"keywords\": [],\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/hyperdht/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/hyperdht#readme\",\n  \"standard\": {\n    \"ignore\": [\n      \"**/*.mjs\"\n    ]\n  }\n}\n{\n  \"name\": \"hyperdispatch\",\n  \"version\": \"1.0.3\",\n  \"description\": \"Generate operations/endpoints using Hyperschema\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"runtime.js\",\n    \"lib/*.js\"\n  ],\n  \"scripts\": {\n    \"test\": \"standard && brittle test/index.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/hyperdispatch.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/hyperdispatch/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/hyperdispatch#readme\",\n  \"devDependencies\": {\n    \"brittle\": \"^3.7.0\",\n    \"standard\": \"^17.1.0\",\n    \"test-tmp\": \"^1.3.0\"\n  },\n  \"dependencies\": {\n    \"b4a\": \"^1.6.7\",\n    \"compact-encoding\": \"^2.16.0\",\n    \"generate-string\": \"^1.0.1\",\n    \"hyperschema\": \"^1.3.2\",\n    \"nanoassert\": \"^2.0.0\"\n  }\n}\nmodule.exports = {\n  c: require('compact-encoding'),\n  b4a: require('b4a'),\n  assert: require('nanoassert')\n}\n{\n  \"name\": \"hyperschema\",\n  \"version\": \"1.10.4\",\n  \"description\": \"Create registries of declarative compact-encoding schemas\",\n  \"files\": [\n    \"lib/*.js\",\n    \"builder.mjs\",\n    \"builder.cjs\",\n    \"runtime.mjs\",\n    \"runtime.cjs\"\n  ],\n  \"exports\": {\n    \"./package\": \"./package.json\",\n    \".\": {\n      \"import\": \"./builder.mjs\",\n      \"default\": \"./builder.cjs\"\n    },\n    \"./runtime\": {\n      \"import\": \"./runtime.mjs\",\n      \"default\": \"./runtime.cjs\"\n    }\n  },\n  \"imports\": {\n    \"fs\": {\n      \"bare\": \"bare-fs\",\n      \"default\": \"fs\"\n    },\n    \"path\": {\n      \"bare\": \"bare-path\",\n      \"default\": \"path\"\n    }\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test/index.js\",\n    \"test:bare\": \"standard && bare test/index.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/hyperschema.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/hyperschema/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/hyperschema#readme\",\n  \"dependencies\": {\n    \"bare-fs\": \"^4.0.1\",\n    \"compact-encoding\": \"^2.15.0\",\n    \"generate-object-property\": \"^2.0.0\",\n    \"generate-string\": \"^1.0.1\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.7.0\",\n    \"standard\": \"^17.1.0\",\n    \"test-tmp\": \"^1.3.0\"\n  }\n}\nmodule.exports = {\n  c: require('compact-encoding')\n}\nimport c from 'compact-encoding'\n\nexport { c }\nconst { EventEmitter } = require('events')\nconst DHT = require('hyperdht')\nconst spq = require('shuffled-priority-queue')\nconst b4a = require('b4a')\nconst unslab = require('unslab')\n\nconst PeerInfo = require('./lib/peer-info')\nconst RetryTimer = require('./lib/retry-timer')\nconst ConnectionSet = require('./lib/connection-set')\nconst PeerDiscovery = require('./lib/peer-discovery')\n\nconst MAX_PEERS = 64\nconst MAX_PARALLEL = 3\nconst MAX_CLIENT_CONNECTIONS = Infinity // TODO: Change\nconst MAX_SERVER_CONNECTIONS = Infinity\n\nconst ERR_MISSING_TOPIC = 'Topic is required and must be a 32-byte buffer'\nconst ERR_DESTROYED = 'Swarm has been destroyed'\nconst ERR_DUPLICATE = 'Duplicate connection'\n\nmodule.exports = class Hyperswarm extends EventEmitter {\n  constructor (opts = {}) {\n    super()\n    const {\n      seed,\n      relayThrough,\n      keyPair = DHT.keyPair(seed),\n      maxPeers = MAX_PEERS,\n      maxClientConnections = MAX_CLIENT_CONNECTIONS,\n      maxServerConnections = MAX_SERVER_CONNECTIONS,\n      maxParallel = MAX_PARALLEL,\n      firewall = allowAll\n    } = opts\n    this.keyPair = keyPair\n\n    this.dht = opts.dht || new DHT({\n      bootstrap: opts.bootstrap,\n      nodes: opts.nodes,\n      port: opts.port\n    })\n    this.server = this.dht.createServer({\n      firewall: this._handleFirewall.bind(this),\n      relayThrough: this._maybeRelayConnection.bind(this)\n    }, this._handleServerConnection.bind(this))\n\n    this.destroyed = false\n    this.suspended = false\n    this.maxPeers = maxPeers\n    this.maxClientConnections = maxClientConnections\n    this.maxServerConnections = maxServerConnections\n    this.maxParallel = maxParallel\n    this.relayThrough = relayThrough || null\n\n    this.connecting = 0\n    this.connections = new Set()\n    this.peers = new Map()\n    this.explicitPeers = new Set()\n    this.listening = null\n    this.stats = {\n      updates: 0,\n      connects: {\n        client: {\n          opened: 0,\n          closed: 0,\n          attempted: 0\n        },\n        server: {\n          // Note: there is no notion of 'attempts' for server connections\n          opened: 0,\n          closed: 0\n        }\n      }\n    }\n\n    this._discovery = new Map()\n    this._timer = new RetryTimer(this._requeue.bind(this), {\n      backoffs: opts.backoffs,\n      jitter: opts.jitter\n    })\n    this._queue = spq()\n\n    this._allConnections = new ConnectionSet()\n    this._pendingFlushes = []\n    this._flushTick = 0\n\n    this._drainingQueue = false\n    this._clientConnections = 0\n    this._serverConnections = 0\n    this._firewall = firewall\n\n    this.dht.on('network-change', this._handleNetworkChange.bind(this))\n    this.on('update', this._handleUpdate)\n  }\n\n  _maybeRelayConnection (force) {\n    if (!this.relayThrough) return null\n    return this.relayThrough(force)\n  }\n\n  _enqueue (peerInfo) {\n    if (peerInfo.queued) return\n    peerInfo.queued = true\n    peerInfo._flushTick = this._flushTick\n    this._queue.add(peerInfo)\n\n    this._attemptClientConnections()\n  }\n\n  _requeue (batch) {\n    if (this.suspended) return\n    for (const peerInfo of batch) {\n      peerInfo.waiting = false\n\n      if ((peerInfo._updatePriority() === false) || this._allConnections.has(peerInfo.publicKey) || peerInfo.queued) continue\n      peerInfo.queued = true\n      peerInfo._flushTick = this._flushTick\n      this._queue.add(peerInfo)\n    }\n\n    this._attemptClientConnections()\n  }\n\n  _flushMaybe (peerInfo) {\n    for (let i = 0; i < this._pendingFlushes.length; i++) {\n      const flush = this._pendingFlushes[i]\n      if (peerInfo._flushTick > flush.tick) continue\n      if (--flush.missing > 0) continue\n      flush.onflush(true)\n      this._pendingFlushes.splice(i--, 1)\n    }\n  }\n\n  _flushAllMaybe () {\n    if (this.connecting > 0 || (this._allConnections.size < this.maxPeers && this._clientConnections < this.maxClientConnections)) {\n      return false\n    }\n\n    while (this._pendingFlushes.length) {\n      const flush = this._pendingFlushes.pop()\n      flush.onflush(true)\n    }\n\n    return true\n  }\n\n  _shouldConnectExplicit () {\n    return !this.destroyed &&\n      !this.suspended &&\n      this.connecting < this.maxParallel\n  }\n\n  _shouldConnect () {\n    return !this.destroyed &&\n      !this.suspended &&\n      this.connecting < this.maxParallel &&\n      this._allConnections.size < this.maxPeers &&\n      this._clientConnections < this.maxClientConnections\n  }\n\n  _shouldRequeue (peerInfo) {\n    if (this.suspended) return false\n    if (peerInfo.explicit) return true\n    for (const topic of peerInfo.topics) {\n      if (this._discovery.has(b4a.toString(topic, 'hex')) && !this.destroyed) {\n        return true\n      }\n    }\n    return false\n  }\n\n  _connect (peerInfo, queued) {\n    if (peerInfo.banned || this._allConnections.has(peerInfo.publicKey)) {\n      if (queued) this._flushMaybe(peerInfo)\n      return\n    }\n\n    // TODO: Support async firewalling at some point.\n    if (this._handleFirewall(peerInfo.publicKey, null)) {\n      peerInfo.ban(true)\n      if (queued) this._flushMaybe(peerInfo)\n      return\n    }\n\n    const relayThrough = this._maybeRelayConnection(peerInfo.forceRelaying)\n    const conn = this.dht.connect(peerInfo.publicKey, {\n      relayAddresses: peerInfo.relayAddresses,\n      keyPair: this.keyPair,\n      relayThrough\n    })\n    this._allConnections.add(conn)\n\n    this.stats.connects.client.attempted++\n\n    this.connecting++\n    this._clientConnections++\n    let opened = false\n\n    const onerror = (err) => {\n      if (this.relayThrough && shouldForceRelaying(err.code)) {\n        peerInfo.forceRelaying = true\n        // Reset the attempts in order to fast connect to relay\n        peerInfo.attempts = 0\n      }\n    }\n\n    // Removed once a connection is opened\n    conn.on('error', onerror)\n\n    conn.on('open', () => {\n      opened = true\n      this.stats.connects.client.opened++\n\n      this._connectDone()\n      this.connections.add(conn)\n      conn.removeListener('error', onerror)\n      peerInfo._connected()\n      peerInfo.client = true\n      this.emit('connection', conn, peerInfo)\n      if (queued) this._flushMaybe(peerInfo)\n\n      this.emit('update')\n    })\n    conn.on('close', () => {\n      if (!opened) this._connectDone()\n      this.stats.connects.client.closed++\n\n      this.connections.delete(conn)\n      this._allConnections.delete(conn)\n      this._clientConnections--\n      peerInfo._disconnected()\n\n      peerInfo.waiting = this._shouldRequeue(peerInfo) && this._timer.add(peerInfo)\n      this._maybeDeletePeer(peerInfo)\n\n      if (!opened && queued) this._flushMaybe(peerInfo)\n\n      this._attemptClientConnections()\n\n      this.emit('update')\n    })\n\n    this.emit('update')\n  }\n\n  _connectDone () {\n    this.connecting--\n\n    if (this.connecting < this.maxParallel) this._attemptClientConnections()\n    if (this.connecting === 0) this._flushAllMaybe()\n  }\n\n  // Called when the PeerQueue indicates a connection should be attempted.\n  _attemptClientConnections () {\n    // Guard against re-entries - unsure if it still needed but doesn't hurt\n    if (this._drainingQueue) return\n    this._drainingQueue = true\n\n    for (const peerInfo of this.explicitPeers) {\n      if (!this._shouldConnectExplicit()) break\n      if (peerInfo.attempts >= 5 || (Date.now() - peerInfo.disconnectedTime) < peerInfo.attempts * 1000) continue\n      this._connect(peerInfo, false)\n    }\n\n    while (this._queue.length && this._shouldConnect()) {\n      const peerInfo = this._queue.shift()\n      peerInfo.queued = false\n      this._connect(peerInfo, true)\n    }\n    this._drainingQueue = false\n    if (this.connecting === 0) this._flushAllMaybe()\n  }\n\n  _handleFirewall (remotePublicKey, payload) {\n    if (this.suspended) return true\n    if (b4a.equals(remotePublicKey, this.keyPair.publicKey)) return true\n\n    const peerInfo = this.peers.get(b4a.toString(remotePublicKey, 'hex'))\n    if (peerInfo && peerInfo.banned) return true\n\n    return this._firewall(remotePublicKey, payload)\n  }\n\n  _handleServerConnectionSwap (existing, conn) {\n    let closed = false\n\n    existing.on('close', () => {\n      if (closed) return\n\n      conn.removeListener('error', noop)\n      conn.removeListener('close', onclose)\n\n      this._handleServerConnection(conn)\n    })\n\n    conn.on('error', noop)\n    conn.on('close', onclose)\n\n    function onclose () {\n      closed = true\n    }\n  }\n\n  // Called when the DHT receives a new server connection.\n  _handleServerConnection (conn) {\n    if (this.destroyed) {\n      // TODO: Investigate why a final server connection can be received after close\n      conn.on('error', noop)\n      return conn.destroy(ERR_DESTROYED)\n    }\n\n    const existing = this._allConnections.get(conn.remotePublicKey)\n\n    if (existing) {\n      // If both connections are from the same peer,\n      // - pick the new one if the existing stream is already established (has sent and received bytes),\n      //   because the other client must have lost that connection and be reconnecting\n      // - otherwise, pick the one thats expected to initiate in a tie break\n      const existingIsOutdated = existing.rawBytesRead > 0 && existing.rawBytesWritten > 0\n      const expectedInitiator = b4a.compare(conn.publicKey, conn.remotePublicKey) > 0\n      const keepNew = existingIsOutdated || (expectedInitiator === conn.isInitiator)\n\n      if (keepNew === false) {\n        existing.sendKeepAlive()\n        conn.on('error', noop)\n        conn.destroy(new Error(ERR_DUPLICATE))\n        return\n      }\n\n      existing.on('error', noop)\n      existing.destroy(new Error(ERR_DUPLICATE))\n      this._handleServerConnectionSwap(existing, conn)\n      return\n    }\n\n    // When reaching here, the connection will always be 'opened' next tick\n    this.stats.connects.server.opened++\n\n    const peerInfo = this._upsertPeer(conn.remotePublicKey, null)\n\n    this.connections.add(conn)\n    this._allConnections.add(conn)\n    this._serverConnections++\n\n    conn.on('close', () => {\n      this.connections.delete(conn)\n      this._allConnections.delete(conn)\n      this._serverConnections--\n      this.stats.connects.server.closed++\n\n      this._maybeDeletePeer(peerInfo)\n\n      this._attemptClientConnections()\n\n      this.emit('update')\n    })\n    peerInfo.client = false\n    this.emit('connection', conn, peerInfo)\n\n    this.emit('update')\n  }\n\n  _upsertPeer (publicKey, relayAddresses) {\n    if (b4a.equals(publicKey, this.keyPair.publicKey)) return null\n    const keyString = b4a.toString(publicKey, 'hex')\n    let peerInfo = this.peers.get(keyString)\n\n    if (peerInfo) {\n      peerInfo.relayAddresses = relayAddresses // new is always better\n      return peerInfo\n    }\n\n    peerInfo = new PeerInfo({\n      publicKey,\n      relayAddresses\n    })\n\n    this.peers.set(keyString, peerInfo)\n    return peerInfo\n  }\n\n  _handleUpdate () {\n    this.stats.updates++\n  }\n\n  _maybeDeletePeer (peerInfo) {\n    if (!peerInfo.shouldGC()) return\n\n    const hasActiveConn = this._allConnections.has(peerInfo.publicKey)\n    if (hasActiveConn) return\n\n    const keyString = b4a.toString(peerInfo.publicKey, 'hex')\n    this.peers.delete(keyString)\n  }\n\n  /*\n   * Called when a peer is actively discovered during a lookup.\n   *\n   * Three conditions:\n   *  1. Not a known peer -- insert into queue\n   *  2. A known peer with normal priority -- do nothing\n   *  3. A known peer with low priority -- bump priority, because it's been rediscovered\n   */\n  _handlePeer (peer, topic) {\n    const peerInfo = this._upsertPeer(peer.publicKey, peer.relayAddresses)\n    if (peerInfo) peerInfo._topic(topic)\n    if (!peerInfo || this._allConnections.has(peer.publicKey)) return\n    if (!peerInfo.prioritized || peerInfo.server) peerInfo._reset()\n    if (peerInfo._updatePriority()) {\n      this._enqueue(peerInfo)\n    }\n  }\n\n  async _handleNetworkChange () {\n    // prioritize figuring out if existing connections are dead\n    for (const conn of this._allConnections) {\n      conn.sendKeepAlive()\n    }\n\n    const refreshes = []\n\n    for (const discovery of this._discovery.values()) {\n      refreshes.push(discovery.refresh())\n    }\n\n    await Promise.allSettled(refreshes)\n  }\n\n  status (key) {\n    return this._discovery.get(b4a.toString(key, 'hex')) || null\n  }\n\n  listen () {\n    if (!this.listening) this.listening = this.server.listen(this.keyPair)\n    return this.listening\n  }\n\n  // Object that exposes a cancellation method (destroy)\n  // TODO: When you rejoin, it should reannounce + bump lookup priority\n  join (topic, opts = {}) {\n    if (!topic) throw new Error(ERR_MISSING_TOPIC)\n    topic = unslab(topic)\n\n    const topicString = b4a.toString(topic, 'hex')\n\n    let discovery = this._discovery.get(topicString)\n\n    if (discovery && !discovery.destroyed) {\n      return discovery.session(opts)\n    }\n\n    discovery = new PeerDiscovery(this, topic, {\n      wait: discovery ? discovery.destroy() : null,\n      suspended: this.suspended,\n      onpeer: peer => this._handlePeer(peer, topic)\n    })\n    this._discovery.set(topicString, discovery)\n    return discovery.session(opts)\n  }\n\n  // Returns a promise\n  async leave (topic) {\n    if (!topic) throw new Error(ERR_MISSING_TOPIC)\n    const topicString = b4a.toString(topic, 'hex')\n    if (!this._discovery.has(topicString)) return Promise.resolve()\n\n    const discovery = this._discovery.get(topicString)\n\n    try {\n      await discovery.destroy()\n    } catch {\n      // ignore, prop network\n    }\n\n    if (this._discovery.get(topicString) === discovery) {\n      this._discovery.delete(topicString)\n    }\n  }\n\n  joinPeer (publicKey) {\n    const peerInfo = this._upsertPeer(publicKey, null)\n    if (!peerInfo) return\n    if (!this.explicitPeers.has(peerInfo)) {\n      peerInfo.explicit = true\n      this.explicitPeers.add(peerInfo)\n    }\n    if (this._allConnections.has(publicKey)) return\n    if (peerInfo._updatePriority()) {\n      this._enqueue(peerInfo)\n    }\n  }\n\n  leavePeer (publicKey) {\n    const keyString = b4a.toString(publicKey, 'hex')\n    if (!this.peers.has(keyString)) return\n\n    const peerInfo = this.peers.get(keyString)\n    peerInfo.explicit = false\n    this.explicitPeers.delete(peerInfo)\n    this._maybeDeletePeer(peerInfo)\n  }\n\n  // Returns a promise\n  async flush () {\n    const allFlushed = [...this._discovery.values()].map(v => v.flushed())\n    await Promise.all(allFlushed)\n    if (this._flushAllMaybe()) return true\n    const pendingSize = this._allConnections.size - this.connections.size\n    if (!this._queue.length && !pendingSize) return true\n    return new Promise((resolve) => {\n      this._pendingFlushes.push({\n        onflush: resolve,\n        missing: this._queue.length + pendingSize,\n        tick: this._flushTick++\n      })\n    })\n  }\n\n  async clear () {\n    const cleared = Promise.allSettled([...this._discovery.values()].map(d => d.destroy()))\n    this._discovery.clear()\n    return cleared\n  }\n\n  async destroy ({ force } = {}) {\n    if (this.destroyed && !force) return\n    this.destroyed = true\n\n    this._timer.destroy()\n\n    if (!force) await this.clear()\n\n    await this.server.close()\n\n    while (this._pendingFlushes.length) {\n      const flush = this._pendingFlushes.pop()\n      flush.onflush(false)\n    }\n\n    await this.dht.destroy({ force })\n  }\n\n  async suspend () {\n    if (this.suspended) return\n\n    const promises = []\n\n    promises.push(this.server.suspend())\n\n    for (const discovery of this._discovery.values()) {\n      promises.push(discovery.suspend())\n    }\n\n    for (const connection of this._allConnections) {\n      connection.destroy()\n    }\n\n    this.suspended = true\n\n    await Promise.allSettled(promises)\n    await this.dht.suspend()\n  }\n\n  async resume () {\n    if (!this.suspended) return\n\n    await this.dht.resume()\n    await this.server.resume()\n\n    for (const discovery of this._discovery.values()) {\n      discovery.resume()\n    }\n\n    this._attemptClientConnections()\n    this.suspended = false\n  }\n\n  topics () {\n    return this._discovery.values()\n  }\n}\n\nfunction noop () { }\n\nfunction allowAll () {\n  return false\n}\n\nfunction shouldForceRelaying (code) {\n  return (code === 'HOLEPUNCH_ABORTED') ||\n    (code === 'HOLEPUNCH_DOUBLE_RANDOMIZED_NATS') ||\n    (code === 'REMOTE_NOT_HOLEPUNCHABLE')\n}\nmodule.exports = class BulkTimer {\n  constructor (time, fn) {\n    this._time = time\n    this._fn = fn\n    this._interval = null\n    this._next = []\n    this._pending = []\n    this._destroyed = false\n  }\n\n  destroy () {\n    if (this._destroyed) return\n    this._destroyed = true\n    clearInterval(this._interval)\n    this._interval = null\n  }\n\n  _ontick () {\n    if (!this._next.length && !this._pending.length) return\n    if (this._next.length) this._fn(this._next)\n    this._next = this._pending\n    this._pending = []\n  }\n\n  add (info) {\n    if (this._destroyed) return\n    if (!this._interval) {\n      this._interval = setInterval(this._ontick.bind(this), Math.floor(this._time * 0.66))\n    }\n\n    this._pending.push(info)\n  }\n}\nconst b4a = require('b4a')\n\nmodule.exports = class ConnectionSet {\n  constructor () {\n    this._byPublicKey = new Map()\n  }\n\n  [Symbol.iterator] () {\n    return this._byPublicKey.values()\n  }\n\n  get size () {\n    return this._byPublicKey.size\n  }\n\n  has (publicKey) {\n    return this._byPublicKey.has(b4a.toString(publicKey, 'hex'))\n  }\n\n  get (publicKey) {\n    return this._byPublicKey.get(b4a.toString(publicKey, 'hex'))\n  }\n\n  add (connection) {\n    this._byPublicKey.set(b4a.toString(connection.remotePublicKey, 'hex'), connection)\n  }\n\n  delete (connection) {\n    const keyString = b4a.toString(connection.remotePublicKey, 'hex')\n    const existing = this._byPublicKey.get(keyString)\n    if (existing !== connection) return\n    this._byPublicKey.delete(keyString)\n  }\n}\nconst safetyCatch = require('safety-catch')\nconst b4a = require('b4a')\n\nconst REFRESH_INTERVAL = 1000 * 60 * 10 // 10 min\nconst RANDOM_JITTER = 1000 * 60 * 2 // 2 min\nconst DELAY_GRACE_PERIOD = 1000 * 30 // 30s\n\nmodule.exports = class PeerDiscovery {\n  constructor (swarm, topic, { wait = null, suspended = false, onpeer = noop, onerror = safetyCatch }) {\n    this.swarm = swarm\n    this.topic = topic\n    this.isClient = false\n    this.isServer = false\n    this.destroyed = false\n    this.destroying = null\n    this.suspended = suspended\n\n    this._sessions = []\n    this._clientSessions = 0\n    this._serverSessions = 0\n\n    this._onpeer = onpeer\n    this._onerror = onerror\n\n    this._activeQuery = null\n    this._timer = null\n    this._currentRefresh = null\n    this._closestNodes = null\n    this._firstAnnounce = true\n    this._needsUnannounce = false\n    this._refreshes = 0\n    this._wait = wait\n  }\n\n  session ({ server = true, client = true, onerror = safetyCatch }) {\n    if (this.destroyed) throw new Error('PeerDiscovery is destroyed')\n    const session = new PeerDiscoverySession(this)\n    session.refresh({ server, client }).catch(onerror)\n    this._sessions.push(session)\n    return session\n  }\n\n  _refreshLater (eager) {\n    const jitter = Math.round(Math.random() * RANDOM_JITTER)\n    const delay = !eager\n      ? REFRESH_INTERVAL + jitter\n      : jitter\n\n    if (this._timer) clearTimeout(this._timer)\n\n    const startTime = Date.now()\n    this._timer = setTimeout(() => {\n      // If your laptop went to sleep, and is coming back online...\n      const overdue = Date.now() - startTime > delay + DELAY_GRACE_PERIOD\n      if (overdue) this._refreshLater(true)\n      else this.refresh().catch(this._onerror)\n    }, delay)\n  }\n\n  _isActive () {\n    return !this.destroyed && !this.suspended\n  }\n\n  // TODO: Allow announce to be an argument to this\n  // TODO: Maybe announce should be a setter?\n  async _refresh () {\n    if (this.suspended) return\n    const clock = ++this._refreshes\n\n    if (this._wait) {\n      await this._wait\n      this._wait = null\n      if (clock !== this._refreshes || !this._isActive()) return\n    }\n\n    const clear = this.isServer && this._firstAnnounce\n    if (clear) this._firstAnnounce = false\n\n    const opts = {\n      clear,\n      closestNodes: this._closestNodes\n    }\n\n    if (this.isServer) {\n      await this.swarm.listen()\n      // if a parallel refresh is happening, yield to the new one\n      if (clock !== this._refreshes || !this._isActive()) return\n      this._needsUnannounce = true\n    }\n\n    const announcing = this.isServer\n    const query = this._activeQuery = announcing\n      ? this.swarm.dht.announce(this.topic, this.swarm.keyPair, this.swarm.server.relayAddresses, opts)\n      : this._needsUnannounce\n        ? this.swarm.dht.lookupAndUnannounce(this.topic, this.swarm.keyPair, opts)\n        : this.swarm.dht.lookup(this.topic, opts)\n\n    try {\n      for await (const data of this._activeQuery) {\n        if (!this.isClient || !this._isActive()) continue\n        for (const peer of data.peers) {\n          this._onpeer(peer, data)\n        }\n      }\n    } catch (err) {\n      if (this._isActive()) throw err\n    } finally {\n      if (this._activeQuery === query) {\n        this._activeQuery = null\n        if (!this.destroyed && !this.suspended) this._refreshLater(false)\n      }\n    }\n\n    // This is set at the very end, when the query completes successfully.\n    this._closestNodes = query.closestNodes\n\n    if (clock !== this._refreshes) return\n\n    // In this is the latest query, unannounce has been fulfilled as well\n    if (!announcing) this._needsUnannounce = false\n  }\n\n  async refresh () {\n    if (this.destroyed) throw new Error('PeerDiscovery is destroyed')\n\n    const server = this._serverSessions > 0\n    const client = this._clientSessions > 0\n\n    if (this.suspended) return\n\n    if (server === this.isServer && client === this.isClient) {\n      if (this._currentRefresh) return this._currentRefresh\n      this._currentRefresh = this._refresh()\n    } else {\n      if (this._activeQuery) this._activeQuery.destroy()\n      this.isServer = server\n      this.isClient = client\n      this._currentRefresh = this._refresh()\n    }\n\n    const refresh = this._currentRefresh\n    try {\n      await refresh\n    } catch {\n      return false\n    } finally {\n      if (refresh === this._currentRefresh) {\n        this._currentRefresh = null\n      }\n    }\n\n    return true\n  }\n\n  async flushed () {\n    if (this.swarm.listening) await this.swarm.listening\n\n    try {\n      await this._currentRefresh\n      return true\n    } catch {\n      return false\n    }\n  }\n\n  async _destroyMaybe () {\n    if (this.destroyed) return\n\n    try {\n      if (this._sessions.length === 0) await this.swarm.leave(this.topic)\n      else if (this._serverSessions === 0 && this._needsUnannounce) await this.refresh()\n    } catch (err) { // ignore network failures here, as we are tearing down\n      safetyCatch(err)\n    }\n  }\n\n  destroy () {\n    if (this.destroying) return this.destroying\n    this.destroying = this._destroy()\n    return this.destroying\n  }\n\n  async _abort () {\n    if (this._wait) await this._wait\n\n    if (this._activeQuery) {\n      this._activeQuery.destroy()\n      this._activeQuery = null\n    }\n    if (this._timer) {\n      clearTimeout(this._timer)\n      this._timer = null\n    }\n\n    let nodes = this._closestNodes\n\n    if (this._currentRefresh) {\n      try {\n        await this._currentRefresh\n      } catch {\n        // If the destroy causes the refresh to fail, suppress it.\n      }\n    }\n\n    if (this._isActive()) return\n\n    if (!nodes) nodes = this._closestNodes\n    else if (this._closestNodes !== nodes) {\n      const len = nodes.length\n      for (const newer of this._closestNodes) {\n        if (newer.id && !hasNode(nodes, len, newer)) nodes.push(newer)\n      }\n    }\n\n    if (this._needsUnannounce) {\n      if (nodes && nodes.length) await this.swarm.dht.unannounce(this.topic, this.swarm.keyPair, { closestNodes: nodes, onlyClosestNodes: true })\n      this._needsUnannounce = false\n    }\n  }\n\n  _destroy () {\n    if (this.destroyed) return\n    this.destroyed = true\n    return this._abort()\n  }\n\n  async suspend () {\n    if (this.suspended) return\n    this.suspended = true\n    try {\n      await this._abort()\n    } catch {\n      // ignore\n    }\n  }\n\n  resume () {\n    if (!this.suspended) return\n    this.suspended = false\n    this.refresh().catch(noop)\n  }\n}\n\nclass PeerDiscoverySession {\n  constructor (discovery) {\n    this.discovery = discovery\n    this.isClient = false\n    this.isServer = false\n    this.destroyed = false\n  }\n\n  get swarm () {\n    return this.discovery.swarm\n  }\n\n  get topic () {\n    return this.discovery.topic\n  }\n\n  async refresh ({ client = this.isClient, server = this.isServer } = {}) {\n    if (this.destroyed) throw new Error('PeerDiscovery is destroyed')\n    if (!client && !server) throw new Error('Cannot refresh with neither client nor server option')\n\n    if (client !== this.isClient) {\n      this.isClient = client\n      this.discovery._clientSessions += client ? 1 : -1\n    }\n\n    if (server !== this.isServer) {\n      this.isServer = server\n      this.discovery._serverSessions += server ? 1 : -1\n    }\n\n    return this.discovery.refresh()\n  }\n\n  async flushed () {\n    return this.discovery.flushed()\n  }\n\n  async destroy () {\n    if (this.destroyed) return\n    this.destroyed = true\n\n    if (this.isClient) this.discovery._clientSessions--\n    if (this.isServer) this.discovery._serverSessions--\n\n    const index = this.discovery._sessions.indexOf(this)\n    const head = this.discovery._sessions.pop()\n\n    if (head !== this) this.discovery._sessions[index] = head\n\n    return this.discovery._destroyMaybe()\n  }\n}\n\nfunction hasNode (nodes, len, node) {\n  for (let i = 0; i < len; i++) {\n    const existing = nodes[i]\n    if (existing.id && b4a.equals(existing.id, node.id)) return true\n  }\n\n  return false\n}\n\nfunction noop () {}\nconst { EventEmitter } = require('events')\nconst b4a = require('b4a')\nconst unslab = require('unslab')\n\nconst MIN_CONNECTION_TIME = 15000\n\nconst VERY_LOW_PRIORITY = 0\nconst LOW_PRIORITY = 1\nconst NORMAL_PRIORITY = 2\nconst HIGH_PRIORITY = 3\nconst VERY_HIGH_PRIORITY = 4\n\nmodule.exports = class PeerInfo extends EventEmitter {\n  constructor ({ publicKey, relayAddresses }) {\n    super()\n\n    this.publicKey = unslab(publicKey)\n    this.relayAddresses = relayAddresses\n\n    this.reconnecting = true\n    this.proven = false\n    this.connectedTime = -1\n    this.disconnectedTime = 0\n    this.banned = false\n    this.tried = false\n    this.explicit = false\n    this.waiting = false\n    this.forceRelaying = false\n\n    // Set by the Swarm\n    this.queued = false\n    this.client = false\n    this.topics = [] // TODO: remove on next major (check with mafintosh for context)\n\n    this.attempts = 0\n    this.priority = NORMAL_PRIORITY\n\n    // Used by shuffled-priority-queue\n    this._index = 0\n\n    // Used for flush management\n    this._flushTick = 0\n\n    // Used for topic multiplexing\n    this._seenTopics = new Set()\n  }\n\n  get server () {\n    return !this.client\n  }\n\n  get prioritized () {\n    return this.priority >= NORMAL_PRIORITY\n  }\n\n  _getPriority () {\n    const peerIsStale = this.tried && !this.proven\n    if (peerIsStale || this.attempts > 3) return VERY_LOW_PRIORITY\n    if (this.attempts === 3) return LOW_PRIORITY\n    if (this.attempts === 2) return HIGH_PRIORITY\n    if (this.attempts === 1) return VERY_HIGH_PRIORITY\n    return NORMAL_PRIORITY\n  }\n\n  _connected () {\n    this.proven = true\n    this.connectedTime = Date.now()\n  }\n\n  _disconnected () {\n    this.disconnectedTime = Date.now()\n    if (this.connectedTime > -1) {\n      if ((this.disconnectedTime - this.connectedTime) >= MIN_CONNECTION_TIME) this.attempts = 0 // fast retry\n      this.connectedTime = -1\n    }\n    this.attempts++\n  }\n\n  _deprioritize () {\n    this.attempts = 3\n  }\n\n  _reset () {\n    this.client = false\n    this.proven = false\n    this.tried = false\n    this.attempts = 0\n  }\n\n  _updatePriority () {\n    if (this.explicit && this.attempts > 3) this._deprioritize()\n    if (this.banned || this.queued || this.attempts > 3) return false\n    this.priority = this._getPriority()\n    return true\n  }\n\n  _topic (topic) {\n    const topicString = b4a.toString(topic, 'hex')\n    if (this._seenTopics.has(topicString)) return\n    this._seenTopics.add(topicString)\n    this.topics.push(topic)\n    this.emit('topic', topic)\n  }\n\n  reconnect (val) {\n    this.reconnecting = !!val\n  }\n\n  ban (val) {\n    this.banned = !!val\n  }\n\n  shouldGC () {\n    return !(this.banned || this.queued || this.explicit || this.waiting)\n  }\n}\nconst BulkTimer = require('./bulk-timer')\n\nconst BACKOFF_JITTER = 500\nconst BACKOFF_S = 1000 + Math.round(BACKOFF_JITTER * Math.random())\nconst BACKOFF_M = 5000 + Math.round(2 * BACKOFF_JITTER * Math.random())\nconst BACKOFF_L = 15000 + Math.round(4 * BACKOFF_JITTER * Math.random())\nconst BACKOFF_X = 1000 * 60 * 10 + Math.round(240 * BACKOFF_JITTER * Math.random())\n\nmodule.exports = class RetryTimer {\n  constructor (push, { backoffs = [BACKOFF_S, BACKOFF_M, BACKOFF_L, BACKOFF_X], jitter = BACKOFF_JITTER } = {}) {\n    this.jitter = jitter\n    this.backoffs = backoffs\n\n    this._sTimer = new BulkTimer(backoffs[0] + Math.round(jitter * Math.random()), push)\n    this._mTimer = new BulkTimer(backoffs[1] + Math.round(jitter * Math.random()), push)\n    this._lTimer = new BulkTimer(backoffs[2] + Math.round(jitter * Math.random()), push)\n    this._xTimer = new BulkTimer(backoffs[3] + Math.round(jitter * Math.random()), push)\n  }\n\n  _selectRetryTimer (peerInfo) {\n    if (peerInfo.banned || !peerInfo.reconnecting) return null\n\n    if (peerInfo.attempts > 3) {\n      return peerInfo.explicit ? this._xTimer : null\n    }\n\n    if (peerInfo.attempts === 0) return this._sTimer\n    if (peerInfo.proven) {\n      switch (peerInfo.attempts) {\n        case 1: return this._sTimer\n        case 2: return this._mTimer\n        case 3: return this._lTimer\n      }\n    } else {\n      switch (peerInfo.attempts) {\n        case 1: return this._mTimer\n        case 2: return this._lTimer\n        case 3: return this._lTimer\n      }\n    }\n\n    return null\n  }\n\n  add (peerInfo) {\n    const timer = this._selectRetryTimer(peerInfo)\n    if (!timer) return false\n\n    timer.add(peerInfo)\n    return true\n  }\n\n  destroy () {\n    this._sTimer.destroy()\n    this._mTimer.destroy()\n    this._lTimer.destroy()\n    this._xTimer.destroy()\n  }\n}\n{\n  \"name\": \"hyperswarm\",\n  \"version\": \"4.11.1\",\n  \"description\": \"A distributed networking stack for connecting peers\",\n  \"files\": [\n    \"index.js\",\n    \"lib/**.js\"\n  ],\n  \"imports\": {\n    \"events\": {\n      \"bare\": \"bare-events\",\n      \"default\": \"events\"\n    }\n  },\n  \"dependencies\": {\n    \"b4a\": \"^1.3.1\",\n    \"bare-events\": \"^2.2.0\",\n    \"hyperdht\": \"^6.11.0\",\n    \"safety-catch\": \"^1.0.2\",\n    \"shuffled-priority-queue\": \"^2.1.0\",\n    \"unslab\": \"^1.3.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.0.2\",\n    \"hypercore-crypto\": \"^3.4.0\",\n    \"standard\": \"^17.0.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && node test/all.js\",\n    \"test:generate\": \"brittle -r test/all.js test/*.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/holepunchto/hyperswarm.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"contributors\": [\n    \"David Mark Clements (@davidmarkclem)\",\n    \"Andrew Osheroff (@andrewosh)\"\n  ],\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/hyperswarm/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/hyperswarm\"\n}\nconst objectState = new Map()\nconst traceFunctionSymbol = Symbol.for('hypertrace.traceFunction')\n\nclass Hypertrace {\n  constructor (ctx, opts = { }) {\n    if (!ctx) throw new Error('Context required, see hypertrace documentation')\n\n    const { parent, props } = opts\n    this.enabled = true\n    this.ctx = ctx\n    this.className = ctx.constructor.name\n    this.props = props || null\n    this.parentObject = !parent\n      ? null\n      : {\n          className: parent.className,\n          id: parent.objectId,\n          props: { ...parent.props },\n          ctx: parent.ctx\n        }\n\n    const currentObjectState = objectState.get(ctx.constructor) || { id: 0, stacktraceCache: new Map() }\n    currentObjectState.id += 1\n    this.objectId = currentObjectState.id\n    objectState.set(ctx.constructor, currentObjectState)\n  }\n\n  setParent (parentTracer) {\n    this.parentObject = !parentTracer\n      ? null\n      : {\n          className: parentTracer.className,\n          id: parentTracer.objectId,\n          props: { ...parentTracer.props },\n          ctx: parentTracer.ctx\n        }\n  }\n\n  trace (id, props) {\n    const traceFunction = globalThis[traceFunctionSymbol]\n    const shouldTrace = traceFunction\n    if (!shouldTrace) return\n\n    const hasTraceIdInArgs = typeof id === 'string'\n    if (!hasTraceIdInArgs) {\n      props = id\n      id = null\n    }\n\n    const currentObjectState = objectState.get(this.ctx.constructor)\n    let stack = id && currentObjectState.stacktraceCache.get(id)\n    const hasCachedStacktrace = !!stack\n    if (!hasCachedStacktrace) {\n      const errorToGetContext = new Error()\n      stack = errorToGetContext.stack\n      currentObjectState.stacktraceCache.set(id, stack)\n    }\n\n    const callLine = stack.split('\\n')[2]\n    const re = /.*at (.+) \\((?:file:\\/:\\/)?(.+):(\\d+):(\\d+)\\)/\n    const [, functionName, filename, line, column] = callLine.match(re)\n\n    const realFunctionName = functionName.split('.')[0] === this.className // Turn SomeModule.foobar => foobar\n      ? functionName.substr(functionName.indexOf('.') + 1)\n      : functionName\n\n    const object = {\n      className: this.className,\n      id: this.objectId,\n      props: this.props && { ...this.props },\n      ctx: this.ctx\n    }\n    const caller = {\n      functionName: realFunctionName,\n      filename,\n      line: Number(line),\n      column: Number(column),\n      props: props && { ...props }\n    }\n\n    traceFunction({\n      id: id || null,\n      object,\n      parentObject: this.parentObject,\n      caller\n    })\n  }\n}\n\nclass NoTracingClass {\n  constructor () {\n    this.enabled = false\n    this.ctx = null\n    this.className = null\n    this.props = null\n    this.parentObject = null\n    this.objectId = null\n  }\n\n  trace () { /* noop */ }\n\n  setParent () { /* noop */ }\n}\n\nconst noTracing = new NoTracingClass()\n\nmodule.exports = {\n  setTraceFunction: fn => {\n    globalThis[traceFunctionSymbol] = fn\n  },\n  clearTraceFunction: () => {\n    globalThis[traceFunctionSymbol] = undefined\n  },\n  createTracer: (ctx, opts) => {\n    // If the trace function is not set, then the returned class cannot trace.\n    // This is done for speed.\n    const isTracing = !!globalThis[traceFunctionSymbol]\n    if (!isTracing) return noTracing\n    return new Hypertrace(ctx, opts)\n  }\n}\n{\n  \"name\": \"hypertrace\",\n  \"version\": \"1.4.2\",\n  \"description\": \"Add tracing and insights to classes. Supports Prometheus/Grafana.\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"standard && node --expose-gc test/test.js\"\n  },\n  \"keywords\": [],\n  \"author\": \"Holepunch Inc\",\n  \"license\": \"Apache-2.0\",\n  \"devDependencies\": {\n    \"brittle\": \"^3.3.2\",\n    \"standard\": \"^17.1.0\"\n  }\n}\nconst b4a = require('b4a')\n\nconst EMPTY = b4a.alloc(0)\nconst MAX = b4a.from([0xff])\nconst BUFFER = {}\n\nBUFFER.preencode = function (state, buf) {\n  if (buf === null) buf = EMPTY\n\n  let i = 0\n  let extra = 3\n\n  while ((i = b4a.indexOf(buf, 0x00, i)) > -1) {\n    i++\n    extra++\n  }\n\n  state.end += buf.byteLength + extra\n}\n\nBUFFER.encode = function (state, buf) {\n  if (buf === null) buf = EMPTY\n\n  state.buffer[state.start++] = 0x00\n\n  let prev = 0\n  let i = 0\n\n  while ((i = b4a.indexOf(buf, 0x00, i)) > -1) {\n    const slice = buf.subarray(prev, ++i)\n\n    state.buffer.set(slice, state.start)\n    state.start += slice.byteLength\n    state.buffer[state.start++] = 0x02\n    prev = i\n  }\n\n  const slice = buf.subarray(prev)\n\n  state.buffer.set(slice, state.start)\n  state.start += slice.byteLength\n\n  state.buffer[state.start++] = 0x00\n  state.buffer[state.start++] = 0x01\n}\n\nBUFFER.decode = function (state) {\n  if (state.start >= state.end) throw new Error('Out of bounds')\n  if (state.buffer[state.start++] !== 0x00) throw new Error('Invalid start of string')\n\n  let escaped = null\n\n  let prev = state.start\n  let i = state.start\n\n  while ((i = b4a.indexOf(state.buffer, 0x00, i)) > -1) {\n    const next = ++i < state.end ? state.buffer[i] : 0x00\n\n    i++\n\n    if (next === 0x01) {\n      break\n    }\n\n    if (next === 0x02) {\n      if (escaped === null) escaped = []\n      escaped.push(state.buffer.subarray(prev, i - 1))\n      prev = i\n      continue\n    }\n\n    throw new Error('Unknown value in terminator')\n  }\n\n  if (i === -1) {\n    throw new Error('No terminator found')\n  }\n\n  state.start = i\n  const last = state.buffer.subarray(prev, i - 2)\n  if (escaped === null) return last\n\n  escaped.push(last)\n  return b4a.concat(escaped)\n}\n\n// TODO: can be optimised a lot\n\nconst STRING = {}\n\nSTRING.preencode = function (state, str) {\n  BUFFER.preencode(state, b4a.from(str || ''))\n}\n\nSTRING.encode = function (state, str) {\n  BUFFER.encode(state, b4a.from(str || ''))\n}\n\nSTRING.decode = function (state, str) {\n  return b4a.toString(BUFFER.decode(state))\n}\n\nconst UINT = {}\n\nUINT.preencode = function (state, n) {\n  state.end += n <= 0xfb ? 1 : n <= 0xffff ? 3 : n <= 0xffffffff ? 5 : (n === Infinity ? 1 : 9)\n}\n\nUINT.encode = function (state, n) {\n  if (n === Infinity) {\n    state.buffer[state.start++] = 0xff\n    return\n  }\n\n  if (n <= 0xfb) {\n    state.buffer[state.start++] = n\n    return\n  }\n\n  if (n <= 0xffff) {\n    state.buffer[state.start++] = 0xfc\n    state.buffer[state.start++] = n >>> 8\n    state.buffer[state.start++] = n\n    return\n  }\n\n  if (n <= 0xffffffff) {\n    state.buffer[state.start++] = 0xfd\n    encodeUint32(state, n)\n    return\n  }\n\n  if (Number.isSafeInteger(n)) {\n    state.buffer[state.start++] = 0xfe\n\n    const r = Math.floor(n / 0x100000000)\n    encodeUint32(state, r)\n    encodeUint32(state, n)\n    return\n  }\n\n  throw new Error('Invalid number ' + n)\n}\n\nUINT.decode = function (state) {\n  if (state.start >= state.end) throw new Error('Out of bounds')\n\n  const a = state.buffer[state.start++]\n\n  if (a <= 0xfb) return a\n\n  if (a === 0xfc) {\n    if (state.end - state.start < 2) throw new Error('Out of bounds')\n    return (\n      state.buffer[state.start++] * 0x100 +\n      state.buffer[state.start++]\n    )\n  }\n\n  if (a === 0xfd) {\n    return decodeUint32(state)\n  }\n\n  if (a === 0xfe) {\n    return (\n      decodeUint32(state) * 0x100000000 +\n      decodeUint32(state)\n    )\n  }\n\n  return Infinity\n}\n\nmodule.exports = class IndexEncoder {\n  constructor (encodings, { prefix = -1 } = {}) {\n    this.encodings = encodings\n    this.prefix = prefix\n  }\n\n  static BUFFER = BUFFER\n  static STRING = STRING\n  static UINT = UINT\n\n  static lookup (c) {\n    switch (c) {\n      case 'uint': return UINT\n      case 'uint8': return UINT\n      case 'uint16': return UINT\n      case 'uint24': return UINT\n      case 'uint32': return UINT\n      case 'uint40': return UINT\n      case 'uint48': return UINT\n      case 'uint56': return UINT\n      case 'uint64': return UINT\n      case 'string': return STRING\n      case 'utf8': return STRING\n      case 'ascii': return STRING\n      case 'hex': return STRING\n      case 'base64': return STRING\n      case 'fixed32': return BUFFER\n      case 'fixed64': return BUFFER\n      case 'buffer': return BUFFER\n    }\n\n    throw new Error('Unknown type')\n  }\n\n  encode (keys) {\n    return this._encode(keys, false)\n  }\n\n  _encode (keys, terminate) {\n    if (b4a.isBuffer(keys)) return keys\n\n    const state = { start: 0, end: 0, buffer: null }\n\n    if (this.prefix !== -1) UINT.preencode(state, this.prefix)\n    for (let i = 0; i < keys.length; i++) {\n      this.encodings[i].preencode(state, keys[i])\n    }\n\n    if (terminate && keys.length < this.encodings.length) {\n      state.end++\n    }\n\n    state.buffer = b4a.allocUnsafe(state.end)\n\n    if (this.prefix !== -1) UINT.encode(state, this.prefix)\n    for (let i = 0; i < keys.length; i++) {\n      this.encodings[i].encode(state, keys[i])\n    }\n\n    if (terminate && keys.length < this.encodings.length) {\n      state.buffer[state.start++] = MAX[0]\n    }\n\n    return state.buffer\n  }\n\n  decode (buffer) {\n    const state = { start: 0, end: buffer.byteLength, buffer }\n    const result = []\n\n    if (this.prefix !== -1) UINT.decode(state)\n    for (const enc of this.encodings) {\n      const key = state.start < state.end ? enc.decode(state) : (enc === UINT ? 0 : null)\n      result.push(key)\n    }\n\n    return result\n  }\n\n  encodeRange ({ gt, gte, lt, lte }) {\n    const range = {\n      gt: gt && this._encode(gt, true),\n      gte: gte && this._encode(gte, false),\n      lt: lt && this._encode(lt, false),\n      lte: lte && this._encode(lte, true)\n    }\n\n    if (this.prefix !== -1) {\n      if (!gt && !gte) range.gte = encodeUint(this.prefix)\n      if (!lt && !lte) range.lt = encodeUint(this.prefix + 1)\n    }\n\n    return range\n  }\n}\n\nfunction encodeUint (n) {\n  const state = { start: 0, end: 0, buffer: null }\n  UINT.preencode(state, n)\n  state.buffer = b4a.allocUnsafe(state.end)\n  UINT.encode(state, n)\n  return state.buffer\n}\n\nfunction encodeUint32 (state, n) {\n  state.buffer[state.start++] = n >>> 24\n  state.buffer[state.start++] = n >>> 16\n  state.buffer[state.start++] = n >>> 8\n  state.buffer[state.start++] = n\n}\n\nfunction decodeUint32 (state, n) {\n  if (state.end - state.start < 4) throw new Error('Out of bounds')\n  return (\n    state.buffer[state.start++] * 0x1000000 +\n    state.buffer[state.start++] * 0x10000 +\n    state.buffer[state.start++] * 0x100 +\n    state.buffer[state.start++]\n  )\n}\n{\n  \"name\": \"index-encoder\",\n  \"version\": \"3.3.2\",\n  \"description\": \"Encode multiple values into sorted keys\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"b4a\": \"^1.6.4\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.2.1\",\n    \"hyperbee\": \"^2.10.5\",\n    \"hypercore\": \"^10.9.2\",\n    \"random-access-memory\": \"^6.2.0\",\n    \"standard\": \"^17.0.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/holepunchto/index-encoder.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/index-encoder/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/index-encoder\"\n}\nconst b4a = require('b4a')\n\nmodule.exports = function isOptions (opts) {\n  return typeof opts === 'object' && opts && !b4a.isBuffer(opts)\n}\n{\n  \"name\": \"is-options\",\n  \"version\": \"1.0.2\",\n  \"description\": \"Easily check if input is an options map\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"b4a\": \"^1.1.1\"\n  },\n  \"devDependencies\": {\n    \"standard\": \"^11.0.1\",\n    \"tape\": \"^4.9.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && tape test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/is-options.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/is-options/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/is-options\"\n}\nconst { EventEmitter } = require('events')\n\nmodule.exports = class RoutingTable extends EventEmitter {\n  constructor (id, opts) {\n    if (!opts) opts = {}\n\n    super()\n\n    this.id = id\n    this.k = opts.k || 20\n    this.size = 0\n    this.rows = new Array(id.length * 8)\n  }\n\n  add (node) {\n    const i = this._diff(node.id)\n\n    let row = this.rows[i]\n\n    if (!row) {\n      row = this.rows[i] = new Row(this, i)\n      this.emit('row', row)\n    }\n\n    const len = row.nodes.length\n    if (!row.add(node, this.k)) return false\n\n    this.size += row.nodes.length - len\n    return true\n  }\n\n  remove (id) {\n    const i = this._diff(id)\n    const row = this.rows[i]\n    if (!row) return false\n    if (!row.remove(id)) return false\n    this.size--\n    return true\n  }\n\n  get (id) {\n    const i = this._diff(id)\n    const row = this.rows[i]\n    if (!row) return null\n    return row.get(id)\n  }\n\n  has (id) {\n    return this.get(id) !== null\n  }\n\n  random () {\n    let n = (Math.random() * this.size) | 0\n\n    for (let i = 0; i < this.rows.length; i++) {\n      const r = this.rows[i]\n      if (!r) continue\n      if (n < r.nodes.length) return r.nodes[n]\n      n -= r.nodes.length\n    }\n\n    return null\n  }\n\n  closest (id, k) {\n    if (!k) k = this.k\n\n    const result = []\n    const d = this._diff(id)\n\n    // push close nodes\n    for (let i = d; i >= 0 && result.length < k; i--) this._pushNodes(i, k, result)\n\n    // if we don't have enough close nodes, populate from other rows, re the paper\n    for (let i = d + 1; i < this.rows.length && result.length < k; i++) this._pushNodes(i, k, result)\n\n    return result\n  }\n\n  _pushNodes (i, k, result) {\n    const row = this.rows[i]\n    if (!row) return\n\n    const missing = Math.min(k - result.length, row.nodes.length)\n    for (let j = 0; j < missing; j++) result.push(row.nodes[j])\n  }\n\n  toArray () {\n    return this.closest(this.id, Infinity)\n  }\n\n  _diff (id) {\n    for (let i = 0; i < id.length; i++) {\n      const a = id[i]\n      const b = this.id[i]\n\n      if (a !== b) return i * 8 + Math.clz32(a ^ b) - 24\n    }\n\n    return this.rows.length - 1\n  }\n}\n\nclass Row extends EventEmitter {\n  constructor (table, index) {\n    super()\n\n    this.data = null // can be used be upstream for whatevs\n    this.byteOffset = index >> 3\n    this.index = index\n    this.table = table\n    this.nodes = []\n  }\n\n  add (node) {\n    const id = node.id\n\n    let l = 0\n    let r = this.nodes.length - 1\n\n    while (l <= r) {\n      const m = (l + r) >> 1\n      const c = this.compare(id, this.nodes[m].id)\n\n      if (c === 0) {\n        this.nodes[m] = node\n        return true\n      }\n\n      if (c < 0) r = m - 1\n      else l = m + 1\n    }\n\n    if (this.nodes.length >= this.table.k) {\n      this.emit('full', node)\n      return false\n    }\n\n    this.insert(l, node)\n    return true\n  }\n\n  remove (id) {\n    let l = 0\n    let r = this.nodes.length - 1\n\n    while (l <= r) {\n      const m = (l + r) >> 1\n      const c = this.compare(id, this.nodes[m].id)\n\n      if (c === 0) {\n        this.splice(m)\n        return true\n      }\n\n      if (c < 0) r = m - 1\n      else l = m + 1\n    }\n\n    return false\n  }\n\n  get (id) {\n    let l = 0\n    let r = this.nodes.length - 1\n\n    while (l <= r) {\n      const m = (l + r) >> 1\n      const node = this.nodes[m]\n      const c = this.compare(id, node.id)\n\n      if (c === 0) return node\n      if (c < 0) r = m - 1\n      else l = m + 1\n    }\n\n    return null\n  }\n\n  insert (i, node) {\n    this.nodes.push(node) // push node or null or whatevs, just trying to not be polymorphic\n    for (let j = this.nodes.length - 1; j > i; j--) this.nodes[j] = this.nodes[j - 1]\n    this.nodes[i] = node\n    this.emit('add', node)\n  }\n\n  splice (i) {\n    for (; i < this.nodes.length - 1; i++) this.nodes[i] = this.nodes[i + 1]\n    this.emit('remove', this.nodes.pop())\n  }\n\n  // very likely they diverge after a couple of bytes so a simple impl, like this is prop fastest vs Buffer.compare\n  compare (a, b) {\n    for (let i = this.byteOffset; i < a.length; i++) {\n      const ai = a[i]\n      const bi = b[i]\n      if (ai === bi) continue\n      return ai < bi ? -1 : 1\n    }\n    return 0\n  }\n}\n{\n  \"name\": \"kademlia-routing-table\",\n  \"version\": \"1.0.6\",\n  \"description\": \"XOR based routing table used for P2P networks such as a Kademlia DHT.\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"imports\": {\n    \"events\": {\n      \"bare\": \"bare-events\",\n      \"default\": \"events\"\n    }\n  },\n  \"dependencies\": {\n    \"bare-events\": \"^2.2.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.3.2\",\n    \"standard\": \"^17.1.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"keywords\": [\n    \"kademlia\",\n    \"p2p\",\n    \"k-bucket\",\n    \"k-buckets\",\n    \"xor\",\n    \"routing\",\n    \"distributed\",\n    \"systems\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/kademlia-routing-table.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/kademlia-routing-table/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/kademlia-routing-table\"\n}\nvar queueTick = require('queue-tick')\n\nvar mutexify = function () {\n  var queue = []\n  var used = null\n\n  var call = function () {\n    used(release)\n  }\n\n  var acquire = function (fn) {\n    if (used) return queue.push(fn)\n    used = fn\n    acquire.locked = true\n    queueTick(call)\n    return 0\n  }\n\n  acquire.locked = false\n\n  var release = function (fn, err, value) {\n    used = null\n    acquire.locked = false\n    if (queue.length) acquire(queue.shift())\n    if (fn) fn(err, value)\n  }\n\n  return acquire\n}\n\nmodule.exports = mutexify\n{\n  \"name\": \"mutexify\",\n  \"version\": \"1.4.0\",\n  \"description\": \"mutex lock for javascript\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"queue-tick\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"standard\": \"^14.3.3\",\n    \"tape\": \"^3.0.2\"\n  },\n  \"scripts\": {\n    \"test\": \"tape test.js\",\n    \"posttest\": \"npm run lint\",\n    \"lint\": \"standard\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/mutexify.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/mutexify/issues\"\n  },\n  \"keywords\": [\n    \"mutex\",\n    \"lock\"\n  ],\n  \"homepage\": \"https://github.com/mafintosh/mutexify\"\n}\nvar mutexify = require('.')\n\nvar mutexifyPromise = function () {\n  var lock = mutexify()\n\n  var acquire = function () {\n    return new Promise(lock)\n  }\n\n  Object.defineProperty(acquire, 'locked', {\n    get: function () { return lock.locked },\n    enumerable: true\n  })\n\n  return acquire\n}\n\nmodule.exports = mutexifyPromise\nmodule.exports = assert\n\nclass AssertionError extends Error {}\nAssertionError.prototype.name = 'AssertionError'\n\n/**\n * Minimal assert function\n * @param  {any} t Value to check if falsy\n * @param  {string=} m Optional assertion error message\n * @throws {AssertionError}\n */\nfunction assert (t, m) {\n  if (!t) {\n    var err = new AssertionError(m)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, assert)\n    throw err\n  }\n}\n{\n  \"name\": \"nanoassert\",\n  \"version\": \"2.0.0\",\n  \"description\": \"Nanoscale assertion module\",\n  \"main\": \"index.js\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"tape\": \"^4.9.1\"\n  },\n  \"scripts\": {\n    \"test\": \"tape test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/emilbayes/nanoassert.git\"\n  },\n  \"keywords\": [\n    \"assert\",\n    \"unassert\",\n    \"power-assert\",\n    \"tiny\",\n    \"nano\",\n    \"pico\"\n  ],\n  \"author\": \"Emil Bay <github@tixz.dk>\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/emilbayes/nanoassert/issues\"\n  },\n  \"homepage\": \"https://github.com/emilbayes/nanoassert#readme\"\n}\nmodule.exports = class NatSampler {\n  constructor () {\n    this.host = null\n    this.port = 0\n    this.size = 0\n\n    this._a = null\n    this._b = null\n    this._threshold = 0\n    this._top = 0\n    this._samples = []\n  }\n\n  add (host, port) {\n    const a = this._bump(host, port, 2)\n    const b = this._bump(host, 0, 1)\n\n    if (this._samples.length < 32) {\n      this.size++\n      this._threshold = this.size - (this.size < 4 ? 0 : this.size < 8 ? 1 : this.size < 12 ? 2 : 3)\n      this._samples.push(a, b)\n      this._top += 2\n    } else {\n      if (this._top === 32) this._top = 0\n\n      const oa = this._samples[this._top]\n      this._samples[this._top++] = a\n      oa.hits--\n\n      const ob = this._samples[this._top]\n      this._samples[this._top++] = b\n      ob.hits--\n    }\n\n    if (this._a === null || this._a.hits < a.hits) this._a = a\n    if (this._b === null || this._b.hits < b.hits) this._b = b\n\n    if (this._a.hits >= this._threshold) {\n      this.host = this._a.host\n      this.port = this._a.port\n    } else if (this._b.hits >= this._threshold) {\n      this.host = this._b.host\n      this.port = 0\n    } else {\n      this.host = null\n      this.port = 0\n    }\n\n    return a.hits\n  }\n\n  _bump (host, port, inc) {\n    for (let i = 0; i < 4; i++) {\n      const j = (this._top - inc - (2 * i)) & 31\n      if (j >= this._samples.length) return { host, port, hits: 1 }\n      const s = this._samples[j]\n      if (s.port === port && s.host === host) {\n        s.hits++\n        return s\n      }\n    }\n    return { host, port, hits: 1 }\n  }\n}\n{\n  \"name\": \"nat-sampler\",\n  \"version\": \"1.0.1\",\n  \"description\": \"Sample addresses to figure out if a host + port is consistent\",\n  \"main\": \"index.js\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"standard\": \"^16.0.3\",\n    \"tape\": \"^5.2.2\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/nat-sampler.git\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && tape test.js\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/nat-sampler/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/nat-sampler\"\n}\n/* eslint-disable camelcase */\nconst sodium = require('sodium-universal')\nconst assert = require('nanoassert')\nconst b4a = require('b4a')\n\nconst DHLEN = sodium.crypto_scalarmult_ed25519_BYTES\nconst PKLEN = sodium.crypto_scalarmult_ed25519_BYTES\nconst SCALARLEN = sodium.crypto_scalarmult_ed25519_BYTES\nconst SKLEN = sodium.crypto_sign_SECRETKEYBYTES\nconst ALG = 'Ed25519'\n\nmodule.exports = {\n  DHLEN,\n  PKLEN,\n  SCALARLEN,\n  SKLEN,\n  ALG,\n  name: ALG,\n  generateKeyPair,\n  dh\n}\n\nfunction generateKeyPair (privKey) {\n  if (privKey) return generateSeedKeyPair(privKey.subarray(0, 32))\n\n  const keyPair = {}\n  keyPair.secretKey = b4a.alloc(SKLEN)\n  keyPair.publicKey = b4a.alloc(PKLEN)\n\n  sodium.crypto_sign_keypair(keyPair.publicKey, keyPair.secretKey)\n  return keyPair\n}\n\nfunction generateSeedKeyPair (seed) {\n  const keyPair = {}\n  keyPair.secretKey = b4a.alloc(SKLEN)\n  keyPair.publicKey = b4a.alloc(PKLEN)\n\n  sodium.crypto_sign_seed_keypair(keyPair.publicKey, keyPair.secretKey, seed)\n  return keyPair\n}\n\nfunction dh (publicKey, { scalar, secretKey }) {\n  // tweaked keys expose scalar directly\n  if (!scalar) {\n    assert(secretKey.byteLength === SKLEN)\n\n    // libsodium stores seed not actual scalar\n    const sk = b4a.alloc(64)\n    sodium.crypto_hash_sha512(sk, secretKey.subarray(0, 32))\n    sk[0] &= 248\n    sk[31] &= 127\n    sk[31] |= 64\n\n    scalar = sk.subarray(0, 32)\n  }\n\n  assert(scalar.byteLength === SCALARLEN)\n  assert(publicKey.byteLength === PKLEN)\n\n  const output = b4a.alloc(DHLEN)\n\n  // we clamp if necessary above\n  sodium.crypto_scalarmult_ed25519_noclamp(\n    output,\n    scalar,\n    publicKey\n  )\n\n  return output\n}\n{\n  \"name\": \"noise-curve-ed\",\n  \"version\": \"2.0.1\",\n  \"description\": \"Ed25519 elliptic curve operations for [`noise-handshake`](https://github.com/chm-diederichs/noise-handshake)\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"npx standard && tape test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/chm-diederichs/noise-curve-ed.git\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/chm-diederichs/noise-curve-ed/issues\"\n  },\n  \"homepage\": \"https://github.com/chm-diederichs/noise-curve-ed#readme\",\n  \"dependencies\": {\n    \"b4a\": \"^1.1.0\",\n    \"nanoassert\": \"^2.0.0\",\n    \"sodium-universal\": \"^4.0.0\"\n  },\n  \"devDependencies\": {\n    \"hypercore-crypto-tweak\": \"github:holepunchto/hypercore-crypto-tweak\",\n    \"noise-handshake\": \"^3.0.0\",\n    \"standard\": \"^16.0.3\",\n    \"tape\": \"^5.2.2\"\n  }\n}\nconst sodium = require('sodium-universal')\nconst b4a = require('b4a')\n\nmodule.exports = class CipherState {\n  constructor (key) {\n    this.key = key || null\n    this.nonce = 0\n    this.CIPHER_ALG = 'ChaChaPoly'\n  }\n\n  initialiseKey (key) {\n    this.key = key\n    this.nonce = 0\n  }\n\n  setNonce (nonce) {\n    this.nonce = nonce\n  }\n\n  encrypt (plaintext, ad) {\n    if (!this.hasKey) return plaintext\n    if (!ad) ad = b4a.alloc(0)\n\n    const ciphertext = encryptWithAD(this.key, this.nonce, ad, plaintext)\n    this.nonce++\n\n    return ciphertext\n  }\n\n  decrypt (ciphertext, ad) {\n    if (!this.hasKey) return ciphertext\n    if (!ad) ad = b4a.alloc(0)\n\n    const plaintext = decryptWithAD(this.key, this.nonce, ad, ciphertext)\n    this.nonce++\n\n    return plaintext\n  }\n\n  get hasKey () {\n    return this.key !== null\n  }\n\n  _clear () {\n    sodium.sodium_memzero(this.key)\n    this.key = null\n    this.nonce = null\n  }\n\n  static get MACBYTES () {\n    return 16\n  }\n\n  static get NONCEBYTES () {\n    return 8\n  }\n\n  static get KEYBYTES () {\n    return 32\n  }\n}\n\nfunction encryptWithAD (key, counter, additionalData, plaintext) {\n  // for our purposes, additionalData will always be a pubkey so we encode from hex\n  if (!b4a.isBuffer(additionalData)) additionalData = b4a.from(additionalData, 'hex')\n  if (!b4a.isBuffer(plaintext)) plaintext = b4a.from(plaintext, 'hex')\n\n  const nonce = b4a.alloc(sodium.crypto_aead_chacha20poly1305_ietf_NPUBBYTES)\n  const view = new DataView(nonce.buffer, nonce.byteOffset, nonce.byteLength)\n  view.setUint32(4, counter, true)\n\n  const ciphertext = b4a.alloc(plaintext.byteLength + sodium.crypto_aead_chacha20poly1305_ietf_ABYTES)\n\n  sodium.crypto_aead_chacha20poly1305_ietf_encrypt(ciphertext, plaintext, additionalData, null, nonce, key)\n  return ciphertext\n}\n\nfunction decryptWithAD (key, counter, additionalData, ciphertext) {\n  // for our purposes, additionalData will always be a pubkey so we encode from hex\n  if (!b4a.isBuffer(additionalData)) additionalData = b4a.from(additionalData, 'hex')\n  if (!b4a.isBuffer(ciphertext)) ciphertext = b4a.from(ciphertext, 'hex')\n\n  const nonce = b4a.alloc(sodium.crypto_aead_chacha20poly1305_ietf_NPUBBYTES)\n  const view = new DataView(nonce.buffer, nonce.byteOffset, nonce.byteLength)\n  view.setUint32(4, counter, true)\n\n  const plaintext = b4a.alloc(ciphertext.byteLength - sodium.crypto_aead_chacha20poly1305_ietf_ABYTES)\n\n  sodium.crypto_aead_chacha20poly1305_ietf_decrypt(plaintext, null, ciphertext, additionalData, nonce, key)\n  return plaintext\n}\n/* eslint-disable camelcase */\nconst {\n  crypto_kx_SEEDBYTES,\n  crypto_kx_keypair,\n  crypto_kx_seed_keypair,\n  crypto_scalarmult_BYTES,\n  crypto_scalarmult_SCALARBYTES,\n  crypto_scalarmult,\n  crypto_scalarmult_base\n} = require('sodium-universal')\n\nconst assert = require('nanoassert')\nconst b4a = require('b4a')\n\nconst DHLEN = crypto_scalarmult_BYTES\nconst PKLEN = crypto_scalarmult_BYTES\nconst SKLEN = crypto_scalarmult_SCALARBYTES\nconst SEEDLEN = crypto_kx_SEEDBYTES\nconst ALG = '25519'\n\nmodule.exports = {\n  DHLEN,\n  PKLEN,\n  SKLEN,\n  SEEDLEN,\n  ALG,\n  generateKeyPair,\n  generateSeedKeyPair,\n  dh\n}\n\nfunction generateKeyPair (privKey) {\n  const keyPair = {}\n\n  keyPair.secretKey = privKey || b4a.alloc(SKLEN)\n  keyPair.publicKey = b4a.alloc(PKLEN)\n\n  if (privKey) {\n    crypto_scalarmult_base(keyPair.publicKey, keyPair.secretKey)\n  } else {\n    crypto_kx_keypair(keyPair.publicKey, keyPair.secretKey)\n  }\n\n  return keyPair\n}\n\nfunction generateSeedKeyPair (seed) {\n  assert(seed.byteLength === SKLEN)\n\n  const keyPair = {}\n  keyPair.secretKey = b4a.alloc(SKLEN)\n  keyPair.publicKey = b4a.alloc(PKLEN)\n\n  crypto_kx_seed_keypair(keyPair.publicKey, keyPair.secretKey, seed)\n  return keyPair\n}\n\nfunction dh (publicKey, { secretKey }) {\n  assert(secretKey.byteLength === SKLEN)\n  assert(publicKey.byteLength === PKLEN)\n\n  const output = b4a.alloc(DHLEN)\n\n  crypto_scalarmult(\n    output,\n    secretKey,\n    publicKey\n  )\n\n  return output\n}\nconst hmacBlake2b = require('./hmac')\nconst assert = require('nanoassert')\nconst b4a = require('b4a')\n\nconst HASHLEN = 64\n\nmodule.exports = {\n  hkdf,\n  HASHLEN\n}\n\n// HMAC-based Extract-and-Expand KDF\n// https://www.ietf.org/rfc/rfc5869.txt\n\nfunction hkdf (salt, inputKeyMaterial, info = '', length = 2 * HASHLEN) {\n  const pseudoRandomKey = hkdfExtract(salt, inputKeyMaterial)\n  const result = hkdfExpand(pseudoRandomKey, info, length)\n\n  const results = []\n  let offset = 0\n  while (offset < result.length) {\n    results.push(result.subarray(offset, offset + HASHLEN))\n    offset += HASHLEN\n  }\n  return results\n\n  function hkdfExtract (salt, inputKeyMaterial) {\n    return hmacDigest(salt, inputKeyMaterial)\n  }\n\n  function hkdfExpand (key, info, length) {\n    const T = [b4a.from(info)]\n    const lengthRatio = length / HASHLEN\n\n    for (let i = 0; i < lengthRatio; i++) {\n      const infoBuf = b4a.from(info)\n      const toHash = b4a.concat([T[i], infoBuf, b4a.from([i + 1])])\n\n      T[i + 1] = hmacDigest(key, toHash)\n    }\n\n    const result = b4a.concat(T.slice(1))\n    assert(result.byteLength === length, 'key expansion failed, length not as expected')\n\n    return result\n  }\n}\n\nfunction hmacDigest (key, input) {\n  const hmac = b4a.alloc(HASHLEN)\n  hmacBlake2b(hmac, input, key)\n\n  return hmac\n}\n/* eslint-disable camelcase */\nconst b4a = require('b4a')\nconst { sodium_memzero, crypto_generichash, crypto_generichash_batch } = require('sodium-universal')\n\nconst HASHLEN = 64\nconst BLOCKLEN = 128\nconst scratch = b4a.alloc(BLOCKLEN * 3)\nconst HMACKey = scratch.subarray(BLOCKLEN * 0, BLOCKLEN * 1)\nconst OuterKeyPad = scratch.subarray(BLOCKLEN * 1, BLOCKLEN * 2)\nconst InnerKeyPad = scratch.subarray(BLOCKLEN * 2, BLOCKLEN * 3)\n\n// Post-fill is done in the cases where someone caught an exception that\n// happened before we were able to clear data at the end\n\nmodule.exports = function hmac (out, data, key) {\n  if (key.byteLength > BLOCKLEN) {\n    crypto_generichash(HMACKey.subarray(0, HASHLEN), key)\n    sodium_memzero(HMACKey.subarray(HASHLEN))\n  } else {\n    // Covers key <= BLOCKLEN\n    HMACKey.set(key)\n    sodium_memzero(HMACKey.subarray(key.byteLength))\n  }\n\n  for (let i = 0; i < HMACKey.byteLength; i++) {\n    OuterKeyPad[i] = 0x5c ^ HMACKey[i]\n    InnerKeyPad[i] = 0x36 ^ HMACKey[i]\n  }\n  sodium_memzero(HMACKey)\n\n  crypto_generichash_batch(out, [InnerKeyPad].concat(data))\n  sodium_memzero(InnerKeyPad)\n  crypto_generichash_batch(out, [OuterKeyPad].concat(out))\n  sodium_memzero(OuterKeyPad)\n}\n\nmodule.exports.BYTES = HASHLEN\nmodule.exports.KEYBYTES = BLOCKLEN\nconst assert = require('nanoassert')\nconst b4a = require('b4a')\n\nconst SymmetricState = require('./symmetric-state')\nconst { HASHLEN } = require('./hkdf')\n\nconst PRESHARE_IS = Symbol('initiator static key preshared')\nconst PRESHARE_RS = Symbol('responder static key preshared')\n\nconst TOK_PSK = Symbol('psk')\n\nconst TOK_S = Symbol('s')\nconst TOK_E = Symbol('e')\n\nconst TOK_ES = Symbol('es')\nconst TOK_SE = Symbol('se')\nconst TOK_EE = Symbol('ee')\nconst TOK_SS = Symbol('ss')\n\nconst HANDSHAKES = Object.freeze({\n  NN: [\n    [TOK_E],\n    [TOK_E, TOK_EE]\n  ],\n  NNpsk0: [\n    [TOK_PSK, TOK_E],\n    [TOK_E, TOK_EE]\n  ],\n  XX: [\n    [TOK_E],\n    [TOK_E, TOK_EE, TOK_S, TOK_ES],\n    [TOK_S, TOK_SE]\n  ],\n  XXpsk0: [\n    [TOK_PSK, TOK_E],\n    [TOK_E, TOK_EE, TOK_S, TOK_ES],\n    [TOK_S, TOK_SE]\n  ],\n  IK: [\n    PRESHARE_RS,\n    [TOK_E, TOK_ES, TOK_S, TOK_SS],\n    [TOK_E, TOK_EE, TOK_SE]\n  ]\n})\n\nclass Writer {\n  constructor () {\n    this.size = 0\n    this.buffers = []\n  }\n\n  push (b) {\n    this.size += b.byteLength\n    this.buffers.push(b)\n  }\n\n  end () {\n    const all = b4a.alloc(this.size)\n    let offset = 0\n    for (const b of this.buffers) {\n      all.set(b, offset)\n      offset += b.byteLength\n    }\n    return all\n  }\n}\n\nclass Reader {\n  constructor (buf) {\n    this.offset = 0\n    this.buffer = buf\n  }\n\n  shift (n) {\n    const start = this.offset\n    const end = this.offset += n\n    if (end > this.buffer.byteLength) throw new Error('Insufficient bytes')\n    return this.buffer.subarray(start, end)\n  }\n\n  end () {\n    return this.shift(this.buffer.byteLength - this.offset)\n  }\n}\n\nmodule.exports = class NoiseState extends SymmetricState {\n  constructor (pattern, initiator, staticKeypair, opts = {}) {\n    super(opts)\n\n    this.s = staticKeypair || this.curve.generateKeyPair()\n    this.e = null\n\n    this.psk = null\n    if (opts && opts.psk) this.psk = opts.psk\n\n    this.re = null\n    this.rs = null\n\n    this.pattern = pattern\n    this.handshake = HANDSHAKES[this.pattern].slice()\n\n    this.isPskHandshake = !!this.psk && hasPskToken(this.handshake)\n\n    this.protocol = b4a.from([\n      'Noise',\n      this.pattern,\n      this.DH_ALG,\n      this.CIPHER_ALG,\n      'BLAKE2b'\n    ].join('_'))\n\n    this.initiator = initiator\n    this.complete = false\n\n    this.rx = null\n    this.tx = null\n    this.hash = null\n  }\n\n  initialise (prologue, remoteStatic) {\n    if (this.protocol.byteLength <= HASHLEN) this.digest.set(this.protocol)\n    else this.mixHash(this.protocol)\n\n    this.chainingKey = b4a.from(this.digest)\n\n    this.mixHash(prologue)\n\n    while (!Array.isArray(this.handshake[0])) {\n      const message = this.handshake.shift()\n\n      // handshake steps should be as arrays, only\n      // preshare tokens are provided otherwise\n      assert(message === PRESHARE_RS || message === PRESHARE_IS,\n        'Unexpected pattern')\n\n      const takeRemoteKey = this.initiator\n        ? message === PRESHARE_RS\n        : message === PRESHARE_IS\n\n      if (takeRemoteKey) this.rs = remoteStatic\n\n      const key = takeRemoteKey ? this.rs : this.s.publicKey\n      assert(key != null, 'Remote pubkey required')\n\n      this.mixHash(key)\n    }\n  }\n\n  final () {\n    const [k1, k2] = this.split()\n\n    this.tx = this.initiator ? k1 : k2\n    this.rx = this.initiator ? k2 : k1\n\n    this.complete = true\n    this.hash = this.getHandshakeHash()\n\n    this._clear()\n  }\n\n  recv (buf) {\n    const r = new Reader(buf)\n\n    for (const pattern of this.handshake.shift()) {\n      switch (pattern) {\n        case TOK_PSK :\n          this.mixKeyAndHash(this.psk)\n          break\n\n        case TOK_E :\n          this.re = r.shift(this.curve.PKLEN)\n          this.mixHash(this.re)\n          if (this.isPskHandshake) this.mixKeyNormal(this.re)\n          break\n\n        case TOK_S : {\n          const klen = this.hasKey ? this.curve.PKLEN + 16 : this.curve.PKLEN\n          this.rs = this.decryptAndHash(r.shift(klen))\n          break\n        }\n\n        case TOK_EE :\n        case TOK_ES :\n        case TOK_SE :\n        case TOK_SS : {\n          const useStatic = keyPattern(pattern, this.initiator)\n\n          const localKey = useStatic.local ? this.s : this.e\n          const remoteKey = useStatic.remote ? this.rs : this.re\n\n          this.mixKey(remoteKey, localKey)\n          break\n        }\n\n        default :\n          throw new Error('Unexpected message')\n      }\n    }\n\n    const payload = this.decryptAndHash(r.end())\n\n    if (!this.handshake.length) this.final()\n    return payload\n  }\n\n  send (payload = b4a.alloc(0)) {\n    const w = new Writer()\n\n    for (const pattern of this.handshake.shift()) {\n      switch (pattern) {\n        case TOK_PSK :\n          this.mixKeyAndHash(this.psk)\n          break\n\n        case TOK_E :\n          if (this.e === null) this.e = this.curve.generateKeyPair()\n          this.mixHash(this.e.publicKey)\n          if (this.isPskHandshake) this.mixKeyNormal(this.e.publicKey)\n          w.push(this.e.publicKey)\n          break\n\n        case TOK_S :\n          w.push(this.encryptAndHash(this.s.publicKey))\n          break\n\n        case TOK_ES :\n        case TOK_SE :\n        case TOK_EE :\n        case TOK_SS : {\n          const useStatic = keyPattern(pattern, this.initiator)\n\n          const localKey = useStatic.local ? this.s : this.e\n          const remoteKey = useStatic.remote ? this.rs : this.re\n\n          this.mixKey(remoteKey, localKey)\n          break\n        }\n\n        default :\n          throw new Error('Unexpected message')\n      }\n    }\n\n    w.push(this.encryptAndHash(payload))\n    const response = w.end()\n\n    if (!this.handshake.length) this.final()\n    return response\n  }\n\n  _clear () {\n    super._clear()\n\n    this.e.secretKey.fill(0)\n    this.e.publicKey.fill(0)\n\n    this.re.fill(0)\n\n    this.e = null\n    this.re = null\n  }\n}\n\nfunction keyPattern (pattern, initiator) {\n  const ret = {\n    local: false,\n    remote: false\n  }\n\n  switch (pattern) {\n    case TOK_EE:\n      return ret\n\n    case TOK_ES:\n      ret.local ^= !initiator\n      ret.remote ^= initiator\n      return ret\n\n    case TOK_SE:\n      ret.local ^= initiator\n      ret.remote ^= !initiator\n      return ret\n\n    case TOK_SS:\n      ret.local ^= 1\n      ret.remote ^= 1\n      return ret\n  }\n}\n\nfunction hasPskToken (handshake) {\n  return handshake.some(x => {\n    return Array.isArray(x) && x.indexOf(TOK_PSK) !== -1\n  })\n}\n{\n  \"name\": \"noise-handshake\",\n  \"version\": \"3.1.0\",\n  \"description\": \"\",\n  \"main\": \"noise.js\",\n  \"scripts\": {\n    \"test\": \"standard && tape test/*.js\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/chm-diederichs/noise-handshake.git\"\n  },\n  \"dependencies\": {\n    \"b4a\": \"^1.1.0\",\n    \"nanoassert\": \"^2.0.0\",\n    \"sodium-universal\": \"^4.0.0\"\n  },\n  \"devDependencies\": {\n    \"noise-protocol\": \"chm-diederichs/noise-protocol.git#xx-ephemeral-key\",\n    \"standard\": \"^16.0.3\",\n    \"tape\": \"^5.2.2\"\n  }\n}\nconst sodium = require('sodium-universal')\nconst assert = require('nanoassert')\nconst b4a = require('b4a')\nconst CipherState = require('./cipher')\nconst curve = require('./dh')\nconst { HASHLEN, hkdf } = require('./hkdf')\n\nmodule.exports = class SymmetricState extends CipherState {\n  constructor (opts = {}) {\n    super()\n\n    this.curve = opts.curve || curve\n    this.digest = b4a.alloc(HASHLEN)\n    this.chainingKey = null\n    this.offset = 0\n\n    this.DH_ALG = this.curve.ALG\n  }\n\n  mixHash (data) {\n    accumulateDigest(this.digest, data)\n  }\n\n  mixKeyAndHash (key) {\n    const [ck, tempH, tempK] = hkdf(this.chainingKey, key, '', 3 * HASHLEN)\n    this.chainingKey = ck\n    this.mixHash(tempH)\n    this.initialiseKey(tempK.subarray(0, 32))\n  }\n\n  mixKeyNormal (key) {\n    const [ck, tempK] = hkdf(this.chainingKey, key)\n    this.chainingKey = ck\n    this.initialiseKey(tempK.subarray(0, 32))\n  }\n\n  mixKey (remoteKey, localKey) {\n    const dh = this.curve.dh(remoteKey, localKey)\n    const hkdfResult = hkdf(this.chainingKey, dh)\n    this.chainingKey = hkdfResult[0]\n    this.initialiseKey(hkdfResult[1].subarray(0, 32))\n  }\n\n  encryptAndHash (plaintext) {\n    const ciphertext = this.encrypt(plaintext, this.digest)\n    accumulateDigest(this.digest, ciphertext)\n    return ciphertext\n  }\n\n  decryptAndHash (ciphertext) {\n    const plaintext = this.decrypt(ciphertext, this.digest)\n    accumulateDigest(this.digest, ciphertext)\n    return plaintext\n  }\n\n  getHandshakeHash (out) {\n    if (!out) return this.getHandshakeHash(b4a.alloc(HASHLEN))\n    assert(out.byteLength === HASHLEN, `output must be ${HASHLEN} bytes`)\n\n    out.set(this.digest)\n    return out\n  }\n\n  split () {\n    const res = hkdf(this.chainingKey, b4a.alloc(0))\n    return res.map(k => k.subarray(0, 32))\n  }\n\n  _clear () {\n    super._clear()\n\n    sodium.sodium_memzero(this.digest)\n    sodium.sodium_memzero(this.chainingKey)\n\n    this.digest = null\n    this.chainingKey = null\n    this.offset = null\n\n    this.curve = null\n  }\n\n  static get alg () {\n    return CipherState.alg + '_BLAKE2b'\n  }\n}\n\nfunction accumulateDigest (digest, input) {\n  const toHash = b4a.concat([digest, input])\n  sodium.crypto_generichash(digest, toHash)\n}\nvar varint = require('varint')\nvar svarint = require('signed-varint')\nvar b4a = require('b4a')\n\nexports.make = encoder\n\nexports.name = function (enc) {\n  var keys = Object.keys(exports)\n  for (var i = 0; i < keys.length; i++) {\n    if (exports[keys[i]] === enc) return keys[i]\n  }\n  return null\n}\n\nexports.skip = function (type, buffer, offset) {\n  switch (type) {\n    case 0:\n      varint.decode(buffer, offset)\n      return offset + varint.decode.bytes\n\n    case 1:\n      return offset + 8\n\n    case 2:\n      var len = varint.decode(buffer, offset)\n      return offset + varint.decode.bytes + len\n\n    case 3:\n    case 4:\n      throw new Error('Groups are not supported')\n\n    case 5:\n      return offset + 4\n  }\n\n  throw new Error('Unknown wire type: ' + type)\n}\n\nexports.bytes = encoder(2,\n  function encode (val, buffer, offset) {\n    var oldOffset = offset\n    var len = bufferLength(val)\n\n    varint.encode(len, buffer, offset)\n    offset += varint.encode.bytes\n\n    if (b4a.isBuffer(val)) b4a.copy(val, buffer, offset)\n    else b4a.write(buffer, val, offset, len)\n    offset += len\n\n    encode.bytes = offset - oldOffset\n    return buffer\n  },\n  function decode (buffer, offset) {\n    var oldOffset = offset\n\n    var len = varint.decode(buffer, offset)\n    offset += varint.decode.bytes\n\n    var val = buffer.subarray(offset, offset + len)\n    offset += val.length\n\n    decode.bytes = offset - oldOffset\n    return val\n  },\n  function encodingLength (val) {\n    var len = bufferLength(val)\n    return varint.encodingLength(len) + len\n  }\n)\n\nexports.string = encoder(2,\n  function encode (val, buffer, offset) {\n    var oldOffset = offset\n    var len = b4a.byteLength(val)\n\n    varint.encode(len, buffer, offset, 'utf-8')\n    offset += varint.encode.bytes\n\n    b4a.write(buffer, val, offset, len)\n    offset += len\n\n    encode.bytes = offset - oldOffset\n    return buffer\n  },\n  function decode (buffer, offset) {\n    var oldOffset = offset\n\n    var len = varint.decode(buffer, offset)\n    offset += varint.decode.bytes\n\n    var val = b4a.toString(buffer, 'utf-8', offset, offset + len)\n    offset += len\n\n    decode.bytes = offset - oldOffset\n    return val\n  },\n  function encodingLength (val) {\n    var len = b4a.byteLength(val)\n    return varint.encodingLength(len) + len\n  }\n)\n\nexports.bool = encoder(0,\n  function encode (val, buffer, offset) {\n    buffer[offset] = val ? 1 : 0\n    encode.bytes = 1\n    return buffer\n  },\n  function decode (buffer, offset) {\n    var bool = buffer[offset] > 0\n    decode.bytes = 1\n    return bool\n  },\n  function encodingLength () {\n    return 1\n  }\n)\n\nexports.int32 = encoder(0,\n  function encode (val, buffer, offset) {\n    varint.encode(val < 0 ? val + 4294967296 : val, buffer, offset)\n    encode.bytes = varint.encode.bytes\n    return buffer\n  },\n  function decode (buffer, offset) {\n    var val = varint.decode(buffer, offset)\n    decode.bytes = varint.decode.bytes\n    return val > 2147483647 ? val - 4294967296 : val\n  },\n  function encodingLength (val) {\n    return varint.encodingLength(val < 0 ? val + 4294967296 : val)\n  }\n)\n\nexports.int64 = encoder(0,\n  function encode (val, buffer, offset) {\n    if (val < 0) {\n      var last = offset + 9\n      varint.encode(val * -1, buffer, offset)\n      offset += varint.encode.bytes - 1\n      buffer[offset] = buffer[offset] | 0x80\n      while (offset < last - 1) {\n        offset++\n        buffer[offset] = 0xff\n      }\n      buffer[last] = 0x01\n      encode.bytes = 10\n    } else {\n      varint.encode(val, buffer, offset)\n      encode.bytes = varint.encode.bytes\n    }\n    return buffer\n  },\n  function decode (buffer, offset) {\n    var val = varint.decode(buffer, offset)\n    if (val >= Math.pow(2, 63)) {\n      var limit = 9\n      while (buffer[offset + limit - 1] === 0xff) limit--\n      limit = limit || 9\n      var subset = b4a.allocUnsafe(limit)\n      b4a.copy(buffer, subset, 0, offset, offset + limit)\n      subset[limit - 1] = subset[limit - 1] & 0x7f\n      val = -1 * varint.decode(subset, 0)\n      decode.bytes = 10\n    } else {\n      decode.bytes = varint.decode.bytes\n    }\n    return val\n  },\n  function encodingLength (val) {\n    return val < 0 ? 10 : varint.encodingLength(val)\n  }\n)\n\nexports.sint32 =\nexports.sint64 = encoder(0,\n  svarint.encode,\n  svarint.decode,\n  svarint.encodingLength\n)\n\nexports.uint32 =\nexports.uint64 =\nexports.enum =\nexports.varint = encoder(0,\n  varint.encode,\n  varint.decode,\n  varint.encodingLength\n)\n\n// we cannot represent these in javascript so we just use buffers\nexports.fixed64 =\nexports.sfixed64 = encoder(1,\n  function encode (val, buffer, offset) {\n    b4a.copy(val, buffer, offset)\n    encode.bytes = 8\n    return buffer\n  },\n  function decode (buffer, offset) {\n    var val = buffer.subarray(offset, offset + 8)\n    decode.bytes = 8\n    return val\n  },\n  function encodingLength () {\n    return 8\n  }\n)\n\nexports.double = encoder(1,\n  function encode (val, buffer, offset) {\n    b4a.writeDoubleLE(buffer, val, offset)\n    encode.bytes = 8\n    return buffer\n  },\n  function decode (buffer, offset) {\n    var val = b4a.readDoubleLE(buffer, offset)\n    decode.bytes = 8\n    return val\n  },\n  function encodingLength () {\n    return 8\n  }\n)\n\nexports.fixed32 = encoder(5,\n  function encode (val, buffer, offset) {\n    b4a.writeUInt32LE(buffer, val, offset)\n    encode.bytes = 4\n    return buffer\n  },\n  function decode (buffer, offset) {\n    var val = b4a.readUInt32LE(buffer, offset)\n    decode.bytes = 4\n    return val\n  },\n  function encodingLength () {\n    return 4\n  }\n)\n\nexports.sfixed32 = encoder(5,\n  function encode (val, buffer, offset) {\n    b4a.writeInt32LE(buffer, val, offset)\n    encode.bytes = 4\n    return buffer\n  },\n  function decode (buffer, offset) {\n    var val = b4a.readInt32LE(buffer, offset)\n    decode.bytes = 4\n    return val\n  },\n  function encodingLength () {\n    return 4\n  }\n)\n\nexports.float = encoder(5,\n  function encode (val, buffer, offset) {\n    b4a.writeFloatLE(buffer, val, offset)\n    encode.bytes = 4\n    return buffer\n  },\n  function decode (buffer, offset) {\n    var val = b4a.readFloatLE(buffer, offset)\n    decode.bytes = 4\n    return val\n  },\n  function encodingLength () {\n    return 4\n  }\n)\n\nfunction encoder (type, encode, decode, encodingLength) {\n  encode.bytes = decode.bytes = 0\n\n  return {\n    type: type,\n    encode: encode,\n    decode: decode,\n    encodingLength: encodingLength\n  }\n}\n\nfunction bufferLength (val) {\n  return b4a.isBuffer(val) ? val.length : b4a.byteLength(val)\n}\n{\n  \"name\": \"protocol-buffers-encodings\",\n  \"version\": \"1.2.0\",\n  \"description\": \"Base encodings for protocol-buffers\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"b4a\": \"^1.6.0\",\n    \"signed-varint\": \"^2.0.1\",\n    \"varint\": \"5.0.0\"\n  },\n  \"devDependencies\": {\n    \"standard\": \"^14.3.4\",\n    \"tape\": \"^5.0.1\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && tape test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/protocol-buffers-encodings.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/protocol-buffers-encodings/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/protocol-buffers-encodings\"\n}\nconst crypto = require('hypercore-crypto')\nconst Protomux = require('protomux')\nconst b4a = require('b4a')\nconst schema = require('./spec/hyperschema')\n\nconst [\n  NS_INITATOR,\n  NS_RESPONDER\n] = crypto.namespace('wakeup', 2)\n\nconst Handshake = schema.getEncoding('@wakeup/handshake')\nconst Announce = schema.getEncoding('@wakeup/announce')\nconst Lookup = schema.getEncoding('@wakeup/lookup')\nconst Info = schema.getEncoding('@wakeup/info')\n\nmodule.exports = class WakeupSwarm {\n  constructor (onwakeup = noop) {\n    this.sessions = new Map()\n    this.sessionsGC = new Set()\n    this.muxers = new Set()\n\n    this.onwakeup = onwakeup\n\n    this._gcInterval = null\n    this._gcBound = this._gc.bind(this)\n  }\n\n  session (capability, handlers) {\n    const id = handlers.discoveryKey || crypto.discoveryKey(capability)\n    const active = handlers.active !== false\n    const hex = b4a.toString(id, 'hex')\n\n    let w = this.sessions.get(hex)\n\n    if (w) {\n      w.handlers = handlers\n      if (active) w.active()\n      return w\n    }\n\n    w = new WakeupSession(this, id, capability, active, handlers)\n\n    this.sessions.set(hex, w)\n\n    for (const muxer of this.muxers) {\n      w._onopen(muxer, true)\n    }\n\n    return w\n  }\n\n  getSession (id) {\n    return this.sessions.get(b4a.toString(id, 'hex')) || null\n  }\n\n  addStream (stream) {\n    const noiseStream = stream.noiseStream || stream\n\n    if (!noiseStream.connected) {\n      noiseStream.once('open', this.addStream.bind(this, noiseStream))\n      return\n    }\n\n    const muxer = getMuxer(noiseStream)\n    muxer.pair({ protocol: 'wakeup' }, id => this._onpair(id, muxer))\n\n    this.muxers.add(muxer)\n    noiseStream.on('close', () => this.muxers.delete(muxer))\n\n    for (const w of this.sessions.values()) {\n      if (!w.isActive) continue\n      w._onopen(muxer, true)\n    }\n  }\n\n  _onActive (w) {\n    for (const m of this.muxers) {\n      w._onopen(m, false)\n    }\n  }\n\n  _addGC (session) {\n    if (session.destroyed) return\n    this.sessionsGC.add(session)\n    if (this._gcInterval === null) {\n      this._gcInterval = setInterval(this._gcBound, 2000)\n    }\n  }\n\n  _removeGC (session) {\n    this.sessionsGC.delete(session)\n    if (this.sessionsGC.size === 0 && this._gcInterval) {\n      clearInterval(this._gcInterval)\n      this._gcInterval = null\n    }\n  }\n\n  _gc () {\n    const destroy = []\n    for (const w of this.sessionsGC) {\n      w.idleTicks++\n      if (w.idleTicks >= 5) destroy.push(w)\n    }\n    for (const w of destroy) w.teardown()\n  }\n\n  destroy () {\n    if (this._gcInterval) clearInterval(this._gcInterval)\n    this._gcInterval = null\n\n    for (const w of this.sessions.values()) w.teardown()\n  }\n\n  async _onpair (id, stream) {\n    const hex = b4a.toString(id, 'hex')\n    const w = this.sessions.get(hex)\n    if (!w) return this.onwakeup(id, stream)\n    w._onopen(getMuxer(stream), false)\n  }\n}\n\nclass WakeupPeer {\n  constructor (session) {\n    this.index = 0\n    this.userData = null // for the user\n    this.clock = 0 // for the user, v useful to reduce traffic\n    this.pending = true\n    this.removed = false\n    this.session = session\n    this.channel = null\n    this.stream = null\n    this.wireLookup = null\n    this.wireAnnounce = null\n    this.wireInfo = null\n  }\n\n  unlink (list) {\n    const head = list.pop()\n    if (head === this) return\n    head.index = this.index\n    list[head.index] = head\n  }\n}\n\nclass WakeupSession {\n  constructor (state, id, capability, active, handlers) {\n    this.state = state\n    this.handlers = handlers\n    this.id = id\n    this.capability = capability\n    this.peers = []\n    this.pendingPeers = []\n    this.peersByStream = new Map()\n    this.activePeers = 0\n    this.isActive = active\n    this.idleTicks = 0\n    this.gcing = false\n    this.destroyed = false\n  }\n\n  active () {\n    if (this.isActive) return\n    this.idleTicks = 0\n    this.isActive = true\n    this._updateActive(true)\n  }\n\n  inactive () {\n    if (!this.isActive) return\n    this.isActive = false\n    this._updateActive(false)\n  }\n\n  destroy (force) {\n    this.inactive()\n    this.handlers = null\n    if (force) this.teardown()\n  }\n\n  _updateActive (active) {\n    const info = { active }\n\n    for (const peer of this.pendingPeers) peer.wireInfo.send(info)\n    for (const peer of this.peers) peer.wireInfo.send(info)\n\n    this._checkGC()\n\n    if (active) this.state._onActive(this)\n  }\n\n  getPeer (stream) {\n    return this.peersByStream.get(stream) || null\n  }\n\n  broadcastLookup (req) {\n    for (const peer of this.pendingPeers) {\n      this.lookup(peer, req)\n    }\n    for (const peer of this.peers) {\n      this.lookup(peer, req)\n    }\n  }\n\n  lookupByStream (stream, req) {\n    const peer = this.peersByStream.get(stream)\n    if (peer) this.lookup(peer, req)\n  }\n\n  lookup (peer, req) {\n    peer.wireLookup.send(req || { hash: null })\n  }\n\n  announceByStream (stream, wakeup) {\n    const peer = this.peersByStream.get(stream)\n    if (peer && !peer.pending) this.announce(peer, wakeup)\n  }\n\n  announce (peer, wakeup) {\n    peer.wireAnnounce.send(wakeup)\n  }\n\n  teardown () {\n    if (this.destroyed) return\n    this.destroyed = true\n    this.handlers = null\n\n    for (let i = this.peers.length - 1; i >= 0; i--) {\n      this.peers[i].channel.close()\n    }\n\n    for (let i = this.pendingPeers.length - 1; i >= 0; i--) {\n      this.pendingPeers[i].channel.close()\n    }\n\n    const hex = b4a.toString(this.id, 'hex')\n\n    this.gcing = false\n    this.state.sessions.delete(hex)\n    this.state._removeGC(this)\n  }\n\n  addStream (stream) {\n    this._onopen(getMuxer(stream), false)\n  }\n\n  _proveCapabilityTo (stream) {\n    return this._makeCapability(stream.isInitiator, stream.handshakeHash)\n  }\n\n  _makeCapability (isInitiator, handshakeHash) {\n    return crypto.hash([isInitiator ? NS_INITATOR : NS_RESPONDER, this.capability, handshakeHash])\n  }\n\n  _addPeer (peer, open) {\n    if (!b4a.equals(open.capability, this._makeCapability(!peer.stream.isInitiator, peer.stream.handshakeHash))) {\n      peer.channel.close()\n      return\n    }\n\n    if (peer.pending) {\n      peer.unlink(this.pendingPeers)\n    }\n\n    peer.active = open.active\n    peer.pending = false\n    peer.index = this.peers.push(peer) - 1\n\n    if (peer.active) {\n      this.activePeers++\n      this._checkGC()\n    }\n\n    if (this.handlers && this.handlers.onpeeradd) this.handlers.onpeeradd(peer, this)\n  }\n\n  _checkGC () {\n    const shouldGC = this.isActive === false && this.activePeers === 0\n\n    if (shouldGC) {\n      if (!this.gcing) {\n        this.gcing = true\n        this.state._addGC(this)\n      }\n    } else {\n      if (this.gcing) {\n        this.gcing = false\n        this.state._removeGC(this)\n      }\n    }\n  }\n\n  _removePeer (peer) {\n    peer.removed = true\n    this.peersByStream.delete(peer.stream)\n\n    if (peer.pending) {\n      peer.unlink(this.pendingPeers)\n      return\n    }\n\n    if (peer.active) {\n      this.activePeers--\n      this._checkGC()\n    }\n\n    peer.unlink(this.peers)\n\n    if (this.handlers && this.handlers.onpeerremove) this.handlers.onpeerremove(peer, this)\n  }\n\n  _onannounce (wakeup, peer) {\n    if (this.handlers && this.handlers.onannounce) this.handlers.onannounce(wakeup, peer, this)\n  }\n\n  _onlookup (req, peer) {\n    if (this.handlers && this.handlers.onlookup) this.handlers.onlookup(req, peer, this)\n  }\n\n  _oninfo (info, peer) {\n    if (info.active) {\n      if (!peer.active) {\n        peer.active = true\n        this.activePeers++\n        this._checkGC()\n      }\n    } else {\n      if (peer.active) {\n        peer.active = false\n        this.activePeers--\n        this._checkGC()\n      }\n    }\n  }\n\n  _onopen (muxer, unique) {\n    if (!unique && this.peersByStream.has(muxer.stream)) return\n\n    const peer = new WakeupPeer(this)\n    const ch = muxer.createChannel({\n      userData: peer,\n      protocol: 'wakeup',\n      id: this.id,\n      handshake: Handshake,\n      messages: [\n        { encoding: Lookup, onmessage: onlookup },\n        { encoding: Announce, onmessage: onannounce },\n        { encoding: Info, onmessage: onchannelinfo }\n      ],\n      onopen: onchannelopen,\n      onclose: onchannelclose\n    })\n\n    if (!ch) return\n\n    peer.channel = ch\n    peer.stream = muxer.stream\n\n    peer.wireLookup = ch.messages[0]\n    peer.wireAnnounce = ch.messages[1]\n    peer.wireInfo = ch.messages[2]\n\n    peer.index = this.pendingPeers.push(peer) - 1\n    this.peersByStream.set(muxer.stream, peer)\n\n    ch.open({\n      version: 0,\n      capability: this._proveCapabilityTo(muxer.stream),\n      active: this.isActive\n    })\n  }\n}\n\nfunction onchannelopen (open, channel) {\n  const peer = channel.userData\n  peer.session._addPeer(peer, open)\n}\n\nfunction onchannelclose (close, channel) {\n  const peer = channel.userData\n  peer.session._removePeer(peer)\n}\n\nfunction onlookup (req, channel) {\n  const peer = channel.userData\n  peer.session._onlookup(req, peer)\n}\n\nfunction onannounce (wakeup, channel) {\n  const peer = channel.userData\n  peer.session._onannounce(wakeup, peer)\n}\n\nfunction onchannelinfo (info, channel) {\n  const peer = channel.userData\n  peer.session._oninfo(info, peer)\n}\n\nfunction getMuxer (stream) {\n  if (Protomux.isProtomux(stream)) return stream\n  if (stream.noiseStream.userData) return stream.noiseStream.userData\n  const mux = Protomux.from(stream.noiseStream)\n  stream.noiseStream.userData = mux\n  return mux\n}\n\nfunction noop () {}\n{\n  \"name\": \"protomux-wakeup\",\n  \"version\": \"2.2.2\",\n  \"description\": \"Wakeup protocol over protomux\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"b4a\": \"^1.6.7\",\n    \"hypercore-crypto\": \"^3.5.0\",\n    \"hyperschema\": \"^1.10.4\",\n    \"protomux\": \"^3.10.1\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"spec/hyperschema/*.js\"\n  ],\n  \"scripts\": {\n    \"test\": \"standard\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/holepunchto/protomux-wakeup.git\"\n  },\n  \"author\": \"Holepunch Inc.\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/protomux-wakeup/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/protomux-wakeup\",\n  \"devDependencies\": {\n    \"standard\": \"^17.1.2\"\n  }\n}\n// This file is autogenerated by the hyperschema compiler\n// Schema Version: 1\n/* eslint-disable camelcase */\n/* eslint-disable quotes */\n\nconst VERSION = 1\nconst { c } = require('hyperschema/runtime')\n\n// eslint-disable-next-line no-unused-vars\nlet version = VERSION\n\n// @wakeup/info\nconst encoding0 = {\n  preencode (state, m) {\n    state.end++ // max flag is 1 so always one byte\n  },\n  encode (state, m) {\n    const flags = m.active ? 1 : 0\n\n    c.uint.encode(state, flags)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n\n    return {\n      active: (flags & 1) !== 0\n    }\n  }\n}\n\n// @wakeup/handshake\nconst encoding1 = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.version)\n    c.fixed32.preencode(state, m.capability)\n    state.end++ // max flag is 1 so always one byte\n  },\n  encode (state, m) {\n    const flags = m.active ? 1 : 0\n\n    c.uint.encode(state, m.version)\n    c.fixed32.encode(state, m.capability)\n    c.uint.encode(state, flags)\n  },\n  decode (state) {\n    const r0 = c.uint.decode(state)\n    const r1 = c.fixed32.decode(state)\n    const flags = c.uint.decode(state)\n\n    return {\n      version: r0,\n      capability: r1,\n      active: (flags & 1) !== 0\n    }\n  }\n}\n\n// @wakeup/writer\nconst encoding2 = {\n  preencode (state, m) {\n    c.fixed32.preencode(state, m.key)\n    c.uint.preencode(state, m.length)\n  },\n  encode (state, m) {\n    c.fixed32.encode(state, m.key)\n    c.uint.encode(state, m.length)\n  },\n  decode (state) {\n    const r0 = c.fixed32.decode(state)\n    const r1 = c.uint.decode(state)\n\n    return {\n      key: r0,\n      length: r1\n    }\n  }\n}\n\n// @wakeup/announce\nconst encoding3 = c.array(encoding2)\n\n// @wakeup/lookup\nconst encoding4 = {\n  preencode (state, m) {\n    state.end++ // max flag is 1 so always one byte\n\n    if (m.hash) c.fixed32.preencode(state, m.hash)\n  },\n  encode (state, m) {\n    const flags = m.hash ? 1 : 0\n\n    c.uint.encode(state, flags)\n\n    if (m.hash) c.fixed32.encode(state, m.hash)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n\n    return {\n      hash: (flags & 1) !== 0 ? c.fixed32.decode(state) : null\n    }\n  }\n}\n\nfunction setVersion (v) {\n  version = v\n}\n\nfunction encode (name, value, v = VERSION) {\n  version = v\n  return c.encode(getEncoding(name), value)\n}\n\nfunction decode (name, buffer, v = VERSION) {\n  version = v\n  return c.decode(getEncoding(name), buffer)\n}\n\nfunction getEnum (name) {\n  switch (name) {\n    default: throw new Error('Enum not found ' + name)\n  }\n}\n\nfunction getEncoding (name) {\n  switch (name) {\n    case '@wakeup/info': return encoding0\n    case '@wakeup/handshake': return encoding1\n    case '@wakeup/writer': return encoding2\n    case '@wakeup/announce': return encoding3\n    case '@wakeup/lookup': return encoding4\n    default: throw new Error('Encoder not found ' + name)\n  }\n}\n\nfunction getStruct (name, v = VERSION) {\n  const enc = getEncoding(name)\n  return {\n    preencode (state, m) {\n      version = v\n      enc.preencode(state, m)\n    },\n    encode (state, m) {\n      version = v\n      enc.encode(state, m)\n    },\n    decode (state) {\n      version = v\n      return enc.decode(state)\n    }\n  }\n}\n\nconst resolveStruct = getStruct // compat\n\nmodule.exports = { resolveStruct, getStruct, getEnum, getEncoding, encode, decode, setVersion, version }\nconst b4a = require('b4a')\nconst c = require('compact-encoding')\nconst queueTick = require('queue-tick')\nconst safetyCatch = require('safety-catch')\nconst unslab = require('unslab')\n\nconst MAX_BUFFERED = 32768\nconst MAX_BACKLOG = Infinity // TODO: impl \"open\" backpressure\nconst MAX_BATCH = 8 * 1024 * 1024\n\nclass Channel {\n  constructor (mux, info, userData, protocol, aliases, id, handshake, messages, onopen, onclose, ondestroy, ondrain) {\n    this.userData = userData\n    this.protocol = protocol\n    this.aliases = aliases\n    this.id = id\n    this.handshake = null\n    this.messages = []\n\n    this.opened = false\n    this.closed = false\n    this.destroyed = false\n\n    this.onopen = onopen\n    this.onclose = onclose\n    this.ondestroy = ondestroy\n    this.ondrain = ondrain\n\n    this._handshake = handshake\n    this._mux = mux\n    this._info = info\n    this._localId = 0\n    this._remoteId = 0\n    this._active = 0\n    this._extensions = null\n\n    this._decBound = this._dec.bind(this)\n    this._decAndDestroyBound = this._decAndDestroy.bind(this)\n\n    this._openedPromise = null\n    this._openedResolve = null\n\n    this._destroyedPromise = null\n    this._destroyedResolve = null\n\n    for (const m of messages) this.addMessage(m)\n  }\n\n  get drained () {\n    return this._mux.drained\n  }\n\n  fullyOpened () {\n    if (this.opened) return Promise.resolve(true)\n    if (this.closed) return Promise.resolve(false)\n    if (this._openedPromise) return this._openedPromise\n\n    this._openedPromise = new Promise((resolve) => { this._openedResolve = resolve })\n    return this._openedPromise\n  }\n\n  fullyClosed () {\n    if (this.destroyed) return Promise.resolve()\n    if (this._destroyedPromise) return this._destroyedPromise\n\n    this._destroyedPromise = new Promise((resolve) => { this._destroyedResolve = resolve })\n    return this._destroyedPromise\n  }\n\n  open (handshake) {\n    const id = this._mux._free.length > 0\n      ? this._mux._free.pop()\n      : this._mux._local.push(null) - 1\n\n    this._info.opened++\n    this._info.lastChannel = this\n    this._localId = id + 1\n    this._mux._local[id] = this\n\n    if (this._remoteId === 0) {\n      this._info.outgoing.push(this._localId)\n    }\n\n    const state = { buffer: null, start: 2, end: 2 }\n\n    c.uint.preencode(state, this._localId)\n    c.string.preencode(state, this.protocol)\n    c.buffer.preencode(state, this.id)\n    if (this._handshake) this._handshake.preencode(state, handshake)\n\n    state.buffer = this._mux._alloc(state.end)\n\n    state.buffer[0] = 0\n    state.buffer[1] = 1\n    c.uint.encode(state, this._localId)\n    c.string.encode(state, this.protocol)\n    c.buffer.encode(state, this.id)\n    if (this._handshake) this._handshake.encode(state, handshake)\n\n    this._mux._write0(state.buffer)\n  }\n\n  _dec () {\n    if (--this._active === 0 && this.closed === true) this._destroy()\n  }\n\n  _decAndDestroy (err) {\n    this._dec()\n    this._mux._safeDestroy(err)\n  }\n\n  _fullyOpenSoon () {\n    this._mux._remote[this._remoteId - 1].session = this\n    queueTick(this._fullyOpen.bind(this))\n  }\n\n  _fullyOpen () {\n    if (this.opened === true || this.closed === true) return\n\n    const remote = this._mux._remote[this._remoteId - 1]\n\n    this.opened = true\n    this.handshake = this._handshake ? this._handshake.decode(remote.state) : null\n    this._track(this.onopen(this.handshake, this))\n\n    remote.session = this\n    remote.state = null\n    if (remote.pending !== null) this._drain(remote)\n\n    this._resolveOpen(true)\n  }\n\n  _resolveOpen (opened) {\n    if (this._openedResolve !== null) {\n      this._openedResolve(opened)\n      this._openedResolve = this._openedPromise = null\n    }\n  }\n\n  _resolveDestroyed () {\n    if (this._destroyedResolve !== null) {\n      this._destroyedResolve()\n      this._destroyedResolve = this._destroyedPromise = null\n    }\n  }\n\n  _drain (remote) {\n    for (let i = 0; i < remote.pending.length; i++) {\n      const p = remote.pending[i]\n      this._mux._buffered -= byteSize(p.state)\n      this._recv(p.type, p.state)\n    }\n\n    remote.pending = null\n    this._mux._resumeMaybe()\n  }\n\n  _track (p) {\n    if (isPromise(p) === true) {\n      this._active++\n      return p.then(this._decBound, this._decAndDestroyBound)\n    }\n\n    return null\n  }\n\n  _close (isRemote) {\n    if (this.closed === true) return\n    this.closed = true\n\n    this._info.opened--\n    if (this._info.lastChannel === this) this._info.lastChannel = null\n\n    if (this._remoteId > 0) {\n      this._mux._remote[this._remoteId - 1] = null\n      this._remoteId = 0\n      // If remote has acked, we can reuse the local id now\n      // otherwise, we need to wait for the \"ack\" to arrive\n      this._mux._free.push(this._localId - 1)\n    }\n\n    this._mux._local[this._localId - 1] = null\n    this._localId = 0\n\n    this._mux._gc(this._info)\n    this._track(this.onclose(isRemote, this))\n\n    if (this._active === 0) this._destroy()\n\n    this._resolveOpen(false)\n  }\n\n  _destroy () {\n    if (this.destroyed === true) return\n    this.destroyed = true\n    this._track(this.ondestroy(this))\n    this._resolveDestroyed()\n  }\n\n  _recv (type, state) {\n    if (type < this.messages.length) {\n      const m = this.messages[type]\n      const p = m.recv(state, this)\n      if (m.autoBatch === true) return p\n    }\n    return null\n  }\n\n  cork () {\n    this._mux.cork()\n  }\n\n  uncork () {\n    this._mux.uncork()\n  }\n\n  close () {\n    if (this.closed === true) return\n\n    const state = { buffer: null, start: 2, end: 2 }\n\n    c.uint.preencode(state, this._localId)\n\n    state.buffer = this._mux._alloc(state.end)\n\n    state.buffer[0] = 0\n    state.buffer[1] = 3\n    c.uint.encode(state, this._localId)\n\n    this._close(false)\n    this._mux._write0(state.buffer)\n  }\n\n  addMessage (opts) {\n    if (!opts) return this._skipMessage()\n\n    const type = this.messages.length\n    const autoBatch = opts.autoBatch !== false\n    const encoding = opts.encoding || c.raw\n    const onmessage = opts.onmessage || noop\n\n    const s = this\n    const typeLen = encodingLength(c.uint, type)\n\n    const m = {\n      type,\n      autoBatch,\n      encoding,\n      onmessage,\n      recv (state, session) {\n        return session._track(m.onmessage(encoding.decode(state), session))\n      },\n      send (m, session = s) {\n        if (session.closed === true) return false\n\n        const mux = session._mux\n        const state = { buffer: null, start: 0, end: typeLen }\n\n        if (mux._batch !== null) {\n          encoding.preencode(state, m)\n          state.buffer = mux._alloc(state.end)\n\n          c.uint.encode(state, type)\n          encoding.encode(state, m)\n\n          mux._pushBatch(session._localId, state.buffer)\n          return true\n        }\n\n        c.uint.preencode(state, session._localId)\n        encoding.preencode(state, m)\n\n        state.buffer = mux._alloc(state.end)\n\n        c.uint.encode(state, session._localId)\n        c.uint.encode(state, type)\n        encoding.encode(state, m)\n\n        mux.drained = mux.stream.write(state.buffer)\n\n        return mux.drained\n      }\n    }\n\n    this.messages.push(m)\n\n    return m\n  }\n\n  _skipMessage () {\n    const type = this.messages.length\n    const m = {\n      type,\n      encoding: c.raw,\n      onmessage: noop,\n      recv (state, session) {},\n      send (m, session) {}\n    }\n\n    this.messages.push(m)\n    return m\n  }\n}\n\nmodule.exports = class Protomux {\n  constructor (stream, { alloc } = {}) {\n    if (stream.userData === null) stream.userData = this\n\n    this.isProtomux = true\n    this.stream = stream\n    this.corked = 0\n    this.drained = true\n\n    this._alloc = alloc || (typeof stream.alloc === 'function' ? stream.alloc.bind(stream) : b4a.allocUnsafe)\n    this._safeDestroyBound = this._safeDestroy.bind(this)\n    this._uncorkBound = this.uncork.bind(this)\n\n    this._remoteBacklog = 0\n    this._buffered = 0\n    this._paused = false\n    this._remote = []\n    this._local = []\n    this._free = []\n    this._batch = null\n    this._batchState = null\n\n    this._infos = new Map()\n    this._notify = new Map()\n\n    this.stream.on('data', this._ondata.bind(this))\n    this.stream.on('drain', this._ondrain.bind(this))\n    this.stream.on('end', this._onend.bind(this))\n    this.stream.on('error', noop) // we handle this in \"close\"\n    this.stream.on('close', this._shutdown.bind(this))\n  }\n\n  static from (stream, opts) {\n    if (stream.userData && stream.userData.isProtomux) return stream.userData\n    if (stream.isProtomux) return stream\n    return new this(stream, opts)\n  }\n\n  static isProtomux (mux) {\n    return typeof mux === 'object' && mux.isProtomux === true\n  }\n\n  * [Symbol.iterator] () {\n    for (const session of this._local) {\n      if (session !== null) yield session\n    }\n  }\n\n  isIdle () {\n    return this._local.length === this._free.length\n  }\n\n  cork () {\n    if (++this.corked === 1) {\n      this._batch = []\n      this._batchState = { buffer: null, start: 0, end: 1 }\n    }\n  }\n\n  uncork () {\n    if (--this.corked === 0) {\n      this._sendBatch(this._batch, this._batchState)\n      this._batch = null\n      this._batchState = null\n    }\n  }\n\n  getLastChannel ({ protocol, id = null }) {\n    const key = toKey(protocol, id)\n    const info = this._infos.get(key)\n    if (info) return info.lastChannel\n    return null\n  }\n\n  pair ({ protocol, id = null }, notify) {\n    this._notify.set(toKey(protocol, id), notify)\n  }\n\n  unpair ({ protocol, id = null }) {\n    this._notify.delete(toKey(protocol, id))\n  }\n\n  opened ({ protocol, id = null }) {\n    const key = toKey(protocol, id)\n    const info = this._infos.get(key)\n    return info ? info.opened > 0 : false\n  }\n\n  createChannel ({ userData = null, protocol, aliases = [], id = null, unique = true, handshake = null, messages = [], onopen = noop, onclose = noop, ondestroy = noop, ondrain = noop }) {\n    if (this.stream.destroyed) return null\n\n    const info = this._get(protocol, id, aliases)\n    if (unique && info.opened > 0) return null\n\n    if (info.incoming.length === 0) {\n      return new Channel(this, info, userData, protocol, aliases, id, handshake, messages, onopen, onclose, ondestroy, ondrain)\n    }\n\n    this._remoteBacklog--\n\n    const remoteId = info.incoming.shift()\n    const r = this._remote[remoteId - 1]\n    if (r === null) return null\n\n    const session = new Channel(this, info, userData, protocol, aliases, id, handshake, messages, onopen, onclose, ondestroy, ondrain)\n\n    session._remoteId = remoteId\n    session._fullyOpenSoon()\n\n    return session\n  }\n\n  _pushBatch (localId, buffer) {\n    if (this._batchState.end >= MAX_BATCH) {\n      this._sendBatch(this._batch, this._batchState)\n      this._batch = []\n      this._batchState = { buffer: null, start: 0, end: 1 }\n    }\n\n    if (this._batch.length === 0 || this._batch[this._batch.length - 1].localId !== localId) {\n      this._batchState.end++\n      c.uint.preencode(this._batchState, localId)\n    }\n    c.buffer.preencode(this._batchState, buffer)\n    this._batch.push({ localId, buffer })\n  }\n\n  _sendBatch (batch, state) {\n    if (batch.length === 0) return\n\n    let prev = batch[0].localId\n\n    state.buffer = this._alloc(state.end)\n    state.buffer[state.start++] = 0\n    state.buffer[state.start++] = 0\n\n    c.uint.encode(state, prev)\n\n    for (let i = 0; i < batch.length; i++) {\n      const b = batch[i]\n      if (prev !== b.localId) {\n        state.buffer[state.start++] = 0\n        c.uint.encode(state, (prev = b.localId))\n      }\n      c.buffer.encode(state, b.buffer)\n    }\n\n    this.drained = this.stream.write(state.buffer)\n  }\n\n  _get (protocol, id, aliases = []) {\n    const key = toKey(protocol, id)\n\n    let info = this._infos.get(key)\n    if (info) return info\n\n    info = { key, protocol, aliases: [], id, pairing: 0, opened: 0, incoming: [], outgoing: [], lastChannel: null }\n    this._infos.set(key, info)\n\n    for (const alias of aliases) {\n      const key = toKey(alias, id)\n      info.aliases.push(key)\n\n      this._infos.set(key, info)\n    }\n\n    return info\n  }\n\n  _gc (info) {\n    if (info.opened === 0 && info.outgoing.length === 0 && info.incoming.length === 0) {\n      this._infos.delete(info.key)\n\n      for (const alias of info.aliases) this._infos.delete(alias)\n    }\n  }\n\n  _ondata (buffer) {\n    if (buffer.byteLength === 0) return // ignore empty frames...\n    try {\n      const state = { buffer, start: 0, end: buffer.byteLength }\n      this._decode(c.uint.decode(state), state)\n    } catch (err) {\n      this._safeDestroy(err)\n    }\n  }\n\n  _ondrain () {\n    this.drained = true\n\n    for (const s of this._local) {\n      if (s !== null) s._track(s.ondrain(s))\n    }\n  }\n\n  _onend () { // TODO: support half open mode for the users who wants that here\n    this.stream.end()\n  }\n\n  _decode (remoteId, state) {\n    const type = c.uint.decode(state)\n\n    if (remoteId === 0) {\n      return this._oncontrolsession(type, state)\n    }\n\n    const r = remoteId <= this._remote.length ? this._remote[remoteId - 1] : null\n\n    // if the channel is closed ignore - could just be a pipeline message...\n    if (r === null) return null\n\n    if (r.pending !== null) {\n      this._bufferMessage(r, type, state)\n      return null\n    }\n\n    return r.session._recv(type, state)\n  }\n\n  _oncontrolsession (type, state) {\n    switch (type) {\n      case 0:\n        this._onbatch(state)\n        break\n\n      case 1:\n        // return the promise back up as this has sideeffects so we can batch reply\n        return this._onopensession(state)\n\n      case 2:\n        this._onrejectsession(state)\n        break\n\n      case 3:\n        this._onclosesession(state)\n        break\n    }\n\n    return null\n  }\n\n  _bufferMessage (r, type, { buffer, start, end }) {\n    const state = { buffer, start, end } // copy\n    r.pending.push({ type, state })\n    this._buffered += byteSize(state)\n    this._pauseMaybe()\n  }\n\n  _pauseMaybe () {\n    if (this._paused === true || this._buffered <= MAX_BUFFERED) return\n    this._paused = true\n    this.stream.pause()\n  }\n\n  _resumeMaybe () {\n    if (this._paused === false || this._buffered > MAX_BUFFERED) return\n    this._paused = false\n    this.stream.resume()\n  }\n\n  _onbatch (state) {\n    const end = state.end\n    let remoteId = c.uint.decode(state)\n\n    let waiting = null\n\n    while (state.end > state.start) {\n      const len = c.uint.decode(state)\n      if (len === 0) {\n        remoteId = c.uint.decode(state)\n        continue\n      }\n      state.end = state.start + len\n      // if batch contains more than one message, cork it so we reply back with a batch\n      if (end !== state.end && waiting === null) {\n        waiting = []\n        this.cork()\n      }\n      const p = this._decode(remoteId, state)\n      if (waiting !== null && p !== null) waiting.push(p)\n      state.start = state.end\n      state.end = end\n    }\n\n    if (waiting !== null) {\n      // the waiting promises are not allowed to throw but we destroy the stream in case we are wrong\n      Promise.all(waiting).then(this._uncorkBound, this._safeDestroyBound)\n    }\n  }\n\n  _onopensession (state) {\n    const remoteId = c.uint.decode(state)\n    const protocol = c.string.decode(state)\n    const id = unslab(c.buffer.decode(state))\n\n    // remote tried to open the control session - auto reject for now\n    // as we can use as an explicit control protocol declaration if we need to\n    if (remoteId === 0) {\n      this._rejectSession(0)\n      return null\n    }\n\n    const rid = remoteId - 1\n    const info = this._get(protocol, id)\n\n    // allow the remote to grow the ids by one\n    if (this._remote.length === rid) {\n      this._remote.push(null)\n    }\n\n    if (rid >= this._remote.length || this._remote[rid] !== null) {\n      throw new Error('Invalid open message')\n    }\n\n    if (info.outgoing.length > 0) {\n      const localId = info.outgoing.shift()\n      const session = this._local[localId - 1]\n\n      if (session === null) { // we already closed the channel - ignore\n        this._free.push(localId - 1)\n        return null\n      }\n\n      this._remote[rid] = { state, pending: null, session: null }\n\n      session._remoteId = remoteId\n      session._fullyOpen()\n      return null\n    }\n\n    const copyState = { buffer: state.buffer, start: state.start, end: state.end }\n    this._remote[rid] = { state: copyState, pending: [], session: null }\n\n    if (++this._remoteBacklog > MAX_BACKLOG) {\n      throw new Error('Remote exceeded backlog')\n    }\n\n    info.pairing++\n    info.incoming.push(remoteId)\n\n    return this._requestSession(protocol, id, info).catch(this._safeDestroyBound)\n  }\n\n  _onrejectsession (state) {\n    const localId = c.uint.decode(state)\n\n    // TODO: can be done smarter...\n    for (const info of this._infos.values()) {\n      const i = info.outgoing.indexOf(localId)\n      if (i === -1) continue\n\n      info.outgoing.splice(i, 1)\n\n      const session = this._local[localId - 1]\n\n      this._free.push(localId - 1)\n      if (session !== null) session._close(true)\n\n      this._gc(info)\n      return\n    }\n\n    throw new Error('Invalid reject message')\n  }\n\n  _onclosesession (state) {\n    const remoteId = c.uint.decode(state)\n\n    if (remoteId === 0) return // ignore\n\n    const rid = remoteId - 1\n    const r = rid < this._remote.length ? this._remote[rid] : null\n\n    if (r === null) return\n\n    if (r.session !== null) r.session._close(true)\n  }\n\n  async _requestSession (protocol, id, info) {\n    const notify = this._notify.get(toKey(protocol, id)) || this._notify.get(toKey(protocol, null))\n\n    if (notify) await notify(id)\n\n    if (--info.pairing > 0) return\n\n    while (info.incoming.length > 0) {\n      this._rejectSession(info, info.incoming.shift())\n    }\n\n    this._gc(info)\n  }\n\n  _rejectSession (info, remoteId) {\n    if (remoteId > 0) {\n      const r = this._remote[remoteId - 1]\n\n      if (r.pending !== null) {\n        for (let i = 0; i < r.pending.length; i++) {\n          this._buffered -= byteSize(r.pending[i].state)\n        }\n      }\n\n      this._remote[remoteId - 1] = null\n      this._resumeMaybe()\n    }\n\n    const state = { buffer: null, start: 2, end: 2 }\n\n    c.uint.preencode(state, remoteId)\n\n    state.buffer = this._alloc(state.end)\n\n    state.buffer[0] = 0\n    state.buffer[1] = 2\n    c.uint.encode(state, remoteId)\n\n    this._write0(state.buffer)\n  }\n\n  _write0 (buffer) {\n    if (this._batch !== null) {\n      this._pushBatch(0, buffer.subarray(1))\n      return\n    }\n\n    this.drained = this.stream.write(buffer)\n  }\n\n  destroy (err) {\n    this.stream.destroy(err)\n  }\n\n  _safeDestroy (err) {\n    safetyCatch(err)\n    this.stream.destroy(err)\n  }\n\n  _shutdown () {\n    for (const s of this._local) {\n      if (s !== null) s._close(true)\n    }\n  }\n}\n\nfunction noop () {}\n\nfunction toKey (protocol, id) {\n  return protocol + '##' + (id ? b4a.toString(id, 'hex') : '')\n}\n\nfunction byteSize (state) {\n  return 512 + (state.end - state.start)\n}\n\nfunction isPromise (p) {\n  return !!(p && typeof p.then === 'function')\n}\n\nfunction encodingLength (enc, val) {\n  const state = { buffer: null, start: 0, end: 0 }\n  enc.preencode(state, val)\n  return state.end\n}\n{\n  \"name\": \"protomux\",\n  \"version\": \"3.10.1\",\n  \"description\": \"Multiplex multiple message oriented protocols over a stream\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"b4a\": \"^1.3.1\",\n    \"compact-encoding\": \"^2.5.1\",\n    \"queue-tick\": \"^1.0.0\",\n    \"safety-catch\": \"^1.0.1\",\n    \"unslab\": \"^1.3.0\"\n  },\n  \"devDependencies\": {\n    \"@hyperswarm/secret-stream\": \"^6.0.0\",\n    \"brittle\": \"^3.0.0\",\n    \"standard\": \"^16.0.4\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/protomux.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/protomux/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/protomux\"\n}\n{\n  \"name\": \"queue-tick\",\n  \"version\": \"1.0.1\",\n  \"description\": \"Next tick shim that prefers process.nextTick over queueMicrotask for compat\",\n  \"main\": \"./process-next-tick.js\",\n  \"browser\": \"./queue-microtask.js\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"standard\": \"^16.0.3\",\n    \"tape\": \"^5.3.1\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && tape test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/queue-tick.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/queue-tick/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/queue-tick\"\n}\nmodule.exports = (typeof process !== 'undefined' && typeof process.nextTick === 'function')\n  ? process.nextTick.bind(process)\n  : require('./queue-microtask')\nmodule.exports = typeof queueMicrotask === 'function' ? queueMicrotask : (fn) => Promise.resolve().then(fn)\nrequire.addon = require('require-addon')\n\nmodule.exports = require.addon('.', __filename)\nconst b4a = require('b4a')\nconst binding = require('./binding')\n\nexports.get = function get (field, bit) {\n  const n = field.byteLength * 8\n\n  if (bit < 0) bit += n\n  if (bit < 0 || bit >= n) return false\n\n  return binding.quickbit_napi_get(field, bit) !== 0\n}\n\nexports.set = function set (field, bit, value = true) {\n  const n = field.byteLength * 8\n\n  if (bit < 0) bit += n\n  if (bit < 0 || bit >= n) return false\n\n  return binding.quickbit_napi_set(field, bit, value ? 1 : 0) !== 0\n}\n\nexports.fill = function fill (field, value, start = 0, end = field.byteLength * 8) {\n  const n = field.byteLength * 8\n\n  if (start < 0) start += n\n  if (end < 0) end += n\n  if (start < 0 || start >= field.byteLength * 8 || start >= end) return field\n\n  binding.quickbit_napi_fill(field, value ? 1 : 0, start, end)\n  return field\n}\n\nexports.clear = function clear (field, ...chunks) {\n  binding.quickbit_napi_clear(field, chunks)\n}\n\nexports.findFirst = function findFirst (field, value, position = 0) {\n  const n = field.byteLength * 8\n\n  if (position < 0) position += n\n  if (position < 0) position = 0\n  if (position >= n) return -1\n\n  return binding.quickbit_napi_find_first(field, value ? 1 : 0, position)\n}\n\nexports.findLast = function findLast (field, value, position = field.byteLength * 8 - 1) {\n  const n = field.byteLength * 8\n\n  if (position < 0) position += n\n  if (position < 0) return -1\n  if (position >= n) position = n - 1\n\n  return binding.quickbit_napi_find_last(field, value ? 1 : 0, position)\n}\n\nconst Index = exports.Index = class Index {\n  static from (fieldOrChunks, byteLength = -1) {\n    if (Array.isArray(fieldOrChunks)) {\n      return new SparseIndex(fieldOrChunks, byteLength)\n    } else {\n      return new DenseIndex(fieldOrChunks, byteLength)\n    }\n  }\n\n  constructor (byteLength) {\n    this._byteLength = byteLength\n    this.handle = b4a.allocUnsafe(binding.sizeof_quickbit_index_t)\n  }\n\n  get byteLength () {\n    return this._byteLength\n  }\n\n  skipFirst (value, position = 0) {\n    const n = this.byteLength * 8\n\n    if (position < 0) position += n\n    if (position < 0) position = 0\n    if (position >= n) return n - 1\n\n    return binding.quickbit_napi_skip_first(this.handle, this.byteLength, value ? 1 : 0, position)\n  }\n\n  skipLast (value, position = this.byteLength * 8 - 1) {\n    const n = this.byteLength * 8\n\n    if (position < 0) position += n\n    if (position < 0) return 0\n    if (position >= n) position = n - 1\n\n    return binding.quickbit_napi_skip_last(this.handle, this.byteLength, value ? 1 : 0, position)\n  }\n}\n\nclass DenseIndex extends Index {\n  constructor (field, byteLength) {\n    super(byteLength)\n    this.field = field\n\n    binding.quickbit_napi_index_init(this.handle, this.field)\n  }\n\n  get byteLength () {\n    if (this._byteLength !== -1) return this._byteLength\n    return this.field.byteLength\n  }\n\n  update (bit) {\n    const n = this.byteLength * 8\n\n    if (bit < 0) bit += n\n    if (bit < 0 || bit >= n) return false\n\n    return binding.quickbit_napi_index_update(this.handle, this.field, bit) !== 0\n  }\n}\n\nfunction selectChunk (chunks, offset) {\n  for (let i = 0; i < chunks.length; i++) {\n    const next = chunks[i]\n\n    const start = next.offset\n    const end = next.offset + next.field.byteLength\n\n    if (offset >= start && offset + 16 <= end) {\n      return next\n    }\n  }\n\n  return null\n}\n\nclass SparseIndex extends Index {\n  constructor (chunks, byteLength) {\n    super(byteLength)\n    this.chunks = chunks\n\n    binding.quickbit_napi_index_init_sparse(this.handle, this.chunks)\n  }\n\n  get byteLength () {\n    if (this._byteLength !== -1) return this._byteLength\n    const last = this.chunks[this.chunks.length - 1]\n    return last ? last.offset + last.field.byteLength : 0\n  }\n\n  update (bit) {\n    const n = this.byteLength * 8\n\n    if (bit < 0) bit += n\n    if (bit < 0 || bit >= n) return false\n\n    const j = Math.floor(bit / 128)\n\n    const offset = j * 16\n\n    const chunk = selectChunk(this.chunks, offset)\n\n    if (chunk === null) return false\n\n    return binding.quickbit_napi_index_update_sparse(this.handle, chunk.field, chunk.offset, bit) !== 0\n  }\n}\n{\n  \"name\": \"quickbit-native\",\n  \"version\": \"2.3.6\",\n  \"description\": \"libquickbit JavaScript bindings for Node.js\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"macros.h\",\n    \"binding.c\",\n    \"binding.js\",\n    \"CMakeLists.txt\",\n    \"prebuilds\"\n  ],\n  \"addon\": true,\n  \"scripts\": {\n    \"test\": \"npm run lint && npm run test:bare && npm run test:node\",\n    \"test:bare\": \"bare test.mjs\",\n    \"test:node\": \"node test.mjs\",\n    \"lint\": \"standard\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/quickbit-native.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/quickbit-native/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/quickbit-native#readme\",\n  \"dependencies\": {\n    \"b4a\": \"^1.6.0\",\n    \"require-addon\": \"^1.1.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.0\",\n    \"cmake-bare\": \"^1.1.7\",\n    \"cmake-fetch\": \"^1.1.0\",\n    \"cmake-napi\": \"^1.0.2\",\n    \"standard\": \"^17.0.0\"\n  }\n}\nconst simdle = require('simdle-universal')\n\nconst INDEX_LEN = (16 /* root */ + 128 * 16 /* children */) * 2\n\nconst get = exports.get = function get (field, bit) {\n  const n = field.byteLength * 8\n\n  if (bit < 0) bit += n\n  if (bit < 0 || bit >= n) return false\n\n  const m = field.BYTES_PER_ELEMENT * 8\n\n  const offset = bit & (m - 1)\n  const i = (bit - offset) / m\n\n  return (field[i] & (1 << offset)) !== 0\n}\n\nconst set = exports.set = function set (field, bit, value = true) {\n  const n = field.byteLength * 8\n\n  if (bit < 0) bit += n\n  if (bit < 0 || bit >= n) return false\n\n  const m = field.BYTES_PER_ELEMENT * 8\n\n  const offset = bit & (m - 1)\n  const i = (bit - offset) / m\n  const mask = 1 << offset\n\n  if (value) {\n    if ((field[i] & mask) !== 0) return false\n  } else {\n    if ((field[i] & mask) === 0) return false\n  }\n\n  field[i] ^= mask\n\n  return true\n}\n\nexports.fill = function fill (field, value, start = 0, end = field.byteLength * 8) {\n  const n = field.byteLength * 8\n\n  if (start < 0) start += n\n  if (end < 0) end += n\n  if (start < 0 || start >= field.byteLength * 8 || start >= end) return field\n\n  const m = field.BYTES_PER_ELEMENT * 8\n\n  let i, j\n\n  {\n    const offset = start & (m - 1)\n    i = (start - offset) / m\n\n    if (offset !== 0) {\n      let shift = m - offset\n      if (end - start < shift) shift = end - start\n\n      const mask = ((1 << shift) - 1) << offset\n\n      if (value) field[i] |= mask\n      else field[i] &= ~mask\n\n      i++\n    }\n  }\n\n  {\n    const offset = end & (m - 1)\n    j = (end - offset) / m\n\n    if (offset !== 0 && j >= i) {\n      const mask = (1 << offset) - 1\n\n      if (value) field[j] |= mask\n      else field[j] &= ~mask\n    }\n  }\n\n  if (i < j) field.fill(value ? (2 ** m) - 1 : 0, i, j)\n\n  return field\n}\n\nexports.clear = function clear (field, ...chunks) {\n  const n = field.byteLength\n\n  for (const chunk of chunks) {\n    if (chunk.offset >= n) continue\n\n    const m = chunk.field.byteLength\n\n    let i = chunk.offset\n    let j = 0\n\n    while (((i & 15) !== 0 || (j & 15) !== 0) && i < n && j < m) {\n      field[i] = field[i] & ~chunk.field[j]\n      i++\n      j++\n    }\n\n    if (i + 15 < n && j + 15 < m) {\n      const len = Math.min(n - (n & 15) - i, m - (m & 15) - j)\n\n      simdle.clear(field.subarray(i, i + len), chunk.field.subarray(j, j + len), field.subarray(i, i + len))\n    }\n\n    while (i < n && j < m) {\n      field[i] = field[i] & ~chunk.field[j]\n      i++\n      j++\n    }\n  }\n}\n\nfunction bitOffset (bit, offset) {\n  return !bit ? offset : (INDEX_LEN * 8 / 2) + offset\n}\n\nfunction byteOffset (bit, offset) {\n  return !bit ? offset : (INDEX_LEN / 2) + offset\n}\n\nexports.findFirst = function findFirst (field, value, position = 0) {\n  const n = field.byteLength * 8\n\n  if (position < 0) position += n\n  if (position < 0) position = 0\n  if (position >= n) return -1\n\n  value = !!value\n\n  for (let i = position; i < n; i++) {\n    if (get(field, i) === value) return i\n  }\n\n  return -1\n}\n\nexports.findLast = function findLast (field, value, position = field.byteLength * 8 - 1) {\n  const n = field.byteLength * 8\n\n  if (position < 0) position += n\n  if (position < 0) return -1\n  if (position >= n) position = n - 1\n\n  value = !!value\n\n  for (let i = position; i >= 0; i--) {\n    if (get(field, i) === value) return i\n  }\n\n  return -1\n}\n\nconst Index = exports.Index = class Index {\n  static from (fieldOrChunks, byteLength = -1) {\n    if (Array.isArray(fieldOrChunks)) {\n      return new SparseIndex(fieldOrChunks, byteLength)\n    } else {\n      return new DenseIndex(fieldOrChunks, byteLength)\n    }\n  }\n\n  constructor (byteLength) {\n    this._byteLength = byteLength\n    this.handle = new Uint32Array(INDEX_LEN / 4)\n  }\n\n  get byteLength () {\n    return this._byteLength\n  }\n\n  skipFirst (value, position = 0) {\n    const n = this.byteLength * 8\n\n    if (position < 0) position += n\n    if (position < 0) position = 0\n    if (position >= n) return n - 1\n\n    let i = Math.floor(position / 16384)\n\n    if (i > 127) return position\n\n    while (i <= 127 && get(this.handle, bitOffset(value, i))) {\n      i++\n    }\n\n    if (i === 128) return n - 1\n\n    let k = i * 16384\n    let j = 0\n\n    if (position > k) j = Math.floor((position - k) / 128)\n\n    while (j <= 127 && get(this.handle, bitOffset(value, i * 128 + j + 128))) {\n      j++\n      k += 128\n    }\n\n    if (j === 128 && i !== 127) return this.skipFirst(value, (i + 1) * 16384)\n\n    if (k > position) position = k\n\n    return position < n ? position : n - 1\n  }\n\n  skipLast (value, position = this.byteLength * 8 - 1) {\n    const n = this.byteLength * 8\n\n    if (position < 0) position += n\n    if (position < 0) return 0\n    if (position >= n) position = n - 1\n\n    let i = Math.floor(position / 16384)\n\n    if (i > 127) return position\n\n    while (i >= 0 && get(this.handle, bitOffset(value, i))) {\n      i--\n    }\n\n    if (i === -1) return 0\n\n    let k = ((i + 1) * 16384) - 1\n    let j = 127\n\n    if (position < k) j = 128 - Math.ceil((k - position) / 128)\n\n    while (j >= 0 && get(this.handle, bitOffset(value, i * 128 + j + 128))) {\n      j--\n      k -= 128\n    }\n\n    if (j === -1 && i !== 0) return this.skipLast(value, i * 16384 - 1)\n\n    if (k < position) position = k\n\n    return position\n  }\n}\n\nclass DenseIndex extends Index {\n  constructor (field, byteLength) {\n    super(byteLength)\n    this.field = field\n\n    const m = field.BYTES_PER_ELEMENT\n\n    for (let i = 0; i < 128; i++) {\n      for (let j = 0; j < 128; j++) {\n        const offset = (i * 128 + j) * 16\n        let allz = true\n        let allo = false\n\n        if (offset + 16 <= this.field.byteLength) {\n          const vec = this.field.subarray(offset / m, (offset + 16) / m)\n\n          allz = simdle.allz(vec)\n          allo = simdle.allo(vec)\n        }\n\n        const k = i * 128 + 128 + j\n\n        set(this.handle, bitOffset(false, k), allz)\n        set(this.handle, bitOffset(true, k), allo)\n      }\n\n      {\n        const offset = byteOffset(false, i * 16 + 16) / 4\n        const allo = simdle.allo(this.handle.subarray(offset, offset + 4))\n\n        set(this.handle, bitOffset(false, i), allo)\n      }\n\n      {\n        const offset = byteOffset(true, i * 16 + 16) / 4\n        const allo = simdle.allo(this.handle.subarray(offset, offset + 4))\n\n        set(this.handle, bitOffset(true, i), allo)\n      }\n    }\n  }\n\n  get byteLength () {\n    if (this._byteLength !== -1) return this._byteLength\n    return this.field.byteLength\n  }\n\n  update (bit) {\n    const n = this.byteLength * 8\n\n    if (bit < 0) bit += n\n    if (bit < 0 || bit >= n) return false\n\n    const m = this.field.BYTES_PER_ELEMENT\n\n    const i = Math.floor(bit / 16384)\n    const j = Math.floor(bit / 128)\n\n    const offset = (j * 16) / m\n    const vec = this.field.subarray(offset, offset + (16 / m))\n\n    const allz = simdle.allz(vec)\n    const allo = simdle.allo(vec)\n\n    let changed = false\n\n    if (set(this.handle, bitOffset(false, 128 + j), allz)) {\n      changed = true\n\n      const offset = byteOffset(false, i * 16 + 16) / 4\n      const allo = simdle.allo(this.handle.subarray(offset, offset + 4))\n\n      set(this.handle, bitOffset(false, i), allo)\n    }\n\n    if (set(this.handle, bitOffset(true, 128 + j), allo)) {\n      changed = true\n\n      const offset = byteOffset(true, i * 16 + 16) / 4\n      const allo = simdle.allo(this.handle.subarray(offset, offset + 4))\n\n      set(this.handle, bitOffset(true, i), allo)\n    }\n\n    return changed\n  }\n}\n\nfunction selectChunk (chunks, offset) {\n  for (let i = 0; i < chunks.length; i++) {\n    const next = chunks[i]\n\n    const start = next.offset\n    const end = next.offset + next.field.byteLength\n\n    if (offset >= start && offset + 16 <= end) {\n      return next\n    }\n  }\n\n  return null\n}\n\nclass SparseIndex extends Index {\n  constructor (chunks, byteLength) {\n    super(byteLength)\n    this.chunks = chunks\n\n    for (let i = 0; i < 128; i++) {\n      for (let j = 0; j < 128; j++) {\n        const offset = (i * 128 + j) * 16\n        let allz = true\n        let allo = false\n\n        const chunk = selectChunk(this.chunks, offset)\n\n        if (chunk !== null) {\n          const m = chunk.field.BYTES_PER_ELEMENT\n\n          const vec = chunk.field.subarray((offset - chunk.offset) / m, (offset - chunk.offset + 16) / m)\n\n          allz = simdle.allz(vec)\n          allo = simdle.allo(vec)\n        }\n\n        const k = i * 128 + 128 + j\n\n        set(this.handle, bitOffset(false, k), allz)\n        set(this.handle, bitOffset(true, k), allo)\n      }\n\n      {\n        const offset = byteOffset(false, i * 16 + 16) / 4\n        const allo = simdle.allo(this.handle.subarray(offset, offset + 4))\n\n        set(this.handle, bitOffset(false, i), allo)\n      }\n\n      {\n        const offset = byteOffset(true, i * 16 + 16) / 4\n        const allo = simdle.allo(this.handle.subarray(offset, offset + 4))\n\n        set(this.handle, bitOffset(true, i), allo)\n      }\n    }\n  }\n\n  get byteLength () {\n    if (this._byteLength !== -1) return this._byteLength\n    const last = this.chunks[this.chunks.length - 1]\n    return last ? last.offset + last.field.byteLength : 0\n  }\n\n  update (bit) {\n    const n = this.byteLength * 8\n\n    if (bit < 0) bit += n\n    if (bit < 0 || bit >= n) return false\n\n    const i = Math.floor(bit / 16384)\n    const j = Math.floor(bit / 128)\n\n    const offset = j * 16\n\n    const chunk = selectChunk(this.chunks, offset)\n\n    if (chunk === null) return false\n\n    const m = chunk.field.BYTES_PER_ELEMENT\n\n    const vec = chunk.field.subarray((offset - chunk.offset) / m, (offset - chunk.offset + 16) / m)\n\n    const allz = simdle.allz(vec)\n    const allo = simdle.allo(vec)\n\n    let changed = false\n\n    if (set(this.handle, bitOffset(false, 128 + j), allz)) {\n      changed = true\n\n      const offset = byteOffset(false, i * 16 + 16) / 4\n      const allo = simdle.allo(this.handle.subarray(offset, offset + 4))\n\n      set(this.handle, bitOffset(false, i), allo)\n    }\n\n    if (set(this.handle, bitOffset(true, 128 + j), allo)) {\n      changed = true\n\n      const offset = byteOffset(true, i * 16 + 16) / 4\n      const allo = simdle.allo(this.handle.subarray(offset, offset + 4))\n\n      set(this.handle, bitOffset(true, i), allo)\n    }\n\n    return changed\n  }\n}\nconst fallback = require('./fallback')\n\ntry {\n  const native = require('quickbit-native')\n\n  // These functions are faster in JavaScript\n  exports.get = fallback.get\n  exports.set = fallback.set\n  exports.fill = fallback.fill\n\n  // These functions are faster in C\n  exports.clear = native.clear\n  exports.findFirst = native.findFirst\n  exports.findLast = native.findLast\n  exports.Index = native.Index\n} catch {\n  module.exports = fallback\n}\n{\n  \"name\": \"quickbit-universal\",\n  \"version\": \"2.2.0\",\n  \"description\": \"Universal wrapper for libquickbit with a JavaScript fallback\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"fallback.js\",\n    \"index.js\"\n  ],\n  \"browser\": {\n    \"./index.js\": \"./fallback.js\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.mjs\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/quickbit-universal.git\"\n  },\n  \"author\": \"Kasper Isager Dalsgarð <kasper@funktionel.co>\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/quickbit-universal/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/quickbit-universal#readme\",\n  \"dependencies\": {\n    \"b4a\": \"^1.6.0\",\n    \"simdle-universal\": \"^1.1.0\"\n  },\n  \"optionalDependencies\": {\n    \"quickbit-native\": \"^2.2.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.0\",\n    \"standard\": \"^17.0.0\"\n  }\n}\nclass CacheEntry {\n  constructor (key, index, map) {\n    this.key = key\n    this.index = index\n    this.map = map\n  }\n}\n\nclass CacheValue {\n  constructor (entry, value) {\n    this.entry = entry\n    this.value = value\n  }\n}\n\nclass Rache {\n  constructor ({ maxSize = 65536, parent = null } = {}) {\n    this.maxSize = parent?.maxSize || maxSize\n\n    this._array = parent?._array || []\n    this._map = new Map()\n  }\n\n  static from (cache) {\n    return cache ? new this({ parent: cache }) : new this()\n  }\n\n  get globalSize () {\n    return this._array.length\n  }\n\n  get size () {\n    return this._map.size\n  }\n\n  sub () {\n    return new Rache({ parent: this })\n  }\n\n  set (key, value) { // ~constant time\n    const existing = this._map.get(key)\n    if (existing !== undefined) {\n      existing.value = value\n      return\n    }\n\n    if (this._array.length >= this.maxSize) this._gc()\n\n    const entry = new CacheEntry(key, this._array.length, this._map)\n    this._array.push(entry)\n    const cacheValue = new CacheValue(entry, value)\n    this._map.set(key, cacheValue)\n  }\n\n  delete (key) {\n    const existing = this._map.get(key)\n    if (existing === undefined) return false\n\n    this._delete(existing.entry.index)\n    return true\n  }\n\n  get (key) {\n    const existing = this._map.get(key)\n    return existing === undefined ? undefined : existing.value\n  }\n\n  * [Symbol.iterator] () {\n    for (const [key, { value }] of this._map) {\n      yield [key, value]\n    }\n  }\n\n  keys () {\n    return this._map.keys()\n  }\n\n  * values () {\n    for (const { value } of this._map.values()) {\n      yield value\n    }\n  }\n\n  clear () {\n    // The entries in map linger on in _array,\n    // so on top of clearing the map, we also kill the ref,\n    // so that any gc running later on the old map won't interfere\n    // (in case a new entry was added with the same key as a cleared entry)\n\n    this._map.clear()\n    this._map = new Map()\n  }\n\n  destroy () {\n    this._map = null\n    this._array = null\n  }\n\n  _gc () {\n    this._delete(Math.floor(Math.random() * this._array.length))\n  }\n\n  _delete (index) { // ~constant time\n    if (index >= this._array.length) throw new Error('Cannot delete unused index (logic bug?)')\n\n    const head = this._array.pop()\n    let removed = head\n\n    if (index < this._array.length) {\n      removed = this._array[index]\n      head.index = index\n      this._array[index] = head\n    }\n\n    removed.map.delete(removed.key)\n  }\n}\n\nmodule.exports = Rache\n{\n  \"name\": \"rache\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Random-eviction cache\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js --coverage\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/rache.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/rache/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/rache#readme\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"brittle\": \"^3.5.2\",\n    \"standard\": \"^17.1.0\"\n  }\n}\nmodule.exports = class RandomArrayIterator {\n  constructor (values) {\n    this.values = values\n    this.start = 0\n    this.length = this.values.length\n  }\n\n  next () {\n    if (this.length === 0) {\n      if (this.start === 0) return { done: true, value: undefined }\n      this.length = this.start\n      this.start = 0\n    }\n\n    const i = this.start + ((Math.random() * this.length) | 0)\n    const j = this.start + --this.length\n    const value = this.values[i]\n\n    this.values[i] = this.values[j]\n    this.values[j] = value\n\n    return { done: false, value }\n  }\n\n  dequeue () {\n    this.values[this.start + this.length] = this.values[this.values.length - 1]\n    this.values.pop()\n  }\n\n  requeue () {\n    const i = this.start + this.length\n    const value = this.values[i]\n    this.values[i] = this.values[this.start]\n    this.values[this.start++] = value\n  }\n\n  restart () {\n    this.start = 0\n    this.length = this.values.length\n    return this\n  }\n\n  [Symbol.iterator] () {\n    return this\n  }\n}\n{\n  \"name\": \"random-array-iterator\",\n  \"version\": \"1.0.0\",\n  \"description\": \"An iterator to iterate an array in random order with controls to requeue or dequeue elements during the iteration\",\n  \"main\": \"index.js\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"standard\": \"^16.0.3\",\n    \"tape\": \"^5.0.1\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && tape test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/random-array-iterator.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/random-array-iterator/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/random-array-iterator\"\n}\nconst EventEmitter = require('events')\n\nmodule.exports = class ReadyResource extends EventEmitter {\n  constructor () {\n    super()\n\n    this.opening = null\n    this.closing = null\n\n    this.opened = false\n    this.closed = false\n  }\n\n  ready () {\n    if (this.opening !== null) return this.opening\n    this.opening = open(this)\n    return this.opening\n  }\n\n  close () {\n    if (this.closing !== null) return this.closing\n    this.closing = close(this)\n    return this.closing\n  }\n\n  async _open () {\n    // add impl here\n  }\n\n  async _close () {\n    // add impl here\n  }\n}\n\nasync function open (self) {\n  // open after close\n  if (self.closing !== null) return\n\n  try {\n    await self._open()\n  } catch (err) {\n    self.close() // safe to run in bg\n    throw err\n  }\n\n  self.opened = true\n  self.emit('ready')\n}\n\nasync function close (self) {\n  try {\n    if (self.opened === false && self.opening !== null) await self.opening\n  } catch {\n    // ignore errors on closing\n  }\n  if (self.opened === true || self.opening === null) await self._close()\n  self.closed = true\n  self.emit('close')\n}\n{\n  \"name\": \"ready-resource\",\n  \"version\": \"1.1.2\",\n  \"description\": \"Modern single resource management\",\n  \"main\": \"index.js\",\n  \"imports\": {\n    \"events\": {\n      \"bare\": \"bare-events\",\n      \"default\": \"events\"\n    }\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.0\",\n    \"standard\": \"^17.0.0\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/ready-resource.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/ready-resource/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/ready-resource\",\n  \"dependencies\": {\n    \"bare-events\": \"^2.2.0\"\n  }\n}\nconst b4a = require('b4a')\n\nvar EMPTY = []\n\nmodule.exports = RecordCache\n\nfunction RecordSet () {\n  this.list = []\n  this.map = new Map()\n}\n\nRecordSet.prototype.add = function (record, value) {\n  var k = toString(record)\n  var r = this.map.get(k)\n  if (r) return false\n\n  r = {index: this.list.length, record: value || record}\n  this.list.push(r)\n  this.map.set(k, r)\n  return true\n}\n\nRecordSet.prototype.remove = function (record) {\n  var k = toString(record)\n  var r = this.map.get(k)\n  if (!r) return false\n\n  swap(this.list, r.index, this.list.length - 1)\n  this.list.pop()\n  this.map.delete(k)\n  return true\n}\n\nfunction RecordStore () {\n  this.records = new Map()\n  this.size = 0\n}\n\nRecordStore.prototype.add = function (name, record, value) {\n  var r = this.records.get(name)\n\n  if (!r) {\n    r = new RecordSet()\n    this.records.set(name, r)\n  }\n\n  if (r.add(record, value)) {\n    this.size++\n    return true\n  }\n\n  return false\n}\n\nRecordStore.prototype.remove = function (name, record, value) {\n  var r = this.records.get(name)\n  if (!r) return false\n\n  if (r.remove(record, value)) {\n    this.size--\n    if (!r.map.size) this.records.delete(name)\n    return true\n  }\n\n  return false\n}\n\nRecordStore.prototype.get = function (name) {\n  var r = this.records.get(name)\n  return r ? r.list : EMPTY\n}\n\nfunction RecordCache (opts) {\n  if (!(this instanceof RecordCache)) return new RecordCache(opts)\n  if (!opts) opts = {}\n\n  this.maxSize = opts.maxSize || Infinity\n  this.maxAge = opts.maxAge || 0\n\n  this._onstale = opts.onStale || opts.onstale || null\n  this._fresh = new RecordStore()\n  this._stale = new RecordStore()\n  this._interval = null\n  this._gced = false\n\n  if (this.maxAge && this.maxAge < Infinity) {\n    // 2/3 gives us a span of 0.66-1.33 maxAge or avg maxAge\n    var tick = Math.ceil(2 / 3 * this.maxAge)\n    this._interval = setInterval(this._gcAuto.bind(this), tick)\n    if (this._interval.unref) this._interval.unref()\n  }\n}\n\nObject.defineProperty(RecordCache.prototype, 'size', {\n  get: function () {\n    return this._fresh.size + this._stale.size\n  }\n})\n\nRecordCache.prototype.add = function (name, record, value) {\n  this._stale.remove(name, record, value)\n  if (this._fresh.add(name, record, value) && this._fresh.size > this.maxSize) {\n    this._gc()\n  }\n}\n\nRecordCache.prototype.remove = function (name, record, value) {\n  this._fresh.remove(name, record, value)\n  this._stale.remove(name, record, value)\n}\n\nRecordCache.prototype.get = function (name, n) {\n  var a = this._fresh.get(name)\n  var b = this._stale.get(name)\n  var aLen = a.length\n  var bLen = b.length\n  var len = aLen + bLen\n\n  if (n > len || !n) n = len\n  var result = new Array(n)\n\n  for (var i = 0; i < n; i++) {\n    var j = Math.floor(Math.random() * (aLen + bLen))\n    if (j < aLen) {\n      result[i] = a[j].record\n      swap(a, j, --aLen)\n    } else {\n      j -= aLen\n      result[i] = b[j].record\n      swap(b, j, --bLen)\n    }\n  }\n\n  return result\n}\n\nRecordCache.prototype._gcAuto = function () {\n  if (!this._gced) this._gc()\n  this._gced = false\n}\n\nRecordCache.prototype._gc = function () {\n  if (this._onstale && this._stale.size > 0) this._onstale(this._stale)\n  this._stale = this._fresh\n  this._fresh = new RecordStore()\n  this._gced = true\n}\n\nRecordCache.prototype.clear = function () {\n  this._gc()\n  this._gc()\n}\n\nRecordCache.prototype.destroy = function () {\n  this.clear()\n  clearInterval(this._interval)\n  this._interval = null\n}\n\nfunction toString (record) {\n  return b4a.isBuffer(record) ? b4a.toString(record, 'hex') : record\n}\n\nfunction swap (list, a, b) {\n  var tmp = list[a]\n  tmp.index = b\n  list[b].index = a\n  list[a] = list[b]\n  list[b] = tmp\n}\n{\n  \"name\": \"record-cache\",\n  \"version\": \"1.2.0\",\n  \"description\": \"Cache optimised for record like things\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"b4a\": \"^1.3.1\"\n  },\n  \"devDependencies\": {\n    \"standard\": \"^10.0.3\",\n    \"tape\": \"^4.8.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && tape test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/record-cache.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/record-cache/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/record-cache\"\n}\nmodule.exports = class RefCounter {\n  constructor() {\n    this.count = 0\n\n    this._onidle = null\n    this._idle = null\n  }\n\n  isIdle() {\n    return this.count === 0\n  }\n\n  idle() {\n    if (this.count === 0) return Promise.resolve()\n    if (this._idle !== null) return this._idle\n\n    this._idle = new Promise((resolve) => {\n      this._onidle = resolve\n    })\n\n    return this._idle\n  }\n\n  inc() {\n    this.count++\n  }\n\n  dec() {\n    if (--this.count > 0) return\n\n    if (this._onidle !== null) {\n      const resolve = this._onidle\n      this._idle = null\n      this._onidle = null\n      resolve()\n    }\n  }\n}\n{\n  \"name\": \"refcounter\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Simple refcounter\",\n  \"main\": \"index.js\",\n  \"dependencies\": {},\n  \"devDependencies\": {},\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/holepunchto/refcounter.git\"\n  },\n  \"author\": \"Holepunch Inc\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/refcounter/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/refcounter\"\n}\nconst runtime = require('./lib/runtime')\n\nif (runtime === 'bare') {\n  module.exports = require('./lib/runtime/bare')\n} else if (runtime === 'node') {\n  module.exports = require('./lib/runtime/node')\n} else {\n  module.exports = require('./lib/runtime/default')\n}\nmodule.exports =\n  typeof Bare !== 'undefined'\n    ? 'bare'\n    : typeof process !== 'undefined'\n      ? 'node'\n      : 'unknown'\nmodule.exports = require.addon.bind(require)\nif (typeof require.addon === 'function') {\n  module.exports = require.addon.bind(require)\n} else {\n  module.exports = function addon(specifier, parentURL) {\n    throw new Error(\n      `Cannot find addon '${specifier}' imported from '${parentURL}'`\n    )\n  }\n}\nif (typeof require.addon === 'function') {\n  module.exports = require.addon.bind(require)\n} else {\n  const url = require('url')\n  const resolve = require('bare-addon-resolve')\n\n  const host = process.platform + '-' + process.arch\n  const conditions = ['node', process.platform, process.arch]\n  const extensions = ['.node']\n\n  module.exports = function addon(specifier, parentURL) {\n    if (typeof parentURL === 'string') parentURL = url.pathToFileURL(parentURL)\n\n    for (const resolution of resolve(\n      specifier,\n      parentURL,\n      { host, conditions, extensions },\n      readPackage\n    )) {\n      switch (resolution.protocol) {\n        case 'file:':\n          try {\n            return require(url.fileURLToPath(resolution))\n          } catch {\n            continue\n          }\n      }\n    }\n\n    throw new Error(\n      `Cannot find addon '${specifier}' imported from '${parentURL.href}'`\n    )\n\n    function readPackage(packageURL) {\n      try {\n        return require(url.fileURLToPath(packageURL))\n      } catch (err) {\n        return null\n      }\n    }\n  }\n}\n{\n  \"name\": \"require-addon\",\n  \"version\": \"1.1.0\",\n  \"description\": \"Import native addons across JavaScript runtimes\",\n  \"exports\": {\n    \".\": \"./index.js\",\n    \"./package\": \"./package.json\"\n  },\n  \"imports\": {\n    \"fs\": {\n      \"bare\": \"bare-fs\",\n      \"default\": \"fs\"\n    },\n    \"path\": {\n      \"bare\": \"bare-path\",\n      \"default\": \"path\"\n    },\n    \"url\": {\n      \"bare\": \"bare-url\",\n      \"default\": \"url\"\n    }\n  },\n  \"files\": [\n    \"index.js\",\n    \"lib\"\n  ],\n  \"scripts\": {\n    \"test\": \"npm run lint && npm run test:bare && npm run test:node\",\n    \"test:bare\": \"bare test.js\",\n    \"test:node\": \"node test.js\",\n    \"lint\": \"prettier . --check\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/require-addon.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/require-addon/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/require-addon#readme\",\n  \"engines\": {\n    \"bare\": \">=1.10.0\"\n  },\n  \"dependencies\": {\n    \"bare-addon-resolve\": \"^1.3.0\",\n    \"bare-url\": \"^2.1.0\"\n  },\n  \"devDependencies\": {\n    \"bare-bundle\": \"^1.8.1\",\n    \"bare-bundle-evaluate\": \"^1.1.0\",\n    \"bare-fs\": \"^4.0.0\",\n    \"bare-path\": \"^3.0.0\",\n    \"brittle\": \"^3.7.0\",\n    \"prettier\": \"^3.4.1\",\n    \"prettier-config-standard\": \"^7.0.0\"\n  }\n}\nlet tmpResolve = null\nlet tmpReject = null\n\nif (Promise.withResolvers) {\n  module.exports = Promise.withResolvers.bind(Promise)\n} else {\n  module.exports = function resolveRejectPromise () {\n    const promise = new Promise(setTmp)\n    const result = { promise, resolve: tmpResolve, reject: tmpReject }\n    tmpResolve = tmpReject = null\n    return result\n  }\n}\n\nfunction setTmp (resolve, reject) {\n  tmpResolve = resolve\n  tmpReject = reject\n}\n{\n  \"name\": \"resolve-reject-promise\",\n  \"version\": \"1.1.0\",\n  \"description\": \"Create an inverted promise with no function allocs\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"standard\"\n  },\n  \"devDependencies\": {\n    \"standard\": \"^17.1.2\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/resolve-reject-promise.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/resolve-reject-promise/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/resolve-reject-promise\"\n}\nrequire.addon = require('require-addon')\n\nmodule.exports = require.addon('.', __filename)\nconst ColumnFamily = require('./lib/column-family')\nconst Iterator = require('./lib/iterator')\nconst Snapshot = require('./lib/snapshot')\nconst State = require('./lib/state')\nconst { BloomFilterPolicy, RibbonFilterPolicy } = require('./lib/filter-policy')\n\nclass RocksDB {\n  constructor(path, opts = {}) {\n    const {\n      columnFamily,\n      state = new State(this, path, opts),\n      snapshot = null,\n      keyEncoding = null,\n      valueEncoding = null\n    } = opts\n\n    this._state = state\n    this._snapshot = snapshot\n    this._columnFamily = state.getColumnFamily(columnFamily)\n    this._keyEncoding = keyEncoding\n    this._valueEncoding = valueEncoding\n    this._index = -1\n\n    this._state.addSession(this)\n  }\n\n  get opened() {\n    return this._state.opened\n  }\n\n  get closed() {\n    return this.isRoot() ? this._state.closed : this._index === -1\n  }\n\n  get path() {\n    return this._state.path\n  }\n\n  get snapshotted() {\n    return this._snapshot !== null\n  }\n\n  get defaultColumnFamily() {\n    return this._columnFamily\n  }\n\n  session({\n    columnFamily = this._columnFamily,\n    snapshot = this._snapshot !== null,\n    keyEncoding = this._keyEncoding,\n    valueEncoding = this._valueEncoding\n  } = {}) {\n    maybeClosed(this)\n\n    return new RocksDB(null, {\n      state: this._state,\n      columnFamily,\n      snapshot: snapshot ? this._snapshot || new Snapshot(this._state) : null,\n      keyEncoding,\n      valueEncoding\n    })\n  }\n\n  columnFamily(name, opts) {\n    return this.session({ ...opts, columnFamily: name })\n  }\n\n  snapshot() {\n    return this.session({ snapshot: true })\n  }\n\n  isRoot() {\n    return this === this._state.db\n  }\n\n  ready() {\n    return this._state.ready()\n  }\n\n  async close({ force } = {}) {\n    if (this._index !== -1) this._state.removeSession(this)\n\n    if (force) {\n      while (this._state.sessions.length > 0) {\n        await this._state.sessions[this._state.sessions.length - 1].close()\n      }\n    }\n\n    return this.isRoot() ? this._state.close() : Promise.resolve()\n  }\n\n  suspend() {\n    maybeClosed(this)\n\n    return this._state.suspend()\n  }\n\n  resume() {\n    maybeClosed(this)\n\n    return this._state.resume()\n  }\n\n  isIdle() {\n    return this._state.handles.isIdle()\n  }\n\n  idle() {\n    return this._state.handles.idle()\n  }\n\n  iterator(range, opts) {\n    maybeClosed(this)\n\n    return new Iterator(this, { ...range, ...opts })\n  }\n\n  async peek(range, opts) {\n    for await (const value of this.iterator({ ...range, ...opts, limit: 1 })) {\n      return value\n    }\n\n    return null\n  }\n\n  read(opts) {\n    maybeClosed(this)\n\n    return this._state.createReadBatch(this, opts)\n  }\n\n  write(opts) {\n    maybeClosed(this)\n\n    return this._state.createWriteBatch(this, opts)\n  }\n\n  flush(opts) {\n    maybeClosed(this)\n\n    return this._state.flush(this, opts)\n  }\n\n  async get(key, opts) {\n    const batch = this.read({ ...opts, capacity: 1, autoDestroy: true })\n    const value = batch.get(key)\n    batch.tryFlush()\n    return value\n  }\n\n  async put(key, value, opts) {\n    const batch = this.write({ ...opts, capacity: 1, autoDestroy: true })\n    batch.tryPut(key, value)\n    await batch.flush()\n  }\n\n  async delete(key, opts) {\n    const batch = this.write({ ...opts, capacity: 1, autoDestroy: true })\n    batch.tryDelete(key)\n    await batch.flush()\n  }\n\n  async deleteRange(start, end, opts) {\n    const batch = this.write({ ...opts, capacity: 1, autoDestroy: true })\n    batch.tryDeleteRange(start, end)\n    await batch.flush()\n  }\n\n  _ref() {\n    if (this._snapshot) this._snapshot.ref()\n    this._state.handles.inc()\n  }\n\n  _unref() {\n    if (this._snapshot) this._snapshot.unref()\n    this._state.handles.dec()\n  }\n}\n\nmodule.exports = exports = RocksDB\n\nexports.ColumnFamily = ColumnFamily\nexports.BloomFilterPolicy = BloomFilterPolicy\nexports.RibbonFilterPolicy = RibbonFilterPolicy\n\nfunction maybeClosed(db) {\n  if (db._state.closing || db._index === -1)\n    throw new Error('RocksDB session is closed')\n}\nconst c = require('compact-encoding')\nconst binding = require('../binding')\n\nconst empty = Buffer.alloc(0)\nconst resolved = Promise.resolve()\n\nclass RocksDBBatch {\n  constructor(db, opts = {}) {\n    const { capacity = 8, autoDestroy = false } = opts\n\n    db._ref()\n\n    this._db = db\n    this._destroyed = false\n    this._capacity = capacity\n    this._operations = []\n    this._promises = []\n\n    this._enqueuePromise = this._enqueuePromise.bind(this)\n\n    this._request = null\n    this._resolve = null\n    this._reject = null\n\n    this._handle = null\n    this._buffer = null\n    this._autoDestroy = autoDestroy\n\n    if (db._state.opened === true) this.ready()\n  }\n\n  _reuse(db, opts = {}) {\n    const { autoDestroy = false } = opts\n\n    db._ref()\n\n    this._db = db\n    this._destroyed = false\n    this._autoDestroy = autoDestroy\n  }\n\n  _onfinished(err) {\n    const resolve = this._resolve\n    const reject = this._reject\n\n    this._operations = []\n    this._promises = []\n    this._request = null\n    this._resolve = null\n    this._reject = null\n    this._db._state.io.dec()\n\n    if (this._autoDestroy === true) this.destroy()\n\n    if (reject !== null && err) reject(err)\n    else if (resolve !== null) resolve()\n  }\n\n  _resize() {\n    if (this._operations.length <= this._capacity) return false\n\n    while (this._operations.length > this._capacity) {\n      this._capacity *= 2\n    }\n\n    return true\n  }\n\n  async ready() {\n    if (this._handle !== null) return\n\n    if (this._db._state.opened === false) await this._db._state.ready()\n\n    this._init()\n  }\n\n  destroy() {\n    if (this._request) throw new Error('Request in progress')\n    if (this._destroyed) return\n\n    this._destroyed = true\n\n    if (this._promises.length) this._abort()\n\n    this._db._unref()\n    this._onfree()\n  }\n\n  _onfree() {\n    this._db._state.freeBatch(this, false)\n    this._db = null\n  }\n\n  _abort() {\n    for (let i = 0; i < this._promises.length; i++) {\n      const promise = this._promises[i]\n      if (promise !== null) promise.reject(new Error('Batch is destroyed'))\n    }\n\n    this._onfinished(new Error('Batch is destroyed'))\n  }\n\n  async flush() {\n    if (this._request) throw new Error('Request in progress')\n    if (this._destroyed) throw new Error('Batch is destroyed')\n\n    this._request = new Promise((resolve, reject) => {\n      this._resolve = resolve\n      this._reject = reject\n    })\n\n    this._flush()\n\n    return this._request\n  }\n\n  tryFlush() {\n    if (this._request) throw new Error('Request in progress')\n    if (this._destroyed) throw new Error('Batch is destroyed')\n\n    this._request = resolved\n\n    this._flush()\n  }\n\n  async _flush() {\n    if (this._handle === null) await this.ready()\n\n    this._db._state.io.inc()\n\n    if (this._db._state.resumed !== null) {\n      const resumed = await this._db._state.resumed.promise\n\n      if (!resumed) {\n        if (this._destroyed) {\n          this._db._state.io.dec()\n        } else {\n          this._destroyed = true\n          this._abort()\n          this._db._unref()\n        }\n      }\n    }\n  }\n\n  _enqueuePromise(resolve, reject) {\n    this._promises.push({ resolve, reject })\n  }\n\n  _encodeKey(k) {\n    if (this._db._keyEncoding) return c.encode(this._db._keyEncoding, k)\n    if (typeof k === 'string') return Buffer.from(k)\n    return k\n  }\n\n  _encodeValue(v) {\n    if (this._db._valueEncoding) return c.encode(this._db._valueEncoding, v)\n    if (v === null) return empty\n    if (typeof v === 'string') return Buffer.from(v)\n    return v\n  }\n\n  _decodeValue(b) {\n    if (this._db._valueEncoding) return c.decode(this._db._valueEncoding, b)\n    return b\n  }\n}\n\nexports.ReadBatch = class RocksDBReadBatch extends RocksDBBatch {\n  _init() {\n    this._handle = binding.readInit()\n    this._buffer = binding.readBuffer(this._handle, this._capacity)\n  }\n\n  _resize() {\n    if (super._resize() && this._handle !== null) {\n      this._buffer = binding.readBuffer(this._handle, this._capacity)\n    }\n  }\n\n  async _flush() {\n    await super._flush()\n\n    if (this._destroyed) return\n\n    try {\n      binding.read(\n        this._db._state._handle,\n        this._handle,\n        this._operations,\n        this._db._snapshot ? this._db._snapshot._handle : null,\n        this,\n        this._onread\n      )\n    } catch (err) {\n      this._db._state.io.dec()\n      throw err\n    }\n  }\n\n  _onread(errs, values) {\n    let applied = true\n\n    for (let i = 0, n = this._promises.length; i < n; i++) {\n      const promise = this._promises[i]\n      if (promise === null) continue\n\n      const err = errs[i]\n\n      if (err) {\n        applied = false\n\n        promise.reject(new Error(err))\n      } else {\n        promise.resolve(\n          values[i] ? this._decodeValue(Buffer.from(values[i])) : null\n        )\n      }\n    }\n\n    this._onfinished(applied ? null : new Error('Batch was not applied'))\n  }\n\n  get(key) {\n    if (this._request) throw new Error('Request already in progress')\n\n    const promise = new Promise(this._enqueuePromise)\n\n    this._operations.push(\n      new RocksDBGet(this._encodeKey(key), this._db._columnFamily)\n    )\n\n    this._resize()\n\n    return promise\n  }\n}\n\nexports.WriteBatch = class RocksDBWriteBatch extends RocksDBBatch {\n  _init() {\n    this._handle = binding.writeInit()\n    this._buffer = binding.writeBuffer(this._handle, this._capacity)\n  }\n\n  _resize() {\n    if (super._resize() && this._handle !== null) {\n      this._buffer = binding.writeBuffer(this._handle, this._capacity)\n    }\n  }\n\n  _onfree() {\n    this._db._state.freeBatch(this, true)\n  }\n\n  async _flush() {\n    await super._flush()\n\n    if (this._destroyed) return\n\n    try {\n      binding.write(\n        this._db._state._handle,\n        this._handle,\n        this._operations,\n        this,\n        this._onwrite\n      )\n    } catch (err) {\n      this._db._state.io.dec()\n      throw err\n    }\n  }\n\n  _onwrite(err) {\n    let applied = true\n\n    for (let i = 0, n = this._promises.length; i < n; i++) {\n      const promise = this._promises[i]\n      if (promise === null) continue\n\n      if (err) {\n        applied = false\n\n        promise.reject(new Error(err))\n      } else {\n        promise.resolve()\n      }\n    }\n\n    this._onfinished(applied ? null : new Error('Batch was not applied'))\n  }\n\n  put(key, value) {\n    if (this._request) throw new Error('Request already in progress')\n\n    const promise = new Promise(this._enqueuePromise)\n\n    this._operations.push(\n      new RocksDBPut(\n        this._encodeKey(key),\n        this._encodeValue(value),\n        this._db._columnFamily\n      )\n    )\n\n    this._resize()\n\n    return promise\n  }\n\n  tryPut(key, value) {\n    if (this._request) throw new Error('Request already in progress')\n\n    this._operations.push(\n      new RocksDBPut(\n        this._encodeKey(key),\n        this._encodeValue(value),\n        this._db._columnFamily\n      )\n    )\n\n    this._promises.push(null)\n\n    this._resize()\n  }\n\n  delete(key) {\n    if (this._request) throw new Error('Request already in progress')\n\n    const promise = new Promise(this._enqueuePromise)\n\n    this._operations.push(\n      new RocksDBDelete(this._encodeKey(key), this._db._columnFamily)\n    )\n\n    this._resize()\n\n    return promise\n  }\n\n  tryDelete(key) {\n    if (this._request) throw new Error('Request already in progress')\n\n    this._operations.push(\n      new RocksDBDelete(this._encodeKey(key), this._db._columnFamily)\n    )\n\n    this._promises.push(null)\n\n    this._resize()\n  }\n\n  deleteRange(start, end) {\n    if (this._request) throw new Error('Request already in progress')\n\n    const promise = new Promise(this._enqueuePromise)\n\n    this._operations.push(\n      new RocksDBDeleteRange(\n        this._encodeKey(start),\n        this._encodeKey(end),\n        this._db._columnFamily\n      )\n    )\n\n    this._resize()\n\n    return promise\n  }\n\n  tryDeleteRange(start, end) {\n    if (this._request) throw new Error('Request already in progress')\n\n    this._operations.push(\n      new RocksDBDeleteRange(\n        this._encodeKey(start),\n        this._encodeKey(end),\n        this._db._columnFamily\n      )\n    )\n\n    this._promises.push(null)\n\n    this._resize()\n  }\n}\n\nclass RocksDBGet {\n  constructor(key, columnFamily) {\n    this.key = key\n    this.columnFamily = columnFamily._handle\n  }\n\n  get type() {\n    return binding.GET\n  }\n}\n\nclass RocksDBPut {\n  constructor(key, value, columnFamily) {\n    this.key = key\n    this.value = value\n    this.columnFamily = columnFamily._handle\n  }\n\n  get type() {\n    return binding.PUT\n  }\n}\n\nclass RocksDBDelete {\n  constructor(key, columnFamily) {\n    this.key = key\n    this.columnFamily = columnFamily._handle\n  }\n\n  get type() {\n    return binding.DELETE\n  }\n}\n\nclass RocksDBDeleteRange {\n  constructor(start, end, columnFamily) {\n    this.start = start\n    this.end = end\n    this.columnFamily = columnFamily._handle\n  }\n\n  get type() {\n    return binding.DELETE_RANGE\n  }\n}\nconst binding = require('../binding')\nconst { BloomFilterPolicy } = require('./filter-policy')\n\nclass RocksDBColumnFamily {\n  constructor(name, opts = {}) {\n    const {\n      // Blob options\n      enableBlobFiles = false,\n      minBlobSize = 0,\n      blobFileSize = 0,\n      enableBlobGarbageCollection = true,\n      // Block table options\n      tableBlockSize = 8192,\n      tableCacheIndexAndFilterBlocks = true,\n      tableFormatVersion = 6,\n      optimizeFiltersForMemory = false,\n      blockCache = true,\n      filterPolicy = new BloomFilterPolicy(10)\n    } = opts\n\n    this._name = name\n    this._flushing = null\n    this._options = {\n      enableBlobFiles,\n      minBlobSize,\n      blobFileSize,\n      enableBlobGarbageCollection,\n      tableBlockSize,\n      tableCacheIndexAndFilterBlocks,\n      tableFormatVersion,\n      optimizeFiltersForMemory,\n      blockCache,\n      filterPolicy\n    }\n\n    const filterPolicyArguments = []\n\n    if (filterPolicy === null) filterPolicyArguments.push(0)\n    else {\n      filterPolicyArguments.push(filterPolicy.type)\n\n      switch (filterPolicy.type) {\n        case 1: // Bloom filter policy\n          filterPolicyArguments.push(filterPolicy.bitsPerKey)\n          break\n        case 2: // Ribbon filter policy\n          filterPolicyArguments.push(\n            filterPolicy.bloomEquivalentBitsPerKey,\n            filterPolicy.bloomBeforeLevel\n          )\n          break\n      }\n    }\n\n    this._handle = binding.columnFamilyInit(\n      name,\n      enableBlobFiles,\n      minBlobSize,\n      blobFileSize,\n      enableBlobGarbageCollection,\n      tableBlockSize,\n      tableCacheIndexAndFilterBlocks,\n      tableFormatVersion,\n      optimizeFiltersForMemory,\n      blockCache === false,\n      ...filterPolicyArguments\n    )\n  }\n\n  cloneSettings(name) {\n    return new RocksDBColumnFamily(name, this._options)\n  }\n\n  get name() {\n    return this._name\n  }\n\n  destroy() {\n    if (this._handle === null) return\n\n    binding.columnFamilyDestroy(this._handle)\n\n    this._handle = null\n  }\n}\n\nmodule.exports = RocksDBColumnFamily\nexports.BloomFilterPolicy = class RocksDBBloomFilterPolicy {\n  get type() {\n    return 1\n  }\n\n  constructor(bitsPerKey) {\n    this.bitsPerKey = bitsPerKey\n  }\n}\n\nexports.RibbonFilterPolicy = class RocksDBRibbonFilterPolicy {\n  get type() {\n    return 2\n  }\n\n  constructor(bloomEquivalentBitsPerKey, bloomBeforeLevel = 0) {\n    this.bloomEquivalentBitsPerKey = bloomEquivalentBitsPerKey\n    this.bloomBeforeLevel = bloomBeforeLevel\n  }\n}\nconst { Readable } = require('streamx')\nconst c = require('compact-encoding')\nconst binding = require('../binding')\n\nconst empty = Buffer.alloc(0)\n\nmodule.exports = class RocksDBIterator extends Readable {\n  constructor(db, opts = {}) {\n    const {\n      gt = null,\n      gte = null,\n      lt = null,\n      lte = null,\n      reverse = false,\n      limit = Infinity,\n      capacity = 8\n    } = opts\n\n    super()\n\n    db._ref()\n\n    this._db = db\n\n    this._gt = gt ? this._encodeKey(gt) : empty\n    this._gte = gte ? this._encodeKey(gte) : empty\n    this._lt = lt ? this._encodeKey(lt) : empty\n    this._lte = lte ? this._encodeKey(lte) : empty\n\n    this._reverse = reverse\n    this._limit = limit < 0 ? Infinity : limit\n    this._capacity = capacity\n    this._opened = false\n\n    this._pendingOpen = null\n    this._pendingRead = null\n    this._pendingDestroy = null\n\n    this._buffer = null\n    this._handle = null\n\n    if (this._db._state.opened === true) this.ready()\n  }\n\n  _onopen(err) {\n    const cb = this._pendingOpen\n    this._pendingOpen = null\n    this._opened = true\n    this._db._state.io.dec()\n    cb(err)\n  }\n\n  _onread(err, keys, values) {\n    const cb = this._pendingRead\n    this._pendingRead = null\n    this._db._state.io.dec()\n    if (err) return cb(err)\n\n    const n = keys.length\n\n    this._limit -= n\n\n    for (let i = 0; i < n; i++) {\n      this.push({\n        key: this._decodeKey(Buffer.from(keys[i])),\n        value: this._decodeValue(Buffer.from(values[i]))\n      })\n    }\n\n    if (n < this._capacity) this.push(null)\n\n    cb(null)\n  }\n\n  _onclose(err) {\n    const cb = this._pendingDestroy\n    this._pendingDestroy = null\n    this._db._state.io.dec()\n    this._db._unref()\n    cb(err)\n  }\n\n  _resize() {\n    if (this._handle !== null) {\n      this._buffer = binding.iteratorBuffer(this._handle, this._capacity)\n    }\n  }\n\n  async ready() {\n    if (this._handle !== null) return\n\n    if (this._db._state.opened === false) await this._db._state.ready()\n\n    this._init()\n  }\n\n  _init() {\n    this._handle = binding.iteratorInit()\n    this._buffer = binding.iteratorBuffer(this._handle, this._capacity)\n  }\n\n  async _open(cb) {\n    await this.ready()\n\n    this._db._state.io.inc()\n\n    if (this._db._state.resumed !== null) {\n      const resumed = await this._db._state.resumed.promise\n\n      if (!resumed) {\n        this._db._state.io.dec()\n\n        return cb(new Error('RocksDB session is closed'))\n      }\n    }\n\n    this._pendingOpen = cb\n\n    try {\n      binding.iteratorOpen(\n        this._db._state._handle,\n        this._handle,\n        this._db._columnFamily._handle,\n        this._gt,\n        this._gte,\n        this._lt,\n        this._lte,\n        this._reverse,\n        this._db._snapshot ? this._db._snapshot._handle : null,\n        this,\n        this._onopen,\n        this._onclose,\n        this._onread\n      )\n    } catch (err) {\n      this._db._state.io.dec()\n      throw err\n    }\n  }\n\n  async _read(cb) {\n    this._db._state.io.inc()\n\n    if (this._db._state.resumed !== null) {\n      const resumed = await this._db._state.resumed.promise\n\n      if (!resumed) {\n        this._db._state.io.dec()\n\n        return cb(new Error('RocksDB session is closed'))\n      }\n    }\n\n    this._pendingRead = cb\n\n    try {\n      binding.iteratorRead(this._handle, Math.min(this._capacity, this._limit))\n    } catch (err) {\n      this._db._state.io.dec()\n      throw err\n    }\n  }\n\n  async _destroy(cb) {\n    await this.ready()\n\n    this._db._state.io.inc()\n\n    this._pendingDestroy = cb\n\n    if (this._opened === false) {\n      this._db._state.io.dec()\n\n      return this._onclose(null)\n    }\n\n    try {\n      binding.iteratorClose(this._handle)\n    } catch (err) {\n      this._db._state.io.dec()\n      throw err\n    }\n  }\n\n  _encodeKey(k) {\n    if (this._db._keyEncoding !== null)\n      return c.encode(this._db._keyEncoding, k)\n    if (typeof k === 'string') return Buffer.from(k)\n    return k\n  }\n\n  _decodeKey(b) {\n    if (this._db._keyEncoding !== null)\n      return c.decode(this._db._keyEncoding, b)\n    return b\n  }\n\n  _decodeValue(b) {\n    if (this._db._valueEncoding !== null)\n      return c.decode(this._db._valueEncoding, b)\n    return b\n  }\n}\nconst binding = require('../binding')\n\nmodule.exports = class RocksDBSnapshot {\n  constructor(state) {\n    this._state = state\n\n    this._handle = null\n    this._refs = 0\n\n    if (state.deferSnapshotInit === false) this._init()\n  }\n\n  _init() {\n    this._handle = binding.snapshotCreate(this._state._handle)\n  }\n\n  ref() {\n    this._refs++\n  }\n\n  unref() {\n    if (--this._refs > 0) return\n\n    if (this._handle === null) return\n\n    binding.snapshotDestroy(this._handle)\n\n    this._handle = null\n  }\n}\nconst ReadyResource = require('ready-resource')\nconst RefCounter = require('refcounter')\nconst rrp = require('resolve-reject-promise')\nconst { ReadBatch, WriteBatch } = require('./batch')\nconst ColumnFamily = require('./column-family')\nconst binding = require('../binding')\n\nconst MAX_BATCH_REUSE = 64\n\nmodule.exports = class RocksDBState extends ReadyResource {\n  constructor(db, path, opts) {\n    super()\n\n    const {\n      columnFamily = new ColumnFamily('default', opts),\n      columnFamilies = [],\n      readOnly = false,\n      createIfMissing = true,\n      createMissingColumnFamilies = true,\n      maxBackgroundJobs = 6,\n      bytesPerSync = 1048576,\n      maxOpenFiles = -1,\n      useDirectReads = false\n    } = opts\n\n    this.path = path\n    this.db = db\n    this.handles = new RefCounter()\n    this.io = new RefCounter()\n    this.sessions = []\n    this.columnFamilies = [columnFamily]\n    this.deferSnapshotInit = true\n    this.resumed = null\n\n    this._suspended = false\n    this._suspending = null\n    this._resuming = null\n    this._columnsFlushed = false\n    this._readBatches = []\n    this._writeBatches = []\n\n    for (const columnFamily of columnFamilies) {\n      this.columnFamilies.push(\n        typeof columnFamily === 'string'\n          ? new ColumnFamily(columnFamily, opts)\n          : columnFamily\n      )\n    }\n\n    this._handle = binding.init(\n      readOnly,\n      createIfMissing,\n      createMissingColumnFamilies,\n      maxBackgroundJobs,\n      bytesPerSync,\n      maxOpenFiles,\n      useDirectReads\n    )\n  }\n\n  createReadBatch(db, opts) {\n    if (this._readBatches.length === 0) return new ReadBatch(db, opts)\n    const batch = this._readBatches.pop()\n    batch._reuse(db, opts)\n    return batch\n  }\n\n  createWriteBatch(db, opts) {\n    if (this._writeBatches.length === 0) return new WriteBatch(db, opts)\n    const batch = this._writeBatches.pop()\n    batch._reuse(db, opts)\n    return batch\n  }\n\n  freeBatch(batch, writable) {\n    const queue = writable ? this._writeBatches : this._readBatches\n    if (queue.length >= MAX_BATCH_REUSE) return\n    queue.push(batch)\n  }\n\n  addSession(db) {\n    db._index = this.sessions.push(db) - 1\n    if (db._snapshot) db._snapshot.ref()\n  }\n\n  removeSession(db) {\n    const head = this.sessions.pop()\n    if (head !== db) this.sessions[(head._index = db._index)] = head\n    db._index = -1\n    if (db._snapshot) db._snapshot.unref()\n  }\n\n  upsertColumnFamily(c) {\n    if (typeof c === 'string') {\n      let col = this.getColumnFamilyByName(c)\n      if (col) return col\n      col = this.columnFamilies[0].cloneSettings(c)\n      this.columnFamilies.push(col)\n      return col\n    }\n\n    if (this.columnFamilies.includes(c)) return c\n    this.columnFamilies.push(c)\n    return c\n  }\n\n  getColumnFamily(c) {\n    if (!c) return this.columnFamilies[0]\n    if (!this._columnsFlushed) return this.upsertColumnFamily(c)\n\n    if (typeof c !== 'string') return c\n\n    const col = this.getColumnFamilyByName(c)\n    if (col === null) throw new Error('Unknown column family')\n    return col\n  }\n\n  getColumnFamilyByName(name) {\n    for (const col of this.columnFamilies) {\n      if (col.name === name) return col\n    }\n    return null\n  }\n\n  async _open() {\n    await Promise.resolve() // allow column families to populate if ondemand\n\n    const req = { resolve: null, reject: null, handle: null }\n\n    const promise = new Promise((resolve, reject) => {\n      req.resolve = resolve\n      req.reject = reject\n    })\n\n    this._columnsFlushed = true\n\n    req.handle = binding.open(\n      this._handle,\n      this,\n      this.path,\n      this.columnFamilies.map((c) => c._handle),\n      req,\n      onopen\n    )\n\n    await promise\n\n    this.deferSnapshotInit = false\n\n    for (const session of this.sessions) {\n      if (session._snapshot) session._snapshot._init()\n    }\n\n    function onopen(err) {\n      if (err) req.reject(new Error(err))\n      else req.resolve()\n    }\n  }\n\n  async _close() {\n    if (this.resumed) this.resumed.resolve(false)\n\n    while (!this.io.isIdle()) await this.io.idle()\n    while (!this.handles.isIdle()) await this.handles.idle()\n\n    while (this.sessions.length > 0) {\n      await this.sessions[this.sessions.length - 1].close()\n    }\n\n    for (const columnFamily of this.columnFamilies) columnFamily.destroy()\n\n    const req = { resolve: null, reject: null, handle: null }\n\n    const promise = new Promise((resolve, reject) => {\n      req.resolve = resolve\n      req.reject = reject\n    })\n\n    req.handle = binding.close(this._handle, req, onclose)\n\n    await promise\n\n    function onclose(err) {\n      if (err) req.reject(new Error(err))\n      else req.resolve()\n    }\n  }\n\n  async flush(db, opts) {\n    if (this.opened === false) await this.ready()\n\n    this.io.inc()\n\n    if (this.resumed !== null) {\n      const resumed = await this.resumed.promise\n\n      if (!resumed) {\n        this.io.dec()\n\n        throw new Error('RocksDB session is closed')\n      }\n    }\n\n    const req = { resolve: null, reject: null, handle: null }\n\n    const promise = new Promise((resolve, reject) => {\n      req.resolve = resolve\n      req.reject = reject\n    })\n\n    try {\n      req.handle = binding.flush(\n        this._handle,\n        db._columnFamily._handle,\n        req,\n        onflush\n      )\n\n      await promise\n    } finally {\n      this.io.dec()\n    }\n\n    function onflush(err) {\n      if (err) req.reject(new Error(err))\n      else req.resolve()\n    }\n  }\n\n  async suspend() {\n    if (this._suspending === null) this._suspending = this._suspend()\n    return this._suspending\n  }\n\n  async _suspend() {\n    if (this.opened === false) await this.ready()\n\n    this.io.inc()\n\n    if (this._resuming !== null) await this._resuming\n\n    this.io.dec()\n\n    if (this._suspended === true) return\n\n    while (!this.io.isIdle()) await this.io.idle()\n\n    this.io.inc()\n    this.resumed = rrp()\n\n    const req = { resolve: null, reject: null, handle: null }\n\n    const promise = new Promise((resolve, reject) => {\n      req.resolve = resolve\n      req.reject = reject\n    })\n\n    try {\n      req.handle = binding.suspend(this._handle, req, onsuspend)\n\n      await promise\n\n      this._suspended = true\n    } finally {\n      this.io.dec()\n\n      this._suspending = null\n    }\n\n    function onsuspend(err) {\n      if (err) req.reject(new Error(err))\n      else req.resolve()\n    }\n  }\n\n  resume() {\n    if (this._resuming === null) this._resuming = this._resume()\n    return this._resuming\n  }\n\n  async _resume() {\n    if (this.opened === false) await this.ready()\n\n    this.io.inc()\n\n    if (this._suspending !== null) await this._suspending\n\n    if (this._suspended === false) return this.io.dec()\n\n    const req = { resolve: null, reject: null, handle: null }\n\n    const promise = new Promise((resolve, reject) => {\n      req.resolve = resolve\n      req.reject = reject\n    })\n\n    try {\n      req.handle = binding.resume(this._handle, req, onresume)\n\n      await promise\n\n      this._suspended = false\n    } finally {\n      this.io.dec()\n\n      this._resuming = null\n    }\n\n    const resumed = this.resumed\n    this.resumed = null\n    resumed.resolve(true)\n\n    function onresume(err) {\n      if (err) req.reject(new Error(err))\n      else req.resolve()\n    }\n  }\n}\n{\n  \"name\": \"rocksdb-native\",\n  \"version\": \"3.5.7\",\n  \"description\": \"librocksdb bindings for JavaScript\",\n  \"exports\": {\n    \".\": \"./index.js\",\n    \"./package\": \"./package.json\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"binding.c\",\n    \"binding.js\",\n    \"CMakeLists.txt\",\n    \"lib\",\n    \"prebuilds\",\n    \"!prebuilds/android-*/**/*.node\"\n  ],\n  \"addon\": true,\n  \"scripts\": {\n    \"test\": \"npm run lint && npm run test:bare && npm run test:node\",\n    \"test:bare\": \"bare test.js\",\n    \"test:node\": \"node test.js\",\n    \"lint\": \"prettier . --check\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/rocksdb-native.git\"\n  },\n  \"author\": \"Holepunch Inc\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/rocksdb-native/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/rocksdb-native\",\n  \"engines\": {\n    \"bare\": \">=1.16.0\"\n  },\n  \"dependencies\": {\n    \"compact-encoding\": \"^2.15.0\",\n    \"ready-resource\": \"^1.0.0\",\n    \"refcounter\": \"^1.0.0\",\n    \"require-addon\": \"^1.0.2\",\n    \"resolve-reject-promise\": \"^1.1.0\",\n    \"streamx\": \"^2.16.1\"\n  },\n  \"devDependencies\": {\n    \"bare-compat-napi\": \"^1.3.0\",\n    \"brittle\": \"^3.5.0\",\n    \"cmake-bare\": \"^1.1.14\",\n    \"cmake-fetch\": \"^1.0.1\",\n    \"cmake-napi\": \"^1.0.6\",\n    \"prettier\": \"^3.4.1\",\n    \"prettier-config-standard\": \"^7.0.0\"\n  }\n}\nmodule.exports = safetyCatch\n\nfunction isActuallyUncaught (err) {\n  if (!err) return false\n  return err instanceof TypeError ||\n    err instanceof SyntaxError ||\n    err instanceof ReferenceError ||\n    err instanceof EvalError ||\n    err instanceof RangeError ||\n    err instanceof URIError ||\n    err.code === 'ERR_ASSERTION'\n}\n\nfunction throwErrorNT (err) {\n  queueMicrotask(() => { throw err })\n}\n\nfunction safetyCatch (err) {\n  if (isActuallyUncaught(err)) {\n    throwErrorNT(err)\n    throw err\n  }\n}\n{\n  \"name\": \"safety-catch\",\n  \"version\": \"1.0.2\",\n  \"description\": \"Small module that makes sure your catch, caught an actual error and not a programming mistake or assertion\",\n  \"main\": \"index.js\",\n  \"dependencies\": {},\n  \"devDependencies\": {},\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/safety-catch.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/safety-catch/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/safety-catch\"\n}\nlet tmpResolve = null\n\nmodule.exports = class ScopeLock {\n  constructor ({ debounce = false } = {}) {\n    this.debounce = debounce\n    this.waiting = []\n    this.locked = false\n    this.skip = 0\n    this.destroyed = false\n  }\n\n  flush () {\n    if (this.locked === false && this.waiting.length === 0) return Promise.resolve(this.destroyed === false)\n\n    const promise = new Promise(setTmpResolve)\n    const resolve = tmpResolve\n\n    tmpResolve = null\n    this.waiting.push({ lock: false, resolve })\n\n    return promise\n  }\n\n  destroy () {\n    this.destroyed = true\n  }\n\n  lock () {\n    const promise = new Promise(setTmpResolve)\n    const resolve = tmpResolve\n\n    tmpResolve = null\n\n    if (this.locked === true) {\n      this.waiting.push({ lock: true, resolve })\n      return promise\n    }\n\n    if (this.destroyed === true) {\n      resolve(false)\n      return promise\n    }\n\n    this.locked = true\n    resolve(true)\n\n    return promise\n  }\n\n  unlock () {\n    if (this.destroyed === true) {\n      for (let i = 0; i < this.waiting.length; i++) {\n        this.waiting[i].resolve(false)\n      }\n      this.waiting = []\n      this.skip = 0\n      this.locked = false\n      return\n    }\n\n    if (this.skip !== 0) {\n      for (let i = 0; i < this.skip; i++) {\n        const { lock, resolve } = this.waiting[i]\n        resolve(lock === false)\n      }\n\n      this.waiting = this.waiting.slice(this.skip)\n      this.skip = 0\n    }\n\n    while (this.waiting.length > 0 && this.waiting[0].lock === false) {\n      this.waiting.shift().resolve(true)\n    }\n\n    if (this.waiting.length === 0) {\n      this.locked = false\n      return\n    }\n\n    const { resolve } = this.waiting.shift()\n    if (this.debounce === true) this.skip = this.waiting.length\n\n    resolve(true)\n  }\n}\n\nfunction setTmpResolve (resolve) {\n  tmpResolve = resolve\n}\n{\n  \"name\": \"scope-lock\",\n  \"version\": \"1.2.4\",\n  \"description\": \"Some concurrency semantics around entering scopes\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"devDependencies\": {\n    \"brittle\": \"^3.7.0\",\n    \"standard\": \"^17.1.2\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/holepunchto/scope-lock.git\"\n  },\n  \"author\": \"Holepunch Inc.\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/scope-lock/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/scope-lock\"\n}\nconst set = require('unordered-set')\n\nmodule.exports = opts => new ShuffledPriorityQueue(opts)\n\nclass ShuffledPriorityQueue {\n  constructor (opts) {\n    this.priorities = []\n    this.equals = (opts && opts.equals) || null\n  }\n\n  get length () {\n    return this.priorities.reduce(add, 0)\n  }\n\n  [Symbol.iterator] () {\n    return new Iterator(this)\n  }\n\n  head () {\n    for (let i = this.priorities.length - 1; i >= 0; i--) {\n      const q = this.priorities[i]\n      if (q.length) return shuffle(q, 0)\n    }\n    return null\n  }\n\n  tail () {\n    for (let i = 0; i < this.priorities.length; i++) {\n      const q = this.priorities[i]\n      if (q.length) return shuffle(q, 0)\n    }\n    return null\n  }\n\n  prev (prev) {\n    if (!prev) return this.tail()\n    return next(this.priorities, prev, 1)\n  }\n\n  next (prev) {\n    if (!prev) return this.head()\n    return next(this.priorities, prev, -1)\n  }\n\n  shift () {\n    return this.remove(this.head())\n  }\n\n  pop () {\n    return this.remove(this.tail())\n  }\n\n  add (val) {\n    const prio = val.priority || 0\n    while (prio >= this.priorities.length) this.priorities.push([])\n    set.add(this.priorities[prio], val)\n    return val\n  }\n\n  remove (val) {\n    if (!val) return null\n\n    if (val._index === undefined) {\n      val = this.find(val)\n      if (!val) return null\n    }\n\n    return set.remove(this.priorities[val.priority || 0], val)\n  }\n\n  has (val) {\n    if (val._index === undefined) return this.find(val)\n    const priority = val.priority || 0\n    if (priority >= this.priorities.length) return false\n    return set.has(this.priorities[priority], val)\n  }\n\n  find (val) {\n    if (val._index !== undefined) return val\n\n    const prio = val.priority || 0\n    const qs = this.priorities\n    if (prio >= qs.length) return null\n\n    const q = qs[prio]\n\n    for (let i = 0; i < q.length; i++) {\n      if (this.equals(q[i], val)) return q[i]\n    }\n\n    return null\n  }\n}\n\nclass Iterator {\n  constructor (queue) {\n    this.prev = null\n    this.queue = queue\n  }\n\n  next () {\n    const next = this.queue.next(this.prev)\n    this.prev = next\n    return { done: !next, value: next }\n  }\n}\n\nfunction shuffle (q, i) {\n  const ran = i + Math.floor(Math.random() * (q.length - i))\n  set.swap(q, q[ran], q[i])\n  return q[i]\n}\n\nfunction next (queues, prev, inc) {\n  let i = prev.priority || 0\n  let j = (prev._index || 0) + 1\n\n  while (true) {\n    if (i < 0 || i >= queues.length) return null\n    const q = queues[i]\n\n    if (j >= q.length) {\n      i += inc\n      j = 0\n      continue\n    }\n\n    return shuffle(q, j)\n  }\n}\n\nfunction add (len, b) {\n  return len + b.length\n}\n{\n  \"name\": \"shuffled-priority-queue\",\n  \"version\": \"2.1.0\",\n  \"description\": \"A priority queue that shuffles elements with the same priority.\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"standard && tape test.js\"\n  },\n  \"dependencies\": {\n    \"unordered-set\": \"^2.0.1\"\n  },\n  \"devDependencies\": {\n    \"standard\": \"^12.0.1\",\n    \"tape\": \"^4.9.1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/shuffled-priority-queue.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/shuffled-priority-queue/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/shuffled-priority-queue\"\n}\nmodule.exports = class Signal {\n  constructor () {\n    this._resolve = null\n    this._reject = null\n    this._promise = null\n    this._bind = bind.bind(this)\n    this._onerror = clear.bind(this)\n    this._onsuccess = clear.bind(this, null)\n    this._timers = new Set()\n  }\n\n  wait (max) {\n    if (!this._promise) {\n      this._promise = new Promise(this._bind)\n      this._promise.then(this._onsuccess).catch(this._onerror)\n    }\n    if (max) return this._sleep(max)\n    return this._promise\n  }\n\n  _sleep (max) {\n    const s = new Promise((resolve, reject) => {\n      const done = () => {\n        this._timers.delete(state)\n        resolve(true)\n      }\n      const id = setTimeout(done, max)\n      const state = { id, resolve, reject }\n      this._timers.add(state)\n    })\n\n    return s\n  }\n\n  notify (err) {\n    if (!this._promise) return\n    const resolve = this._resolve\n    const reject = this._reject\n    this._promise = null\n    if (err) reject(err)\n    else resolve(true)\n  }\n}\n\nfunction clear (err) {\n  for (const { id, resolve, reject } of this._timers) {\n    clearTimeout(id)\n    if (err) reject(err)\n    else resolve(true)\n  }\n  this._timers.clear()\n}\n\nfunction bind (resolve, reject) {\n  this._resolve = resolve\n  this._reject = reject\n}\n{\n  \"name\": \"signal-promise\",\n  \"version\": \"1.0.3\",\n  \"description\": \"Simple wait/notify promise with optional max wait time\",\n  \"main\": \"index.js\",\n  \"dependencies\": {},\n  \"devDependencies\": {},\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/signal-promise.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/signal-promise/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/signal-promise\"\n}\nvar varint = require('varint')\nexports.encode = function encode (v, b, o) {\n  v = v >= 0 ? v*2 : v*-2 - 1\n  var r = varint.encode(v, b, o)\n  encode.bytes = varint.encode.bytes\n  return r\n}\nexports.decode = function decode (b, o) {\n  var v = varint.decode(b, o)\n  decode.bytes = varint.decode.bytes\n  return v & 1 ? (v+1) / -2 : v / 2\n}\n\nexports.encodingLength = function (v) {\n  return varint.encodingLength(v >= 0 ? v*2 : v*-2 - 1)\n}\n{\n  \"name\": \"signed-varint\",\n  \"description\": \"efficiently store signed integers in varint\",\n  \"version\": \"2.0.1\",\n  \"homepage\": \"https://github.com/dominictarr/signed-varint\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/dominictarr/signed-varint.git\"\n  },\n  \"dependencies\": {\n    \"varint\": \"~5.0.0\"\n  },\n  \"devDependencies\": {\n    \"tape\": \"~2.12.3\"\n  },\n  \"scripts\": {\n    \"test\": \"node test.js\"\n  },\n  \"author\": \"Dominic Tarr <dominic.tarr@gmail.com> (http://dominictarr.com)\",\n  \"license\": \"MIT\"\n}\nrequire.addon = require('require-addon')\n\nmodule.exports = require.addon('.', __filename)\nconst binding = require('./binding')\nconst b4a = require('b4a')\n\nfunction unary (u8, u16, u32) {\n  return function unary (buf, result = b4a.allocUnsafe(buf.byteLength)) {\n    if (buf.byteLength % 16 !== 0) {\n      throw new Error('Buffer length must be a multiple of 16')\n    }\n\n    if (buf.byteLength !== result.byteLength) {\n      throw new Error('Length of result buffer is insufficient')\n    }\n\n    const n = buf.BYTES_PER_ELEMENT\n\n    if (n === 1) u8(buf, result)\n    else if (n === 2) u16(buf, result)\n    else u32(buf, result)\n\n    return result\n  }\n}\n\nfunction binary (u8, u16, u32) {\n  return function binary (a, b, result = b4a.allocUnsafe(a.byteLength)) {\n    if (a.byteLength % 16 !== 0) {\n      throw new Error('Buffer length must be a multiple of 16')\n    }\n\n    if (a.byteLength !== b.byteLength || a.byteLength !== result.byteLength) {\n      throw new Error('Buffers must be the same length')\n    }\n\n    const n = a.BYTES_PER_ELEMENT\n\n    if (n === 1) u8(a, b, result)\n    else if (n === 2) u16(a, b, result)\n    else u32(a, b, result)\n\n    return result\n  }\n}\n\nfunction reduce (u8, u16, u32) {\n  return function reduce (buf) {\n    if (buf.byteLength % 16 !== 0) {\n      throw new Error('Buffer length must be a multiple of 16')\n    }\n\n    const n = buf.BYTES_PER_ELEMENT\n\n    if (n === 1) return u8(buf)\n    if (n === 2) return u16(buf)\n    return u32(buf)\n  }\n}\n\nexports.allo = function allo (buf) {\n  if (buf.byteLength % 16 !== 0) {\n    throw new Error('Buffer length must be a multiple of 16')\n  }\n\n  return binding.simdle_napi_allo_v128(buf) !== 0\n}\n\nexports.allz = function allz (buf) {\n  if (buf.byteLength % 16 !== 0) {\n    throw new Error('Buffer length must be a multiple of 16')\n  }\n\n  return binding.simdle_napi_allz_v128(buf) !== 0\n}\n\nexports.and = binary(\n  binding.simdle_napi_and_v128_u8,\n  binding.simdle_napi_and_v128_u16,\n  binding.simdle_napi_and_v128_u32\n)\n\nexports.clear = binary(\n  binding.simdle_napi_clear_v128_u8,\n  binding.simdle_napi_clear_v128_u16,\n  binding.simdle_napi_clear_v128_u32\n)\n\nexports.clo = unary(\n  binding.simdle_napi_clo_v128_u8,\n  binding.simdle_napi_clo_v128_u16,\n  binding.simdle_napi_clo_v128_u32\n)\n\nexports.clz = unary(\n  binding.simdle_napi_clz_v128_u8,\n  binding.simdle_napi_clz_v128_u16,\n  binding.simdle_napi_clz_v128_u32\n)\n\nexports.cnt = unary(\n  binding.simdle_napi_cnt_v128_u8,\n  binding.simdle_napi_cnt_v128_u16,\n  binding.simdle_napi_cnt_v128_u32\n)\n\nexports.cto = unary(\n  binding.simdle_napi_cto_v128_u8,\n  binding.simdle_napi_cto_v128_u16,\n  binding.simdle_napi_cto_v128_u32\n)\n\nexports.ctz = unary(\n  binding.simdle_napi_ctz_v128_u8,\n  binding.simdle_napi_ctz_v128_u16,\n  binding.simdle_napi_ctz_v128_u32\n)\n\nexports.not = unary(\n  binding.simdle_napi_not_v128_u8,\n  binding.simdle_napi_not_v128_u16,\n  binding.simdle_napi_not_v128_u32\n)\n\nexports.or = binary(\n  binding.simdle_napi_or_v128_u8,\n  binding.simdle_napi_or_v128_u16,\n  binding.simdle_napi_or_v128_u32\n)\n\nexports.sum = reduce(\n  binding.simdle_napi_sum_v128_u8,\n  binding.simdle_napi_sum_v128_u16,\n  binding.simdle_napi_sum_v128_u32\n)\n\nexports.xor = binary(\n  binding.simdle_napi_xor_v128_u8,\n  binding.simdle_napi_xor_v128_u16,\n  binding.simdle_napi_xor_v128_u32\n)\n{\n  \"name\": \"simdle-native\",\n  \"version\": \"1.3.6\",\n  \"description\": \"libsimdle JavaScript bindings for Node.js\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"macros.h\",\n    \"binding.c\",\n    \"binding.js\",\n    \"CMakeLists.txt\",\n    \"prebuilds\"\n  ],\n  \"addon\": true,\n  \"scripts\": {\n    \"test\": \"npm run lint && npm run test:bare && npm run test:node\",\n    \"test:bare\": \"bare test.mjs\",\n    \"test:node\": \"node test.mjs\",\n    \"lint\": \"standard\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/simdle-native.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/simdle-native/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/simdle-native#readme\",\n  \"dependencies\": {\n    \"b4a\": \"^1.6.0\",\n    \"require-addon\": \"^1.1.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.0\",\n    \"cmake-bare\": \"^1.1.7\",\n    \"cmake-fetch\": \"^1.1.0\",\n    \"cmake-napi\": \"^1.0.2\",\n    \"standard\": \"^17.0.0\"\n  }\n}\nconst b4a = require('b4a')\nconst scalar = require('./scalar')\n\nfunction view (buf, n) {\n  if (n === buf.BYTES_PER_ELEMENT) return buf\n\n  let TypedArray\n\n  if (n === 1) TypedArray = Uint8Array\n  else if (n === 2) TypedArray = Uint16Array\n  else TypedArray = Uint32Array\n\n  return new TypedArray(buf.buffer, buf.byteOffset, buf.byteLength / n)\n}\n\nfunction unary (u8, u16 = u8, u32 = u16) {\n  return function unary (buf, result = b4a.allocUnsafe(buf.byteLength)) {\n    if (buf.byteLength % 16 !== 0) {\n      throw new Error('Buffer length must be a multiple of 16')\n    }\n\n    if (buf.byteLength !== result.byteLength) {\n      throw new Error('Length of result buffer is insufficient')\n    }\n\n    const n = buf.BYTES_PER_ELEMENT\n\n    if (n === 1) u8(buf, view(result, n))\n    else if (n === 2) u16(buf, view(result, n))\n    else u32(buf, view(result, n))\n\n    return result\n  }\n}\n\nfunction binary (u8, u16 = u8, u32 = u16) {\n  return function binary (a, b, result = b4a.allocUnsafe(a.byteLength)) {\n    if (a.byteLength % 16 !== 0) {\n      throw new Error('Buffer length must be a multiple of 16')\n    }\n\n    if (a.byteLength !== b.byteLength || a.byteLength !== result.byteLength) {\n      throw new Error('Buffers must be the same length')\n    }\n\n    const n = a.BYTES_PER_ELEMENT\n\n    if (n === 1) u8(a, b, view(result, n))\n    else if (n === 2) u16(a, b, view(result, n))\n    else u32(a, b, view(result, n))\n\n    return result\n  }\n}\n\nfunction reduce (u8, u16 = u8, u32 = u16) {\n  return function reduce (buf) {\n    if (buf.byteLength % 16 !== 0) {\n      throw new Error('Buffer length must be a multiple of 16')\n    }\n\n    const n = buf.BYTES_PER_ELEMENT\n\n    if (n === 1) return u8(buf)\n    if (n === 2) return u16(buf)\n    return u32(buf)\n  }\n}\n\nexports.allo = function allo (buf) {\n  if (buf.byteLength % 16 !== 0) {\n    throw new Error('Buffer length must be a multiple of 16')\n  }\n\n  const m = 2 ** (buf.BYTES_PER_ELEMENT * 8) - 1\n\n  for (let i = 0, n = buf.length; i < n; i++) {\n    if (buf[i] !== m) return false\n  }\n\n  return true\n}\n\nexports.allz = function allz (buf) {\n  if (buf.byteLength % 16 !== 0) {\n    throw new Error('Buffer length must be a multiple of 16')\n  }\n\n  for (let i = 0, n = buf.length; i < n; i++) {\n    if (buf[i] !== 0) return false\n  }\n\n  return true\n}\n\nexports.and = binary(\n  (a, b, result) => {\n    for (let i = 0, n = result.length; i < n; i++) {\n      result[i] = a[i] & b[i]\n    }\n  }\n)\n\nexports.clear = binary(\n  (a, b, result) => {\n    for (let i = 0, n = result.length; i < n; i++) {\n      result[i] = a[i] & ~b[i]\n    }\n  }\n)\n\nexports.clo = unary(\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = 24 - scalar.clo(buf[i])\n    }\n  },\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = 16 - scalar.clo(buf[i])\n    }\n  },\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = scalar.clo(buf[i])\n    }\n  }\n)\n\nexports.clz = unary(\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = 24 - scalar.clz(buf[i])\n    }\n  },\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = 16 - scalar.clz(buf[i])\n    }\n  },\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = scalar.clz(buf[i])\n    }\n  }\n)\n\nexports.cnt = unary(\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = scalar.cnt(buf[i]) & 0xff\n    }\n  },\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = scalar.cnt(buf[i]) & 0xffff\n    }\n  },\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = scalar.cnt(buf[i])\n    }\n  }\n)\n\nexports.cto = unary(\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = Math.min(scalar.cto(buf[i]), 8)\n    }\n  },\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = Math.min(scalar.cto(buf[i]), 16)\n    }\n  },\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = scalar.cto(buf[i])\n    }\n  }\n)\n\nexports.ctz = unary(\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = Math.min(scalar.ctz(buf[i]), 8)\n    }\n  },\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = Math.min(scalar.ctz(buf[i]), 16)\n    }\n  },\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = scalar.ctz(buf[i])\n    }\n  }\n)\n\nexports.not = unary(\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = ~buf[i]\n    }\n  }\n)\n\nexports.or = binary(\n  (a, b, result) => {\n    for (let i = 0, n = result.length; i < n; i++) {\n      result[i] = a[i] | b[i]\n    }\n  }\n)\n\nexports.sum = reduce(\n  (buf) => {\n    let result = 0n\n\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result += BigInt(buf[i])\n    }\n\n    return result\n  }\n)\n\nexports.xor = binary(\n  (a, b, result) => {\n    for (let i = 0, n = result.length; i < n; i++) {\n      result[i] = a[i] ^ b[i]\n    }\n  }\n)\ntry {\n  module.exports = require('simdle-native')\n} catch {\n  module.exports = require('./fallback')\n}\n{\n  \"name\": \"simdle-universal\",\n  \"version\": \"1.1.2\",\n  \"description\": \"Universal wrapper for libsimdle with a JavaScript fallback\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"fallback.js\",\n    \"index.js\",\n    \"scalar.js\"\n  ],\n  \"browser\": {\n    \"./index.js\": \"./fallback.js\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.mjs\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/simdle-universal.git\"\n  },\n  \"author\": \"Kasper Isager Dalsgarð <kasper@funktionel.co>\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/simdle-universal/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/simdle-universal#readme\",\n  \"dependencies\": {\n    \"b4a\": \"^1.6.0\"\n  },\n  \"optionalDependencies\": {\n    \"simdle-native\": \"^1.1.1\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.0\",\n    \"standard\": \"^17.0.0\"\n  }\n}\nconst clz = exports.clz = function clz (n) {\n  return Math.clz32(n)\n}\n\nexports.clo = function clo (n) {\n  return clz(~n)\n}\n\nconst ctz = exports.ctz = function ctz (n) {\n  return 32 - (n === 0 ? 0 : (clz(n & -n) + 1))\n}\n\nexports.cto = function cto (n) {\n  return ctz(~n)\n}\n\nexports.cnt = function cnt (n) {\n  n = n - ((n >>> 1) & 0x55555555)\n  n = (n & 0x33333333) + ((n >>> 2) & 0x33333333)\n  n = (n + (n >>> 4)) & 0x0f0f0f0f\n  n = (n * 0x01010101) >>> 24\n  return n\n}\nrequire.addon = require('require-addon')\n\nmodule.exports = require.addon('.', __filename)\n{\n  \"name\": \"sodium-native\",\n  \"version\": \"4.3.3\",\n  \"description\": \"Low level bindings for libsodium\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"binding.c\",\n    \"macros.h\",\n    \"extensions\",\n    \"prebuilds\",\n    \"CMakeLists.txt\"\n  ],\n  \"addon\": true,\n  \"dependencies\": {\n    \"require-addon\": \"^1.1.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.5.0\",\n    \"cmake-bare\": \"^1.1.10\",\n    \"cmake-fetch\": \"^1.0.1\",\n    \"cmake-napi\": \"^1.0.5\",\n    \"standard\": \"^17.1.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test/*.js\"\n  },\n  \"standard\": {\n    \"ignore\": [\n      \"/test/fixtures/*.js\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/holepunchto/sodium-native.git\"\n  },\n  \"contributors\": [\n    \"Emil Bay <github@tixz.dk> (http://bayes.dk)\",\n    \"Mathias Buus <mathiasbuus@gmail.com> (https://mafinto.sh)\",\n    \"Christophe Diederichs <chm-diederichs@hyperdivision.dk>\"\n  ],\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/sodium-native/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/sodium-native\"\n}\nconst sodium = require('sodium-universal')\nconst b4a = require('b4a')\n\nconst ABYTES = sodium.crypto_secretstream_xchacha20poly1305_ABYTES\nconst TAG_MESSAGE = sodium.crypto_secretstream_xchacha20poly1305_TAG_MESSAGE\nconst TAG_FINAL = sodium.crypto_secretstream_xchacha20poly1305_TAG_FINAL\nconst STATEBYTES = sodium.crypto_secretstream_xchacha20poly1305_STATEBYTES\nconst HEADERBYTES = sodium.crypto_secretstream_xchacha20poly1305_HEADERBYTES\nconst KEYBYTES = sodium.crypto_secretstream_xchacha20poly1305_KEYBYTES\nconst TAG_FINAL_BYTE = b4a.isBuffer(TAG_FINAL) ? TAG_FINAL[0] : TAG_FINAL\n\nconst EMPTY = b4a.alloc(0)\nconst TAG = b4a.alloc(1)\n\nclass Push {\n  constructor (key, state = b4a.allocUnsafeSlow(STATEBYTES), header = b4a.allocUnsafeSlow(HEADERBYTES)) {\n    if (!TAG_FINAL) throw new Error('JavaScript sodium version needs to support crypto_secretstream_xchacha20poly')\n\n    this.key = key\n    this.state = state\n    this.header = header\n\n    sodium.crypto_secretstream_xchacha20poly1305_init_push(this.state, this.header, this.key)\n  }\n\n  next (message, cipher = b4a.allocUnsafe(message.byteLength + ABYTES)) {\n    sodium.crypto_secretstream_xchacha20poly1305_push(this.state, cipher, message, null, TAG_MESSAGE)\n    return cipher\n  }\n\n  final (message = EMPTY, cipher = b4a.allocUnsafe(ABYTES)) {\n    sodium.crypto_secretstream_xchacha20poly1305_push(this.state, cipher, message, null, TAG_FINAL)\n    return cipher\n  }\n}\n\nclass Pull {\n  constructor (key, state = b4a.allocUnsafeSlow(STATEBYTES)) {\n    if (!TAG_FINAL) throw new Error('JavaScript sodium version needs to support crypto_secretstream_xchacha20poly')\n\n    this.key = key\n    this.state = state\n    this.final = false\n  }\n\n  init (header) {\n    sodium.crypto_secretstream_xchacha20poly1305_init_pull(this.state, header, this.key)\n  }\n\n  next (cipher, message = b4a.allocUnsafe(cipher.byteLength - ABYTES)) {\n    sodium.crypto_secretstream_xchacha20poly1305_pull(this.state, message, TAG, cipher, null)\n    this.final = TAG[0] === TAG_FINAL_BYTE\n    return message\n  }\n}\n\nfunction keygen (buf = b4a.alloc(KEYBYTES)) {\n  sodium.crypto_secretstream_xchacha20poly1305_keygen(buf)\n  return buf\n}\n\nmodule.exports = {\n  keygen,\n  KEYBYTES,\n  ABYTES,\n  STATEBYTES,\n  HEADERBYTES,\n  Push,\n  Pull\n}\n{\n  \"name\": \"sodium-secretstream\",\n  \"version\": \"1.1.1\",\n  \"description\": \"Wraps libsodiums secretstream in a higher level abstraction\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"b4a\": \"^1.1.1\",\n    \"sodium-universal\": \"^4.0.0\"\n  },\n  \"devDependencies\": {\n    \"standard\": \"^17.0.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/sodium-secretstream.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/sodium-secretstream/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/sodium-secretstream\"\n}\nmodule.exports = require('sodium-native')\n{\n  \"name\": \"sodium-universal\",\n  \"version\": \"4.0.1\",\n  \"description\": \"Universal wrapper for sodium-javascript and sodium-native working in Node.js and the Browser\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"sodium-native\": \"^4.0.0\"\n  },\n  \"peerDependencies\": {\n    \"sodium-javascript\": \"~0.8.0\"\n  },\n  \"peerDependenciesMeta\": {\n    \"sodium-javascript\": {\n      \"optional\": true\n    }\n  },\n  \"scripts\": {\n    \"prepublish\": \"./build-scripts/generate.js\"\n  },\n  \"browser\": {\n    \"sodium-native\": \"sodium-javascript\"\n  },\n  \"browserify\": {\n    \"transform\": [\n      \"./build-scripts/transform.js\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/sodium-friends/sodium-universal.git\"\n  },\n  \"keywords\": [\n    \"libsodium\",\n    \"sodium\",\n    \"sodium-native\",\n    \"sodium-javascript\",\n    \"browserify\"\n  ],\n  \"author\": \"Emil Bay <github@tixz.dk>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/sodium-friends/sodium-universal/issues\"\n  },\n  \"homepage\": \"https://github.com/sodium-friends/sodium-universal#readme\"\n}\nvar tick = 1\nvar maxTick = 65535\nvar resolution = 4\nvar timer\nvar inc = function () {\n  tick = (tick + 1) & maxTick\n}\n\n\nmodule.exports = function (seconds) {\n  if (!timer) {\n    timer = setInterval(inc, (1000 / resolution) | 0)\n    if (timer.unref) timer.unref()\n  }\n\n  var size = resolution * (seconds || 5)\n  var buffer = [0]\n  var pointer = 1\n  var last = (tick - 1) & maxTick\n\n  return function (delta) {\n    var dist = (tick - last) & maxTick\n    if (dist > size) dist = size\n    last = tick\n\n    while (dist--) {\n      if (pointer === size) pointer = 0\n      buffer[pointer] = buffer[pointer === 0 ? size - 1 : pointer - 1]\n      pointer++\n    }\n\n    if (delta) buffer[pointer - 1] += delta\n\n    var top = buffer[pointer - 1]\n    var btm = buffer.length < size ? 0 : buffer[pointer === size ? 0 : pointer]\n\n    return buffer.length < resolution ? top : (top - btm) * resolution / buffer.length\n  }\n}\n{\n  \"name\": \"speedometer\",\n  \"version\": \"1.1.0\",\n  \"repository\": \"git://github.com/mafintosh/speedometer\",\n  \"description\": \"simple speed measurement in javascript\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"speed\",\n    \"bytes\",\n    \"per\",\n    \"second\",\n    \"transfer\"\n  ],\n  \"author\": \"Mathias Buus Madsen <mathiasbuus@gmail.com>\"\n}\nconst { EventEmitter } = require('events')\nconst STREAM_DESTROYED = new Error('Stream was destroyed')\nconst PREMATURE_CLOSE = new Error('Premature close')\n\nconst FIFO = require('fast-fifo')\nconst TextDecoder = require('text-decoder')\n\n/* eslint-disable no-multi-spaces */\n\n// 29 bits used total (4 from shared, 14 from read, and 11 from write)\nconst MAX = ((1 << 29) - 1)\n\n// Shared state\nconst OPENING       = 0b0001\nconst PREDESTROYING = 0b0010\nconst DESTROYING    = 0b0100\nconst DESTROYED     = 0b1000\n\nconst NOT_OPENING = MAX ^ OPENING\nconst NOT_PREDESTROYING = MAX ^ PREDESTROYING\n\n// Read state (4 bit offset from shared state)\nconst READ_ACTIVE           = 0b00000000000001 << 4\nconst READ_UPDATING         = 0b00000000000010 << 4\nconst READ_PRIMARY          = 0b00000000000100 << 4\nconst READ_QUEUED           = 0b00000000001000 << 4\nconst READ_RESUMED          = 0b00000000010000 << 4\nconst READ_PIPE_DRAINED     = 0b00000000100000 << 4\nconst READ_ENDING           = 0b00000001000000 << 4\nconst READ_EMIT_DATA        = 0b00000010000000 << 4\nconst READ_EMIT_READABLE    = 0b00000100000000 << 4\nconst READ_EMITTED_READABLE = 0b00001000000000 << 4\nconst READ_DONE             = 0b00010000000000 << 4\nconst READ_NEXT_TICK        = 0b00100000000000 << 4\nconst READ_NEEDS_PUSH       = 0b01000000000000 << 4\nconst READ_READ_AHEAD       = 0b10000000000000 << 4\n\n// Combined read state\nconst READ_FLOWING = READ_RESUMED | READ_PIPE_DRAINED\nconst READ_ACTIVE_AND_NEEDS_PUSH = READ_ACTIVE | READ_NEEDS_PUSH\nconst READ_PRIMARY_AND_ACTIVE = READ_PRIMARY | READ_ACTIVE\nconst READ_EMIT_READABLE_AND_QUEUED = READ_EMIT_READABLE | READ_QUEUED\nconst READ_RESUMED_READ_AHEAD = READ_RESUMED | READ_READ_AHEAD\n\nconst READ_NOT_ACTIVE             = MAX ^ READ_ACTIVE\nconst READ_NON_PRIMARY            = MAX ^ READ_PRIMARY\nconst READ_NON_PRIMARY_AND_PUSHED = MAX ^ (READ_PRIMARY | READ_NEEDS_PUSH)\nconst READ_PUSHED                 = MAX ^ READ_NEEDS_PUSH\nconst READ_PAUSED                 = MAX ^ READ_RESUMED\nconst READ_NOT_QUEUED             = MAX ^ (READ_QUEUED | READ_EMITTED_READABLE)\nconst READ_NOT_ENDING             = MAX ^ READ_ENDING\nconst READ_PIPE_NOT_DRAINED       = MAX ^ READ_FLOWING\nconst READ_NOT_NEXT_TICK          = MAX ^ READ_NEXT_TICK\nconst READ_NOT_UPDATING           = MAX ^ READ_UPDATING\nconst READ_NO_READ_AHEAD          = MAX ^ READ_READ_AHEAD\nconst READ_PAUSED_NO_READ_AHEAD   = MAX ^ READ_RESUMED_READ_AHEAD\n\n// Write state (18 bit offset, 4 bit offset from shared state and 14 from read state)\nconst WRITE_ACTIVE     = 0b00000000001 << 18\nconst WRITE_UPDATING   = 0b00000000010 << 18\nconst WRITE_PRIMARY    = 0b00000000100 << 18\nconst WRITE_QUEUED     = 0b00000001000 << 18\nconst WRITE_UNDRAINED  = 0b00000010000 << 18\nconst WRITE_DONE       = 0b00000100000 << 18\nconst WRITE_EMIT_DRAIN = 0b00001000000 << 18\nconst WRITE_NEXT_TICK  = 0b00010000000 << 18\nconst WRITE_WRITING    = 0b00100000000 << 18\nconst WRITE_FINISHING  = 0b01000000000 << 18\nconst WRITE_CORKED     = 0b10000000000 << 18\n\nconst WRITE_NOT_ACTIVE    = MAX ^ (WRITE_ACTIVE | WRITE_WRITING)\nconst WRITE_NON_PRIMARY   = MAX ^ WRITE_PRIMARY\nconst WRITE_NOT_FINISHING = MAX ^ (WRITE_ACTIVE | WRITE_FINISHING)\nconst WRITE_DRAINED       = MAX ^ WRITE_UNDRAINED\nconst WRITE_NOT_QUEUED    = MAX ^ WRITE_QUEUED\nconst WRITE_NOT_NEXT_TICK = MAX ^ WRITE_NEXT_TICK\nconst WRITE_NOT_UPDATING  = MAX ^ WRITE_UPDATING\nconst WRITE_NOT_CORKED    = MAX ^ WRITE_CORKED\n\n// Combined shared state\nconst ACTIVE = READ_ACTIVE | WRITE_ACTIVE\nconst NOT_ACTIVE = MAX ^ ACTIVE\nconst DONE = READ_DONE | WRITE_DONE\nconst DESTROY_STATUS = DESTROYING | DESTROYED | PREDESTROYING\nconst OPEN_STATUS = DESTROY_STATUS | OPENING\nconst AUTO_DESTROY = DESTROY_STATUS | DONE\nconst NON_PRIMARY = WRITE_NON_PRIMARY & READ_NON_PRIMARY\nconst ACTIVE_OR_TICKING = WRITE_NEXT_TICK | READ_NEXT_TICK\nconst TICKING = ACTIVE_OR_TICKING & NOT_ACTIVE\nconst IS_OPENING = OPEN_STATUS | TICKING\n\n// Combined shared state and read state\nconst READ_PRIMARY_STATUS = OPEN_STATUS | READ_ENDING | READ_DONE\nconst READ_STATUS = OPEN_STATUS | READ_DONE | READ_QUEUED\nconst READ_ENDING_STATUS = OPEN_STATUS | READ_ENDING | READ_QUEUED\nconst READ_READABLE_STATUS = OPEN_STATUS | READ_EMIT_READABLE | READ_QUEUED | READ_EMITTED_READABLE\nconst SHOULD_NOT_READ = OPEN_STATUS | READ_ACTIVE | READ_ENDING | READ_DONE | READ_NEEDS_PUSH | READ_READ_AHEAD\nconst READ_BACKPRESSURE_STATUS = DESTROY_STATUS | READ_ENDING | READ_DONE\nconst READ_UPDATE_SYNC_STATUS = READ_UPDATING | OPEN_STATUS | READ_NEXT_TICK | READ_PRIMARY\nconst READ_NEXT_TICK_OR_OPENING = READ_NEXT_TICK | OPENING\n\n// Combined write state\nconst WRITE_PRIMARY_STATUS = OPEN_STATUS | WRITE_FINISHING | WRITE_DONE\nconst WRITE_QUEUED_AND_UNDRAINED = WRITE_QUEUED | WRITE_UNDRAINED\nconst WRITE_QUEUED_AND_ACTIVE = WRITE_QUEUED | WRITE_ACTIVE\nconst WRITE_DRAIN_STATUS = WRITE_QUEUED | WRITE_UNDRAINED | OPEN_STATUS | WRITE_ACTIVE\nconst WRITE_STATUS = OPEN_STATUS | WRITE_ACTIVE | WRITE_QUEUED | WRITE_CORKED\nconst WRITE_PRIMARY_AND_ACTIVE = WRITE_PRIMARY | WRITE_ACTIVE\nconst WRITE_ACTIVE_AND_WRITING = WRITE_ACTIVE | WRITE_WRITING\nconst WRITE_FINISHING_STATUS = OPEN_STATUS | WRITE_FINISHING | WRITE_QUEUED_AND_ACTIVE | WRITE_DONE\nconst WRITE_BACKPRESSURE_STATUS = WRITE_UNDRAINED | DESTROY_STATUS | WRITE_FINISHING | WRITE_DONE\nconst WRITE_UPDATE_SYNC_STATUS = WRITE_UPDATING | OPEN_STATUS | WRITE_NEXT_TICK | WRITE_PRIMARY\nconst WRITE_DROP_DATA = WRITE_FINISHING | WRITE_DONE | DESTROY_STATUS\n\nconst asyncIterator = Symbol.asyncIterator || Symbol('asyncIterator')\n\nclass WritableState {\n  constructor (stream, { highWaterMark = 16384, map = null, mapWritable, byteLength, byteLengthWritable } = {}) {\n    this.stream = stream\n    this.queue = new FIFO()\n    this.highWaterMark = highWaterMark\n    this.buffered = 0\n    this.error = null\n    this.pipeline = null\n    this.drains = null // if we add more seldomly used helpers we might them into a subobject so its a single ptr\n    this.byteLength = byteLengthWritable || byteLength || defaultByteLength\n    this.map = mapWritable || map\n    this.afterWrite = afterWrite.bind(this)\n    this.afterUpdateNextTick = updateWriteNT.bind(this)\n  }\n\n  get ended () {\n    return (this.stream._duplexState & WRITE_DONE) !== 0\n  }\n\n  push (data) {\n    if ((this.stream._duplexState & WRITE_DROP_DATA) !== 0) return false\n    if (this.map !== null) data = this.map(data)\n\n    this.buffered += this.byteLength(data)\n    this.queue.push(data)\n\n    if (this.buffered < this.highWaterMark) {\n      this.stream._duplexState |= WRITE_QUEUED\n      return true\n    }\n\n    this.stream._duplexState |= WRITE_QUEUED_AND_UNDRAINED\n    return false\n  }\n\n  shift () {\n    const data = this.queue.shift()\n\n    this.buffered -= this.byteLength(data)\n    if (this.buffered === 0) this.stream._duplexState &= WRITE_NOT_QUEUED\n\n    return data\n  }\n\n  end (data) {\n    if (typeof data === 'function') this.stream.once('finish', data)\n    else if (data !== undefined && data !== null) this.push(data)\n    this.stream._duplexState = (this.stream._duplexState | WRITE_FINISHING) & WRITE_NON_PRIMARY\n  }\n\n  autoBatch (data, cb) {\n    const buffer = []\n    const stream = this.stream\n\n    buffer.push(data)\n    while ((stream._duplexState & WRITE_STATUS) === WRITE_QUEUED_AND_ACTIVE) {\n      buffer.push(stream._writableState.shift())\n    }\n\n    if ((stream._duplexState & OPEN_STATUS) !== 0) return cb(null)\n    stream._writev(buffer, cb)\n  }\n\n  update () {\n    const stream = this.stream\n\n    stream._duplexState |= WRITE_UPDATING\n\n    do {\n      while ((stream._duplexState & WRITE_STATUS) === WRITE_QUEUED) {\n        const data = this.shift()\n        stream._duplexState |= WRITE_ACTIVE_AND_WRITING\n        stream._write(data, this.afterWrite)\n      }\n\n      if ((stream._duplexState & WRITE_PRIMARY_AND_ACTIVE) === 0) this.updateNonPrimary()\n    } while (this.continueUpdate() === true)\n\n    stream._duplexState &= WRITE_NOT_UPDATING\n  }\n\n  updateNonPrimary () {\n    const stream = this.stream\n\n    if ((stream._duplexState & WRITE_FINISHING_STATUS) === WRITE_FINISHING) {\n      stream._duplexState = stream._duplexState | WRITE_ACTIVE\n      stream._final(afterFinal.bind(this))\n      return\n    }\n\n    if ((stream._duplexState & DESTROY_STATUS) === DESTROYING) {\n      if ((stream._duplexState & ACTIVE_OR_TICKING) === 0) {\n        stream._duplexState |= ACTIVE\n        stream._destroy(afterDestroy.bind(this))\n      }\n      return\n    }\n\n    if ((stream._duplexState & IS_OPENING) === OPENING) {\n      stream._duplexState = (stream._duplexState | ACTIVE) & NOT_OPENING\n      stream._open(afterOpen.bind(this))\n    }\n  }\n\n  continueUpdate () {\n    if ((this.stream._duplexState & WRITE_NEXT_TICK) === 0) return false\n    this.stream._duplexState &= WRITE_NOT_NEXT_TICK\n    return true\n  }\n\n  updateCallback () {\n    if ((this.stream._duplexState & WRITE_UPDATE_SYNC_STATUS) === WRITE_PRIMARY) this.update()\n    else this.updateNextTick()\n  }\n\n  updateNextTick () {\n    if ((this.stream._duplexState & WRITE_NEXT_TICK) !== 0) return\n    this.stream._duplexState |= WRITE_NEXT_TICK\n    if ((this.stream._duplexState & WRITE_UPDATING) === 0) queueMicrotask(this.afterUpdateNextTick)\n  }\n}\n\nclass ReadableState {\n  constructor (stream, { highWaterMark = 16384, map = null, mapReadable, byteLength, byteLengthReadable } = {}) {\n    this.stream = stream\n    this.queue = new FIFO()\n    this.highWaterMark = highWaterMark === 0 ? 1 : highWaterMark\n    this.buffered = 0\n    this.readAhead = highWaterMark > 0\n    this.error = null\n    this.pipeline = null\n    this.byteLength = byteLengthReadable || byteLength || defaultByteLength\n    this.map = mapReadable || map\n    this.pipeTo = null\n    this.afterRead = afterRead.bind(this)\n    this.afterUpdateNextTick = updateReadNT.bind(this)\n  }\n\n  get ended () {\n    return (this.stream._duplexState & READ_DONE) !== 0\n  }\n\n  pipe (pipeTo, cb) {\n    if (this.pipeTo !== null) throw new Error('Can only pipe to one destination')\n    if (typeof cb !== 'function') cb = null\n\n    this.stream._duplexState |= READ_PIPE_DRAINED\n    this.pipeTo = pipeTo\n    this.pipeline = new Pipeline(this.stream, pipeTo, cb)\n\n    if (cb) this.stream.on('error', noop) // We already error handle this so supress crashes\n\n    if (isStreamx(pipeTo)) {\n      pipeTo._writableState.pipeline = this.pipeline\n      if (cb) pipeTo.on('error', noop) // We already error handle this so supress crashes\n      pipeTo.on('finish', this.pipeline.finished.bind(this.pipeline)) // TODO: just call finished from pipeTo itself\n    } else {\n      const onerror = this.pipeline.done.bind(this.pipeline, pipeTo)\n      const onclose = this.pipeline.done.bind(this.pipeline, pipeTo, null) // onclose has a weird bool arg\n      pipeTo.on('error', onerror)\n      pipeTo.on('close', onclose)\n      pipeTo.on('finish', this.pipeline.finished.bind(this.pipeline))\n    }\n\n    pipeTo.on('drain', afterDrain.bind(this))\n    this.stream.emit('piping', pipeTo)\n    pipeTo.emit('pipe', this.stream)\n  }\n\n  push (data) {\n    const stream = this.stream\n\n    if (data === null) {\n      this.highWaterMark = 0\n      stream._duplexState = (stream._duplexState | READ_ENDING) & READ_NON_PRIMARY_AND_PUSHED\n      return false\n    }\n\n    if (this.map !== null) {\n      data = this.map(data)\n      if (data === null) {\n        stream._duplexState &= READ_PUSHED\n        return this.buffered < this.highWaterMark\n      }\n    }\n\n    this.buffered += this.byteLength(data)\n    this.queue.push(data)\n\n    stream._duplexState = (stream._duplexState | READ_QUEUED) & READ_PUSHED\n\n    return this.buffered < this.highWaterMark\n  }\n\n  shift () {\n    const data = this.queue.shift()\n\n    this.buffered -= this.byteLength(data)\n    if (this.buffered === 0) this.stream._duplexState &= READ_NOT_QUEUED\n    return data\n  }\n\n  unshift (data) {\n    const pending = [this.map !== null ? this.map(data) : data]\n    while (this.buffered > 0) pending.push(this.shift())\n\n    for (let i = 0; i < pending.length - 1; i++) {\n      const data = pending[i]\n      this.buffered += this.byteLength(data)\n      this.queue.push(data)\n    }\n\n    this.push(pending[pending.length - 1])\n  }\n\n  read () {\n    const stream = this.stream\n\n    if ((stream._duplexState & READ_STATUS) === READ_QUEUED) {\n      const data = this.shift()\n      if (this.pipeTo !== null && this.pipeTo.write(data) === false) stream._duplexState &= READ_PIPE_NOT_DRAINED\n      if ((stream._duplexState & READ_EMIT_DATA) !== 0) stream.emit('data', data)\n      return data\n    }\n\n    if (this.readAhead === false) {\n      stream._duplexState |= READ_READ_AHEAD\n      this.updateNextTick()\n    }\n\n    return null\n  }\n\n  drain () {\n    const stream = this.stream\n\n    while ((stream._duplexState & READ_STATUS) === READ_QUEUED && (stream._duplexState & READ_FLOWING) !== 0) {\n      const data = this.shift()\n      if (this.pipeTo !== null && this.pipeTo.write(data) === false) stream._duplexState &= READ_PIPE_NOT_DRAINED\n      if ((stream._duplexState & READ_EMIT_DATA) !== 0) stream.emit('data', data)\n    }\n  }\n\n  update () {\n    const stream = this.stream\n\n    stream._duplexState |= READ_UPDATING\n\n    do {\n      this.drain()\n\n      while (this.buffered < this.highWaterMark && (stream._duplexState & SHOULD_NOT_READ) === READ_READ_AHEAD) {\n        stream._duplexState |= READ_ACTIVE_AND_NEEDS_PUSH\n        stream._read(this.afterRead)\n        this.drain()\n      }\n\n      if ((stream._duplexState & READ_READABLE_STATUS) === READ_EMIT_READABLE_AND_QUEUED) {\n        stream._duplexState |= READ_EMITTED_READABLE\n        stream.emit('readable')\n      }\n\n      if ((stream._duplexState & READ_PRIMARY_AND_ACTIVE) === 0) this.updateNonPrimary()\n    } while (this.continueUpdate() === true)\n\n    stream._duplexState &= READ_NOT_UPDATING\n  }\n\n  updateNonPrimary () {\n    const stream = this.stream\n\n    if ((stream._duplexState & READ_ENDING_STATUS) === READ_ENDING) {\n      stream._duplexState = (stream._duplexState | READ_DONE) & READ_NOT_ENDING\n      stream.emit('end')\n      if ((stream._duplexState & AUTO_DESTROY) === DONE) stream._duplexState |= DESTROYING\n      if (this.pipeTo !== null) this.pipeTo.end()\n    }\n\n    if ((stream._duplexState & DESTROY_STATUS) === DESTROYING) {\n      if ((stream._duplexState & ACTIVE_OR_TICKING) === 0) {\n        stream._duplexState |= ACTIVE\n        stream._destroy(afterDestroy.bind(this))\n      }\n      return\n    }\n\n    if ((stream._duplexState & IS_OPENING) === OPENING) {\n      stream._duplexState = (stream._duplexState | ACTIVE) & NOT_OPENING\n      stream._open(afterOpen.bind(this))\n    }\n  }\n\n  continueUpdate () {\n    if ((this.stream._duplexState & READ_NEXT_TICK) === 0) return false\n    this.stream._duplexState &= READ_NOT_NEXT_TICK\n    return true\n  }\n\n  updateCallback () {\n    if ((this.stream._duplexState & READ_UPDATE_SYNC_STATUS) === READ_PRIMARY) this.update()\n    else this.updateNextTick()\n  }\n\n  updateNextTickIfOpen () {\n    if ((this.stream._duplexState & READ_NEXT_TICK_OR_OPENING) !== 0) return\n    this.stream._duplexState |= READ_NEXT_TICK\n    if ((this.stream._duplexState & READ_UPDATING) === 0) queueMicrotask(this.afterUpdateNextTick)\n  }\n\n  updateNextTick () {\n    if ((this.stream._duplexState & READ_NEXT_TICK) !== 0) return\n    this.stream._duplexState |= READ_NEXT_TICK\n    if ((this.stream._duplexState & READ_UPDATING) === 0) queueMicrotask(this.afterUpdateNextTick)\n  }\n}\n\nclass TransformState {\n  constructor (stream) {\n    this.data = null\n    this.afterTransform = afterTransform.bind(stream)\n    this.afterFinal = null\n  }\n}\n\nclass Pipeline {\n  constructor (src, dst, cb) {\n    this.from = src\n    this.to = dst\n    this.afterPipe = cb\n    this.error = null\n    this.pipeToFinished = false\n  }\n\n  finished () {\n    this.pipeToFinished = true\n  }\n\n  done (stream, err) {\n    if (err) this.error = err\n\n    if (stream === this.to) {\n      this.to = null\n\n      if (this.from !== null) {\n        if ((this.from._duplexState & READ_DONE) === 0 || !this.pipeToFinished) {\n          this.from.destroy(this.error || new Error('Writable stream closed prematurely'))\n        }\n        return\n      }\n    }\n\n    if (stream === this.from) {\n      this.from = null\n\n      if (this.to !== null) {\n        if ((stream._duplexState & READ_DONE) === 0) {\n          this.to.destroy(this.error || new Error('Readable stream closed before ending'))\n        }\n        return\n      }\n    }\n\n    if (this.afterPipe !== null) this.afterPipe(this.error)\n    this.to = this.from = this.afterPipe = null\n  }\n}\n\nfunction afterDrain () {\n  this.stream._duplexState |= READ_PIPE_DRAINED\n  this.updateCallback()\n}\n\nfunction afterFinal (err) {\n  const stream = this.stream\n  if (err) stream.destroy(err)\n  if ((stream._duplexState & DESTROY_STATUS) === 0) {\n    stream._duplexState |= WRITE_DONE\n    stream.emit('finish')\n  }\n  if ((stream._duplexState & AUTO_DESTROY) === DONE) {\n    stream._duplexState |= DESTROYING\n  }\n\n  stream._duplexState &= WRITE_NOT_FINISHING\n\n  // no need to wait the extra tick here, so we short circuit that\n  if ((stream._duplexState & WRITE_UPDATING) === 0) this.update()\n  else this.updateNextTick()\n}\n\nfunction afterDestroy (err) {\n  const stream = this.stream\n\n  if (!err && this.error !== STREAM_DESTROYED) err = this.error\n  if (err) stream.emit('error', err)\n  stream._duplexState |= DESTROYED\n  stream.emit('close')\n\n  const rs = stream._readableState\n  const ws = stream._writableState\n\n  if (rs !== null && rs.pipeline !== null) rs.pipeline.done(stream, err)\n\n  if (ws !== null) {\n    while (ws.drains !== null && ws.drains.length > 0) ws.drains.shift().resolve(false)\n    if (ws.pipeline !== null) ws.pipeline.done(stream, err)\n  }\n}\n\nfunction afterWrite (err) {\n  const stream = this.stream\n\n  if (err) stream.destroy(err)\n  stream._duplexState &= WRITE_NOT_ACTIVE\n\n  if (this.drains !== null) tickDrains(this.drains)\n\n  if ((stream._duplexState & WRITE_DRAIN_STATUS) === WRITE_UNDRAINED) {\n    stream._duplexState &= WRITE_DRAINED\n    if ((stream._duplexState & WRITE_EMIT_DRAIN) === WRITE_EMIT_DRAIN) {\n      stream.emit('drain')\n    }\n  }\n\n  this.updateCallback()\n}\n\nfunction afterRead (err) {\n  if (err) this.stream.destroy(err)\n  this.stream._duplexState &= READ_NOT_ACTIVE\n  if (this.readAhead === false && (this.stream._duplexState & READ_RESUMED) === 0) this.stream._duplexState &= READ_NO_READ_AHEAD\n  this.updateCallback()\n}\n\nfunction updateReadNT () {\n  if ((this.stream._duplexState & READ_UPDATING) === 0) {\n    this.stream._duplexState &= READ_NOT_NEXT_TICK\n    this.update()\n  }\n}\n\nfunction updateWriteNT () {\n  if ((this.stream._duplexState & WRITE_UPDATING) === 0) {\n    this.stream._duplexState &= WRITE_NOT_NEXT_TICK\n    this.update()\n  }\n}\n\nfunction tickDrains (drains) {\n  for (let i = 0; i < drains.length; i++) {\n    // drains.writes are monotonic, so if one is 0 its always the first one\n    if (--drains[i].writes === 0) {\n      drains.shift().resolve(true)\n      i--\n    }\n  }\n}\n\nfunction afterOpen (err) {\n  const stream = this.stream\n\n  if (err) stream.destroy(err)\n\n  if ((stream._duplexState & DESTROYING) === 0) {\n    if ((stream._duplexState & READ_PRIMARY_STATUS) === 0) stream._duplexState |= READ_PRIMARY\n    if ((stream._duplexState & WRITE_PRIMARY_STATUS) === 0) stream._duplexState |= WRITE_PRIMARY\n    stream.emit('open')\n  }\n\n  stream._duplexState &= NOT_ACTIVE\n\n  if (stream._writableState !== null) {\n    stream._writableState.updateCallback()\n  }\n\n  if (stream._readableState !== null) {\n    stream._readableState.updateCallback()\n  }\n}\n\nfunction afterTransform (err, data) {\n  if (data !== undefined && data !== null) this.push(data)\n  this._writableState.afterWrite(err)\n}\n\nfunction newListener (name) {\n  if (this._readableState !== null) {\n    if (name === 'data') {\n      this._duplexState |= (READ_EMIT_DATA | READ_RESUMED_READ_AHEAD)\n      this._readableState.updateNextTick()\n    }\n    if (name === 'readable') {\n      this._duplexState |= READ_EMIT_READABLE\n      this._readableState.updateNextTick()\n    }\n  }\n\n  if (this._writableState !== null) {\n    if (name === 'drain') {\n      this._duplexState |= WRITE_EMIT_DRAIN\n      this._writableState.updateNextTick()\n    }\n  }\n}\n\nclass Stream extends EventEmitter {\n  constructor (opts) {\n    super()\n\n    this._duplexState = 0\n    this._readableState = null\n    this._writableState = null\n\n    if (opts) {\n      if (opts.open) this._open = opts.open\n      if (opts.destroy) this._destroy = opts.destroy\n      if (opts.predestroy) this._predestroy = opts.predestroy\n      if (opts.signal) {\n        opts.signal.addEventListener('abort', abort.bind(this))\n      }\n    }\n\n    this.on('newListener', newListener)\n  }\n\n  _open (cb) {\n    cb(null)\n  }\n\n  _destroy (cb) {\n    cb(null)\n  }\n\n  _predestroy () {\n    // does nothing\n  }\n\n  get readable () {\n    return this._readableState !== null ? true : undefined\n  }\n\n  get writable () {\n    return this._writableState !== null ? true : undefined\n  }\n\n  get destroyed () {\n    return (this._duplexState & DESTROYED) !== 0\n  }\n\n  get destroying () {\n    return (this._duplexState & DESTROY_STATUS) !== 0\n  }\n\n  destroy (err) {\n    if ((this._duplexState & DESTROY_STATUS) === 0) {\n      if (!err) err = STREAM_DESTROYED\n      this._duplexState = (this._duplexState | DESTROYING) & NON_PRIMARY\n\n      if (this._readableState !== null) {\n        this._readableState.highWaterMark = 0\n        this._readableState.error = err\n      }\n      if (this._writableState !== null) {\n        this._writableState.highWaterMark = 0\n        this._writableState.error = err\n      }\n\n      this._duplexState |= PREDESTROYING\n      this._predestroy()\n      this._duplexState &= NOT_PREDESTROYING\n\n      if (this._readableState !== null) this._readableState.updateNextTick()\n      if (this._writableState !== null) this._writableState.updateNextTick()\n    }\n  }\n}\n\nclass Readable extends Stream {\n  constructor (opts) {\n    super(opts)\n\n    this._duplexState |= OPENING | WRITE_DONE | READ_READ_AHEAD\n    this._readableState = new ReadableState(this, opts)\n\n    if (opts) {\n      if (this._readableState.readAhead === false) this._duplexState &= READ_NO_READ_AHEAD\n      if (opts.read) this._read = opts.read\n      if (opts.eagerOpen) this._readableState.updateNextTick()\n      if (opts.encoding) this.setEncoding(opts.encoding)\n    }\n  }\n\n  setEncoding (encoding) {\n    const dec = new TextDecoder(encoding)\n    const map = this._readableState.map || echo\n    this._readableState.map = mapOrSkip\n    return this\n\n    function mapOrSkip (data) {\n      const next = dec.push(data)\n      return next === '' && (data.byteLength !== 0 || dec.remaining > 0) ? null : map(next)\n    }\n  }\n\n  _read (cb) {\n    cb(null)\n  }\n\n  pipe (dest, cb) {\n    this._readableState.updateNextTick()\n    this._readableState.pipe(dest, cb)\n    return dest\n  }\n\n  read () {\n    this._readableState.updateNextTick()\n    return this._readableState.read()\n  }\n\n  push (data) {\n    this._readableState.updateNextTickIfOpen()\n    return this._readableState.push(data)\n  }\n\n  unshift (data) {\n    this._readableState.updateNextTickIfOpen()\n    return this._readableState.unshift(data)\n  }\n\n  resume () {\n    this._duplexState |= READ_RESUMED_READ_AHEAD\n    this._readableState.updateNextTick()\n    return this\n  }\n\n  pause () {\n    this._duplexState &= (this._readableState.readAhead === false ? READ_PAUSED_NO_READ_AHEAD : READ_PAUSED)\n    return this\n  }\n\n  static _fromAsyncIterator (ite, opts) {\n    let destroy\n\n    const rs = new Readable({\n      ...opts,\n      read (cb) {\n        ite.next().then(push).then(cb.bind(null, null)).catch(cb)\n      },\n      predestroy () {\n        destroy = ite.return()\n      },\n      destroy (cb) {\n        if (!destroy) return cb(null)\n        destroy.then(cb.bind(null, null)).catch(cb)\n      }\n    })\n\n    return rs\n\n    function push (data) {\n      if (data.done) rs.push(null)\n      else rs.push(data.value)\n    }\n  }\n\n  static from (data, opts) {\n    if (isReadStreamx(data)) return data\n    if (data[asyncIterator]) return this._fromAsyncIterator(data[asyncIterator](), opts)\n    if (!Array.isArray(data)) data = data === undefined ? [] : [data]\n\n    let i = 0\n    return new Readable({\n      ...opts,\n      read (cb) {\n        this.push(i === data.length ? null : data[i++])\n        cb(null)\n      }\n    })\n  }\n\n  static isBackpressured (rs) {\n    return (rs._duplexState & READ_BACKPRESSURE_STATUS) !== 0 || rs._readableState.buffered >= rs._readableState.highWaterMark\n  }\n\n  static isPaused (rs) {\n    return (rs._duplexState & READ_RESUMED) === 0\n  }\n\n  [asyncIterator] () {\n    const stream = this\n\n    let error = null\n    let promiseResolve = null\n    let promiseReject = null\n\n    this.on('error', (err) => { error = err })\n    this.on('readable', onreadable)\n    this.on('close', onclose)\n\n    return {\n      [asyncIterator] () {\n        return this\n      },\n      next () {\n        return new Promise(function (resolve, reject) {\n          promiseResolve = resolve\n          promiseReject = reject\n          const data = stream.read()\n          if (data !== null) ondata(data)\n          else if ((stream._duplexState & DESTROYED) !== 0) ondata(null)\n        })\n      },\n      return () {\n        return destroy(null)\n      },\n      throw (err) {\n        return destroy(err)\n      }\n    }\n\n    function onreadable () {\n      if (promiseResolve !== null) ondata(stream.read())\n    }\n\n    function onclose () {\n      if (promiseResolve !== null) ondata(null)\n    }\n\n    function ondata (data) {\n      if (promiseReject === null) return\n      if (error) promiseReject(error)\n      else if (data === null && (stream._duplexState & READ_DONE) === 0) promiseReject(STREAM_DESTROYED)\n      else promiseResolve({ value: data, done: data === null })\n      promiseReject = promiseResolve = null\n    }\n\n    function destroy (err) {\n      stream.destroy(err)\n      return new Promise((resolve, reject) => {\n        if (stream._duplexState & DESTROYED) return resolve({ value: undefined, done: true })\n        stream.once('close', function () {\n          if (err) reject(err)\n          else resolve({ value: undefined, done: true })\n        })\n      })\n    }\n  }\n}\n\nclass Writable extends Stream {\n  constructor (opts) {\n    super(opts)\n\n    this._duplexState |= OPENING | READ_DONE\n    this._writableState = new WritableState(this, opts)\n\n    if (opts) {\n      if (opts.writev) this._writev = opts.writev\n      if (opts.write) this._write = opts.write\n      if (opts.final) this._final = opts.final\n      if (opts.eagerOpen) this._writableState.updateNextTick()\n    }\n  }\n\n  cork () {\n    this._duplexState |= WRITE_CORKED\n  }\n\n  uncork () {\n    this._duplexState &= WRITE_NOT_CORKED\n    this._writableState.updateNextTick()\n  }\n\n  _writev (batch, cb) {\n    cb(null)\n  }\n\n  _write (data, cb) {\n    this._writableState.autoBatch(data, cb)\n  }\n\n  _final (cb) {\n    cb(null)\n  }\n\n  static isBackpressured (ws) {\n    return (ws._duplexState & WRITE_BACKPRESSURE_STATUS) !== 0\n  }\n\n  static drained (ws) {\n    if (ws.destroyed) return Promise.resolve(false)\n    const state = ws._writableState\n    const pending = (isWritev(ws) ? Math.min(1, state.queue.length) : state.queue.length)\n    const writes = pending + ((ws._duplexState & WRITE_WRITING) ? 1 : 0)\n    if (writes === 0) return Promise.resolve(true)\n    if (state.drains === null) state.drains = []\n    return new Promise((resolve) => {\n      state.drains.push({ writes, resolve })\n    })\n  }\n\n  write (data) {\n    this._writableState.updateNextTick()\n    return this._writableState.push(data)\n  }\n\n  end (data) {\n    this._writableState.updateNextTick()\n    this._writableState.end(data)\n    return this\n  }\n}\n\nclass Duplex extends Readable { // and Writable\n  constructor (opts) {\n    super(opts)\n\n    this._duplexState = OPENING | (this._duplexState & READ_READ_AHEAD)\n    this._writableState = new WritableState(this, opts)\n\n    if (opts) {\n      if (opts.writev) this._writev = opts.writev\n      if (opts.write) this._write = opts.write\n      if (opts.final) this._final = opts.final\n    }\n  }\n\n  cork () {\n    this._duplexState |= WRITE_CORKED\n  }\n\n  uncork () {\n    this._duplexState &= WRITE_NOT_CORKED\n    this._writableState.updateNextTick()\n  }\n\n  _writev (batch, cb) {\n    cb(null)\n  }\n\n  _write (data, cb) {\n    this._writableState.autoBatch(data, cb)\n  }\n\n  _final (cb) {\n    cb(null)\n  }\n\n  write (data) {\n    this._writableState.updateNextTick()\n    return this._writableState.push(data)\n  }\n\n  end (data) {\n    this._writableState.updateNextTick()\n    this._writableState.end(data)\n    return this\n  }\n}\n\nclass Transform extends Duplex {\n  constructor (opts) {\n    super(opts)\n    this._transformState = new TransformState(this)\n\n    if (opts) {\n      if (opts.transform) this._transform = opts.transform\n      if (opts.flush) this._flush = opts.flush\n    }\n  }\n\n  _write (data, cb) {\n    if (this._readableState.buffered >= this._readableState.highWaterMark) {\n      this._transformState.data = data\n    } else {\n      this._transform(data, this._transformState.afterTransform)\n    }\n  }\n\n  _read (cb) {\n    if (this._transformState.data !== null) {\n      const data = this._transformState.data\n      this._transformState.data = null\n      cb(null)\n      this._transform(data, this._transformState.afterTransform)\n    } else {\n      cb(null)\n    }\n  }\n\n  destroy (err) {\n    super.destroy(err)\n    if (this._transformState.data !== null) {\n      this._transformState.data = null\n      this._transformState.afterTransform()\n    }\n  }\n\n  _transform (data, cb) {\n    cb(null, data)\n  }\n\n  _flush (cb) {\n    cb(null)\n  }\n\n  _final (cb) {\n    this._transformState.afterFinal = cb\n    this._flush(transformAfterFlush.bind(this))\n  }\n}\n\nclass PassThrough extends Transform {}\n\nfunction transformAfterFlush (err, data) {\n  const cb = this._transformState.afterFinal\n  if (err) return cb(err)\n  if (data !== null && data !== undefined) this.push(data)\n  this.push(null)\n  cb(null)\n}\n\nfunction pipelinePromise (...streams) {\n  return new Promise((resolve, reject) => {\n    return pipeline(...streams, (err) => {\n      if (err) return reject(err)\n      resolve()\n    })\n  })\n}\n\nfunction pipeline (stream, ...streams) {\n  const all = Array.isArray(stream) ? [...stream, ...streams] : [stream, ...streams]\n  const done = (all.length && typeof all[all.length - 1] === 'function') ? all.pop() : null\n\n  if (all.length < 2) throw new Error('Pipeline requires at least 2 streams')\n\n  let src = all[0]\n  let dest = null\n  let error = null\n\n  for (let i = 1; i < all.length; i++) {\n    dest = all[i]\n\n    if (isStreamx(src)) {\n      src.pipe(dest, onerror)\n    } else {\n      errorHandle(src, true, i > 1, onerror)\n      src.pipe(dest)\n    }\n\n    src = dest\n  }\n\n  if (done) {\n    let fin = false\n\n    const autoDestroy = isStreamx(dest) || !!(dest._writableState && dest._writableState.autoDestroy)\n\n    dest.on('error', (err) => {\n      if (error === null) error = err\n    })\n\n    dest.on('finish', () => {\n      fin = true\n      if (!autoDestroy) done(error)\n    })\n\n    if (autoDestroy) {\n      dest.on('close', () => done(error || (fin ? null : PREMATURE_CLOSE)))\n    }\n  }\n\n  return dest\n\n  function errorHandle (s, rd, wr, onerror) {\n    s.on('error', onerror)\n    s.on('close', onclose)\n\n    function onclose () {\n      if (rd && s._readableState && !s._readableState.ended) return onerror(PREMATURE_CLOSE)\n      if (wr && s._writableState && !s._writableState.ended) return onerror(PREMATURE_CLOSE)\n    }\n  }\n\n  function onerror (err) {\n    if (!err || error) return\n    error = err\n\n    for (const s of all) {\n      s.destroy(err)\n    }\n  }\n}\n\nfunction echo (s) {\n  return s\n}\n\nfunction isStream (stream) {\n  return !!stream._readableState || !!stream._writableState\n}\n\nfunction isStreamx (stream) {\n  return typeof stream._duplexState === 'number' && isStream(stream)\n}\n\nfunction isEnded (stream) {\n  return !!stream._readableState && stream._readableState.ended\n}\n\nfunction isFinished (stream) {\n  return !!stream._writableState && stream._writableState.ended\n}\n\nfunction getStreamError (stream, opts = {}) {\n  const err = (stream._readableState && stream._readableState.error) || (stream._writableState && stream._writableState.error)\n\n  // avoid implicit errors by default\n  return (!opts.all && err === STREAM_DESTROYED) ? null : err\n}\n\nfunction isReadStreamx (stream) {\n  return isStreamx(stream) && stream.readable\n}\n\nfunction isDisturbed (stream) {\n  return (stream._duplexState & OPENING) !== OPENING || (stream._duplexState & ACTIVE_OR_TICKING) !== 0\n}\n\nfunction isTypedArray (data) {\n  return typeof data === 'object' && data !== null && typeof data.byteLength === 'number'\n}\n\nfunction defaultByteLength (data) {\n  return isTypedArray(data) ? data.byteLength : 1024\n}\n\nfunction noop () {}\n\nfunction abort () {\n  this.destroy(new Error('Stream aborted.'))\n}\n\nfunction isWritev (s) {\n  return s._writev !== Writable.prototype._writev && s._writev !== Duplex.prototype._writev\n}\n\nmodule.exports = {\n  pipeline,\n  pipelinePromise,\n  isStream,\n  isStreamx,\n  isEnded,\n  isFinished,\n  isDisturbed,\n  getStreamError,\n  Stream,\n  Writable,\n  Readable,\n  Duplex,\n  Transform,\n  // Export PassThrough for compatibility with Node.js core's stream module\n  PassThrough\n}\n{\n  \"name\": \"streamx\",\n  \"version\": \"2.22.0\",\n  \"description\": \"An iteration of the Node.js core streams with a series of improvements\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"fast-fifo\": \"^1.3.2\",\n    \"text-decoder\": \"^1.1.0\"\n  },\n  \"devDependencies\": {\n    \"b4a\": \"^1.6.6\",\n    \"brittle\": \"^3.1.1\",\n    \"end-of-stream\": \"^1.4.4\",\n    \"standard\": \"^17.0.0\"\n  },\n  \"optionalDependencies\": {\n    \"bare-events\": \"^2.2.0\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"imports\": {\n    \"events\": {\n      \"bare\": \"bare-events\",\n      \"default\": \"events\"\n    }\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test/*.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/streamx.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/streamx/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/streamx\"\n}\nconst codecs = require('codecs')\nconst b = require('b4a')\n\nconst SEP = b.alloc(1)\nconst SEP_BUMPED = b.from([0x1])\nconst EMPTY = b.alloc(0)\n\nmodule.exports = class SubEncoder {\n  constructor (prefix, encoding, parent = null) {\n    this.userEncoding = codecs(encoding)\n    this.prefix = prefix != null ? createPrefix(prefix, parent) : null\n    this.lt = this.prefix && b.concat([this.prefix.subarray(0, this.prefix.byteLength - 1), SEP_BUMPED])\n  }\n\n  _encodeRangeUser (r) {\n    if (this.userEncoding.encodeRange) return this.userEncoding.encodeRange(r)\n\n    const res = {}\n    if (r.gt != null) res.gt = this.userEncoding.encode(r.gt)\n    if (r.gte != null) res.gte = this.userEncoding.encode(r.gte)\n    if (r.lte != null) res.lte = this.userEncoding.encode(r.lte)\n    if (r.lt != null) res.lt = this.userEncoding.encode(r.lt)\n\n    return res\n  }\n\n  _addPrefix (key) {\n    return this.prefix ? b.concat([this.prefix, key]) : key\n  }\n\n  encode (key) {\n    return this._addPrefix(this.userEncoding.encode(key))\n  }\n\n  encodeRange (range) {\n    const r = this._encodeRangeUser(range)\n\n    if (r.gt) r.gt = this._addPrefix(r.gt)\n    else if (r.gte) r.gte = this._addPrefix(r.gte)\n    else if (this.prefix) r.gte = this.prefix\n\n    if (r.lt) r.lt = this._addPrefix(r.lt)\n    else if (r.lte) r.lte = this._addPrefix(r.lte)\n    else if (this.prefix) r.lt = this.lt\n\n    return r\n  }\n\n  decode (key) {\n    return this.userEncoding.decode(this.prefix ? key.subarray(this.prefix.byteLength) : key)\n  }\n\n  sub (prefix, encoding) {\n    return new SubEncoder(prefix || EMPTY, compat(encoding), this.prefix)\n  }\n}\n\nfunction createPrefix (prefix, parent) {\n  prefix = typeof prefix === 'string' ? b.from(prefix) : prefix\n\n  if (prefix && parent) return b.concat([parent, prefix, SEP])\n  if (prefix) return b.concat([prefix, SEP])\n  if (parent) return b.concat([parent, SEP])\n  return SEP\n}\n\nfunction compat (enc) {\n  if (enc && enc.keyEncoding) return enc.keyEncoding\n  return enc\n}\n{\n  \"name\": \"sub-encoder\",\n  \"version\": \"2.1.3\",\n  \"description\": \"Generate sub encodings for key/value stores\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"standard && brittle test/*.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/sub-encoder.git\"\n  },\n  \"keywords\": [\n    \"kv-store\",\n    \"encoding\",\n    \"hyperbee\"\n  ],\n  \"author\": \"Andrew Osheroff <andrewosh@gmail.com>\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/sub-encoder/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/sub-encoder#readme\",\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.1\",\n    \"compact-encoding\": \"^2.12.0\",\n    \"hyperbee\": \"^2.11.0\",\n    \"hypercore\": \"^10.3.2\",\n    \"index-encoder\": \"^3.0.0\",\n    \"random-access-memory\": \"^6.0.0\",\n    \"standard\": \"^17.0.0\"\n  },\n  \"dependencies\": {\n    \"b4a\": \"^1.6.0\",\n    \"codecs\": \"^3.1.0\"\n  }\n}\nconst PassThroughDecoder = require('./lib/pass-through-decoder')\nconst UTF8Decoder = require('./lib/utf8-decoder')\n\nmodule.exports = class TextDecoder {\n  constructor (encoding = 'utf8') {\n    this.encoding = normalizeEncoding(encoding)\n\n    switch (this.encoding) {\n      case 'utf8':\n        this.decoder = new UTF8Decoder()\n        break\n      case 'utf16le':\n      case 'base64':\n        throw new Error('Unsupported encoding: ' + this.encoding)\n      default:\n        this.decoder = new PassThroughDecoder(this.encoding)\n    }\n  }\n\n  get remaining () {\n    return this.decoder.remaining\n  }\n\n  push (data) {\n    if (typeof data === 'string') return data\n    return this.decoder.decode(data)\n  }\n\n  // For Node.js compatibility\n  write (data) {\n    return this.push(data)\n  }\n\n  end (data) {\n    let result = ''\n    if (data) result = this.push(data)\n    result += this.decoder.flush()\n    return result\n  }\n}\n\nfunction normalizeEncoding (encoding) {\n  encoding = encoding.toLowerCase()\n\n  switch (encoding) {\n    case 'utf8':\n    case 'utf-8':\n      return 'utf8'\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return 'utf16le'\n    case 'latin1':\n    case 'binary':\n      return 'latin1'\n    case 'base64':\n    case 'ascii':\n    case 'hex':\n      return encoding\n    default:\n      throw new Error('Unknown encoding: ' + encoding)\n  }\n};\nconst b4a = require('b4a')\n\nmodule.exports = class PassThroughDecoder {\n  constructor (encoding) {\n    this.encoding = encoding\n  }\n\n  get remaining () {\n    return 0\n  }\n\n  decode (tail) {\n    return b4a.toString(tail, this.encoding)\n  }\n\n  flush () {\n    return ''\n  }\n}\nconst b4a = require('b4a')\n\n/**\n * https://encoding.spec.whatwg.org/#utf-8-decoder\n */\nmodule.exports = class UTF8Decoder {\n  constructor () {\n    this.codePoint = 0\n    this.bytesSeen = 0\n    this.bytesNeeded = 0\n    this.lowerBoundary = 0x80\n    this.upperBoundary = 0xbf\n  }\n\n  get remaining () {\n    return this.bytesSeen\n  }\n\n  decode (data) {\n    // If we have a fast path, just sniff if the last part is a boundary\n    if (this.bytesNeeded === 0) {\n      let isBoundary = true\n\n      for (let i = Math.max(0, data.byteLength - 4), n = data.byteLength; i < n && isBoundary; i++) {\n        isBoundary = data[i] <= 0x7f\n      }\n\n      if (isBoundary) return b4a.toString(data, 'utf8')\n    }\n\n    let result = ''\n\n    for (let i = 0, n = data.byteLength; i < n; i++) {\n      const byte = data[i]\n\n      if (this.bytesNeeded === 0) {\n        if (byte <= 0x7f) {\n          result += String.fromCharCode(byte)\n        } else {\n          this.bytesSeen = 1\n\n          if (byte >= 0xc2 && byte <= 0xdf) {\n            this.bytesNeeded = 2\n            this.codePoint = byte & 0x1f\n          } else if (byte >= 0xe0 && byte <= 0xef) {\n            if (byte === 0xe0) this.lowerBoundary = 0xa0\n            else if (byte === 0xed) this.upperBoundary = 0x9f\n            this.bytesNeeded = 3\n            this.codePoint = byte & 0xf\n          } else if (byte >= 0xf0 && byte <= 0xf4) {\n            if (byte === 0xf0) this.lowerBoundary = 0x90\n            if (byte === 0xf4) this.upperBoundary = 0x8f\n            this.bytesNeeded = 4\n            this.codePoint = byte & 0x7\n          } else {\n            result += '\\ufffd'\n          }\n        }\n\n        continue\n      }\n\n      if (byte < this.lowerBoundary || byte > this.upperBoundary) {\n        this.codePoint = 0\n        this.bytesNeeded = 0\n        this.bytesSeen = 0\n        this.lowerBoundary = 0x80\n        this.upperBoundary = 0xbf\n\n        result += '\\ufffd'\n\n        continue\n      }\n\n      this.lowerBoundary = 0x80\n      this.upperBoundary = 0xbf\n\n      this.codePoint = (this.codePoint << 6) | (byte & 0x3f)\n      this.bytesSeen++\n\n      if (this.bytesSeen !== this.bytesNeeded) continue\n\n      result += String.fromCodePoint(this.codePoint)\n\n      this.codePoint = 0\n      this.bytesNeeded = 0\n      this.bytesSeen = 0\n    }\n\n    return result\n  }\n\n  flush () {\n    const result = this.bytesNeeded > 0 ? '\\ufffd' : ''\n\n    this.codePoint = 0\n    this.bytesNeeded = 0\n    this.bytesSeen = 0\n    this.lowerBoundary = 0x80\n    this.upperBoundary = 0xbf\n\n    return result\n  }\n}\n{\n  \"name\": \"text-decoder\",\n  \"version\": \"1.2.3\",\n  \"description\": \"Streaming text decoder that preserves multibyte Unicode characters\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"lib\"\n  ],\n  \"browser\": {\n    \"./lib/pass-through-decoder.js\": \"./lib/browser-decoder.js\",\n    \"./lib/utf8-decoder.js\": \"./lib/browser-decoder.js\"\n  },\n  \"react-native\": {\n    \"./lib/pass-through-decoder.js\": \"./lib/pass-through-decoder.js\",\n    \"./lib/utf8-decoder.js\": \"./lib/utf8-decoder.js\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/text-decoder.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/text-decoder/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/text-decoder#readme\",\n  \"dependencies\": {\n    \"b4a\": \"^1.6.4\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.3.2\",\n    \"standard\": \"^17.0.0\"\n  }\n}\nmodule.exports = class TimeOrderedSet {\n  constructor () {\n    this.oldest = null\n    this.latest = null\n    this.length = 0\n  }\n\n  has (node) {\n    return !!(node.next || node.prev) || node === this.oldest\n  }\n\n  add (node) {\n    if (this.has(node)) this.remove(node)\n\n    if (!this.latest && !this.oldest) {\n      this.latest = this.oldest = node\n      node.prev = node.next = null\n    } else {\n      this.latest.next = node\n      node.prev = this.latest\n      node.next = null\n      this.latest = node\n    }\n\n    this.length++\n\n    return node\n  }\n\n  remove (node) {\n    if (!this.has(node)) return node\n\n    if (this.oldest !== node && this.latest !== node) {\n      node.prev.next = node.next\n      node.next.prev = node.prev\n    } else {\n      if (this.oldest === node) {\n        this.oldest = node.next\n        if (this.oldest) this.oldest.prev = null\n      }\n      if (this.latest === node) {\n        this.latest = node.prev\n        if (this.latest) this.latest.next = null\n      }\n    }\n\n    node.next = node.prev = null\n    this.length--\n\n    return node\n  }\n\n  toArray ({ limit = Infinity, reverse = false } = {}) {\n    const list = []\n\n    if (reverse) {\n      let node = this.latest\n      while (node && limit--) {\n        list.push(node)\n        node = node.prev\n      }\n    } else {\n      let node = this.oldest\n      while (node && limit--) {\n        list.push(node)\n        node = node.next\n      }\n    }\n\n    return list\n  }\n}\n{\n  \"name\": \"time-ordered-set\",\n  \"version\": \"2.0.1\",\n  \"description\": \"Efficiently maintain a set of nodes ordered by the time they were added to the set\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"devDependencies\": {\n    \"brittle\": \"^3.0.0\",\n    \"standard\": \"^17.1.2\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/time-ordered-set.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/time-ordered-set/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/time-ordered-set\"\n}\nmodule.exports = class TimerBrowser {\n  constructor (ms, fn, ctx = null, interval = false) {\n    this.ms = ms\n    this.ontimeout = fn\n    this.context = ctx || null\n    this.interval = interval\n    this.done = false\n\n    this._timer = interval\n      ? setInterval(callInterval, ms, this)\n      : setTimeout(callTimeout, ms, this)\n  }\n\n  unref () {}\n\n  ref () {}\n\n  refresh () {\n    if (this.done) return\n\n    if (this.interval) {\n      clearInterval(this._timer)\n      this._timer = setInterval(callInterval, this.ms, this)\n    } else {\n      clearTimeout(this._timer)\n      this._timer = setTimeout(callTimeout, this.ms, this)\n    }\n  }\n\n  destroy () {\n    this.done = true\n    this.ontimeout = null\n\n    if (this.interval) clearInterval(this._timer)\n    else clearTimeout(this._timer)\n  }\n\n  static once (ms, fn, ctx) {\n    return new this(ms, fn, ctx, false)\n  }\n\n  static on (ms, fn, ctx) {\n    return new this(ms, fn, ctx, true)\n  }\n}\n\nfunction callTimeout (self) {\n  self.done = true\n  self.ontimeout.call(self.context)\n}\n\nfunction callInterval (self) {\n  self.ontimeout.call(self.context)\n}\nmodule.exports = isNode()\n  ? require('./node')\n  : require('./browser')\n\nfunction isNode () {\n  const to = setTimeout(function () {}, 1000)\n  clearTimeout(to)\n  return !!to.refresh\n}\nmodule.exports = class Timer {\n  constructor (ms, fn, ctx = null, interval = false) {\n    this.ms = ms\n    this.ontimeout = fn\n    this.context = ctx\n    this.interval = interval\n    this.done = false\n\n    this._timer = interval\n      ? setInterval(callInterval, ms, this)\n      : setTimeout(callTimeout, ms, this)\n  }\n\n  unref () {\n    this._timer.unref()\n  }\n\n  ref () {\n    this._timer.ref()\n  }\n\n  refresh () {\n    if (this.done !== true) this._timer.refresh()\n  }\n\n  destroy () {\n    this.done = true\n    this.ontimeout = null\n    if (this.interval) clearInterval(this._timer)\n    else clearTimeout(this._timer)\n  }\n\n  static once (ms, fn, ctx) {\n    return new this(ms, fn, ctx, false)\n  }\n\n  static on (ms, fn, ctx) {\n    return new this(ms, fn, ctx, true)\n  }\n}\n\nfunction callTimeout (self) {\n  self.done = true\n  self.ontimeout.call(self.context)\n}\n\nfunction callInterval (self) {\n  self.ontimeout.call(self.context)\n}\n{\n  \"name\": \"timeout-refresh\",\n  \"version\": \"2.0.1\",\n  \"description\": \"Efficiently refresh a timer\",\n  \"main\": \"index.js\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"standard\": \"^16.0.4\",\n    \"tape\": \"^5.5.2\"\n  },\n  \"browser\": \"./browser.js\",\n  \"scripts\": {\n    \"test\": \"standard && tape test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/timeout-refresh.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/timeout-refresh/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/timeout-refresh\"\n}\nconst b4a = require('b4a')\n\nmodule.exports = class BufferMap {\n  constructor (other) {\n    this.m = other ? new Map([...other.m]) : new Map()\n  }\n\n  get size () {\n    return this.m.size\n  }\n\n  get (key) {\n    if (b4a.isBuffer(key)) key = b4a.toString(key, 'hex')\n    return this.m.get(key)\n  }\n\n  set (key, value) {\n    if (b4a.isBuffer(key)) key = b4a.toString(key, 'hex')\n    return this.m.set(key, value)\n  }\n\n  delete (key) {\n    if (b4a.isBuffer(key)) key = b4a.toString(key, 'hex')\n    return this.m.delete(key)\n  }\n\n  has (key) {\n    if (b4a.isBuffer(key)) key = b4a.toString(key, 'hex')\n    return this.m.has(key)\n  }\n\n  * [Symbol.iterator] () {\n    for (const [key, value] of this.m) {\n      yield [b4a.from(key, 'hex'), value]\n    }\n  }\n\n  * keys () {\n    for (const key of this.m.keys()) {\n      yield b4a.from(key, 'hex')\n    }\n  }\n\n  values () {\n    return this.m.values()\n  }\n\n  clear () {\n    return this.m.clear()\n  }\n}\n{\n  \"name\": \"tiny-buffer-map\",\n  \"version\": \"1.1.1\",\n  \"description\": \"A very simple map for Buffers\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/andrewosh/tiny-buffer-map.git\"\n  },\n  \"keywords\": [\n    \"buffer\",\n    \"map\"\n  ],\n  \"author\": \"Andrew Osheroff <andrewosh@gmail.com>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/andrewosh/tiny-buffer-map/issues\"\n  },\n  \"homepage\": \"https://github.com/andrewosh/tiny-buffer-map#readme\",\n  \"dependencies\": {\n    \"b4a\": \"^1.6.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.0.4\"\n  }\n}\nrequire.addon = require('require-addon')\n\nmodule.exports = require.addon('.', __filename)\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nconst v4Seg = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'\nconst v4Str = `(${v4Seg}[.]){3}${v4Seg}`\nconst IPv4Pattern = new RegExp(`^${v4Str}$`)\n\nconst v6Seg = '(?:[0-9a-fA-F]{1,4})'\nconst IPv6Pattern = new RegExp('^(' +\n  `(?:${v6Seg}:){7}(?:${v6Seg}|:)|` +\n  `(?:${v6Seg}:){6}(?:${v4Str}|:${v6Seg}|:)|` +\n  `(?:${v6Seg}:){5}(?::${v4Str}|(:${v6Seg}){1,2}|:)|` +\n  `(?:${v6Seg}:){4}(?:(:${v6Seg}){0,1}:${v4Str}|(:${v6Seg}){1,3}|:)|` +\n  `(?:${v6Seg}:){3}(?:(:${v6Seg}){0,2}:${v4Str}|(:${v6Seg}){1,4}|:)|` +\n  `(?:${v6Seg}:){2}(?:(:${v6Seg}){0,3}:${v4Str}|(:${v6Seg}){1,5}|:)|` +\n  `(?:${v6Seg}:){1}(?:(:${v6Seg}){0,4}:${v4Str}|(:${v6Seg}){1,6}|:)|` +\n  `(?::((?::${v6Seg}){0,5}:${v4Str}|(?::${v6Seg}){1,7}|:))` +\n')(%[0-9a-zA-Z-.:]{1,})?$')\n\nconst isIPv4 = exports.isIPv4 = function isIPv4 (host) {\n  return IPv4Pattern.test(host)\n}\n\nconst isIPv6 = exports.isIPv6 = function isIPv6 (host) {\n  return IPv6Pattern.test(host)\n}\n\nexports.isIP = function isIP (host) {\n  if (isIPv4(host)) return 4\n  if (isIPv6(host)) return 6\n  return 0\n}\nconst events = require('events')\nconst b4a = require('b4a')\nconst binding = require('../binding')\n\nmodule.exports = class NetworkInterfaces extends events.EventEmitter {\n  constructor (udx) {\n    super()\n\n    this._handle = b4a.allocUnsafe(binding.sizeof_udx_napi_interface_event_t)\n    this._watching = false\n    this._destroying = null\n\n    binding.udx_napi_interface_event_init(udx._handle, this._handle, this,\n      this._onevent,\n      this._onclose\n    )\n\n    this.interfaces = binding.udx_napi_interface_event_get_addrs(this._handle)\n  }\n\n  _onclose () {\n    this.emit('close')\n  }\n\n  _onevent () {\n    this.interfaces = binding.udx_napi_interface_event_get_addrs(this._handle)\n\n    this.emit('change', this.interfaces)\n  }\n\n  watch () {\n    if (this._watching) return this\n    this._watching = true\n\n    binding.udx_napi_interface_event_start(this._handle)\n\n    return this\n  }\n\n  unwatch () {\n    if (!this._watching) return this\n    this._watching = false\n\n    binding.udx_napi_interface_event_stop(this._handle)\n\n    return this\n  }\n\n  async destroy () {\n    if (this._destroying) return this._destroying\n    this._destroying = events.once(this, 'close')\n\n    binding.udx_napi_interface_event_close(this._handle)\n\n    return this._destroying\n  }\n\n  [Symbol.iterator] () {\n    return this.interfaces[Symbol.iterator]()\n  }\n}\nconst events = require('events')\nconst b4a = require('b4a')\nconst binding = require('../binding')\nconst ip = require('./ip')\n\nmodule.exports = class UDXSocket extends events.EventEmitter {\n  constructor (udx, opts = {}) {\n    super()\n\n    this.udx = udx\n\n    this._handle = b4a.allocUnsafe(binding.sizeof_udx_napi_socket_t)\n    this._inited = false\n    this._host = null\n    this._family = 0\n    this._ipv6Only = opts.ipv6Only === true\n    this._reuseAddress = opts.reuseAddress === true\n    this._port = 0\n    this._reqs = []\n    this._free = []\n    this._closing = null\n    this._closed = false\n\n    this._view64 = new BigUint64Array(this._handle.buffer, this._handle.byteOffset, this._handle.byteLength >> 3)\n\n    this.streams = new Set()\n\n    this.userData = null\n  }\n\n  get bound () {\n    return this._port !== 0\n  }\n\n  get closing () {\n    return this._closing !== null\n  }\n\n  get idle () {\n    return this.streams.size === 0\n  }\n\n  get busy () {\n    return this.streams.size > 0\n  }\n\n  get bytesTransmitted () {\n    if (this._inited !== true) return 0\n    return Number(this._view64[binding.offsetof_udx_socket_t_bytes_tx >> 3])\n  }\n\n  get packetsTransmitted () {\n    if (this._inited !== true) return 0\n    return Number(this._view64[binding.offsetof_udx_socket_t_packets_tx >> 3])\n  }\n\n  get bytesReceived () {\n    if (this._inited !== true) return 0\n    return Number(this._view64[binding.offsetof_udx_socket_t_bytes_rx >> 3])\n  }\n\n  get packetsReceived () {\n    if (this._inited !== true) return 0\n    return Number(this._view64[binding.offsetof_udx_socket_t_packets_rx >> 3])\n  }\n\n  get packetsDroppedByKernel () {\n    if (this._inited !== true) return 0\n    return Number(this._view64[binding.offsetof_udx_socket_t_packets_dropped_by_kernel >> 3])\n  }\n\n  toJSON () {\n    return {\n      bound: this.bound,\n      closing: this.closing,\n      streams: this.streams.size,\n      address: this.address(),\n      ipv6Only: this._ipv6Only,\n      reuseAddress: this._reuseAddress,\n      idle: this.idle,\n      busy: this.busy\n    }\n  }\n\n  _init () {\n    if (this._inited) return\n\n    binding.udx_napi_socket_init(this.udx._handle, this._handle, this,\n      this._onsend,\n      this._onmessage,\n      this._onclose,\n      this._reallocMessage\n    )\n\n    this._inited = true\n  }\n\n  _onsend (id, err) {\n    const req = this._reqs[id]\n\n    const onflush = req.onflush\n\n    req.buffer = null\n    req.onflush = null\n\n    this._free.push(id)\n\n    onflush(err >= 0)\n\n    // gc the free list\n    if (this._free.length >= 16 && this._free.length === this._reqs.length) {\n      this._free = []\n      this._reqs = []\n    }\n  }\n\n  _onmessage (len, port, host, family) {\n    this.emit('message', this.udx._consumeMessage(len), { host, family, port })\n    return this.udx._buffer\n  }\n\n  _onclose () {\n    this.emit('close')\n  }\n\n  _reallocMessage () {\n    return this.udx._reallocMessage()\n  }\n\n  _onidle () {\n    this.emit('idle')\n  }\n\n  _onbusy () {\n    this.emit('busy')\n  }\n\n  _addStream (stream) {\n    if (this.streams.has(stream)) return false\n    this.streams.add(stream)\n    if (this.streams.size === 1) this._onbusy()\n    return true\n  }\n\n  _removeStream (stream) {\n    if (!this.streams.has(stream)) return false\n    this.streams.delete(stream)\n    const closed = this._closeMaybe()\n    if (this.idle && !closed) this._onidle()\n    return true\n  }\n\n  address () {\n    if (!this.bound) return null\n    return { host: this._host, family: this._family, port: this._port }\n  }\n\n  bind (port, host) {\n    if (this.bound) throw new Error('Already bound')\n    if (this.closing) throw new Error('Socket is closed')\n\n    if (!port) port = 0\n\n    let flags = 0\n    if (this._ipv6Only) flags |= binding.UV_UDP_IPV6ONLY\n    if (this._reuseAddress) flags |= binding.UV_UDP_REUSEADDR\n\n    let family\n\n    if (host) {\n      family = ip.isIP(host)\n      if (!family) throw new Error(`${host} is not a valid IP address`)\n\n      if (!this._inited) this._init()\n\n      this._port = binding.udx_napi_socket_bind(this._handle, port, host, family, flags)\n    } else {\n      if (!this._inited) this._init()\n\n      try {\n        host = '::'\n        family = 6\n        this._port = binding.udx_napi_socket_bind(this._handle, port, host, family, flags)\n      } catch {\n        host = '0.0.0.0'\n        family = 4\n        this._port = binding.udx_napi_socket_bind(this._handle, port, host, family, flags)\n      }\n    }\n\n    this._host = host\n    this._family = family\n\n    this.emit('listening')\n  }\n\n  async close () {\n    if (this._closing) return this._closing\n    this._closing = new Promise(resolve => this.once('close', resolve))\n    this._closeMaybe()\n    return this._closing\n  }\n\n  _closeMaybe () {\n    if (this._closed || this._closing === null) return this._closed\n\n    if (!this._inited) {\n      this._closed = true\n      this.emit('close')\n      return true\n    }\n\n    if (this.idle) {\n      binding.udx_napi_socket_close(this._handle)\n      this._closed = true\n    }\n\n    return this._closed\n  }\n\n  setTTL (ttl) {\n    if (!this._inited) throw new Error('Socket not active')\n    binding.udx_napi_socket_set_ttl(this._handle, ttl)\n  }\n\n  getRecvBufferSize () {\n    if (!this._inited) throw new Error('Socket not active')\n    return binding.udx_napi_socket_get_recv_buffer_size(this._handle)\n  }\n\n  setRecvBufferSize (size) {\n    if (!this._inited) throw new Error('Socket not active')\n    return binding.udx_napi_socket_set_recv_buffer_size(this._handle, size)\n  }\n\n  getSendBufferSize () {\n    if (!this._inited) throw new Error('Socket not active')\n    return binding.udx_napi_socket_get_send_buffer_size(this._handle)\n  }\n\n  setSendBufferSize (size) {\n    if (!this._inited) throw new Error('Socket not active')\n    return binding.udx_napi_socket_set_send_buffer_size(this._handle, size)\n  }\n\n  addMembership (group, ifaceAddress) {\n    if (!this._inited) throw new Error('Socket not active')\n    return binding.udx_napi_socket_set_membership(this._handle, group, ifaceAddress || '', true)\n  }\n\n  dropMembership (group, ifaceAddress) {\n    if (!this._inited) throw new Error('Socket not active')\n    return binding.udx_napi_socket_set_membership(this._handle, group, ifaceAddress || '', false)\n  }\n\n  async send (buffer, port, host, ttl) {\n    if (this.closing) return false\n\n    if (!host) host = '127.0.0.1'\n\n    const family = ip.isIP(host)\n    if (!family) throw new Error(`${host} is not a valid IP address`)\n\n    if (!this.bound) this.bind(0)\n\n    const id = this._allocSend()\n    const req = this._reqs[id]\n\n    req.buffer = buffer\n\n    const promise = new Promise((resolve) => {\n      req.onflush = resolve\n    })\n\n    binding.udx_napi_socket_send_ttl(this._handle, req.handle, id, buffer, port, host, family, ttl || 0)\n\n    return promise\n  }\n\n  trySend (buffer, port, host, ttl) {\n    if (this.closing) return\n\n    if (!host) host = '127.0.0.1'\n\n    const family = ip.isIP(host)\n    if (!family) throw new Error(`${host} is not a valid IP address`)\n\n    if (!this.bound) this.bind(0)\n\n    const id = this._allocSend()\n    const req = this._reqs[id]\n\n    req.buffer = buffer\n    req.onflush = noop\n\n    binding.udx_napi_socket_send_ttl(this._handle, req.handle, id, buffer, port, host, family, ttl || 0)\n  }\n\n  _allocSend () {\n    if (this._free.length > 0) return this._free.pop()\n    const handle = b4a.allocUnsafe(binding.sizeof_udx_socket_send_t)\n    return this._reqs.push({ handle, buffer: null, onflush: null }) - 1\n  }\n}\n\nfunction noop () {}\nconst streamx = require('streamx')\nconst b4a = require('b4a')\nconst binding = require('../binding')\nconst ip = require('./ip')\n\nconst MAX_PACKET = 2048\nconst BUFFER_SIZE = 65536 + MAX_PACKET\n\nmodule.exports = class UDXStream extends streamx.Duplex {\n  constructor (udx, id, opts = {}) {\n    super({ mapWritable: toBuffer, eagerOpen: true })\n\n    this.udx = udx\n    this.socket = null\n\n    this._handle = b4a.allocUnsafe(binding.sizeof_udx_napi_stream_t)\n    this._view = new Uint32Array(this._handle.buffer, this._handle.byteOffset, this._handle.byteLength >> 2)\n    this._view16 = new Uint16Array(this._handle.buffer, this._handle.byteOffset, this._handle.byteLength >> 1)\n    this._view64 = new BigUint64Array(this._handle.buffer, this._handle.byteOffset, this._handle.byteLength >> 3)\n\n    this._wreqs = []\n    this._wfree = []\n\n    this._sreqs = []\n    this._sfree = []\n    this._closed = false\n\n    this._flushing = 0\n    this._flushes = []\n\n    this._buffer = null\n    this._reallocData()\n\n    this._onwrite = null\n    this._ondestroy = null\n    this._firewall = opts.firewall || firewallAll\n\n    this._remoteChanging = null\n    this._previousSocket = null\n\n    this.id = id\n    this.remoteId = 0\n    this.remoteHost = null\n    this.remoteFamily = 0\n    this.remotePort = 0\n\n    this.userData = null\n\n    binding.udx_napi_stream_init(this.udx._handle, this._handle, id, opts.framed ? 1 : 0, this,\n      this._ondata,\n      this._onend,\n      this._ondrain,\n      this._onack,\n      this._onsend,\n      this._onmessage,\n      this._onclose,\n      this._onfirewall,\n      this._onremotechanged,\n      this._reallocData,\n      this._reallocMessage\n    )\n\n    if (opts.seq) binding.udx_napi_stream_set_seq(this._handle, opts.seq)\n\n    binding.udx_napi_stream_recv_start(this._handle, this._buffer)\n  }\n\n  get connected () {\n    return this.socket !== null\n  }\n\n  get mtu () {\n    return this._view16[binding.offsetof_udx_stream_t_mtu >> 1]\n  }\n\n  get rtt () {\n    return this._view[binding.offsetof_udx_stream_t_srtt >> 2]\n  }\n\n  get cwnd () {\n    return this._view[binding.offsetof_udx_stream_t_cwnd >> 2]\n  }\n\n  get rtoCount () {\n    return this._view16[binding.offsetof_udx_stream_t_rto_count >> 1]\n  }\n\n  get retransmits () {\n    return this._view16[binding.offsetof_udx_stream_t_retransmit_count >> 1]\n  }\n\n  get fastRecoveries () {\n    return this._view16[binding.offsetof_udx_stream_t_fast_recovery_count >> 1]\n  }\n\n  get inflight () {\n    return this._view[binding.offsetof_udx_stream_t_inflight >> 2]\n  }\n\n  get bytesTransmitted () {\n    return Number(this._view64[binding.offsetof_udx_stream_t_bytes_tx >> 3])\n  }\n\n  get packetsTransmitted () {\n    return Number(this._view64[binding.offsetof_udx_stream_t_packets_tx >> 3])\n  }\n\n  get bytesReceived () {\n    return Number(this._view64[binding.offsetof_udx_stream_t_bytes_rx >> 3])\n  }\n\n  get packetsReceived () {\n    return Number(this._view64[binding.offsetof_udx_stream_t_packets_rx >> 3])\n  }\n\n  get localHost () {\n    return this.socket ? this.socket.address().host : null\n  }\n\n  get localFamily () {\n    return this.socket ? this.socket.address().family : 0\n  }\n\n  get localPort () {\n    return this.socket ? this.socket.address().port : 0\n  }\n\n  setInteractive (bool) {\n    if (!this._closed) return\n    binding.udx_napi_stream_set_mode(this._handle, bool ? 0 : 1)\n  }\n\n  connect (socket, remoteId, port, host, opts = {}) {\n    if (this._closed) return\n\n    if (this.connected) throw new Error('Already connected')\n    if (socket.closing) throw new Error('Socket is closed')\n\n    if (typeof host === 'object') {\n      opts = host\n      host = null\n    }\n\n    if (!host) host = '127.0.0.1'\n\n    const family = ip.isIP(host)\n    if (!family) throw new Error(`${host} is not a valid IP address`)\n    if (!(port > 0 && port < 65536)) throw new Error(`${port} is not a valid port`)\n\n    if (!socket.bound) socket.bind(0)\n\n    this.remoteId = remoteId\n    this.remotePort = port\n    this.remoteHost = host\n    this.remoteFamily = family\n    this.socket = socket\n\n    if (opts.ack) binding.udx_napi_stream_set_ack(this._handle, opts.ack)\n\n    binding.udx_napi_stream_connect(this._handle, socket._handle, remoteId, port, host, family)\n\n    this.socket._addStream(this)\n\n    this.emit('connect')\n  }\n\n  changeRemote (socket, remoteId, port, host) {\n    if (this._remoteChanging) throw new Error('Remote already changing')\n\n    if (!this.connected) throw new Error('Not yet connected')\n    if (socket.closing) throw new Error('Socket is closed')\n\n    if (this.socket.udx !== socket.udx) {\n      throw new Error('Cannot change to a socket on another UDX instance')\n    }\n\n    if (!host) host = '127.0.0.1'\n\n    const family = ip.isIP(host)\n    if (!family) throw new Error(`${host} is not a valid IP address`)\n    if (!(port > 0 && port < 65536)) throw new Error(`${port} is not a valid port`)\n\n    if (this.socket !== socket) this._previousSocket = this.socket\n\n    this.remoteId = remoteId\n    this.remotePort = port\n    this.remoteHost = host\n    this.remoteFamily = family\n    this.socket = socket\n\n    this._remoteChanging = new Promise((resolve, reject) => {\n      const onchanged = () => {\n        this.off('close', onclose)\n        resolve()\n      }\n\n      const onclose = () => {\n        this.off('remote-changed', onchanged)\n        reject(new Error('Stream is closed'))\n      }\n\n      this\n        .once('remote-changed', onchanged)\n        .once('close', onclose)\n    })\n\n    binding.udx_napi_stream_change_remote(this._handle, socket._handle, remoteId, port, host, family)\n\n    this.socket._addStream(this)\n\n    return this._remoteChanging\n  }\n\n  relayTo (destination) {\n    if (this._closed) return\n\n    binding.udx_napi_stream_relay_to(this._handle, destination._handle)\n  }\n\n  async send (buffer) {\n    if (!this.connected || this._closed) return false\n\n    const id = this._allocSend()\n    const req = this._sreqs[id]\n\n    req.buffer = buffer\n\n    const promise = new Promise((resolve) => {\n      req.onflush = resolve\n    })\n\n    binding.udx_napi_stream_send(this._handle, req.handle, id, buffer)\n\n    return promise\n  }\n\n  trySend (buffer) {\n    if (!this.connected || this._closed) return\n\n    const id = this._allocSend()\n    const req = this._sreqs[id]\n\n    req.buffer = buffer\n    req.onflush = noop\n\n    binding.udx_napi_stream_send(this._handle, req.handle, id, buffer)\n  }\n\n  async flush () {\n    if ((await streamx.Writable.drained(this)) === false) return false\n    if (this.destroying) return false\n\n    const missing = this._wreqs.length - this._wfree.length\n    if (missing === 0) return true\n\n    return new Promise((resolve) => {\n      this._flushes.push({ flush: this._flushing++, missing, resolve })\n    })\n  }\n\n  toJSON () {\n    return {\n      id: this.id,\n      connected: this.connected,\n      destroying: this.destroying,\n      destroyed: this.destroyed,\n      remoteId: this.remoteId,\n      remoteHost: this.remoteHost,\n      remoteFamily: this.remoteFamily,\n      remotePort: this.remotePort,\n      mtu: this.mtu,\n      rtt: this.rtt,\n      cwnd: this.cwnd,\n      inflight: this.inflight,\n      socket: this.socket ? this.socket.toJSON() : null\n    }\n  }\n\n  _read (cb) {\n    cb(null)\n  }\n\n  _writeContinue (err) {\n    if (this._onwrite === null) return\n    const cb = this._onwrite\n    this._onwrite = null\n    cb(err)\n  }\n\n  _destroyContinue (err) {\n    if (this._ondestroy === null) return\n    const cb = this._ondestroy\n    this._ondestroy = null\n    cb(err)\n  }\n\n  _writev (buffers, cb) {\n    if (!this.connected) throw customError('Writing while not connected not currently supported', 'ERR_ASSERTION')\n\n    let drained = true\n\n    if (buffers.length === 1) {\n      const id = this._allocWrite(1)\n      const req = this._wreqs[id]\n\n      req.flush = this._flushing\n      req.buffer = buffers[0]\n\n      drained = binding.udx_napi_stream_write(this._handle, req.handle, id, req.buffer) !== 0\n    } else {\n      const id = this._allocWrite(nextBatchSize(buffers.length))\n      const req = this._wreqs[id]\n\n      req.flush = this._flushing\n      req.buffers = buffers\n\n      drained = binding.udx_napi_stream_writev(this._handle, req.handle, id, req.buffers) !== 0\n    }\n\n    if (drained) cb(null)\n    else this._onwrite = cb\n  }\n\n  _final (cb) {\n    const id = this._allocWrite(1)\n    const req = this._wreqs[id]\n\n    req.flush = this._flushes\n    req.buffer = b4a.allocUnsafe(0)\n\n    const drained = binding.udx_napi_stream_write_end(this._handle, req.handle, id, req.buffer) !== 0\n\n    if (drained) cb(null)\n    else this._onwrite = cb\n  }\n\n  _predestroy () {\n    if (!this._closed) binding.udx_napi_stream_destroy(this._handle)\n    this._closed = true\n    this._writeContinue(null)\n  }\n\n  _destroy (cb) {\n    if (this.connected) this._ondestroy = cb\n    else cb(null)\n  }\n\n  _ondata (read) {\n    this.push(this._consumeData(read))\n    return this._buffer\n  }\n\n  _onend (read) {\n    if (read > 0) this.push(this._consumeData(read))\n    this.push(null)\n  }\n\n  _ondrain () {\n    this._writeContinue(null)\n  }\n\n  _flushAck (flush) {\n    for (let i = this._flushes.length - 1; i >= 0; i--) {\n      const f = this._flushes[i]\n      if (f.flush < flush) break\n      f.missing--\n    }\n\n    while (this._flushes.length > 0 && this._flushes[0].missing === 0) {\n      this._flushes.shift().resolve(true)\n    }\n  }\n\n  _onack (id) {\n    const req = this._wreqs[id]\n\n    req.buffers = req.buffer = null\n    this._wfree.push(id)\n\n    if (this._flushes.length > 0) this._flushAck(req.flush)\n\n    // gc the free list\n    if (this._wfree.length >= 64 && this._wfree.length === this._wreqs.length) {\n      this._wfree = []\n      this._wreqs = []\n    }\n  }\n\n  _onsend (id, err) {\n    const req = this._sreqs[id]\n\n    const onflush = req.onflush\n\n    req.buffer = null\n    req.onflush = null\n\n    this._sfree.push(id)\n\n    onflush(err >= 0)\n\n    // gc the free list\n    if (this._sfree.length >= 16 && this._sfree.length === this._sreqs.length) {\n      this._sfree = []\n      this._sreqs = []\n    }\n  }\n\n  _onmessage (len) {\n    this.emit('message', this.udx._consumeMessage(len))\n    return this.udx._buffer\n  }\n\n  _onclose (err) {\n    this._closed = true\n\n    if (this.socket) {\n      this.socket._removeStream(this)\n      this.socket = null\n    }\n\n    if (this._previousSocket) {\n      this._previousSocket._removeStream(this)\n      this._previousSocket = null\n    }\n\n    // no error, we don't need to do anything\n    if (!err) return this._destroyContinue(null)\n\n    if (this._ondestroy === null) this.destroy(err)\n    else this._destroyContinue(err)\n  }\n\n  _onfirewall (socket, port, host, family) {\n    return this._firewall(socket, port, host, family) ? 1 : 0\n  }\n\n  _onremotechanged () {\n    if (this._previousSocket) {\n      this._previousSocket._removeStream(this)\n      this._previousSocket = null\n    }\n\n    this._remoteChanging = null\n    this.emit('remote-changed')\n  }\n\n  _consumeData (len) {\n    const next = this._buffer.subarray(0, len)\n    this._buffer = this._buffer.subarray(len)\n    if (this._buffer.byteLength < MAX_PACKET) this._reallocData()\n    return next\n  }\n\n  _reallocData () {\n    this._buffer = b4a.allocUnsafe(BUFFER_SIZE)\n    return this._buffer\n  }\n\n  _reallocMessage () {\n    return this.udx._reallocMessage()\n  }\n\n  _allocWrite (size) {\n    if (this._wfree.length === 0) {\n      const handle = b4a.allocUnsafe(binding.udx_napi_stream_write_sizeof(size))\n      return this._wreqs.push({ handle, size, buffers: null, buffer: null, flush: 0 }) - 1\n    }\n\n    const free = this._wfree.pop()\n    if (size === 1) return free\n\n    const next = this._wreqs[free]\n    if (next.size < size) {\n      next.handle = b4a.allocUnsafe(binding.udx_napi_stream_write_sizeof(size))\n      next.size = size\n    }\n\n    return free\n  }\n\n  _allocSend () {\n    if (this._sfree.length > 0) return this._sfree.pop()\n    const handle = b4a.allocUnsafe(binding.sizeof_udx_stream_send_t)\n    return this._sreqs.push({ handle, buffer: null, resolve: null, reject: null }) - 1\n  }\n}\n\nfunction noop () {}\n\nfunction toBuffer (data) {\n  return typeof data === 'string' ? b4a.from(data) : data\n}\n\nfunction firewallAll (socket, port, host) {\n  return true\n}\n\nfunction customError (message, code) {\n  const error = new Error(message)\n  error.code = code\n  return error\n}\n\nfunction nextBatchSize (n) { // try to coerce the the writevs into sameish size\n  if (n === 1) return 1\n  // group all < 8 to the same size, low mem overhead but save some small allocs\n  if (n < 8) return 8\n  if (n < 16) return 16\n  if (n < 32) return 32\n  if (n < 64) return 64\n  return n\n}\nconst b4a = require('b4a')\nconst binding = require('../binding')\nconst ip = require('./ip')\nconst Socket = require('./socket')\nconst Stream = require('./stream')\nconst NetworkInterfaces = require('./network-interfaces')\n\nconst MAX_MESSAGE = 4096\nconst BUFFER_SIZE = 65536 + MAX_MESSAGE\n\nmodule.exports = class UDX {\n  constructor () {\n    this._handle = b4a.allocUnsafe(binding.sizeof_udx_napi_t)\n    this._watchers = new Set()\n    this._view64 = new BigUint64Array(this._handle.buffer, this._handle.byteOffset, this._handle.byteLength >> 3)\n\n    this._buffer = null\n    this._reallocMessage()\n\n    binding.udx_napi_init(this._handle, this._buffer)\n  }\n\n  static isIPv4 (host) {\n    return ip.isIPv4(host)\n  }\n\n  static isIPv6 (host) {\n    return ip.isIPv6(host)\n  }\n\n  static isIP (host) {\n    return ip.isIP(host)\n  }\n\n  get bytesTransmitted () {\n    return Number(this._view64[binding.offsetof_udx_t_bytes_tx >> 3])\n  }\n\n  get packetsTransmitted () {\n    return Number(this._view64[binding.offsetof_udx_t_packets_tx >> 3])\n  }\n\n  get bytesReceived () {\n    return Number(this._view64[binding.offsetof_udx_t_bytes_rx >> 3])\n  }\n\n  get packetsReceived () {\n    return Number(this._view64[binding.offsetof_udx_t_packets_rx >> 3])\n  }\n\n  get packetsDroppedByKernel () {\n    return Number(this._view64[binding.offsetof_udx_t_packets_dropped_by_kernel >> 3])\n  }\n\n  _consumeMessage (len) {\n    const next = this._buffer.subarray(0, len)\n    this._buffer = this._buffer.subarray(len)\n    if (this._buffer.byteLength < MAX_MESSAGE) this._reallocMessage()\n    return next\n  }\n\n  _reallocMessage () {\n    this._buffer = b4a.allocUnsafe(BUFFER_SIZE)\n    return this._buffer\n  }\n\n  createSocket (opts) {\n    return new Socket(this, opts)\n  }\n\n  createStream (id, opts) {\n    return new Stream(this, id, opts)\n  }\n\n  networkInterfaces () {\n    let [watcher = null] = this._watchers\n    if (watcher) return watcher.interfaces\n\n    watcher = new NetworkInterfaces(this)\n    watcher.destroy()\n\n    return watcher.interfaces\n  }\n\n  watchNetworkInterfaces (onchange) {\n    const watcher = new NetworkInterfaces(this)\n\n    this._watchers.add(watcher)\n    watcher.on('close', () => {\n      this._watchers.delete(watcher)\n    })\n\n    if (onchange) watcher.on('change', onchange)\n\n    return watcher.watch()\n  }\n\n  async lookup (host, opts = {}) {\n    const {\n      family = 0\n    } = opts\n\n    const req = b4a.allocUnsafe(binding.sizeof_udx_napi_lookup_t)\n    const ctx = {\n      req,\n      resolve: null,\n      reject: null\n    }\n\n    const promise = new Promise((resolve, reject) => {\n      ctx.resolve = resolve\n      ctx.reject = reject\n    })\n\n    binding.udx_napi_lookup(this._handle, req, host, family, ctx, onlookup)\n\n    return promise\n  }\n}\n\nfunction onlookup (err, host, family) {\n  if (err) this.reject(err)\n  else this.resolve({ host, family })\n}\n{\n  \"name\": \"udx-native\",\n  \"version\": \"1.17.6\",\n  \"description\": \"udx is reliable, multiplexed, and congestion-controlled streams over udp\",\n  \"main\": \"lib/udx.js\",\n  \"files\": [\n    \"lib\",\n    \"prebuilds\",\n    \"binding.c\",\n    \"binding.js\",\n    \"CMakeLists.txt\"\n  ],\n  \"imports\": {\n    \"events\": {\n      \"bare\": \"bare-events\",\n      \"default\": \"events\"\n    }\n  },\n  \"addon\": true,\n  \"scripts\": {\n    \"test\": \"npm run lint && npm run test:bare && npm run test:node\",\n    \"test:node\": \"node test/all.js\",\n    \"test:bare\": \"bare test/all.js\",\n    \"test:all\": \"brittle test/*.js test/slow/*.js\",\n    \"test:generate\": \"brittle -r test/all.js test/*.js\",\n    \"bench\": \"brittle test/bench/*.js\",\n    \"lint\": \"standard\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/udx-native.git\"\n  },\n  \"keywords\": [\n    \"tcp\",\n    \"udp\",\n    \"stream\",\n    \"reliable\"\n  ],\n  \"author\": \"Holepunch Inc.\",\n  \"license\": \"Apache-2.0\",\n  \"gypfile\": true,\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/udx-native/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/udx-native#readme\",\n  \"dependencies\": {\n    \"b4a\": \"^1.5.0\",\n    \"bare-events\": \"^2.2.0\",\n    \"require-addon\": \"^1.1.0\",\n    \"streamx\": \"^2.14.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.0\",\n    \"cmake-bare\": \"^1.1.10\",\n    \"cmake-fetch\": \"^1.0.1\",\n    \"cmake-napi\": \"^1.0.5\",\n    \"is-ci\": \"^3.0.1\",\n    \"standard\": \"^17.1.0\",\n    \"tiny-byte-size\": \"^1.1.0\"\n  }\n}\nexports.add = add\nexports.has = has\nexports.remove = remove\nexports.swap = swap\n\nfunction add (list, item) {\n  if (has(list, item)) return item\n  item._index = list.length\n  list.push(item)\n  return item\n}\n\nfunction has (list, item) {\n  return item._index < list.length && list[item._index] === item\n}\n\nfunction remove (list, item) {\n  if (!has(list, item)) return null\n\n  var last = list.pop()\n  if (last !== item) {\n    list[item._index] = last\n    last._index = item._index\n  }\n\n  return item\n}\n\nfunction swap (list, a, b) {\n  if (!has(list, a) || !has(list, b)) return\n  var tmp = a._index\n  a._index = b._index\n  list[a._index] = a\n  b._index = tmp\n  list[b._index] = b\n}\n{\n  \"name\": \"unordered-set\",\n  \"version\": \"2.0.1\",\n  \"description\": \"A couple of functions that make it easy to maintain an unordered set as an array in an efficient way\",\n  \"main\": \"index.js\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"standard\": \"^6.0.4\",\n    \"tape\": \"^4.4.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && tape test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/unordered-set.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/unordered-set/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/unordered-set\"\n}\nconst b4a = require('b4a')\n\nunslab.all = all\nunslab.is = is\n\nmodule.exports = unslab\n\nfunction unslab (buf) {\n  if (buf === null || buf.buffer.byteLength === buf.byteLength) return buf\n  const copy = b4a.allocUnsafeSlow(buf.byteLength)\n  copy.set(buf, 0)\n  return copy\n}\n\nfunction is (buf) {\n  return buf.buffer.byteLength !== buf.byteLength\n}\n\nfunction all (list) {\n  let size = 0\n  for (let i = 0; i < list.length; i++) {\n    const buf = list[i]\n    size += buf === null || buf.buffer.byteLength === buf.byteLength ? 0 : buf.byteLength\n  }\n\n  const copy = b4a.allocUnsafeSlow(size)\n  const result = new Array(list.length)\n\n  let offset = 0\n  for (let i = 0; i < list.length; i++) {\n    let buf = list[i]\n\n    if (buf !== null && buf.buffer.byteLength !== buf.byteLength) {\n      copy.set(buf, offset)\n      buf = copy.subarray(offset, offset += buf.byteLength)\n    }\n\n    result[i] = buf\n  }\n\n  return result\n}\n{\n  \"name\": \"unslab\",\n  \"version\": \"1.3.0\",\n  \"description\": \"Unslab some slab'ed buffers\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"b4a\": \"^1.6.6\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.5.2\",\n    \"standard\": \"^17.1.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/holepunchto/unslab.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/unslab/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/unslab\"\n}\nmodule.exports = read\n\nvar MSB = 0x80\n  , REST = 0x7F\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++]\n    res += shift < 28\n      ? (b & REST) << shift\n      : (b & REST) * Math.pow(2, shift)\n    shift += 7\n  } while (b >= MSB)\n\n  read.bytes = counter - offset\n\n  return res\n}\nmodule.exports = encode\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31)\n\nfunction encode(num, out, offset) {\n  out = out || []\n  offset = offset || 0\n  var oldOffset = offset\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB\n    num /= 128\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB\n    num >>>= 7\n  }\n  out[offset] = num | 0\n  \n  encode.bytes = offset - oldOffset + 1\n  \n  return out\n}\nmodule.exports = {\n    encode: require('./encode.js')\n  , decode: require('./decode.js')\n  , encodingLength: require('./length.js')\n}\n\nvar N1 = Math.pow(2,  7)\nvar N2 = Math.pow(2, 14)\nvar N3 = Math.pow(2, 21)\nvar N4 = Math.pow(2, 28)\nvar N5 = Math.pow(2, 35)\nvar N6 = Math.pow(2, 42)\nvar N7 = Math.pow(2, 49)\nvar N8 = Math.pow(2, 56)\nvar N9 = Math.pow(2, 63)\n\nmodule.exports = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n}\n{\n  \"name\": \"varint\",\n  \"version\": \"5.0.0\",\n  \"description\": \"protobuf-style varint bytes - use msb to create integer values of varying sizes\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"node test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/chrisdickinson/varint.git\"\n  },\n  \"keywords\": [\n    \"varint\",\n    \"protobuf\",\n    \"encode\",\n    \"decode\"\n  ],\n  \"author\": \"Chris Dickinson <chris@neversaw.us>\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"tape\": \"~2.12.3\"\n  }\n}\nconst { runtime, platform, arch } = typeof Bare !== 'undefined'\n  ? { runtime: 'bare', platform: global.Bare.platform, arch: global.Bare.arch }\n  : typeof process !== 'undefined'\n    ? { runtime: 'node', platform: global.process.platform, arch: global.process.arch }\n    : typeof Window !== 'undefined'\n      ? { runtime: 'browser', platform: 'unknown', arch: 'unknown' }\n      : { runtime: 'unknown', platform: 'unknown', arch: 'unknown' }\n\nexports.runtime = runtime\nexports.platform = platform\nexports.arch = arch\nexports.isBare = runtime === 'bare'\nexports.isNode = runtime === 'node'\nexports.isBrowser = runtime === 'browser'\nexports.isWindows = platform === 'win32'\nexports.isLinux = platform === 'linux'\nexports.isMac = platform === 'darwin'\nexports.isIOS = platform === 'ios' || platform === 'ios-simulator'\nexports.isAndroid = platform === 'android'\nexports.isElectron = !!(typeof process !== 'undefined' && global.process.versions.electron)\nexports.isElectronRenderer = !!(typeof process !== 'undefined' && global.process.versions.electron && global.process.type === 'renderer')\nexports.isElectronWorker = !!(typeof process !== 'undefined' && global.process.versions.electron && global.process.type === 'worker')\n{\n  \"name\": \"which-runtime\",\n  \"version\": \"1.2.1\",\n  \"description\": \"Detect if you are in Bare or Node and which os etc\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"standard\": \"^17.0.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/holepunchto/which-runtime.git\"\n  },\n  \"author\": \"Holepunch Inc.\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/which-runtime/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/which-runtime\"\n}\nmodule.exports = class MaxCache {\n  constructor ({ maxSize, maxAge, createMap, ongc }) {\n    this.maxSize = maxSize\n    this.maxAge = maxAge\n    this.ongc = ongc || null\n\n    this._createMap = createMap || defaultCreateMap\n    this._latest = this._createMap()\n    this._oldest = this._createMap()\n    this._retained = this._createMap()\n    this._gced = false\n    this._interval = null\n\n    if (this.maxAge > 0 && this.maxAge < Infinity) {\n      const tick = Math.ceil(2 / 3 * this.maxAge)\n      this._interval = setInterval(this._gcAuto.bind(this), tick)\n      if (this._interval.unref) this._interval.unref()\n    }\n  }\n\n  * [Symbol.iterator] () {\n    for (const it of [this._latest, this._oldest, this._retained]) {\n      yield * it\n    }\n  }\n\n  * keys () {\n    for (const it of [this._latest, this._oldest, this._retained]) {\n      yield * it.keys()\n    }\n  }\n\n  * values () {\n    for (const it of [this._latest, this._oldest, this._retained]) {\n      yield * it.values()\n    }\n  }\n\n  destroy () {\n    this.clear()\n    clearInterval(this._interval)\n    this._interval = null\n  }\n\n  clear () {\n    this._gced = true\n    this._latest.clear()\n    this._oldest.clear()\n    this._retained.clear()\n  }\n\n  set (k, v) {\n    if (this._retained.has(k)) return this\n    this._latest.set(k, v)\n    this._oldest.delete(k) || this._retained.delete(k)\n    if (this._latest.size >= this.maxSize) this._gc()\n    return this\n  }\n\n  retain (k, v) {\n    this._retained.set(k, v)\n    this._latest.delete(k) || this._oldest.delete(k)\n    return this\n  }\n\n  delete (k) {\n    return this._latest.delete(k) || this._oldest.delete(k) || this._retained.delete(k)\n  }\n\n  has (k) {\n    return this._latest.has(k) || this._oldest.has(k) || this._retained.has(k)\n  }\n\n  get (k) {\n    if (this._latest.has(k)) {\n      return this._latest.get(k)\n    }\n\n    if (this._oldest.has(k)) {\n      const v = this._oldest.get(k)\n      this._latest.set(k, v)\n      this._oldest.delete(k)\n      return v\n    }\n\n    if (this._retained.has(k)) {\n      return this._retained.get(k)\n    }\n\n    return null\n  }\n\n  _gcAuto () {\n    if (!this._gced) this._gc()\n    this._gced = false\n  }\n\n  _gc () {\n    this._gced = true\n    if (this.ongc !== null && this._oldest.size > 0) this.ongc(this._oldest)\n    this._oldest = this._latest\n    this._latest = this._createMap()\n  }\n}\n\nfunction defaultCreateMap () {\n  return new Map()\n}\n{\n  \"name\": \"xache\",\n  \"version\": \"1.2.1\",\n  \"description\": \"Yet another auto expiring, max sizable cache\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"devDependencies\": {\n    \"brittle\": \"^3.3.2\",\n    \"standard\": \"^17.1.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/xache.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/xache/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/xache\"\n}\nconst b4a = require('b4a')\n\nconst ALPHABET = 'ybndrfg8ejkmcpqxot1uwisza345h769'\nconst MIN = 0x31 // 1\nconst MAX = 0x7a // z\nconst REVERSE = new Int8Array(1 + MAX - MIN)\n\nREVERSE.fill(-1)\n\nfor (let i = 0; i < ALPHABET.length; i++) {\n  const v = ALPHABET.charCodeAt(i) - MIN\n  REVERSE[v] = i\n}\n\nexports.encode = encode\nexports.decode = decode\nexports.ALPHABET = ALPHABET\n\nfunction decode (s, out) {\n  let pb = 0\n  let ps = 0\n\n  const r = s.length & 7\n  const q = (s.length - r) / 8\n\n  if (!out) out = b4a.allocUnsafe(Math.ceil(s.length * 5 / 8))\n\n  // 0 5 2 7 4 1 6 3 (+5 mod 8)\n  for (let i = 0; i < q; i++) {\n    const a = quintet(s, ps++)\n    const b = quintet(s, ps++)\n    const c = quintet(s, ps++)\n    const d = quintet(s, ps++)\n    const e = quintet(s, ps++)\n    const f = quintet(s, ps++)\n    const g = quintet(s, ps++)\n    const h = quintet(s, ps++)\n\n    out[pb++] = (a << 3) | (b >>> 2)\n    out[pb++] = ((b & 0b11) << 6) | (c << 1) | (d >>> 4)\n    out[pb++] = ((d & 0b1111) << 4) | (e >>> 1)\n    out[pb++] = ((e & 0b1) << 7) | (f << 2) | (g >>> 3)\n    out[pb++] = ((g & 0b111) << 5) | h\n  }\n\n  if (r === 0) return out.subarray(0, pb)\n\n  const a = quintet(s, ps++)\n  const b = quintet(s, ps++)\n\n  out[pb++] = (a << 3) | (b >>> 2)\n\n  if (r <= 2) return out.subarray(0, pb)\n\n  const c = quintet(s, ps++)\n  const d = quintet(s, ps++)\n\n  out[pb++] = ((b & 0b11) << 6) | (c << 1) | (d >>> 4)\n\n  if (r <= 4) return out.subarray(0, pb)\n\n  const e = quintet(s, ps++)\n\n  out[pb++] = ((d & 0b1111) << 4) | (e >>> 1)\n\n  if (r <= 5) return out.subarray(0, pb)\n\n  const f = quintet(s, ps++)\n  const g = quintet(s, ps++)\n\n  out[pb++] = ((e & 0b1) << 7) | (f << 2) | (g >>> 3)\n\n  if (r <= 7) return out.subarray(0, pb)\n\n  const h = quintet(s, ps++)\n\n  out[pb++] = ((g & 0b111) << 5) | h\n\n  return out.subarray(0, pb)\n}\n\nfunction encode (buf) {\n  if (typeof buf === 'string') buf = b4a.from(buf)\n\n  const max = buf.byteLength * 8\n\n  let s = ''\n\n  for (let p = 0; p < max; p += 5) {\n    const i = p >>> 3\n    const j = p & 7\n\n    if (j <= 3) {\n      s += ALPHABET[(buf[i] >>> (3 - j)) & 0b11111]\n      continue\n    }\n\n    const of = j - 3\n    const h = (buf[i] << of) & 0b11111\n    const l = (i >= buf.byteLength ? 0 : buf[i + 1]) >>> (8 - of)\n\n    s += ALPHABET[h | l]\n  }\n\n  return s\n}\n\nfunction quintet (s, i) {\n  if (i > s.length) {\n    return 0\n  }\n\n  const v = s.charCodeAt(i)\n\n  if (v < MIN || v > MAX) {\n    throw Error('Invalid character in base32 input: \"' + s[i] + '\" at position ' + i)\n  }\n\n  const bits = REVERSE[v - MIN]\n\n  if (bits === -1) {\n    throw Error('Invalid character in base32 input: \"' + s[i] + '\" at position ' + i)\n  }\n\n  return bits\n}\n{\n  \"name\": \"z32\",\n  \"version\": \"1.1.0\",\n  \"description\": \"Encode & decode z-base32\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"b4a\": \"^1.5.3\"\n  },\n  \"devDependencies\": {\n    \"base-x\": \"^4.0.0\",\n    \"base32\": \"0.0.7\",\n    \"brittle\": \"^3.1.3\",\n    \"nanobench\": \"^3.0.0\",\n    \"rfc4648\": \"^1.5.2\",\n    \"standard\": \"^17.0.0\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/z32.git\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\",\n    \"bench\": \"node benchmark.js\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/z32/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/z32\"\n}\n{\n  \"private\": true,\n  \"name\": \"autopass-mobile-example\",\n  \"description\": \"Example of using Autopass in an Expo application using https://github.com/holepunchto/react-native-bare.\",\n  \"main\": \"expo-router/entry\",\n  \"expo\": {\n    \"doctor\": {\n      \"reactNativeDirectoryCheck\": {\n        \"listUnknownPackages\": false\n      }\n    }\n  },\n  \"scripts\": {\n    \"start\": \"expo start\",\n    \"android\": \"expo run:android\",\n    \"ios\": \"expo run:ios\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/autopass-mobile-example.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bare-expo/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bare-expo#readme\",\n  \"dependencies\": {\n    \"@react-native-async-storage/async-storage\": \"1.23.1\",\n    \"@react-navigation/bottom-tabs\": \"^7.2.0\",\n    \"@react-navigation/native\": \"^7.0.14\",\n    \"@react-navigation/stack\": \"^7.2.3\",\n    \"autobase\": \"^7.2.1\",\n    \"autopass\": \"2.1.0\",\n    \"b4a\": \"^1.6.7\",\n    \"bare-crypto\": \"^1.4.1\",\n    \"bare-fs\": \"^4.0.1\",\n    \"bare-path\": \"^3.0.0\",\n    \"bare-process\": \"^4.1.2\",\n    \"bare-rpc\": \"^0.1.2\",\n    \"bip39\": \"^3.1.0\",\n    \"blind-pairing\": \"^2.3.1\",\n    \"corestore\": \"^7.0.7\",\n    \"crypto\": \"npm:bare-node-crypto\",\n    \"dayjs\": \"^1.11.13\",\n    \"ethers\": \"^6.13.5\",\n    \"events\": \"^3.3.0\",\n    \"expo\": \"^52.0.17\",\n    \"expo-build-properties\": \"^0.13.1\",\n    \"expo-camera\": \"~16.0.18\",\n    \"expo-clipboard\": \"^7.0.1\",\n    \"expo-constants\": \"^17.0.3\",\n    \"expo-dev-client\": \"~5.0.15\",\n    \"expo-document-picker\": \"~13.0.3\",\n    \"expo-file-system\": \"~18.0.12\",\n    \"expo-image-picker\": \"~16.0.6\",\n    \"expo-linking\": \"^7.0.5\",\n    \"expo-location\": \"^18.0.8\",\n    \"expo-media-library\": \"~17.0.6\",\n    \"expo-router\": \"^4.0.11\",\n    \"expo-sharing\": \"~13.0.1\",\n    \"expo-status-bar\": \"^2.0.1\",\n    \"expo-system-ui\": \"^4.0.5\",\n    \"expo-updates\": \"~0.27.4\",\n    \"hyperblobs\": \"^2.8.0\",\n    \"hypercore\": \"^11.1.0\",\n    \"hyperdb\": \"^4.9.4\",\n    \"hyperswarm\": \"^4.11.1\",\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-native\": \"0.76.7\",\n    \"react-native-bare-kit\": \"^0.6.0\",\n    \"react-native-gesture-handler\": \"~2.20.2\",\n    \"react-native-qrcode-svg\": \"^6.3.15\",\n    \"react-native-reanimated\": \"^3.17.1\",\n    \"react-native-safe-area-context\": \"^4.12.0\",\n    \"react-native-screens\": \"^4.10.0\",\n    \"react-native-svg\": \"15.8.0\",\n    \"ready-resource\": \"^1.1.2\",\n    \"z32\": \"^1.1.0\",\n    \"expo-image\": \"~2.0.7\",\n    \"expo-av\": \"~15.0.2\",\n    \"expo-screen-orientation\": \"~8.0.4\",\n    \"expo-video\": \"~2.0.6\"\n  },\n  \"devDependencies\": {\n    \"@types/b4a\": \"^1.6.4\",\n    \"@types/react\": \"^18.3.1\",\n    \"bare-pack\": \"^1.2.1\",\n    \"prettier\": \"^3.3.3\",\n    \"prettier-config-standard\": \"^7.0.0\",\n    \"typescript\": \"^5.3.3\"\n  }\n}\n"
